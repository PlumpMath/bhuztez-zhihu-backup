[
    {
        "question": {
            "title": "二叉树怎么判断同构？",
            "updated_time": 1486376596,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55484468",
            "created": 1486376526,
            "id": 55484468
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146294001",
        "thumbnail": "",
        "created_time": 1487049623,
        "excerpt": "这也要hash？按看见的顺序编个号不就完了，或者直接用地址也不是啥问题吧 get(L: handle, R: handle) -> handle 这个题只需要保证handle可以比较，相同的L R 一定得到相同的结果就可以了。",
        "updated_time": 1487050582,
        "id": 146294001,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这也要hash？按看见的顺序编个号不就完了，或者直接用地址也不是啥问题吧<br><br>get(L: handle, R: handle) -&gt; handle<br><br>这个题只需要保证handle可以比较，相同的L R 一定得到相同的结果就可以了。",
        "extras": ""
    },
    {
        "question": {
            "title": "可以将下载的开源软件修改后拿到市场上进行销售盈利吗？",
            "updated_time": 1487034038,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55786776",
            "created": 1487034038,
            "id": 55786776
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146273968",
        "thumbnail": "",
        "created_time": 1487042511,
        "excerpt": "红帽不就是干这个的？",
        "updated_time": 1487042512,
        "id": 146273968,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "红帽不就是干这个的？",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么 50~70 年生人的这帮父辈平时说话声音总是特别大？",
            "updated_time": 1487281852,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55731048",
            "created": 1486900013,
            "id": 55731048
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146268162",
        "thumbnail": "",
        "created_time": 1487040686,
        "excerpt": "我比他们声音还大，你邀请我来回答这个问题？",
        "updated_time": 1487040687,
        "id": 146268162,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我比他们声音还大，你邀请我来回答这个问题？",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价姜峯楠（Ted Chiang）在纽约客上的随笔《坏汉字》？",
            "updated_time": 1487430369,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/47205991",
            "created": 1465304761,
            "id": 47205991
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146202516",
        "thumbnail": "",
        "created_time": 1486996583,
        "excerpt": "我认为，不是方块字都是垃圾，英文字母不能适应竖排，在宽屏时代即将惨遭淘汰。",
        "updated_time": 1486996749,
        "id": 146202516,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为，不是方块字都是垃圾，英文字母不能适应竖排，在宽屏时代即将惨遭淘汰。",
        "extras": ""
    },
    {
        "question": {
            "title": "据说罗素悖论有解，如何解？",
            "updated_time": 1349329210,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/20511488",
            "created": 1349328997,
            "id": 20511488
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146198585",
        "thumbnail": "",
        "created_time": 1486995376,
        "excerpt": "并没有解决。个人感觉罗素搞的那个类型论只不过是用类型套类型强行拖延，你只套有限层确实是不会产生啥问题了，很多情况下这个表达能力是足够了的。可要是套了无限层，真的还没问题么？",
        "updated_time": 1486995377,
        "id": 146198585,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "并没有解决。个人感觉罗素搞的那个类型论只不过是用类型套类型强行拖延，你只套有限层确实是不会产生啥问题了，很多情况下这个表达能力是足够了的。可要是套了无限层，真的还没问题么？",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么学习数学，不按照逻辑顺序从集合论和抽象代数开始，而是先学10以内的自然数，然后学10以内的加法?",
            "updated_time": 1473075484,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/50336054",
            "created": 1472987825,
            "id": 50336054
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146169177",
        "thumbnail": "",
        "created_time": 1486985094,
        "excerpt": "讲数数毫无问题啊。 数数就不是抽象了？ 会从1数到100之后，接着就应该用形式语言来写出数数的规则。而不是强行集合论。 讲抽象你至少要举两个例子。你要讲集合论，必须至少再举一个例子才行。 罗素说过集合论是悖论的基础，类型论才是逻辑的基础 所以更应该学习类型论",
        "updated_time": 1486985094,
        "id": 146169177,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "讲数数毫无问题啊。<br><br>数数就不是抽象了？<br><br>会从1数到100之后，接着就应该用形式语言来写出数数的规则。而不是强行集合论。<br><br>讲抽象你至少要举两个例子。你要讲集合论，必须至少再举一个例子才行。<br><br>罗素说过集合论是悖论的基础，类型论才是逻辑的基础<br><br>所以更应该学习类型论",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价文章《一个北大既得利益者的自述》？",
            "updated_time": 1487603180,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55720641",
            "created": 1486879519,
            "id": 55720641
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146144230",
        "thumbnail": "",
        "created_time": 1486976569,
        "excerpt": "虽然能坦言自己也搞不明白凭什么自己可以获得这些，而别人却获得不了，但还是散发着强烈的成功人士的气息。要是他没能获得这些东西，估计是要高喊王侯将相宁有种乎了。 高考本身就是问题。为什么要有高考？为什么考不上大学这些东西就不给学了？如果问题如此严重，为什么不让大学变得不再重要，而是非要让所有人都能考上大学呢？社会的进步并没有让人人都当上皇帝，而是从此就没人想当皇帝了，就算想也知道会被笑话死，不敢说出…",
        "updated_time": 1486977165,
        "id": 146144230,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "虽然能坦言自己也搞不明白凭什么自己可以获得这些，而别人却获得不了，但还是散发着强烈的成功人士的气息。要是他没能获得这些东西，估计是要高喊王侯将相宁有种乎了。<br><br>高考本身就是问题。为什么要有高考？为什么考不上大学这些东西就不给学了？如果问题如此严重，为什么不让大学变得不再重要，而是非要让所有人都能考上大学呢？社会的进步并没有让人人都当上皇帝，而是从此就没人想当皇帝了，就算想也知道会被笑话死，不敢说出来。<br><br>最荒诞的现实就是，有很多东西，明明小时候就能学好了的，学习的成本还不见得比现在教的这点可怜的东西高，学校里非得不教，说是只有大学才学这个的，现在学这个是不务正业，高考也不考。然而，命题人却特别喜欢用考纲范围外的知识可以很容易解决的问题，变成考纲范围内完全不讲道理的凑数 ...<br><br>即便情况如此糟糕，在知乎上依旧有很多人在那里大肆鼓吹国内的教育。<br><br>我来给你们讲个笑话。比如知乎上有很多人疯狂的鼓吹什么计算机科班出身对计算机理论掌握的更好。某____大学学生却抱怨说在大学里根本就学不到什么理论，编译原理课糊弄一个凑合能跑的编译器就过去了，连Magic Set和Chomsky Normal Form之间有什么联系都不讲的，这也算理论？真正好笑的地方在于，某7岁小朋友学了一点这个知识后，说不想再玩这么幼稚的东西了，你在玩什么就带他一起玩，水平烂无所谓，这种一看就是哄小孩的玩的特别没劲。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何理解杨博老师对 DOM 操作复杂度的评论？",
            "updated_time": 1486175456,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55389009",
            "created": 1486175456,
            "id": 55389009
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146080669",
        "thumbnail": "",
        "created_time": 1486956876,
        "excerpt": "杨博又不是曾博 ... 曾博才喜欢这么钓鱼，明明讲的都是对的，非要故意搞个破绽出来，引你上钩。钓鱼技术不断进步，有目共睹。从小勃勃时期，单问题钓鱼，被叛逆者无视。到勃失败时期，发展出多问题钓鱼的新套路，叛逆者终于上钩了。 杨博这里是稀里糊涂的把3当成了变量来用，不符合大众的直觉。不过这好像和曾博也没啥区别了，当曾博说三本的时候，表达的也是O(n)的意思。 (逃",
        "updated_time": 1486957080,
        "id": 146080669,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "杨博又不是曾博 ...<br><br>曾博才喜欢这么钓鱼，明明讲的都是对的，非要故意搞个破绽出来，引你上钩。钓鱼技术不断进步，有目共睹。从小勃勃时期，单问题钓鱼，被叛逆者无视。到勃失败时期，发展出多问题钓鱼的新套路，叛逆者终于上钩了。<br><br>杨博这里是稀里糊涂的把3当成了变量来用，不符合大众的直觉。不过这好像和曾博也没啥区别了，当曾博说三本的时候，表达的也是O(n)的意思。<br><br>(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "如何理解Object-Oriented Meets Functional？",
            "updated_time": 1486695461,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55639632",
            "created": 1486695461,
            "id": 55639632
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146075432",
        "thumbnail": "",
        "created_time": 1486955262,
        "excerpt": "buzzword何苦为难buzzword",
        "updated_time": 1486955262,
        "id": 146075432,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "buzzword何苦为难buzzword",
        "extras": ""
    },
    {
        "question": {
            "title": "C++ 中的「移动」在内存或者寄存器中的操作是什么，为什么就比拷贝赋值性能高呢？",
            "updated_time": 1486991201,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55735384",
            "created": 1486907057,
            "id": 55735384
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146006523",
        "thumbnail": "",
        "created_time": 1486910864,
        "excerpt": "C++的move根本就是骗人的，毕竟是右值引用，而不是右值，是待在原地不动的，都还要调用destructor的，怎么能说是move？讲道理，Rust那才是真的move。 move并不能减少复制，C++引入move仅仅是为了能表达独占。没有move语义，只有copy语义，会导致很多没必要使用引用计数的地方被迫使用引用计数，或者某种变相的引用计数。没有move(和using)，在C++里，连allocator都不可能搞对。 我想起来，侯捷有一本著名的深入浅出MFC。第一章标…",
        "updated_time": 1486912738,
        "id": 146006523,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "C++的move根本就是骗人的，毕竟是右值引用，而不是右值，是待在原地不动的，都还要调用destructor的，怎么能说是move？讲道理，Rust那才是真的move。<br><br>move并不能减少复制，C++引入move仅仅是为了能表达独占。没有move语义，只有copy语义，会导致很多没必要使用引用计数的地方被迫使用引用计数，或者某种变相的引用计数。没有move(和using)，在C++里，连allocator都不可能搞对。<br><br>我想起来，侯捷有一本著名的深入浅出MFC。第一章标题好像是勿在浮沙筑高台？然而C++和MFC，哪个不是在流沙上建起来摩天大楼？",
        "extras": ""
    },
    {
        "question": {
            "title": "对于只会JavaScript的前端程序员，学习哪一门其它语言能够最大程度的扩展自己的技术视野？",
            "updated_time": 1486810443,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55693126",
            "created": 1486805971,
            "id": 55693126
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/146005692",
        "thumbnail": "",
        "created_time": 1486910634,
        "excerpt": "J语言啊，比JS还少一S。",
        "updated_time": 1486912794,
        "id": 146005692,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "J语言啊，比JS还少一S。",
        "extras": ""
    },
    {
        "question": {
            "title": "下图中，第4,5条逻辑公理什么意思？",
            "updated_time": 1486820773,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55700829",
            "created": 1486820773,
            "id": 55700829
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/145896989",
        "thumbnail": "",
        "created_time": 1486869059,
        "excerpt": "这样的写法本身就是有问题的 首先什么是 free variable x = 1\n\ndef f():\n return x\n 这里 x 在 f 里就是free variable了。也就是说，当你说free variable的时候，通常情况，你已经默认是有scope的。 这也就是问题所在了， \\forall x 里的 x 只在后面那个expression里有效，你对于整个命题写 where x is not free in \\phi，这个 x 并不能指向 \\forall x 里的 x 。毕竟你在scope外面并不能看到scope里面的变量 这就是为什么metamat…",
        "updated_time": 1486869060,
        "id": 145896989,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这样的写法本身就是有问题的<br><br>首先什么是 free variable<br><br><div class=\"highlight\"><pre><code class=\"language-text\">x = 1\n\ndef f():\n    return x\n</code></pre></div><br>这里 x 在 f 里就是free variable了。也就是说，当你说free variable的时候，通常情况，你已经默认是有scope的。<br><br>这也就是问题所在了， \\forall x 里的 x 只在后面那个expression里有效，你对于整个命题写 where x is not free in \\phi，这个 x 并不能指向 \\forall x 里的 x 。毕竟你在scope外面并不能看到scope里面的变量<br><br>这就是为什么metamath大法好了。metamath没有scope，也不搞什么free variable，于是就不会有这个问题了，这样才是最好的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何阅读Principia Mathematica?",
            "updated_time": 1486637906,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55616885",
            "created": 1486637592,
            "id": 55616885
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/145594036",
        "thumbnail": "",
        "created_time": 1486715014,
        "excerpt": "先弄个简易的proof checker，看到哪里，就顺便把证明过程检查一下。Principia Mathematica随便怎么读都可以啊。毕竟证明过程中每一步用到了其他地方的结论都把编号写出来了，不知道是怎么来的就翻到那里去看就是了。 讲道理，现在流行的教科书到处都是易证，不难得出，留给读者作为习题，甚至有些书上列出来的证明根本经不起proof checker的检验，你都看的下去。Principia Mathematica你还要问怎么读？",
        "updated_time": 1486715426,
        "id": 145594036,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先弄个简易的proof checker，看到哪里，就顺便把证明过程检查一下。Principia Mathematica随便怎么读都可以啊。毕竟证明过程中每一步用到了其他地方的结论都把编号写出来了，不知道是怎么来的就翻到那里去看就是了。<br><br>讲道理，现在流行的教科书到处都是易证，不难得出，留给读者作为习题，甚至有些书上列出来的证明根本经不起proof checker的检验，你都看的下去。Principia Mathematica你还要问怎么读？",
        "extras": ""
    },
    {
        "question": {
            "title": "Python有类似于C语言的格式化输入scanf吗？",
            "updated_time": 1486641875,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/49840816",
            "created": 1471739095,
            "id": 49840816
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/145459461",
        "thumbnail": "",
        "created_time": 1486651220,
        "excerpt": "你这么纠结不如用ctypes调用C函数吧 https://docs.python.org/2/library/ctypes.html ",
        "updated_time": 1486651221,
        "id": 145459461,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这么纠结不如用ctypes调用C函数吧<br><br><a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/2/library/ctypes.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.python.org/2/libra</span><span class=\"invisible\">ry/ctypes.html</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价中国诗词大会女选手把“将进酒”读成jiang进酒？",
            "updated_time": 1486126610,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55371271",
            "created": 1486124396,
            "id": 55371271
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/145131094",
        "thumbnail": "",
        "created_time": 1486525362,
        "excerpt": "我认为，汉字就没必要规定读音，不管你怎么读，只要写的是这个字就可以了。我们要坚持文言分离原则。",
        "updated_time": 1486525829,
        "id": 145131094,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为，汉字就没必要规定读音，不管你怎么读，只要写的是这个字就可以了。我们要坚持文言分离原则。",
        "extras": ""
    },
    {
        "question": {
            "title": "是不是 JavaScript 函数式编程的 Pointfree Style 有时会丧失程序可读性？",
            "updated_time": 1486524635,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55490625",
            "created": 1486386871,
            "id": 55490625
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/145033672",
        "thumbnail": "",
        "created_time": 1486473887,
        "excerpt": "变量名尽量少用就可以了。重点是完全不要用括号，而不是完全不用变量名。毕竟，有了括号还怎么朗读，naive。你不看看滥用括号的pointfree长什么样子 (.) . (.) 即便如此，你这个getRemainPages就写的很别扭，此处应该写一个向上取整的函数 比如J语言里大概写成 >. (total % ipp) pagination 就好了 这个离完全不用括号还有点距离。要想完全不用括号，应该在parsing过程中进行type inference进行消歧义",
        "updated_time": 1486478023,
        "id": 145033672,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "变量名尽量少用就可以了。重点是完全不要用括号，而不是完全不用变量名。毕竟，有了括号还怎么朗读，naive。你不看看滥用括号的pointfree长什么样子 (.) . (.)<br><br>即便如此，你这个getRemainPages就写的很别扭，此处应该写一个向上取整的函数<br><br>比如J语言里大概写成 &gt;. (total % ipp) pagination 就好了<br><br>这个离完全不用括号还有点距离。要想完全不用括号，应该在parsing过程中进行type inference进行消歧义",
        "extras": ""
    },
    {
        "question": {
            "title": "如果广大勃学家/勃丝山寨一个quora，那么这个网站会叫什么名字呢？",
            "updated_time": 1486468582,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55502849",
            "created": 1486426522,
            "id": 55502849
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144918631",
        "thumbnail": "",
        "created_time": 1486436821,
        "excerpt": "网站并不能随意fork啊，你这么搞不就又变成一个曾博呼风唤雨的地方了 我现在的想法是，在真正能用的F2F adhoc overlay搞出来之前。我们先搞一个简陋的工具，用来讨论F2F该怎么搞。就弄一个基于BT的邮件同步工具好了。 每封邮件的message-id，强制设置为SHA-256(邮件内容)，有一个HAMT那样的hash table，记录message-id -> in-reply-to 。从tracker里获取peer信息后，peer之间同步这个hash table，发现新邮件，并从peer里获取邮件…",
        "updated_time": 1486439447,
        "id": 144918631,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "网站并不能随意fork啊，你这么搞不就又变成一个曾博呼风唤雨的地方了<br><br>我现在的想法是，在真正能用的F2F adhoc overlay搞出来之前。我们先搞一个简陋的工具，用来讨论F2F该怎么搞。就弄一个基于BT的邮件同步工具好了。<br><br>每封邮件的message-id，强制设置为SHA-256(邮件内容)，有一个HAMT那样的hash table，记录message-id -&gt; in-reply-to 。从tracker里获取peer信息后，peer之间同步这个hash table，发现新邮件，并从peer里获取邮件内容。<br><br>一开始我们就搞一个IMAP/SMTP gateway用来让标准邮件客户端来读取里面的内容，发新邮件。而peer之间同步就用标准的TLS加密，省得被运营商篡改。一开始只有TCP和HTTP(s) tracker，后面再慢慢抄utp/mainline DHT什么的<br><br>因为是TLS加密，所以得搞个X.509的CA，只有拿到了证书才能连进来，用CRL来禁言，避免恶意人士进来捣乱。不服可以自己开一个，反正只要开一个tracker就好了，这个很容易维护的。",
        "extras": ""
    },
    {
        "question": {
            "title": "很多编程语言都要用到花括号，分号等来分割代码，是不是有利？",
            "updated_time": 1486210361,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55410429",
            "created": 1486210361,
            "id": 55410429
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144712121",
        "thumbnail": "",
        "created_time": 1486350903,
        "excerpt": "当然是不利的。有了这些东西，代码就没法朗读了。没法朗读还怎么谈笑风生。 根本原因是因为他们不懂得用函数把函数组合成函数。最近在开发的程序语言，就没有任何括号以及其他各种标点符号，连换行缩进也不需要。大概长这样 今有数甲又有整数乙又有整数丙问甲如乙而丙得几何曰甲以乙除之以丙乘之\n 不知道比现在这些垃圾语言高到哪里去了",
        "updated_time": 1486353144,
        "id": 144712121,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是不利的。有了这些东西，代码就没法朗读了。没法朗读还怎么谈笑风生。<br><br>根本原因是因为他们不懂得用函数把函数组合成函数。最近在开发的程序语言，就没有任何括号以及其他各种标点符号，连换行缩进也不需要。大概长这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">今有数甲又有整数乙又有整数丙问甲如乙而丙得几何曰甲以乙除之以丙乘之\n</code></pre></div><br>不知道比现在这些垃圾语言高到哪里去了",
        "extras": ""
    },
    {
        "question": {
            "title": "失败人士的基因也能延续是一件好事吗？",
            "updated_time": 1486360257,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/55422697",
            "created": 1486231875,
            "id": 55422697
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144645954",
        "thumbnail": "",
        "created_time": 1486308013,
        "excerpt": "因为无法成功，出于无奈而选择自杀的才不是什么失败人士，是臭不要脸的伪失败人士",
        "updated_time": 1486308014,
        "id": 144645954,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为无法成功，出于无奈而选择自杀的才不是什么失败人士，是臭不要脸的伪失败人士",
        "extras": ""
    },
    {
        "question": {
            "title": "[PLT]和[数理逻辑、类型论、抽象代数及范畴论]的关系是什么？",
            "updated_time": 1483625517,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/37050853",
            "created": 1446273861,
            "id": 37050853
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144590942",
        "thumbnail": "",
        "created_time": 1486289361,
        "excerpt": "从来就没有什么PLT的说法，是王垠以一己之力发明了PLT",
        "updated_time": 1486289383,
        "id": 144590942,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "从来就没有什么PLT的说法，是王垠以一己之力发明了PLT",
        "extras": ""
    },
    {
        "question": {
            "title": "Minecraft正式版的逐渐更新，是否预示着这个游戏在逐渐没落？",
            "updated_time": 1479181877,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52633529",
            "created": 1479181877,
            "id": 52633529
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134441132",
        "thumbnail": "",
        "created_time": 1480926020,
        "excerpt": "Minecraft还没崛起就说衰落是不是太早了一点。Mojang完全被玩家架空的那一天，才是Minecraft崛起之日。目前使用第三方服务端软件的数量正在超过使用官方服务器的。等第三方服务端软件占据压倒性优势时，Mojang选择让Minecraft网络协议成为一个开放的标准，那么，很快第三方客户端软件，就会成为主流，Mojang真正完全控制的就只剩下一个登录了。Minecraft崛起之日是要从这一天算起的",
        "updated_time": 1480926020,
        "id": 134441132,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Minecraft还没崛起就说衰落是不是太早了一点。Mojang完全被玩家架空的那一天，才是Minecraft崛起之日。目前使用第三方服务端软件的数量正在超过使用官方服务器的。等第三方服务端软件占据压倒性优势时，Mojang选择让Minecraft网络协议成为一个开放的标准，那么，很快第三方客户端软件，就会成为主流，Mojang真正完全控制的就只剩下一个登录了。Minecraft崛起之日是要从这一天算起的",
        "extras": ""
    },
    {
        "question": {
            "title": "能否通过逻辑编程消灭程序BUG？",
            "updated_time": 1374486056,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21366193",
            "created": 1374411654,
            "id": 21366193
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134380222",
        "thumbnail": "",
        "created_time": 1480904602,
        "excerpt": "你怎么证明Coq，Isabelle之类的工具是对的？ Programming is the art of adding bugs to an empty text file. —— Louis Srygley",
        "updated_time": 1480908550,
        "id": 134380222,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你怎么证明Coq，Isabelle之类的工具是对的？<br><br><blockquote>Programming is the art of adding bugs to an empty text file.<br>—— Louis Srygley</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "曾老师如何看待除了垠神之外其他三大编程天王？",
            "updated_time": 1480470531,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53147244",
            "created": 1480470531,
            "id": 53147244
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134319162",
        "thumbnail": "",
        "created_time": 1480859334,
        "excerpt": "明明是中文圆括号社区四大天王",
        "updated_time": 1480860372,
        "id": 134319162,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "明明是中文圆括号社区四大天王",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样评价 LambdaConf 提出的“函数式编程技能表”？",
            "updated_time": 1480688703,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53237329",
            "created": 1480688703,
            "id": 53237329
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134098907",
        "thumbnail": "",
        "created_time": 1480732401,
        "excerpt": "lambda和functional是对立的 We owe a great debt to Kenneth Iverson for showing us that there are programs that are neither word-at-a- time nor dependent on lambda expressions, and for introducing us to the use of new functional forms. —— Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs",
        "updated_time": 1480732401,
        "id": 134098907,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "lambda和functional是对立的<br><br><blockquote>We owe a great debt to Kenneth Iverson for showing<br>us that there are programs that are neither word-at-a-<br>time <b>nor</b> dependent on <b>lambda</b> expressions, and for<br>introducing us to the use of new <b>functional</b> forms.<br>—— Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "bhuztez 是如何学习的? 为什么学识如此渊博?",
            "updated_time": 1480411201,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53127680",
            "created": 1480411201,
            "id": 53127680
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133642134",
        "thumbnail": "",
        "created_time": 1480475145,
        "excerpt": "你这么黑真的好么。我从来不学习，啥都不知道，找不到工作。 A公司电话面试，要求回答epoll event有哪些类型，分别是什么意思。答不出来，卒。 B公司电话面试，声称他们是用Go语言的，要求精通这个多线程，问写多线程的程序有啥要注意的地方，答不出来，卒。 C公司电话面试，上来直接问会不会C++，我说你这个职位介绍了不是只提到要会Python么，他说连这要求C++你都看不出来，还来投什么简历，直接把电话挂了。 D公司电话面试，…",
        "updated_time": 1480478036,
        "id": 133642134,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这么黑真的好么。我从来不学习，啥都不知道，找不到工作。<br><br>A公司电话面试，要求回答epoll event有哪些类型，分别是什么意思。答不出来，卒。<br><br>B公司电话面试，声称他们是用Go语言的，要求精通这个多线程，问写多线程的程序有啥要注意的地方，答不出来，卒。<br><br>C公司电话面试，上来直接问会不会C++，我说你这个职位介绍了不是只提到要会Python么，他说连这要求C++你都看不出来，还来投什么简历，直接把电话挂了。<br><br>D公司电话面试，直接问，并查集的时间复杂度，答不出来，卒。<br><br>...<br><br>Z公司，问有女朋友吗？没有。那打算找女朋友吗？不打算。然后他告诉我，他们公司不招单身狗。",
        "extras": ""
    },
    {
        "question": {
            "title": "王垠到底对 bhuztez 做了什么？",
            "updated_time": 1480344550,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53023914",
            "created": 1480133876,
            "id": 53023914
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133411782",
        "thumbnail": "",
        "created_time": 1480336232,
        "excerpt": "我就眼红他是网红可以颠倒黑白不行啊？ 一群垠粉整天吹嘘什么，pysonar是他自创的PLT界的重大进步，是第一个实用动态类型语言的type inference工具。要你评价一个，回头还要邀请你回答如何学习一个。这还不让黑了。 pysonar肯定不是第一个。pysonar开工前，Dialyzer/Typer论文就已经有了，也没声称他们是第一个，所以肯定还有更早的。而且后来一位小朋友向我指出pysonar根本就不能算inference工具。毕竟inference指的是，从函数…",
        "updated_time": 1480336254,
        "id": 133411782,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我就眼红他是网红可以颠倒黑白不行啊？<br><br>一群垠粉整天吹嘘什么，pysonar是他自创的PLT界的重大进步，是第一个实用动态类型语言的type inference工具。要你评价一个，回头还要邀请你回答如何学习一个。这还不让黑了。<br><br>pysonar肯定不是第一个。pysonar开工前，Dialyzer/Typer论文就已经有了，也没声称他们是第一个，所以肯定还有更早的。而且后来一位小朋友向我指出pysonar根本就不能算inference工具。毕竟inference指的是，从函数定义直接给出函数类型。pysonar可是往往需要知道函数是怎么被调用的才能得出类型。这也能算inference？<br><br>再说了，组合子正教和括号邪教势不两立，见一次黑一次，这很正常啊",
        "extras": ""
    },
    {
        "question": {
            "title": "桌面程序的界面部分用HTML+CSS+JavaScript写是否可行？",
            "updated_time": 1479605209,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52751876",
            "created": 1479457845,
            "id": 52751876
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133313972",
        "thumbnail": "",
        "created_time": 1480296981,
        "excerpt": "你写个编辑器就知道了，bug根本就修不完 ...",
        "updated_time": 1480296981,
        "id": 133313972,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你写个编辑器就知道了，bug根本就修不完 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "在 C++11 中，如何提取一个较大 Parameter pack 中的某一个值？",
            "updated_time": 1480169378,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53040205",
            "created": 1480169302,
            "id": 53040205
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133147290",
        "thumbnail": "",
        "created_time": 1480171450,
        "excerpt": "#include <stdio.h>\n#include <stddef.h>\n\ntemplate <typename T, T... V>\nstruct Array {\n static constexpr T value[] = { V... };\n\n static constexpr T get(size_t index) {\n return value[index];\n }\n};\n\nint main() {\n constexpr int a = Array<int, 1,2,3,4,5>::get(4);\n printf(\"%d\\n\", a);\n}\n\n 我认为你这个情况，可能是直接用 ::std::array 更好一些 P.S. 轮子哥根本就不会C++，还在那里强答 强行递归也不是不行，也是…",
        "updated_time": 1480172368,
        "id": 133147290,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include &lt;stdio.h&gt;</span>\n<span class=\"cp\">#include &lt;stddef.h&gt;</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">...</span> <span class=\"n\">V</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Array</span> <span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">T</span> <span class=\"n\">value</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">V</span><span class=\"p\">...</span> <span class=\"p\">};</span>\n\n    <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">T</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"kt\">size_t</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"o\">&gt;::</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>我认为你这个情况，可能是直接用 ::std::array 更好一些<br><br>P.S. <b>轮子哥根本就不会C++</b>，还在那里强答<br><br>强行递归也不是不行，也是可以丧心病狂的使用trampoline技巧的。之前试过，就gcc撑的住，其他要不很慢，要不内存炸了，要不根本就不行。不知道现在怎么样了。",
        "extras": ""
    },
    {
        "question": {
            "title": "一道bat面试题：快速替换10亿条标题中的5万个敏感词，有哪些解决思路？",
            "updated_time": 1480167757,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53009346",
            "created": 1480076783,
            "id": 53009346
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133099368",
        "thumbnail": "",
        "created_time": 1480146892,
        "excerpt": "这个看一下grep用的是啥不就得了 http://git.savannah.gnu.org/cgit/grep.git/tree/src/kwset.c ",
        "updated_time": 1480146998,
        "id": 133099368,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个看一下grep用的是啥不就得了<br><br><a href=\"https://link.zhihu.com/?target=http%3A//git.savannah.gnu.org/cgit/grep.git/tree/src/kwset.c\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">git.savannah.gnu.org/cg</span><span class=\"invisible\">it/grep.git/tree/src/kwset.c</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "失败人士找不到女朋友是谁的错？",
            "updated_time": 1480121692,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53019219",
            "created": 1480121692,
            "id": 53019219
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133077412",
        "thumbnail": "",
        "created_time": 1480135734,
        "excerpt": "曾老师你怎么可以去找女朋友。作为单性繁殖技术的支持者，你应该去学生物。更何况，21世纪是生物的世纪。只要搞定了单性繁殖技术，成功男士也同样找不到女朋友的，这样最公平。",
        "updated_time": 1480147168,
        "id": 133077412,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师你怎么可以去找女朋友。作为单性繁殖技术的支持者，你应该去学生物。更何况，21世纪是生物的世纪。只要搞定了单性繁殖技术，成功男士也同样找不到女朋友的，这样最公平。",
        "extras": ""
    },
    {
        "question": {
            "title": "童哲为什么不在知乎办 Live？",
            "updated_time": 1481426955,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53023842",
            "created": 1480133640,
            "id": 53023842
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/133077238",
        "thumbnail": "",
        "created_time": 1480135614,
        "excerpt": "live怎么写数学公式？急，在线等",
        "updated_time": 1480135614,
        "id": 133077238,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "live怎么写数学公式？急，在线等",
        "extras": ""
    },
    {
        "question": {
            "title": "TCP/IP这门技术有什么用？",
            "updated_time": 1480123233,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/53001502",
            "created": 1480061259,
            "id": 53001502
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132996784",
        "thumbnail": "",
        "created_time": 1480072815,
        "excerpt": "我认为题主说的对 CCIE就是坑钱的。就思科家特别奇葩，其他交换机厂商有的你不买他的交换机，他家的模拟器都让你下载的。大部分内容自己在模拟器上试试就可以掌握的。特别是在Linux下，现在利用network namespace，直接把模拟器的unix socket和namespace里的tap设备自己做个对接就好了，想往里发啥包都可以直接利用各种现成的工具。 TCP/IP这门课假如不要求自己实现一遍协议栈，那当然是没有意义的。 Linux是没有未来的。这没啥…",
        "updated_time": 1480072827,
        "id": 132996784,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为题主说的对<br><br>CCIE就是坑钱的。就思科家特别奇葩，其他交换机厂商有的你不买他的交换机，他家的模拟器都让你下载的。大部分内容自己在模拟器上试试就可以掌握的。特别是在Linux下，现在利用network namespace，直接把模拟器的unix socket和namespace里的tap设备自己做个对接就好了，想往里发啥包都可以直接利用各种现成的工具。<br><br>TCP/IP这门课假如不要求自己实现一遍协议栈，那当然是没有意义的。<br><br>Linux是没有未来的。这没啥好争论的。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么书上说同步非阻塞io在对磁盘io上不起作用？",
            "updated_time": 1480042662,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52989189",
            "created": 1480042617,
            "id": 52989189
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132996092",
        "thumbnail": "",
        "created_time": 1480072493,
        "excerpt": "因为POSIX标准就是这么规定的，普通文件的file descriptor就算你设置了nonblock， read/write也必须block。 Rob Pike说过，假如你连这都不知道，就没资格使用Go语言。",
        "updated_time": 1480072938,
        "id": 132996092,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为POSIX标准就是这么规定的，普通文件的file descriptor就算你设置了nonblock， read/write也必须block。<br><br>Rob Pike说过，假如你连这都不知道，就没资格使用Go语言。",
        "extras": ""
    },
    {
        "question": {
            "title": "现在做web开发，用Python好呢还是Java好呢？",
            "updated_time": 1479896965,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52929893",
            "created": 1479896505,
            "id": 52929893
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132719255",
        "thumbnail": "",
        "created_time": 1479913920,
        "excerpt": "Java吧",
        "updated_time": 1479913920,
        "id": 132719255,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Java吧",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么知乎部分UI更新了？",
            "updated_time": 1479808084,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52866784",
            "created": 1479745538,
            "id": 52866784
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132640111",
        "thumbnail": "",
        "created_time": 1479882366,
        "excerpt": "知乎小伙伴\n\n： 如果你喜欢我们的全新设计，并希望成为体验新版主页的测试用户，你可以回复该私信并注明：接受测试。我们会将你的个人主页升级至新的版本，其他用户在访问你的个人主页时也将能看到新的设计。我们非常期待听到你在测试过程中的反馈，欢迎回复本条私信，告知我们你的使用体验，与我们共同提升和改善个人页面设计。\n \n 再次感谢你的支持：） \n 注：接受测试后将无法恢复到旧版本。 这是什么鬼设定。",
        "updated_time": 1479882382,
        "id": 132640111,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>知乎小伙伴\n\n：<br><br>如果你喜欢我们的全新设计，并希望成为体验新版主页的测试用户，你可以回复该私信并注明：接受测试。我们会将你的个人主页升级至新的版本，<b>其他用户在访问你的个人主页时也将能看到新的设计</b>。我们非常期待听到你在测试过程中的反馈，欢迎回复本条私信，告知我们你的使用体验，与我们共同提升和改善个人页面设计。\n \n<br><br>再次感谢你的支持：） \n<br><br>注：<b>接受测试后将无法恢复到旧版本</b>。</blockquote><br>这是什么鬼设定。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 MXNet 被 Amazon AWS 选为官方深度学习平台？",
            "updated_time": 1479877551,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52906838",
            "created": 1479851915,
            "id": 52906838
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132595631",
        "thumbnail": "",
        "created_time": 1479865535,
        "excerpt": "之前还有谁在那里说什么mxnet没啥推广。我看在知乎上，宣传工作做的最多的就是mxnet了。 不过，深度学习工具主要还是要看Nvidia支不支持。 mxnet这样的框架是没有什么意义的。我们真正需要的是，数学公式写好，你编译一下，直接生成好CPU/GPU/FPGA代码，我直接在C语言里调用一下就能用了。我们根本就不想知道你支持哪些layer，分别是干什么的。",
        "updated_time": 1479866178,
        "id": 132595631,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "之前还有谁在那里说什么mxnet没啥推广。我看在知乎上，宣传工作做的最多的就是mxnet了。<br><br>不过，深度学习工具主要还是要看Nvidia支不支持。<br><br>mxnet这样的框架是没有什么意义的。我们真正需要的是，数学公式写好，你编译一下，直接生成好CPU/GPU/FPGA代码，我直接在C语言里调用一下就能用了。我们根本就不想知道你支持哪些layer，分别是干什么的。",
        "extras": ""
    },
    {
        "question": {
            "title": "重复李笑来的宣传道路可以让你和他一样有名吗？",
            "updated_time": 1479823521,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52897129",
            "created": 1479818780,
            "id": 52897129
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132553137",
        "thumbnail": "",
        "created_time": 1479824553,
        "excerpt": "看了你这个问题，我很矛盾啊，虽然我是失败人士，但是中国有一句古话 ___________ ，我还是知道的。",
        "updated_time": 1479824666,
        "id": 132553137,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看了你这个问题，我很矛盾啊，虽然我是失败人士，但是中国有一句古话 ___________ ，我还是知道的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如果 C# 当年设计成一个彻底编译到机器码的但有运行时的 AOT 语言，能不能真的拿来代替 C++？",
            "updated_time": 1479604374,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52796295",
            "created": 1479570658,
            "id": 52796295
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/132169131",
        "thumbnail": "",
        "created_time": 1479630146,
        "excerpt": "单线程大循环用啥语言都会卡",
        "updated_time": 1479630146,
        "id": 132169131,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "单线程大循环用啥语言都会卡",
        "extras": ""
    },
    {
        "question": {
            "title": "本人现在是物联网专业学生，想要掌握一门语言，是先学python还是汇编？",
            "updated_time": 1479394391,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52728694",
            "created": 1479394391,
            "id": 52728694
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/131816365",
        "thumbnail": "",
        "created_time": 1479434529,
        "excerpt": "学Erlang+VHDL才是最好的",
        "updated_time": 1479434529,
        "id": 131816365,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "学Erlang+VHDL才是最好的",
        "extras": ""
    },
    {
        "question": {
            "title": "ScyllaDB 的技术思路能否应用到分布式关系数据库领域，主要难度会有哪些？",
            "updated_time": 1479364009,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/52711317",
            "created": 1479363752,
            "id": 52711317
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/131743609",
        "thumbnail": "",
        "created_time": 1479382264,
        "excerpt": "VoltDB比ScyllaDB先出现吧",
        "updated_time": 1479382264,
        "id": 131743609,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "VoltDB比ScyllaDB先出现吧",
        "extras": ""
    },
    {
        "question": {
            "title": "国家“863计划”重点项目研究成果“网络空间拟态防御理论及核心方法”，是什么原理创新？",
            "updated_time": 1479045341,
            "question_type": "normal",
            "type": "question",
            "created": 1479015133,
            "url": "https://www.zhihu.com/api/v4/questions/52568897",
            "id": 52568897
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/131344345",
        "thumbnail": "",
        "created_time": 1479176352,
        "excerpt": "security through obscurity",
        "updated_time": 1479176413,
        "id": 131344345,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "security through obscurity",
        "extras": ""
    },
    {
        "question": {
            "title": "既然童话里都是骗人的，那么我们小时候为什么还要看童话书呢？",
            "updated_time": 1478949534,
            "question_type": "normal",
            "type": "question",
            "created": 1478949534,
            "url": "https://www.zhihu.com/api/v4/questions/52548463",
            "id": 52548463
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/131077741",
        "thumbnail": "",
        "created_time": 1479013971,
        "excerpt": "这个锅还是让翻译去背吧。fairy tale不该翻译成童话，更应该翻译成鬼话。 比如，聊斋志异毫无疑问是属于fairy tale的，但是没有人会认为这属于童话。",
        "updated_time": 1479013980,
        "id": 131077741,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个锅还是让翻译去背吧。fairy tale不该翻译成童话，更应该翻译成鬼话。<br><br>比如，聊斋志异毫无疑问是属于fairy tale的，但是没有人会认为这属于童话。",
        "extras": ""
    },
    {
        "question": {
            "title": "曾老师粉丝多是因为浙大的光环吗?",
            "updated_time": 1478505845,
            "question_type": "normal",
            "type": "question",
            "created": 1478505845,
            "url": "https://www.zhihu.com/api/v4/questions/52376472",
            "id": 52376472
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130882874",
        "thumbnail": "",
        "created_time": 1478870865,
        "excerpt": "参考 https://zhuanlan.zhihu.com/p/23542936 我看主要是因为羡慕或者嫉妒曾老师有亿万富豪帮他介绍相亲对象",
        "updated_time": 1478870865,
        "id": 130882874,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "参考<a href=\"https://zhuanlan.zhihu.com/p/23542936\" class=\"internal\"> https://zhuanlan.zhihu.com/p/23542936</a><br><br>我看主要是因为羡慕或者嫉妒曾老师有亿万富豪帮他介绍相亲对象",
        "extras": ""
    },
    {
        "question": {
            "title": "这是哪一本神书，其中的比喻讲的是数学中的哪个领域？",
            "updated_time": 1478860372,
            "question_type": "normal",
            "type": "question",
            "created": 1478860372,
            "url": "https://www.zhihu.com/api/v4/questions/52519924",
            "id": 52519924
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130867083",
        "thumbnail": "",
        "created_time": 1478861037,
        "excerpt": "既然你誠心誠意的發問了，我們就大發慈悲的告訴你 实分析中的反例 毒舌婊你这垃圾搜索水平还黑什么曾博啊",
        "updated_time": 1478861125,
        "id": 130867083,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "既然你誠心誠意的發問了，我們就大發慈悲的告訴你<br><br>实分析中的反例<br><br>毒舌婊你这垃圾搜索水平还黑什么曾博啊",
        "extras": ""
    },
    {
        "question": {
            "title": "如何得体地把“勃学”翻译成英文？",
            "updated_time": 1484565996,
            "question_type": "normal",
            "type": "question",
            "created": 1478563395,
            "url": "https://www.zhihu.com/api/v4/questions/52395988",
            "id": 52395988
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130859027",
        "thumbnail": "",
        "created_time": 1478856712,
        "excerpt": "Haskell",
        "updated_time": 1478856712,
        "id": 130859027,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Haskell",
        "extras": ""
    },
    {
        "question": {
            "title": "老外觉得在中国当码农不怎样，大家的观点呢？",
            "updated_time": 1467523542,
            "question_type": "normal",
            "type": "question",
            "created": 1467514096,
            "url": "https://www.zhihu.com/api/v4/questions/48097918",
            "id": 48097918
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130681032",
        "thumbnail": "",
        "created_time": 1478750770,
        "excerpt": "Code Monkey不服",
        "updated_time": 1478750770,
        "id": 130681032,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Code Monkey不服",
        "extras": ""
    },
    {
        "question": {
            "title": "样本方差公式是如何推导出来的？",
            "updated_time": 1478573237,
            "question_type": "normal",
            "type": "question",
            "created": 1478489361,
            "url": "https://www.zhihu.com/api/v4/questions/52367271",
            "id": 52367271
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130230536",
        "thumbnail": "",
        "created_time": 1478502864,
        "excerpt": "评论里不能用数学公式，所以把评论写在这个回答里 @王赟 Maigo 贴的推导过程是有问题的。很多书上也差不多是这么写的。 我说的是 \\mu_{ML} 无偏那一步有问题，不是说你这个不能证明无偏。我的观点是，你是在证明无偏，但是这个证明有问题。这个问题和你用什么估计，还有无偏本身是无关的。可以这么说，是这里你求期望时，已经偷偷把X的定义替换掉了。 不管你这个 \\mu_{ML} 是怎么得到的。你肯定要保证，我给你 n 个样本 X 你就能…",
        "updated_time": 1478507087,
        "id": 130230536,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "评论里不能用数学公式，所以把评论写在这个回答里<br><br><a data-title=\"@王赟 Maigo\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/0c708d923f8fb00142e1f25cdd4951d9\" data-hash=\"0c708d923f8fb00142e1f25cdd4951d9\" data-hovercard=\"p$b$0c708d923f8fb00142e1f25cdd4951d9\">@王赟 Maigo</a> 贴的推导过程是有问题的。很多书上也差不多是这么写的。<br><br>我说的是 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu_%7BML%7D\" alt=\"\\mu_{ML}\" eeimg=\"1\"> 无偏那一步有问题，不是说你这个不能证明无偏。我的观点是，你是在证明无偏，但是这个证明有问题。这个问题和你用什么估计，还有无偏本身是无关的。可以这么说，是这里你求期望时，已经偷偷把X的定义替换掉了。<br><br>不管你这个 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu_%7BML%7D\" alt=\"\\mu_{ML}\" eeimg=\"1\"> 是怎么得到的。你肯定要保证，我给你 n 个样本 X 你就能给我算出一个 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu_%7BML%7D\" alt=\"\\mu_{ML}\" eeimg=\"1\">出来。也就是我们可以写成，<img src=\"https://www.zhihu.com/equation?tex=%5Cmu_%7BML%7D+%3D+f%28X%29\" alt=\"\\mu_{ML} = f(X)\" eeimg=\"1\">，f是一个确定的函数。因为X是已知的，<img src=\"https://www.zhihu.com/equation?tex=f%28X%29\" alt=\"f(X)\" eeimg=\"1\">就是一个确定的数。你对 <img src=\"https://www.zhihu.com/equation?tex=f%28X%29\" alt=\"f(X)\" eeimg=\"1\"> 求期望是没有任何意义的。因为 <img src=\"https://www.zhihu.com/equation?tex=f%28X%29\" alt=\"f(X)\" eeimg=\"1\">本身是定值，里面没有一个随机变量。反过来，假设已知 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu\" alt=\"\\mu\" eeimg=\"1\">，你算出 <img src=\"https://www.zhihu.com/equation?tex=E%5Bf%28X%29%5D\" alt=\"E[f(X)]\" eeimg=\"1\"> ，但是你随机选出 n 个样本 Y 来，并不意味着<img src=\"https://www.zhihu.com/equation?tex=f%28Y%29+%3D+E%5Bf%28X%29%5D\" alt=\"f(Y) = E[f(X)]\" eeimg=\"1\"> 会成立<br><br>-------------------------<br><br>比如，我们用同样的方法<br><br>有一枚硬币，抛一次出现正面的比例为 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> ，我们现在不知道这个 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> 是多少。记正面为1，反面为0。从中抽取 n 个样本 <img src=\"https://www.zhihu.com/equation?tex=X_1%2C+...+%2C+X_n\" alt=\"X_1, ... , X_n\" eeimg=\"1\"> 注意各个 <img src=\"https://www.zhihu.com/equation?tex=X_i\" alt=\"X_i\" eeimg=\"1\"> 都是独立同分布的随机变量<br><br>我们强行指定 <img src=\"https://www.zhihu.com/equation?tex=P_%7BML%7D+%3D+%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5E%7Bn%7DX_i\" alt=\"P_{ML} = \\frac{1}{n}\\sum_{i=1}^{n}X_i\" eeimg=\"1\"> 因为有<br><br><img src=\"https://www.zhihu.com/equation?tex=E%5BP_%7BML%7D%5D+%3D+E%5B%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5E%7Bn%7DX_i%5D+%3D+%5Cfrac%7B1%7D%7Bn%7D+%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+E%5BX_i%5D+%3D+%5Cfrac%7B1%7D%7Bn%7D+%5Csum_%7Bi%3D1%7D%5E%7Bn%7D+P+%3D+P\" alt=\"E[P_{ML}] = E[\\frac{1}{n}\\sum_{i=1}^{n}X_i] = \\frac{1}{n} \\sum_{i=1}^{n} E[X_i] = \\frac{1}{n} \\sum_{i=1}^{n} P = P\" eeimg=\"1\"><br><br>注意 <img src=\"https://www.zhihu.com/equation?tex=P_%7BML%7D\" alt=\"P_{ML}\" eeimg=\"1\"> 也是随机变量<br><br>可是，我们把数值代入 <img src=\"https://www.zhihu.com/equation?tex=P_%7BML%7D\" alt=\"P_{ML}\" eeimg=\"1\"> ，就得到了 <img src=\"https://www.zhihu.com/equation?tex=P\" alt=\"P\" eeimg=\"1\"> 的无偏估计值<br><br>现在我们抛了n次，都是正面，无论n等于多少，我们就都可以估计这个 P 等于 1 了？ 比如 n = 1 ，我就抛了一次？",
        "extras": ""
    },
    {
        "question": {
            "title": "钱锺书的英语到底什么水平？",
            "updated_time": 1478572141,
            "question_type": "normal",
            "type": "question",
            "created": 1427340395,
            "url": "https://www.zhihu.com/api/v4/questions/29054726",
            "id": 29054726
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130190366",
        "thumbnail": "",
        "created_time": 1478486920,
        "excerpt": "五峰山人按：这三封信大约写于1971-72年，是写给原中国社科院的林书武的， —— 上海译文出版社 bbs.yiwen.com.cn 译文论坛交流区 [外国文学 BBS] 我现在认为这三篇书信，他就是故意写的想让人看不懂的 至于有人提到钱锺书英文文集 ，在豆瓣上有个帖子里有人贴过其中的几篇。正经的学术文章还比三封琐碎的书信用词要简单不少。这个就很可疑了。",
        "updated_time": 1478690995,
        "id": 130190366,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>五峰山人按：这三封信大约写于1971-72年，是写给原中国社科院的林书武的，<br>—— <a href=\"https://link.zhihu.com/?target=http%3A//yiwen.com.cn/mybbs/Announce/Announce2.asp%3FBoardID%3D18%26ID%3D148187%26ac%3Dpre%26rd%3D27650\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">上海译文出版社 bbs.yiwen.com.cn 译文论坛交流区 [外国文学 BBS]<i class=\"icon-external\"></i></a></blockquote><br>我现在认为这三篇书信，他就是故意写的想让人看不懂的<br><br>至于有人提到<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//www.douban.com/group/topic/2480040/\" target=\"_blank\" rel=\"nofollow noreferrer\">钱锺书英文文集<i class=\"icon-external\"></i></a>，在豆瓣上有个帖子里有人贴过其中的几篇。正经的学术文章还比三封琐碎的书信用词要简单不少。这个就很可疑了。",
        "extras": ""
    },
    {
        "question": {
            "title": "全栈工程师为什么会招黑？",
            "updated_time": 1478411305,
            "question_type": "normal",
            "type": "question",
            "created": 1478411305,
            "url": "https://www.zhihu.com/api/v4/questions/52338974",
            "id": 52338974
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130092827",
        "thumbnail": "",
        "created_time": 1478422007,
        "excerpt": "当然要黑了。全栈程序员提倡的是什么都要知道一点。而真正应该提倡的是什么都不知道才是最好的。 比如，为什么要自制深度学习框架? 的后续，你可以看到我提了个问题asm.js里如何正确表示浮点数？ 。这个问题暴露了我把asm.js当JavaScript来理解的错误。正是因为这个错误，小朋友反超我，率先完成了demo。正是因为小朋友什么都不知道，所以他每一行代码，写下去之前都会老老实实查文档，这还不够，他还要搞几个小例子确认结果确实…",
        "updated_time": 1478424720,
        "id": 130092827,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然要黑了。全栈程序员提倡的是<b>什么都要知道一点</b>。而真正应该提倡的是<b>什么都不知道才是最好的</b>。<br><br>比如，<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20942572\">为什么要自制深度学习框架? </a>的后续，你可以看到我提了个问题<a class=\"internal\" href=\"https://www.zhihu.com/question/47826876\">asm.js里如何正确表示浮点数？ </a>。这个问题暴露了我把asm.js当JavaScript来理解的错误。正是因为这个错误，小朋友反超我，率先完成了demo。正是因为小朋友什么都不知道，所以他每一行代码，写下去之前都会老老实实查文档，这还不够，他还要搞几个小例子确认结果确实如文档所说。一开始，他的进度看上去比我慢多了。我只出了这一个Bug，就被他反超了。也同样是因为他什么都不知道，他并不关心什么Google是怎么做的，他只关心应该怎么做。所以他才会提出这么多问题，并引导我开发新一代深度学习框架。<br><br>另外一个例子，小朋友不知道从哪里找来一本统计学的书，书上讲到方差什么的时候，写了个显然等于 n - 1 什么的。结果我看了下发现这个问题一点都不好算，搜了一下，竟然在知乎上有很多回答，看了一下竟然一个能让小朋友满意的回答都没有。于是有了这个问题<a class=\"internal\" href=\"https://www.zhihu.com/question/51987685\"> 为什么概率统计问题下，好多人啥都不懂就在那里强答？</a> 而我在这之前，认为别人肯定推出过这个式子，所有书上都是这么写的，这个结论不会错的，也就没有注意。我现在更愿意相信这个正确答案肯定不是这个式子。也正是因为小朋友什么都不知道，所以你不能跟他说什么什么人是怎么说的，你必须跟他讲道理，假如公式他按你的说法不能自己一步步推出来，他就认为你说的有问题。这样他发现了我没有发现的问题。",
        "extras": ""
    },
    {
        "question": {
            "title": "纯粹的面向对象语言比不是纯粹的面向对象语言比起来，有什么优点？",
            "updated_time": 1478373127,
            "question_type": "normal",
            "type": "question",
            "created": 1478373127,
            "url": "https://www.zhihu.com/api/v4/questions/52329755",
            "id": 52329755
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/130052696",
        "thumbnail": "https://pic2.zhimg.com/80/v2-018184ada922c6e230b9261eaf333489_bh.jpg",
        "created_time": 1478402229,
        "excerpt": "Code Mesh 2016上Alan Kay已经钦定了Erlang才是纯面向对象语言 有图为证。不过图从网上是偷来的",
        "updated_time": 1478525876,
        "id": 130052696,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Code Mesh 2016上Alan Kay已经钦定了Erlang才是纯面向对象语言<br><br><noscript><img data-rawheight=\"898\" data-rawwidth=\"1200\" src=\"https://pic2.zhimg.com/v2-018184ada922c6e230b9261eaf333489_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic2.zhimg.com/v2-018184ada922c6e230b9261eaf333489_r.jpg\"></noscript><img data-rawheight=\"898\" data-rawwidth=\"1200\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1200\" data-original=\"https://pic2.zhimg.com/v2-018184ada922c6e230b9261eaf333489_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-018184ada922c6e230b9261eaf333489_b.jpg\"><br>有图为证。不过图从网上是偷来的",
        "extras": ""
    },
    {
        "question": {
            "title": "龚神给微软 Linux 子系统写的支持 DirectX 9、11的代码到底属不属于“驱动”？",
            "updated_time": 1480704090,
            "question_type": "normal",
            "type": "question",
            "created": 1478328683,
            "url": "https://www.zhihu.com/api/v4/questions/52311143",
            "id": 52311143
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129943934",
        "thumbnail": "",
        "created_time": 1478329861,
        "excerpt": "你这问题漏洞太大。Linux下哪个程序需要DirectX了？parrallels的虚拟显卡最多只是把OpenGL调用转发到宿主机上。Linux子系统和Windows子系统在内核看来是同等地位的。应该不需要搞这套东西才对。 不提供CUDA真正的原因肯定不是不想做。而是已经做好了，发现Linux子系统下CUDA跑分比Windows子系统下高，这就尴尬了。因为要保密，他又不能对外这么说，只能说不想做打发你了。 ----------------------------------- 以上是原答案 看…",
        "updated_time": 1480848642,
        "id": 129943934,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这问题漏洞太大。Linux下哪个程序需要DirectX了？parrallels的虚拟显卡最多只是把OpenGL调用转发到宿主机上。Linux子系统和Windows子系统在内核看来是同等地位的。应该不需要搞这套东西才对。<br><br>不提供CUDA真正的原因肯定不是不想做。而是已经做好了，发现Linux子系统下CUDA跑分比Windows子系统下高，这就尴尬了。因为要保密，他又不能对外这么说，只能说不想做打发你了。<br><br>-----------------------------------<br><br>以上是原答案<br><br>看到叛逆者出来胡说八道，所以恢复<br><br>显卡驱动由两部分组成，一部分是通过PCI接口操作硬件(以下称为内核态驱动)，另外一部分是把OpenGL调用翻译成显卡命令(以下称为用户态驱动)。<br><br>所以除了PCI-passthrough之类的独占显卡的方式。一般来说，里面支持显卡就两种方式，其中一种是需要在里面安装物理显卡的用户态驱动的。另外一种方式，就是主流的方式，和parallels的虚拟显卡的原理是一样的。主流的方式的好处就在于无论物理机用的是什么显卡，guest里装的都是同一个“驱动”。把这个看作API转发是没有问题的，因为这个虚拟显卡和对应的parallels tools安装的虚拟显卡的驱动里不会提供把OpenGL调用翻译成GPU命令，也不会直接去操作显卡。当然不能看作是在写驱动了。假如这个算驱动，比如叛逆者整天吐槽AMD的驱动，他就凭这两个案例跳槽去给AMD显卡开发驱动，职位的级别真的能和他在微软一样吗？",
        "extras": ""
    },
    {
        "question": {
            "title": "在macOS/Win/Linux下如何建立一個乾淨的開發環境（就是確保純淨的依賴性）？",
            "updated_time": 1473564872,
            "question_type": "normal",
            "type": "question",
            "created": 1473564872,
            "url": "https://www.zhihu.com/api/v4/questions/50542626",
            "id": 50542626
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129823280",
        "thumbnail": "",
        "created_time": 1478250472,
        "excerpt": "Windows开发，wine搞个新的WINEPREFIX路径就纯净了。 (逃 Fedora，就建个新的chroot就好了，比如Fedora 23 mkdir -p /path/to/chroot/root\nrpm --root \"/path/to/chroot/root\" --initdb\nrpm --root \"/path/to/chroot/root\" --import \"/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-23-primary\"\nrpm -ivh --nodeps --root \"/path/to/chroot/root\" fedora-repos-23-1.noarch.rpm fedora-release-23-1.noarch.rpm\ndnf --installroot=\"/path/…",
        "updated_time": 1478250553,
        "id": 129823280,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Windows开发，wine搞个新的WINEPREFIX路径就纯净了。 (逃<br><br>Fedora，就建个新的chroot就好了，比如Fedora 23<br><br><div class=\"highlight\"><pre><code class=\"language-text\">mkdir -p /path/to/chroot/root\nrpm --root \"/path/to/chroot/root\" --initdb\nrpm --root \"/path/to/chroot/root\" --import \"/etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-23-primary\"\nrpm -ivh --nodeps --root \"/path/to/chroot/root\" fedora-repos-23-1.noarch.rpm fedora-release-23-1.noarch.rpm\ndnf --installroot=\"/path/to/chroot/root\" install coreutils bash\n</code></pre></div><br>之后就新建一个user namespace，直接chroot就好了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">chroot \"/path/to/chroot/root\" /bin/bash\n</code></pre></div><br>debootstrap最后不知道是chroot还是chroot前一步会失败，<a data-title=\"@No Money\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/25bbf3f3322d61edf407d8252009da09\" data-hash=\"25bbf3f3322d61edf407d8252009da09\" data-hovercard=\"p$b$25bbf3f3322d61edf407d8252009da09\"> @No Money</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "前知乎用户“玄不救非氪不改命”和“曾博”谁更好玩一些?",
            "updated_time": 1484565903,
            "question_type": "normal",
            "type": "question",
            "created": 1478097175,
            "url": "https://www.zhihu.com/api/v4/questions/52230337",
            "id": 52230337
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129703106",
        "thumbnail": "",
        "created_time": 1478180486,
        "excerpt": "不知道。曾老师在一个问题里说过，谁能找到答案，他的头就可以随便玩。等我找到工作，我就给曾老师打快递费，让他把他的头寄过来，到时候就知道曾老师的头好不好玩了。",
        "updated_time": 1478180781,
        "id": 129703106,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不知道。曾老师在一个问题里说过，谁能找到答案，他的头就可以随便玩。等我找到工作，我就给曾老师打快递费，让他把他的头寄过来，到时候就知道曾老师的头好不好玩了。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么这个代码加C++11标准后会运行时间长很多？",
            "updated_time": 1478051355,
            "question_type": "normal",
            "type": "question",
            "created": 1477989899,
            "url": "https://www.zhihu.com/api/v4/questions/52187162",
            "id": 52187162
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129638530",
        "thumbnail": "",
        "created_time": 1478153374,
        "excerpt": "我记得首先 #include <stdio.h> 是没问题的 #include <cstdio> 才会导致问题 因为 cstdio 会 include c++config.h ，c++config.h 会 include os_defines.h os_defines.h 里耍流氓 #undef __USE_MINGW_ANSI_STDIO\n#define __USE_MINGW_ANSI_STDIO 1 也就是你先include C++的header而不是C的header就完蛋了。因为 stdio.h 就是根据这个 __USE_MINGW_ANSI_STDIO 来决定printf什么的用哪个实现的。 所以 先include <cstdio>还要得到…",
        "updated_time": 1482497609,
        "id": 129638530,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我记得首先 #include &lt;stdio.h&gt; 是没问题的  #include &lt;cstdio&gt; 才会导致问题<br><br>因为 cstdio 会 include c++config.h ，c++config.h 会 include os_defines.h <br><br>os_defines.h 里耍流氓<br><br><div class=\"highlight\"><pre><code class=\"language-text\">#undef __USE_MINGW_ANSI_STDIO\n#define __USE_MINGW_ANSI_STDIO 1\n</code></pre></div><br>也就是你先include C++的header而不是C的header就完蛋了。因为 stdio.h 就是根据这个 __USE_MINGW_ANSI_STDIO 来决定printf什么的用哪个实现的。<br><br>所以 先include &lt;cstdio&gt;还要得到和先include &lt;stdio.h&gt;一样的结果，直接在编译参数里把 stdio.h include进来，针对下面的例子就要使用这样的编译参数 i686-w64-mingw32-g++ -include stdio.h -S x.cpp<br><br>----------------------------------------------------------------------------------<br><br>我用的是 i686-w64-mingw32-g++ (GCC) 6.2.0<br><br>命令  i686-w64-mingw32-g++ -S x.cpp<br><br>x.cpp<br><div class=\"highlight\"><pre><code class=\"language-text\">#include&lt;stdio.h&gt;\n\nint main() {\n   printf(\"%d\\n\", 1);\n}\n</code></pre></div>x.s<br><div class=\"highlight\"><pre><code class=\"language-text\">\t.file\t\"x.cpp\"\n\t.def\t___main;\t.scl\t2;\t.type\t32;\t.endef\n\t.section .rdata,\"dr\"\nLC0:\n\t.ascii \"%d\\12\\0\"\n\t.text\n\t.globl\t_main\n\t.def\t_main;\t.scl\t2;\t.type\t32;\t.endef\n_main:\n\tpushl\t%ebp\n\tmovl\t%esp, %ebp\n\tandl\t$-16, %esp\n\tsubl\t$16, %esp\n\tcall\t___main\n\tmovl\t$1, 4(%esp)\n\tmovl\t$LC0, (%esp)\n\tcall\t_printf\n\tmovl\t$0, %eax\n\tleave\n\tret\n\t.ident\t\"GCC: (GNU) 6.2.0 20160822 (Fedora MinGW 6.2.0-1.fc24)\"\n\t.def\t_printf;\t.scl\t2;\t.type\t32;\t.endef\n</code></pre></div>x.cpp<br><div class=\"highlight\"><pre><code class=\"language-text\">#include&lt;cstdio&gt;\n\nint main() {\n   printf(\"%d\\n\", 1);\n}\n</code></pre></div><br>x.s<br><div class=\"highlight\"><pre><code class=\"language-text\">\t.file\t\"x.cpp\"\n\t.section\t.text$_Z6printfPKcz,\"x\"\n\t.linkonce discard\n\t.globl\t__Z6printfPKcz\n\t.def\t__Z6printfPKcz;\t.scl\t2;\t.type\t32;\t.endef\n__Z6printfPKcz:\n\tpushl\t%ebp\n\tmovl\t%esp, %ebp\n\tpushl\t%ebx\n\tsubl\t$36, %esp\n\tleal\t12(%ebp), %eax\n\tmovl\t%eax, -12(%ebp)\n\tmovl\t-12(%ebp), %eax\n\tmovl\t%eax, 4(%esp)\n\tmovl\t8(%ebp), %eax\n\tmovl\t%eax, (%esp)\n\tcall\t___mingw_vprintf\n\tmovl\t%eax, %ebx\n\tmovl\t%ebx, %eax\n\taddl\t$36, %esp\n\tpopl\t%ebx\n\tpopl\t%ebp\n\tret\n\t.def\t___main;\t.scl\t2;\t.type\t32;\t.endef\n\t.section .rdata,\"dr\"\nLC0:\n\t.ascii \"%d\\12\\0\"\n\t.text\n\t.globl\t_main\n\t.def\t_main;\t.scl\t2;\t.type\t32;\t.endef\n_main:\n\tpushl\t%ebp\n\tmovl\t%esp, %ebp\n\tandl\t$-16, %esp\n\tsubl\t$16, %esp\n\tcall\t___main\n\tmovl\t$1, 4(%esp)\n\tmovl\t$LC0, (%esp)\n\tcall\t__Z6printfPKcz\n\tmovl\t$0, %eax\n\tleave\n\tret\n\t.ident\t\"GCC: (GNU) 6.2.0 20160822 (Fedora MinGW 6.2.0-1.fc24)\"\n\t.def\t___mingw_vprintf;\t.scl\t2;\t.type\t32;\t.endef\n</code></pre></div><br>至于-std=c++11会不一样，可能是因为你用的是 MinGW32 ? 如果是的话，就不要用 MinGW32了，现在应该用MinGW-w64",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待NOI系列赛事将逐步只支持C++？哪种语言能进入NOI系列赛事？",
            "updated_time": 1478143563,
            "question_type": "normal",
            "type": "question",
            "created": 1478106831,
            "url": "https://www.zhihu.com/api/v4/questions/52234471",
            "id": 52234471
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129594913",
        "thumbnail": "",
        "created_time": 1478135861,
        "excerpt": "我相信，按目前C++的发展趋势，2022年已经没什么人用C++了",
        "updated_time": 1478135861,
        "id": 129594913,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我相信，按目前C++的发展趋势，2022年已经没什么人用C++了",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么有些大V不去利用自己的粉丝来变现？",
            "updated_time": 1478024330,
            "question_type": "normal",
            "type": "question",
            "created": 1478024330,
            "url": "https://www.zhihu.com/api/v4/questions/52202052",
            "id": 52202052
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129547498",
        "thumbnail": "",
        "created_time": 1478092702,
        "excerpt": "曾老师至少尝试过两次，都失败了",
        "updated_time": 1478092702,
        "id": 129547498,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师至少尝试过两次，都失败了",
        "extras": ""
    },
    {
        "question": {
            "title": "曾老师学编程的路线是怎样的？",
            "updated_time": 1477998536,
            "question_type": "normal",
            "type": "question",
            "created": 1477998536,
            "url": "https://www.zhihu.com/api/v4/questions/52191501",
            "id": 52191501
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129436946",
        "thumbnail": "",
        "created_time": 1478046139,
        "excerpt": "当然是先学Mathematica，再用Mathematica写一个WYSISYG的网页版LaTeX编辑器，卒",
        "updated_time": 1478046583,
        "id": 129436946,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是先学Mathematica，再用Mathematica写一个WYSISYG的网页版LaTeX编辑器，卒",
        "extras": ""
    },
    {
        "question": {
            "title": "曾博究竟是失败人士还是成功人士？",
            "updated_time": 1484018594,
            "question_type": "normal",
            "type": "question",
            "created": 1477453999,
            "url": "https://www.zhihu.com/api/v4/questions/51988933",
            "id": 51988933
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129374406",
        "thumbnail": "",
        "created_time": 1477995601,
        "excerpt": "曾老师说了成功人士都用微信，曾老师又不屑与我这种用不了微信的人讨论问题，当然是成功人士了。",
        "updated_time": 1477995650,
        "id": 129374406,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师说了成功人士都用微信，曾老师又不屑与我这种用不了微信的人讨论问题，当然是成功人士了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价百度开源的基础架构技术栈？",
            "updated_time": 1478237315,
            "question_type": "normal",
            "type": "question",
            "created": 1477655936,
            "url": "https://www.zhihu.com/api/v4/questions/52073672",
            "id": 52073672
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/129063911",
        "thumbnail": "",
        "created_time": 1477813490,
        "excerpt": "应该是向大家展示一下百度成功更新编译器的成果 (逃 参考 百度的 GCC 被三体人锁定在 3.4.5 版本是什么典故？ - 三体（系列小说） ",
        "updated_time": 1477813490,
        "id": 129063911,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "应该是向大家展示一下百度成功更新编译器的成果 (逃<br><br>参考<a href=\"https://www.zhihu.com/question/21042367\" class=\"internal\"> 百度的 GCC 被三体人锁定在 3.4.5 版本是什么典故？ - 三体（系列小说）</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价知乎live 1 小时可以赚12w？",
            "updated_time": 1477334582,
            "question_type": "normal",
            "type": "question",
            "created": 1477322701,
            "url": "https://www.zhihu.com/api/v4/questions/51942370",
            "id": 51942370
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/128971337",
        "thumbnail": "",
        "created_time": 1477745531,
        "excerpt": "这是收费模式还有内容形式的问题啊。电影也是这样的，烂片一样赚钱。",
        "updated_time": 1477745908,
        "id": 128971337,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这是收费模式还有内容形式的问题啊。电影也是这样的，烂片一样赚钱。",
        "extras": ""
    },
    {
        "question": {
            "title": "王垠为什么宁可去微软也不回国？",
            "updated_time": 1477510647,
            "question_type": "normal",
            "type": "question",
            "created": 1477510130,
            "url": "https://www.zhihu.com/api/v4/questions/52015737",
            "id": 52015737
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/128587193",
        "thumbnail": "",
        "created_time": 1477537586,
        "excerpt": "他一定是学习了阮一峰的经验",
        "updated_time": 1477537586,
        "id": 128587193,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "他一定是学习了阮一峰的经验",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待王垠对 tensorflow 的评价？",
            "updated_time": 1477485710,
            "question_type": "normal",
            "type": "question",
            "created": 1477484563,
            "url": "https://www.zhihu.com/api/v4/questions/52005964",
            "id": 52005964
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/128519856",
        "thumbnail": "",
        "created_time": 1477489057,
        "excerpt": "不知道为啥邀请我。他说的已有的机器学习工具指的是什么？ 当然了，首先看他支持不支持LiFT，支持的话，果断好评啊。(逃",
        "updated_time": 1477493024,
        "id": 128519856,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不知道为啥邀请我。他说的已有的机器学习工具指的是什么？<br><br>当然了，首先看他支持不支持LiFT，支持的话，果断好评啊。(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "Rust tests目录下XXX is never used怎么解决？",
            "updated_time": 1476976045,
            "question_type": "normal",
            "type": "question",
            "created": 1476975952,
            "url": "https://www.zhihu.com/api/v4/questions/51812210",
            "id": 51812210
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/127623509",
        "thumbnail": "",
        "created_time": 1477015429,
        "excerpt": "cargo test的问题是，他是按tests下面的文件一个个单独编译测试的。而common里的函数，不一定会被所有测试文件用到，于是就会产生这个dead_code了。 在测试文件里，写pub mod common而不是mod common，这些warning就会消失。这么做和加什么 #[allow(dead_code)] 一样是不对的。假如common里真的有某个函数没被任何测试文件用到，我们就看不出来了。",
        "updated_time": 1477015429,
        "id": 127623509,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "cargo test的问题是，他是按tests下面的文件一个个单独编译测试的。而common里的函数，不一定会被所有测试文件用到，于是就会产生这个dead_code了。<br><br>在测试文件里，写pub mod common而不是mod common，这些warning就会消失。这么做和加什么 #[allow(dead_code)] 一样是不对的。假如common里真的有某个函数没被任何测试文件用到，我们就看不出来了。",
        "extras": ""
    },
    {
        "question": {
            "title": "C++primer中一个疑似错误？",
            "updated_time": 1476856815,
            "question_type": "normal",
            "type": "question",
            "created": 1476856815,
            "url": "https://www.zhihu.com/api/v4/questions/51754882",
            "id": 51754882
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/127576840",
        "thumbnail": "",
        "created_time": 1476975415,
        "excerpt": "这锅难道某强势审校不背？ 不过这方面确实缺少好用的工具啊。真不知道那么多书他们都是怎么写出来的。21天学通Erlang 最最开始的时候，花了大量时间搞了几个简陋的脚本，以便在生成PDF时，可以检查书中所有的代码，输出是不是和书中声称的是一样的，不同的代码文件里，同一个代码片段的内容是不是都是一样的。 当时真的是很无语，一个现成能用的工具都找不到。难道大家都是和某强势审校一样只靠目测的么？",
        "updated_time": 1476976340,
        "id": 127576840,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这锅难道某<b>强势</b>审校不背？<br><br>不过这方面确实缺少好用的工具啊。真不知道那么多书他们都是怎么写出来的。21天学通Erlang 最最开始的时候，花了大量时间搞了几个简陋的脚本，以便在生成PDF时，可以检查书中所有的代码，输出是不是和书中声称的是一样的，不同的代码文件里，同一个代码片段的内容是不是都是一样的。<br><br>当时真的是很无语，一个现成能用的工具都找不到。难道大家都是和某强势审校一样只靠目测的么？",
        "extras": ""
    },
    {
        "question": {
            "title": "曾博适合当特工吗？",
            "updated_time": 1476883705,
            "question_type": "normal",
            "type": "question",
            "created": 1476883705,
            "url": "https://www.zhihu.com/api/v4/questions/51771217",
            "id": 51771217
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/127403013",
        "thumbnail": "",
        "created_time": 1476885694,
        "excerpt": "毒舌婊我为你感到拙急啊。你就这点水平怎么毒舌的起来？他那几篇博客啊，用他自己的话说，不堪卒读啊。只有中二少年才会去写那些东西。所以说，在这一点上，曾博没有任何变化啊。",
        "updated_time": 1476885694,
        "id": 127403013,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "毒舌婊我为你感到拙急啊。你就这点水平怎么毒舌的起来？他那几篇博客啊，用他自己的话说，不堪卒读啊。只有中二少年才会去写那些东西。所以说，在这一点上，曾博没有任何变化啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何高效的学习C++？",
            "updated_time": 1476349241,
            "question_type": "normal",
            "type": "question",
            "created": 1476349241,
            "url": "https://www.zhihu.com/api/v4/questions/51560126",
            "id": 51560126
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/126739808",
        "thumbnail": "",
        "created_time": 1476539002,
        "excerpt": "我认为，Rust基本上代表了C++的best practise。先学Rust。等你Rust学好了，要么C++已经和Rust差不多了，要么C++已经倒闭了。",
        "updated_time": 1476539002,
        "id": 126739808,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为，Rust基本上代表了C++的best practise。先学Rust。等你Rust学好了，要么C++已经和Rust差不多了，要么C++已经倒闭了。",
        "extras": ""
    },
    {
        "question": {
            "title": "未使用微软活动目录“AD”的公司是如何进行企业身份认证的？",
            "updated_time": 1476351412,
            "question_type": "normal",
            "type": "question",
            "created": 1476351412,
            "url": "https://www.zhihu.com/api/v4/questions/51561398",
            "id": 51561398
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/126585507",
        "thumbnail": "",
        "created_time": 1476444066,
        "excerpt": "可以用FreeIPA啊。再说了自己写一个LDAP server什么的也不是不行啊。 https://www.freeipa.org/page/Main_Page ",
        "updated_time": 1476444176,
        "id": 126585507,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "可以用FreeIPA啊。再说了自己写一个LDAP server什么的也不是不行啊。<br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.freeipa.org/page/Main_Page\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">freeipa.org/page/Main_P</span><span class=\"invisible\">age</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么vector不支持push_front？",
            "updated_time": 1476341276,
            "question_type": "normal",
            "type": "question",
            "created": 1476341276,
            "url": "https://www.zhihu.com/api/v4/questions/51555037",
            "id": 51555037
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/126574555",
        "thumbnail": "",
        "created_time": 1476438530,
        "excerpt": "这是C++历史遗留问题。Stepanov向BS推荐忘了是谁写的STL的前身，BS觉得这个东西不是小好，也不是中好，而是大好，也就大力推荐赶紧加入C++标准里了。这可能是C++委员会唯一一个快速通过的重大功能。从现在来看，当时是太仓促了。比如他们就忘记了abstract data type里的abstract。STL最重要的就是提供trait，而不是具体的实现。从trait的角度看，你这个问题很简单，C++的vector实现了Array + Stack，而你需要的是Array + Deque。…",
        "updated_time": 1476444857,
        "id": 126574555,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这是C++历史遗留问题。Stepanov向BS推荐忘了是谁写的STL的前身，BS觉得这个东西不是小好，也不是中好，而是大好，也就大力推荐赶紧加入C++标准里了。这可能是C++委员会唯一一个快速通过的重大功能。从现在来看，当时是太仓促了。比如他们就忘记了abstract data type里的abstract。STL最重要的就是提供trait，而不是具体的实现。从trait的角度看，你这个问题很简单，C++的vector实现了Array + Stack，而你需要的是Array + Deque。在这个问题上，坚持不引入trait的概念，思维就容易混乱了。所以我决定了，要学会C++得先学Rust。<br><br>要实现push_front是很简单的，把vector的存储当成一个circular buffer就可以了，但问题是，会导致vector这个struct多占一个字长。所以区分Array + Stack 和 Array + Deque 是有意义的。",
        "extras": ""
    },
    {
        "question": {
            "title": "程序猿简历里的套话很重要吗？",
            "updated_time": 1475911335,
            "question_type": "normal",
            "type": "question",
            "created": 1475895467,
            "url": "https://www.zhihu.com/api/v4/questions/51367504",
            "id": 51367504
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/126252629",
        "thumbnail": "",
        "created_time": 1476273722,
        "excerpt": "能凑字数的东西多的去了。比如轮子哥四级考了556他也能写上去单独占一行。",
        "updated_time": 1476273750,
        "id": 126252629,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "能凑字数的东西多的去了。比如轮子哥四级考了556他也能写上去单独占一行。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何利用现有语言自创一个［家庭版］知乎？",
            "updated_time": 1475720788,
            "question_type": "normal",
            "type": "question",
            "created": 1475690131,
            "url": "https://www.zhihu.com/api/v4/questions/51300661",
            "id": 51300661
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/125354632",
        "thumbnail": "",
        "created_time": 1475818509,
        "excerpt": "这和语言没有啥关系吧。 我的想法是借助BT的DHT来bootstrap自己的DHT。自己的DHT得像双曲DHT那样。 你关注了哪些话题组成一个 Merkle tree ，每个话题里的内容也组成一个 Merkle tree 。 Merkel tree在peer之间同步。 问题出在双曲DHT那里。双曲DHT是用浮点数的，排成一条线的节点多了，精度很快就不够用了。 最能理解双曲DHT理论的曾老师，却不屑和我们讨论这些问题。他认为微信才是最好的，他说了成功人士都用微信。",
        "updated_time": 1475818668,
        "id": 125354632,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这和语言没有啥关系吧。<br><br>我的想法是借助BT的DHT来bootstrap自己的DHT。自己的DHT得像双曲DHT那样。<br><br>你关注了哪些话题组成一个 Merkle tree ，每个话题里的内容也组成一个 Merkle tree 。<br><br>Merkel tree在peer之间同步。<br><br>问题出在双曲DHT那里。双曲DHT是用浮点数的，排成一条线的节点多了，精度很快就不够用了。<br><br>最能理解双曲DHT理论的曾老师，却不屑和我们讨论这些问题。他认为微信才是最好的，他说了成功人士都用微信。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何理解tensorflow中的dimension？",
            "updated_time": 1475730320,
            "question_type": "normal",
            "type": "question",
            "created": 1475730281,
            "url": "https://www.zhihu.com/api/v4/questions/51309337",
            "id": 51309337
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/125334755",
        "thumbnail": "",
        "created_time": 1475810429,
        "excerpt": "tensorflow在这里和numpy是一致的。这个dimension就是numpy里的axis。可以参考 numpy.argmax 比如 1 2 3\n4 5 6\n 这个数组的shape是 2 3 。axis就是从高到低。 axis-0 axis-1\n 2 3\n 而argmax参数里的axis，相当于逐个取出竖线右边对应的数组，分别进行argmax运算。 axis-0 | 2 3\naxis-1 2 | 3\n 不过，这个axis顺序是不好的，因为rank不同的数组，用相同的axis-N取出来的数组，他们的rank不同。同时也说明了TensorFlow虽然名字里有…",
        "updated_time": 1475810856,
        "id": 125334755,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "tensorflow在这里和numpy是一致的。这个dimension就是numpy里的axis。可以参考<a href=\"https://link.zhihu.com/?target=http%3A//docs.scipy.org/doc/numpy/reference/generated/numpy.argmax.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> numpy.argmax<i class=\"icon-external\"></i></a><br><br>比如<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1 2 3\n4 5 6\n</code></pre></div><br>这个数组的shape是 2 3 。axis就是从高到低。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">  axis-0  axis-1\n  2       3\n</code></pre></div><br>而argmax参数里的axis，相当于逐个取出竖线右边对应的数组，分别进行argmax运算。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">axis-0  | 2   3\naxis-1    2 | 3\n</code></pre></div><br>不过，这个axis顺序是不好的，因为rank不同的数组，用相同的axis-N取出来的数组，他们的rank不同。同时也说明了TensorFlow虽然名字里有rank，和tensor一点关系都没有了。而按tensor的定义，rank-0 tensor始终都是scalar。从最高的维度开始的缺陷是，假如你函数的rank有多层嵌套的，因为始终最高的是0，多套几层你就晕了，要好好想一想才能知道目前最高的维度对应的是原始数组哪一个维度。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价余凯在朋友圈发表呼吁大家用caffe, mxnet等框架，避免使用TensorFlow？",
            "updated_time": 1476248893,
            "question_type": "normal",
            "type": "question",
            "created": 1475672145,
            "url": "https://www.zhihu.com/api/v4/questions/51292554",
            "id": 51292554
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/125255277",
        "thumbnail": "",
        "created_time": 1475760329,
        "excerpt": "NVidia笑了。这几个框架跑分全靠cuDNN，就算不用cuDNN，也是要用CUDA的。深度学习就是NVidia的私家花园。TensorFlow能垄断啥？",
        "updated_time": 1475760614,
        "id": 125255277,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "NVidia笑了。这几个框架跑分全靠cuDNN，就算不用cuDNN，也是要用CUDA的。深度学习就是NVidia的私家花园。TensorFlow能垄断啥？",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价郝培强(Tinyfool)说编程技术含量不高一文？",
            "updated_time": 1475773347,
            "question_type": "normal",
            "type": "question",
            "created": 1475115338,
            "url": "https://www.zhihu.com/api/v4/questions/51114610",
            "id": 51114610
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/124856206",
        "thumbnail": "",
        "created_time": 1475549174,
        "excerpt": "鸡汤有毒 编程就是要避免任何有技术含量的事。举个简单的例子，a+++++++b 是不是看上去特别有技术含量，猛加括号是不是看上去特别笨，但是哪一种代码更好？ 比如，你要下载很多很多小文件，下载过程中需要能随时中断，你怎么办？ if not exist file_of_a:\n download url_of_a file_of_a.tmp\n mv file_of_a.tmp file_of_a\n Map Reduce也是一样的。不是下载一个文件，而是进行一个计算。假如能保证对于给定输入，输出一定是一样，…",
        "updated_time": 1475551633,
        "id": 124856206,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "鸡汤有毒<br><br>编程就是要避免任何有技术含量的事。举个简单的例子，a+++++++b 是不是看上去特别有技术含量，猛加括号是不是看上去特别笨，但是哪一种代码更好？<br><br>比如，你要下载很多很多小文件，下载过程中需要能随时中断，你怎么办？<br><br><div class=\"highlight\"><pre><code class=\"language-text\">if not exist file_of_a:\n    download url_of_a file_of_a.tmp\n    mv file_of_a.tmp file_of_a\n</code></pre></div><br>Map Reduce也是一样的。不是下载一个文件，而是进行一个计算。假如能保证对于给定输入，输出一定是一样，那么失败了就重新来一遍就好了。一个集群里，每台机器随时都可能挂掉，有很多进程在相互通信，你是去实现对这些相互通信的进程同步进行checkpoint和restore容易，还是把这个计算过程改成符合Map Reduce的要求容易？<br><br>是跑分刷数据容易，还是理清一团糟的业务逻辑容易？你想成为网红，该选哪条路很明显了吧。",
        "extras": ""
    },
    {
        "question": {
            "title": "数学的符号系统有没有缺陷？",
            "updated_time": 1475631877,
            "question_type": "normal",
            "type": "question",
            "created": 1475120174,
            "url": "https://www.zhihu.com/api/v4/questions/51117649",
            "id": 51117649
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/124188171",
        "thumbnail": "",
        "created_time": 1475122548,
        "excerpt": "所以我问了问题了 有哪些改良的求导符号？ - 导数 ，怎么又反过来邀请我答这个问题 我看到Knuth说过 In spite of these potential problems in extreme cases, Iverson's convention works beautifully in the vast majority of applications. It is, in fact, far less dangerous than most of the other notations of mathmatics, whose dark corners we have learned to avoid long ago. The safe use of Iverson's simple and…",
        "updated_time": 1475122548,
        "id": 124188171,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "所以我问了问题了<a href=\"https://www.zhihu.com/question/45576145\" class=\"internal\"> 有哪些改良的求导符号？ - 导数</a>，怎么又反过来邀请我答这个问题<br><br>我看到Knuth说过<br><br><blockquote>In spite of these potential problems in extreme cases, Iverson's convention works beautifully in the vast majority of applications. It is, in fact, far less dangerous than most of the other notations of mathmatics, whose dark corners we have learned to avoid long ago. The safe use of Iverson's simple and convenient idea is quite easy to learn.</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "曾老师为什么选择了硅谷，而不是去华尔街当quant?",
            "updated_time": 1475058263,
            "question_type": "normal",
            "type": "question",
            "created": 1475058263,
            "url": "https://www.zhihu.com/api/v4/questions/51097930",
            "id": 51097930
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/124128726",
        "thumbnail": "",
        "created_time": 1475076141,
        "excerpt": "曾老师好像说过，他喜欢地震",
        "updated_time": 1475722565,
        "id": 124128726,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师好像说过，他喜欢地震",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么很多人安装计算机操作系统的时候，习惯性的说是在‘做系统’？",
            "updated_time": 1394112725,
            "question_type": "normal",
            "type": "question",
            "created": 1394112725,
            "url": "https://www.zhihu.com/api/v4/questions/22953907",
            "id": 22953907
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/124038383",
        "thumbnail": "",
        "created_time": 1475036863,
        "excerpt": "这个不是叫灌么？",
        "updated_time": 1475036863,
        "id": 124038383,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个不是叫灌么？",
        "extras": ""
    },
    {
        "question": {
            "title": "关于高并发的两个问题？",
            "updated_time": 1472704570,
            "question_type": "normal",
            "type": "question",
            "created": 1472704570,
            "url": "https://www.zhihu.com/api/v4/questions/50233887",
            "id": 50233887
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123701160",
        "thumbnail": "",
        "created_time": 1474856458,
        "excerpt": "就当你这个千万级登陆是每秒一千万客户端要登陆。那么你只要坚持2分多钟，全国人民都在线了。假设全国是14亿人，每个人都来登陆一次，大约在一小时内登陆完，每秒才不到40万登陆。一千万登陆坚持一个小时就是360亿用户啊，现在问题来了，你有这么多用户么？",
        "updated_time": 1474857260,
        "id": 123701160,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "就当你这个千万级登陆是每秒一千万客户端要登陆。那么你只要坚持2分多钟，全国人民都在线了。假设全国是14亿人，每个人都来登陆一次，大约在一小时内登陆完，每秒才不到40万登陆。一千万登陆坚持一个小时就是360亿用户啊，现在问题来了，你有这么多用户么？",
        "extras": ""
    },
    {
        "question": {
            "title": "希望在半年内利用业余时间掌握编程基础来【自娱自乐】，应该考虑从什么语言开始？",
            "updated_time": 1474728894,
            "question_type": "normal",
            "type": "question",
            "created": 1474719364,
            "url": "https://www.zhihu.com/api/v4/questions/50968431",
            "id": 50968431
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123695243",
        "thumbnail": "",
        "created_time": 1474854107,
        "excerpt": "学Erlang山寨一个Minecraft，半年业余时间正好",
        "updated_time": 1474854126,
        "id": 123695243,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "学Erlang山寨一个Minecraft，半年业余时间正好",
        "extras": ""
    },
    {
        "question": {
            "title": "Java开发者如何入门golang？",
            "updated_time": 1474885378,
            "question_type": "normal",
            "type": "question",
            "created": 1474815001,
            "url": "https://www.zhihu.com/api/v4/questions/51003349",
            "id": 51003349
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123695030",
        "thumbnail": "",
        "created_time": 1474854032,
        "excerpt": "这问题也邀请我？ Go语言编程，这书是许式伟写的吧。当然没法看了。",
        "updated_time": 1474854055,
        "id": 123695030,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这问题也邀请我？<br><br>Go语言编程，这书是许式伟写的吧。当然没法看了。",
        "extras": ""
    },
    {
        "question": {
            "title": "keepalived是如何解决或者防止脑裂问题的？",
            "updated_time": 1474803546,
            "question_type": "normal",
            "type": "question",
            "created": 1474803546,
            "url": "https://www.zhihu.com/api/v4/questions/50997425",
            "id": 50997425
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123651951",
        "thumbnail": "",
        "created_time": 1474815458,
        "excerpt": "不能吧，参考 36. LVS: High Availability, Failover protection keepalived has the same split brain problem as heartbeat.",
        "updated_time": 1474815458,
        "id": 123651951,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不能吧，参考<a href=\"https://link.zhihu.com/?target=http%3A//www.austintek.com/LVS/LVS-HOWTO/HOWTO/LVS-HOWTO.failover.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 36. LVS: High Availability, Failover protection<i class=\"icon-external\"></i></a><br><br><blockquote>keepalived has the same split brain problem as heartbeat.</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "编程编得很压抑怎么办？",
            "updated_time": 1474786105,
            "question_type": "normal",
            "type": "question",
            "created": 1474773204,
            "url": "https://www.zhihu.com/api/v4/questions/50984024",
            "id": 50984024
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123597780",
        "thumbnail": "",
        "created_time": 1474789348,
        "excerpt": "不要慌，据统计 99.9999999% 的程序最后都没写出来",
        "updated_time": 1474791556,
        "id": 123597780,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不要慌，据统计 99.9999999% 的程序最后都没写出来",
        "extras": ""
    },
    {
        "question": {
            "title": "JavaScript 如果拥有多线程能力会怎样？",
            "updated_time": 1474637702,
            "question_type": "normal",
            "type": "question",
            "created": 1474563407,
            "url": "https://www.zhihu.com/api/v4/questions/50911384",
            "id": 50911384
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123334230",
        "thumbnail": "",
        "created_time": 1474622127,
        "excerpt": "题主会过来怒喷JavaScript的GIL",
        "updated_time": 1474622127,
        "id": 123334230,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "题主会过来怒喷JavaScript的GIL",
        "extras": ""
    },
    {
        "question": {
            "title": "一纸文凭对于程序员有多重要？",
            "updated_time": 1474508661,
            "question_type": "normal",
            "type": "question",
            "created": 1474508661,
            "url": "https://www.zhihu.com/api/v4/questions/50879588",
            "id": 50879588
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123219328",
        "thumbnail": "",
        "created_time": 1474555164,
        "excerpt": "很多公司都大数据，机器学习吹的飞起，招人的时候依旧是一刀切。可耻的是他们。不过这不解决问题。 我发现目前状况下，知名度才是最重要的。网红们，哪怕是本身就是大水货，或者跟不上时代的，还是入了邪教的，找工作似乎从来都不用发愁。你可以试着先成为网红。",
        "updated_time": 1474555605,
        "id": 123219328,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "很多公司都大数据，机器学习吹的飞起，招人的时候依旧是一刀切。可耻的是他们。不过这不解决问题。<br><br>我发现目前状况下，知名度才是最重要的。网红们，哪怕是本身就是大水货，或者跟不上时代的，还是入了邪教的，找工作似乎从来都不用发愁。你可以试着先成为网红。",
        "extras": ""
    },
    {
        "question": {
            "title": "写业务代码过程中如何得到多个逻辑判断流程的最简形式？数学上如何证明？",
            "updated_time": 1474516875,
            "question_type": "normal",
            "type": "question",
            "created": 1474516691,
            "url": "https://www.zhihu.com/api/v4/questions/50885019",
            "id": 50885019
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123155138",
        "thumbnail": "",
        "created_time": 1474527968,
        "excerpt": "数字电路里这个转换是用 espresso 做的，你可以参考一下 (逃",
        "updated_time": 1474527982,
        "id": 123155138,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "数字电路里这个转换是用 espresso 做的，你可以参考一下 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "月饼事件被开除的那几个员工后来去了什么公司？",
            "updated_time": 1474457340,
            "question_type": "normal",
            "type": "question",
            "created": 1474452502,
            "url": "https://www.zhihu.com/api/v4/questions/50862211",
            "id": 50862211
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/123031819",
        "thumbnail": "",
        "created_time": 1474455437,
        "excerpt": "你没必要关心这个。反正马云会告诉你，离开了阿里巴巴的人，他们现在过的都很不好",
        "updated_time": 1474456462,
        "id": 123031819,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你没必要关心这个。反正马云会告诉你，离开了阿里巴巴的人，他们现在过的都很不好",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待王垠的 《对 Rust 语言的分析》？",
            "updated_time": 1474265272,
            "question_type": "normal",
            "type": "question",
            "created": 1474265272,
            "url": "https://www.zhihu.com/api/v4/questions/50779086",
            "id": 50779086
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122687969",
        "thumbnail": "",
        "created_time": 1474272820,
        "excerpt": "如果你想支持这篇文章的书写，请付费5美元或者30人民币，谢谢！ 现在没写完就来收税了，可见微软工资压的确实厉害",
        "updated_time": 1474273222,
        "id": 122687969,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>如果你想支持这篇文章的书写，请付费5美元或者30人民币，谢谢！<br></blockquote><br>现在没写完就来收税了，可见微软工资压的确实厉害",
        "extras": ""
    },
    {
        "question": {
            "title": "叶劲峰老师最近发表的从零开始的Json库教程适合什么水平的编程学习者？",
            "updated_time": 1474272744,
            "question_type": "normal",
            "type": "question",
            "created": 1474031936,
            "url": "https://www.zhihu.com/api/v4/questions/50701819",
            "id": 50701819
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122668331",
        "thumbnail": "",
        "created_time": 1474265376,
        "excerpt": "写的挺好的，不管什么水平都可以看啊。感觉就是兼容C89，不用#pragma once之类的小问题不太好。因为这个是不用考虑实际使用的，完全可以指定编译器，不考虑兼容性的。 当然了，我更希望看到，比如7天自制ASN.1编译器(含ECN)。因为现在业界流行的都是protobuf, thrift之类的毒瘤，需要一篇面向初学者的教程告诉大家ASN.1才是最好的。",
        "updated_time": 1474339545,
        "id": 122668331,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "写的挺好的，不管什么水平都可以看啊。感觉就是兼容C89，不用#pragma once之类的小问题不太好。因为这个是不用考虑实际使用的，完全可以指定编译器，不考虑兼容性的。<br><br>当然了，我更希望看到，比如7天自制ASN.1编译器(含ECN)。因为现在业界流行的都是protobuf, thrift之类的毒瘤，需要一篇面向初学者的教程告诉大家ASN.1才是最好的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何以【曾博打开了电脑】为开头写一个故事？",
            "updated_time": 1473960430,
            "question_type": "normal",
            "type": "question",
            "created": 1473960411,
            "url": "https://www.zhihu.com/api/v4/questions/50681233",
            "id": 50681233
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122663956",
        "thumbnail": "",
        "created_time": 1474263525,
        "excerpt": "曾博打开了电脑，发现该用户账号已被停用",
        "updated_time": 1474263525,
        "id": 122663956,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾博打开了电脑，发现该用户账号已被停用",
        "extras": ""
    },
    {
        "question": {
            "title": "阿里巴巴做了哪些恶？",
            "updated_time": 1477565638,
            "question_type": "normal",
            "type": "question",
            "created": 1409670911,
            "url": "https://www.zhihu.com/api/v4/questions/25090060",
            "id": 25090060
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122629539",
        "thumbnail": "",
        "created_time": 1474249786,
        "excerpt": "阿里巴巴从不作恶。阿里巴巴干任何事都是打着道德的旗号，所谓师出有名。 比如基于Android搞个ROM，并不是什么见不得人的事。阿里云OS都要说自己和Android完全不同，是自己独立开发的，又能兼容Android应用。这么做是为了打破Android的垄断，因为Android的垄断不得人心，阿里云要去动一动谷歌的奶酪。 月饼事件屁大点事。你们这么上窜下跳这么积极。我为你们感到拙急啊。 @主公 的案件 不知道比这事严重到哪里去了，之前题主贴出…",
        "updated_time": 1474258916,
        "id": 122629539,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "阿里巴巴从不作恶。阿里巴巴干任何事都是打着道德的旗号，所谓师出有名。<br><br>比如基于Android搞个ROM，并不是什么见不得人的事。阿里云OS都要说自己和Android完全不同，是自己独立开发的，又能兼容Android应用。这么做是为了打破Android的垄断，因为Android的垄断不得人心，阿里云要去动一动谷歌的奶酪。<br><br>月饼事件屁大点事。你们这么上窜下跳这么积极。我为你们感到拙急啊。<br><br><a data-title=\"@主公\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/ebe3435306907836629420542504163d\" data-hash=\"ebe3435306907836629420542504163d\" data-hovercard=\"p$b$ebe3435306907836629420542504163d\">@主公</a> 的<a href=\"https://www.zhihu.com/question/49045531\" class=\"internal\">案件</a>不知道比这事严重到哪里去了，之前题主贴出的判决书显示法院没有采信阿里巴巴方面提出的题主旷工的证据，要求阿里巴巴支付违法解除合同期间的工资，要注意这个官司是在杭州打的，阿里巴巴输掉了官司，却拒绝执行。这完全符合马克思说的<b>敢践踏一切人间法律</b>。<b>也没见你们为他说几句话</b>。反倒在这种小问题上纠缠不清。<br><br>假如我记的没错的话，那个题主说过他被莫名其妙放假了一个星期，回来就被以旷工的理由开除了。其中一项证据是他在公司内部系统里连续XXX天没有任何活动。他怀疑是在放假期间被偷偷删除了。尽管最后没有采信这个证据。但是这一点，我还是建议你们要学习一个。<br><br>那个问题里，虽然题主已经语无伦次了。我想你去承受几个月来自阿里巴巴的道德批判，状态不会比那个题主更好。但是<a class=\"internal\" href=\"https://www.zhihu.com/question/49045531/answer/114240582\">知乎 - 与世界分享你的知识、经验和见解</a>里提到的那几个标签，一看就是对题主的人身攻击。你认为那是谁干的？问题又是被谁举报关闭的？",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样让非程序员理解用 js 抢月饼的性质有别于黑客攻击？",
            "updated_time": 1474284826,
            "question_type": "normal",
            "type": "question",
            "created": 1474045510,
            "url": "https://www.zhihu.com/api/v4/questions/50708291",
            "id": 50708291
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122502980",
        "thumbnail": "",
        "created_time": 1474176399,
        "excerpt": "你非要讲道德，那确实不对。因为这样的事已经发生了，他们永远都无法证明他们不是故意想让别人抢不到月饼。但是我认为他们主要还是做事太鲁莽，不知道按价值观行事。 什么是黑客攻击？你自己弄了个网站，但是做的非常烂，有人一秒钟打开了5个页面，你的网站就崩溃了，你可不可以说对方是黑客攻击呢？假如对方是故意想让你的网站崩溃，难道就不算黑客攻击吗？当然算了，必须算黑客攻击了。 拿起道德的大棒给对方泼脏水，就算对方…",
        "updated_time": 1474184081,
        "id": 122502980,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你非要讲道德，那确实不对。因为这样的事已经发生了，他们永远都无法证明他们不是故意想让别人抢不到月饼。但是我认为他们主要还是做事太鲁莽，不知道按价值观行事。<br><br>什么是黑客攻击？你自己弄了个网站，但是做的非常烂，有人一秒钟打开了5个页面，你的网站就崩溃了，你可不可以说对方是黑客攻击呢？假如对方是故意想让你的网站崩溃，难道就不算黑客攻击吗？当然算了，必须算黑客攻击了。<br><br>拿起道德的大棒给对方泼脏水，就算对方真的不是故意的，那也百口莫辩了。<br><br>所以被开除的这几个人还是太年轻。假如已经是身经百战了，就一定会先在内网发个贴，说找到了大家抢不到月饼的真正原因，办这个抢月饼活动的，故意留下后门想趁大家不注意多抢几个月饼，所以大家才抢不到月饼。再用价值观把他们批判一番。所有没抢到月饼的群情激愤，用口水就把他们淹死了。<br><br>发生了反应强烈的事，肯定是要开除人的。因为阿里巴巴就是这样<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/articles/how-alibaba-develop-and-motivate-talents\" target=\"_blank\" rel=\"nofollow noreferrer\">发展和激励人才的<i class=\"icon-external\"></i></a>，就是要不停的创造机会开除人，不然何年何月才能达到裁掉一半人的目标呢？<br><br>这回该开除谁了？谁才是真正的赢家？",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么人类所能想到的大反派都是要毁灭世界或者占有世界，没有别的可能吗？",
            "updated_time": 1474148232,
            "question_type": "normal",
            "type": "question",
            "created": 1474148232,
            "url": "https://www.zhihu.com/api/v4/questions/50736116",
            "id": 50736116
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122460591",
        "thumbnail": "",
        "created_time": 1474159662,
        "excerpt": "既然你誠心誠意的發問了 我們就大發慈悲的告訴你 為了防止世界被破壞 為了守護世界的和平 貫徹愛與真實的邪惡 可愛又迷人的反派角色 武藏！ 小次郎！ 我們是穿梭在銀河中的火箭隊 白洞、白色的明天正等著我們 就是這樣喵\n\n",
        "updated_time": 1474159662,
        "id": 122460591,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>既然你誠心誠意的發問了<br>我們就大發慈悲的告訴你<br>為了<b>防止世界被破壞</b><br>為了<b>守護世界的和平</b><br>貫徹愛與真實的邪惡<br>可愛又迷人的<b>反派</b>角色<br>武藏！<br>小次郎！<br>我們是穿梭在銀河中的火箭隊<br>白洞、白色的明天正等著我們<br>就是這樣喵\n\n</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "有哪些较好的 C 语言程序源码可供新手临摹参考？",
            "updated_time": 1422212077,
            "question_type": "normal",
            "type": "question",
            "created": 1421824531,
            "url": "https://www.zhihu.com/api/v4/questions/27705862",
            "id": 27705862
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122379245",
        "thumbnail": "",
        "created_time": 1474103056,
        "excerpt": "J语言解释器，里面一定要长这样 jsource/am.c at master · jsoftware/jsource · GitHub (逃",
        "updated_time": 1474103056,
        "id": 122379245,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "J语言解释器，里面一定要长这样<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/jsoftware/jsource/blob/master/jsrc/am.c\" target=\"_blank\" rel=\"nofollow noreferrer\"> jsource/am.c at master · jsoftware/jsource · GitHub<i class=\"icon-external\"></i></a> (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "编译速度最慢的是 C++ 吗？",
            "updated_time": 1474121713,
            "question_type": "normal",
            "type": "question",
            "created": 1474096593,
            "url": "https://www.zhihu.com/api/v4/questions/50719940",
            "id": 50719940
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122372141",
        "thumbnail": "",
        "created_time": 1474099822,
        "excerpt": "新一代霸主scala不服",
        "updated_time": 1474099835,
        "id": 122372141,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "新一代霸主scala不服",
        "extras": ""
    },
    {
        "question": {
            "title": "如何才能去阿里巴巴当HR？",
            "updated_time": 1473996493,
            "question_type": "normal",
            "type": "question",
            "created": 1473982200,
            "url": "https://www.zhihu.com/api/v4/questions/50682762",
            "id": 50682762
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122167358",
        "thumbnail": "",
        "created_time": 1473988137,
        "excerpt": "先要学会倒立。要不是我怎么都学不会，不然我早就去阿里巴巴了 (逃",
        "updated_time": 1473988137,
        "id": 122167358,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先要学会倒立。要不是我怎么都学不会，不然我早就去阿里巴巴了 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "作为阿里云的技术用户或潜在用户，你会不会因为月饼门重新考虑阿里云服务？",
            "updated_time": 1474039603,
            "question_type": "normal",
            "type": "question",
            "created": 1473909333,
            "url": "https://www.zhihu.com/api/v4/questions/50662428",
            "id": 50662428
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122119465",
        "thumbnail": "",
        "created_time": 1473948906,
        "excerpt": "从来就不考虑阿里云服务。因为阿里云根本就不懂云计算。 假如阿里云懂云计算，哪怕是要搞这么脑残的抢月饼活动 鼠标点点开个 秒杀服务，配置一下秒杀服务登陆方式为公司内部系统登陆方式，把<script src=\"xxxx\"></script> 贴到HTML里就完事了。这事HR自己就搞定了，哪里需要专门找人来开发。而且肯定也不会出现这么明显的问题。 毕竟阿里内部系统都已经先进到截图都能抓到是谁了，这点小问题会搞不定？不想搞而已",
        "updated_time": 1473949093,
        "id": 122119465,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "从来就不考虑阿里云服务。因为阿里云根本就不懂云计算。<br><br>假如阿里云懂云计算，哪怕是要搞这么脑残的抢月饼活动<br><br>鼠标点点开个 秒杀服务，配置一下秒杀服务登陆方式为公司内部系统登陆方式，把&lt;script src=\"xxxx\"&gt;&lt;/script&gt; 贴到HTML里就完事了。这事HR自己就搞定了，哪里需要专门找人来开发。而且肯定也不会出现这么明显的问题。<br><br>毕竟阿里内部系统都已经先进到截图都能抓到是谁了，这点小问题会搞不定？不想搞而已",
        "extras": ""
    },
    {
        "question": {
            "title": "阿里「月饼门」，如果你是CEO，认为应该怎样办？",
            "updated_time": 1474119712,
            "question_type": "normal",
            "type": "question",
            "created": 1473843441,
            "url": "https://www.zhihu.com/api/v4/questions/50645697",
            "id": 50645697
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/122100980",
        "thumbnail": "",
        "created_time": 1473940026,
        "excerpt": "以后就决定按此标准开除员工，让员工相互告发，先定一个小目标，开除一半员工，再谈谈为什么抢不到月饼的员工最幸福",
        "updated_time": 1473941456,
        "id": 122100980,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "以后就决定按此标准开除员工，让员工相互告发，先定一个小目标，开除一半员工，再谈谈为什么抢不到月饼的员工最幸福",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待王垠的《关于测试的道理》？",
            "updated_time": 1473912871,
            "question_type": "normal",
            "type": "question",
            "created": 1473852958,
            "url": "https://www.zhihu.com/api/v4/questions/50649324",
            "id": 50649324
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121981964",
        "thumbnail": "",
        "created_time": 1473857447,
        "excerpt": "王垠说的很有道理啊。所以我特别建议他收回这篇文章。 七岁小朋友问我，他把代码里的测试都删光，再运行一次PySonar，出来的结果会比有测试时少很多东西，说好的inference呢？ 真的是七岁小朋友告诉我的。我才不会去看什么PySonar，反正我也看不懂。",
        "updated_time": 1473857494,
        "id": 121981964,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "王垠说的很有道理啊。所以我特别建议他收回这篇文章。<br><br>七岁小朋友问我，他把代码里的测试都删光，再运行一次PySonar，出来的结果会比有测试时少很多东西，说好的inference呢？<br><br>真的是七岁小朋友告诉我的。我才不会去看什么PySonar，反正我也看不懂。",
        "extras": ""
    },
    {
        "question": {
            "title": "知乎为什么不支持搜索多个标签下的问题？",
            "updated_time": 1473845847,
            "question_type": "normal",
            "type": "question",
            "created": 1473842226,
            "url": "https://www.zhihu.com/api/v4/questions/50645085",
            "id": 50645085
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121959054",
        "thumbnail": "",
        "created_time": 1473845446,
        "excerpt": "因为知乎用的是MySQL。Postgresql有intarray，天生就可以支持这个查询。",
        "updated_time": 1473845446,
        "id": 121959054,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为知乎用的是MySQL。Postgresql有intarray，天生就可以支持这个查询。",
        "extras": ""
    },
    {
        "question": {
            "title": "deplorable 是什么意思，为什么有这么大的影响力和后果？",
            "updated_time": 1473839362,
            "question_type": "normal",
            "type": "question",
            "created": 1473834521,
            "url": "https://www.zhihu.com/api/v4/questions/50640795",
            "id": 50640795
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121947691",
        "thumbnail": "",
        "created_time": 1473841443,
        "excerpt": "我只知道deplore是谴责的意思。比如美国总统强烈谴责朝鲜第X次核试验。 deplorable是啥意思，你怎么不问问英语考147的曾老师呢？ 结果发现，Merriam-Webster都报道了，确实没什么人用这个词。 Clinton Says Half of Trump Supporters Are in a 'Basket of Deplorables' ",
        "updated_time": 1473842600,
        "id": 121947691,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我只知道deplore是谴责的意思。比如美国总统强烈谴责朝鲜第X次核试验。<br><br>deplorable是啥意思，你怎么不问问英语考147的曾老师呢？<br><br>结果发现，Merriam-Webster都报道了，确实没什么人用这个词。<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.merriam-webster.com/news-trend-watch/clinton-says-half-of-trump-supporters-are-in-a-basket-of-deplorables-20160910\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Clinton Says Half of Trump Supporters Are in a 'Basket of Deplorables'<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "在计算机软件大公司工作如何才能避免被裁员？",
            "updated_time": 1473817908,
            "question_type": "normal",
            "type": "question",
            "created": 1473817908,
            "url": "https://www.zhihu.com/api/v4/questions/50631986",
            "id": 50631986
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121905396",
        "thumbnail": "",
        "created_time": 1473825493,
        "excerpt": "所以成为网红还是很有必要的",
        "updated_time": 1473825493,
        "id": 121905396,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "所以成为网红还是很有必要的",
        "extras": ""
    },
    {
        "question": {
            "title": "有哪些高级的英语表达技巧，让人一听就感觉很地道？",
            "updated_time": 1428609704,
            "question_type": "normal",
            "type": "question",
            "created": 1405783652,
            "url": "https://www.zhihu.com/api/v4/questions/24544386",
            "id": 24544386
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121792259",
        "thumbnail": "",
        "created_time": 1473758391,
        "excerpt": "four score and seven beers ago",
        "updated_time": 1473758391,
        "id": 121792259,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "four score and seven beers ago",
        "extras": ""
    },
    {
        "question": {
            "title": "javascript算法题，26个字母和数字转换，怎么做？",
            "updated_time": 1473647994,
            "question_type": "normal",
            "type": "question",
            "created": 1473647994,
            "url": "https://www.zhihu.com/api/v4/questions/50569044",
            "id": 50569044
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121761908",
        "thumbnail": "",
        "created_time": 1473748872,
        "excerpt": "这题好难啊 convert=:a.{~65+(((26#~#@:[-0>])#:])(26&#.))@:(_1+(26&(#.^:_1)))\n convert 1\nA\n convert 2\nB\n convert 26\nZ\n convert 27\nAA\n convert 52\nAZ\n convert 53\nBA\n 我竟然用了64个字符才做出来",
        "updated_time": 1473748930,
        "id": 121761908,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这题好难啊<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   convert=:a.{~65+(((26#~#@:[-0&gt;])#:])(26&amp;#.))@:(_1+(26&amp;(#.^:_1)))\n   convert 1\nA\n   convert 2\nB\n   convert 26\nZ\n   convert 27\nAA\n   convert 52\nAZ\n   convert 53\nBA\n</code></pre></div><br>我竟然用了64个字符才做出来",
        "extras": ""
    },
    {
        "question": {
            "title": "本科数学硕士计算机真的比本硕都是计算机的大学生日后的建树更大吗？",
            "updated_time": 1473396743,
            "question_type": "normal",
            "type": "question",
            "created": 1473396743,
            "url": "https://www.zhihu.com/api/v4/questions/50487989",
            "id": 50487989
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121553773",
        "thumbnail": "",
        "created_time": 1473639850,
        "excerpt": "没错。假如是真数学系的(每道题哪怕是计算题都需要给出完整的形式证明的)，毕业当然能横扫一切Knuth, Dijkstra了",
        "updated_time": 1473639850,
        "id": 121553773,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没错。假如是真数学系的(每道题哪怕是计算题都需要给出完整的形式证明的)，毕业当然能横扫一切Knuth, Dijkstra了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待王垠的《微软感受》？",
            "updated_time": 1473760733,
            "question_type": "normal",
            "type": "question",
            "created": 1473556149,
            "url": "https://www.zhihu.com/api/v4/questions/50539172",
            "id": 50539172
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121552979",
        "thumbnail": "",
        "created_time": 1473639246,
        "excerpt": "一边不屑修bug，一边又说要重视细节，这很微软。",
        "updated_time": 1473639246,
        "id": 121552979,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "一边不屑修bug，一边又说要重视细节，这很微软。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么苹果官网直播支持 Edge 却不支持 Chrome？",
            "updated_time": 1473312002,
            "question_type": "normal",
            "type": "question",
            "created": 1473263128,
            "url": "https://www.zhihu.com/api/v4/questions/50442696",
            "id": 50442696
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/121222240",
        "thumbnail": "",
        "created_time": 1473413404,
        "excerpt": "不原生支持HLS的浏览器，用JavaScript把MPEG-TS那层剥掉就好了。这个苹果最了解了，毕竟这几个标准(mp4, hls等)基本上都是他家(参与)搞的。这明显是故意想让别的浏览器看不了啊。",
        "updated_time": 1473413490,
        "id": 121222240,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不原生支持HLS的浏览器，用JavaScript把MPEG-TS那层剥掉就好了。这个苹果最了解了，毕竟这几个标准(mp4, hls等)基本上都是他家(参与)搞的。这明显是故意想让别的浏览器看不了啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价基于 C++ 17 的框架 MCF？",
            "updated_time": 1473959329,
            "question_type": "normal",
            "type": "question",
            "created": 1472978207,
            "url": "https://www.zhihu.com/api/v4/questions/50332056",
            "id": 50332056
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/120472625",
        "thumbnail": "",
        "created_time": 1472982998,
        "excerpt": "那libstdc++呢?没吃饭给人一种有气无力的感觉",
        "updated_time": 1472982998,
        "id": 120472625,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "那libstdc++呢?没吃饭给人一种有气无力的感觉",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待Erjang作者坚称JVM比ErlangVM高效并且能替代它？",
            "updated_time": 1472274712,
            "question_type": "normal",
            "type": "question",
            "created": 1472240612,
            "url": "https://www.zhihu.com/api/v4/questions/50061080",
            "id": 50061080
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/119153154",
        "thumbnail": "",
        "created_time": 1472265979,
        "excerpt": "不服来跑分啊。(逃 用递归算法，譬如斐波那契数列来测试编程语言&VM执行效率是否可靠？为什么？ - 知乎用户的回答 ",
        "updated_time": 1472265979,
        "id": 119153154,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不服来跑分啊。(逃<br><br><a class=\"internal\" href=\"https://www.zhihu.com/question/37383404/answer/74794161\">用递归算法，譬如斐波那契数列来测试编程语言&amp;VM执行效率是否可靠？为什么？ - 知乎用户的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待@曹一聪《小米短信同步缺陷让父母银行卡被盗十万元》的文章？",
            "updated_time": 1471834372,
            "question_type": "normal",
            "type": "question",
            "created": 1471818283,
            "url": "https://www.zhihu.com/api/v4/questions/49872008",
            "id": 49872008
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/118324437",
        "thumbnail": "",
        "created_time": 1471872555,
        "excerpt": "安全是靠层层设防达到的，这样哪怕其中一层出了点问题，也不至于直接就崩溃了。软件都是很复杂的，按目前的情况，使用的人不了解底下的机制也是很正常的，特别是现在都喜欢把用户当白痴的产品设计，甩锅给使用的人是没有意义的。现在问题是没有一层是合格的。 小米当然是有责任的。 明文存隐私数据这明显是不合理的。而且可以直接用现成的代码，又不用你自己开发，比如之前Firefox的同步就是不用用户名和密码的，而是靠设备配对…",
        "updated_time": 1471921468,
        "id": 118324437,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "安全是靠层层设防达到的，这样哪怕其中一层出了点问题，也不至于直接就崩溃了。软件都是很复杂的，按目前的情况，使用的人不了解底下的机制也是很正常的，特别是现在都喜欢把用户当白痴的产品设计，甩锅给使用的人是没有意义的。现在问题是没有一层是合格的。<br><br>小米当然是有责任的。 明文存隐私数据这明显是不合理的。而且可以直接用现成的代码，又不用你自己开发，比如之前Firefox的同步就是不用用户名和密码的，而是靠设备配对的，Moziila面向用户的东西都是公开代码的，你直接拿来用就是了。通过现成的密码学方案，完全可以做到，用户必须主动授权另外一个设备同步，另外一个设备才能同步，不然即便复制了数据，也可以近似看成解不开(NSA还是可以解开的，这个你尽管放心)。为了更方便，比如有近场通信的，可以碰一碰就允许同步，但是必须要用户主动操作的。<br><br>我想银行也有责任啊。按NIST(美国)上个月最新规定，已经不允许用短信来验证了。银行不可能只在国内有业务吧，假如银行在多国开展业务，肯定只能按各国标准里面最高的来办吧，总不可能每到一个国家开展业务就专门搞一套软件吧。也就是银行已经不合规了。<br><br>当然这锅谷歌也要背。手机登录密码太弱，无法防止offline attack。假如手机丢了，存在keyring里的密码可以轻易暴破。不一定需要丢了，恶意程序万一读到密码文件，也就可以暴破了。按国内目前的形势，手机上装了几十个恶意程序也是很正常的。当然了，美国人不识字只能用弱密码也就算了。来中国推销Android，能不能允许我直接用中文当手机密码啊？比如我可以把密码设置成，“我们就大发慈悲的告诉你”，这样就比较安全了，也容易记。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么运维（SA）普遍反对使用 CentOS 7 ？",
            "updated_time": 1459239609,
            "question_type": "normal",
            "type": "question",
            "created": 1456371164,
            "url": "https://www.zhihu.com/api/v4/questions/40737404",
            "id": 40737404
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/118315788",
        "thumbnail": "",
        "created_time": 1471869276,
        "excerpt": "看来问题比较严重，建议贵司设立CUO(首席升级官)一职专门督办此事。",
        "updated_time": 1471869276,
        "id": 118315788,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看来问题比较严重，建议贵司设立CUO(首席升级官)一职专门督办此事。",
        "extras": ""
    },
    {
        "question": {
            "title": "Python 的 encode 和 decode 内部是如何实现的？",
            "updated_time": 1471699358,
            "question_type": "normal",
            "type": "question",
            "created": 1471677658,
            "url": "https://www.zhihu.com/api/v4/questions/49819555",
            "id": 49819555
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/118215223",
        "thumbnail": "",
        "created_time": 1471835526,
        "excerpt": "encodings里自己搞的吧，有好几个 _codecs_xxx.so 的",
        "updated_time": 1471835623,
        "id": 118215223,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "encodings里自己搞的吧，有好几个 _codecs_xxx.so 的",
        "extras": ""
    },
    {
        "question": {
            "title": "美国NSA方程式组织(Equation Group)爆出的事件，将会造成哪些影响？",
            "updated_time": 1471326095,
            "question_type": "normal",
            "type": "question",
            "created": 1471319283,
            "url": "https://www.zhihu.com/api/v4/questions/49658687",
            "id": 49658687
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/117177073",
        "thumbnail": "",
        "created_time": 1471338947,
        "excerpt": "恋爱中有哪些博弈？ - Justin Lee 的回答 ",
        "updated_time": 1471338947,
        "id": 117177073,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://www.zhihu.com/question/27355234/answer/117027811\" class=\"internal\">恋爱中有哪些博弈？ - Justin Lee 的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "图计算的bp算法怎么理解？",
            "updated_time": 1470545519,
            "question_type": "normal",
            "type": "question",
            "created": 1470545519,
            "url": "https://www.zhihu.com/api/v4/questions/49340326",
            "id": 49340326
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/116504196",
        "thumbnail": "",
        "created_time": 1471010079,
        "excerpt": "没必要去看这个代码的。你自己写就能写出来的。 先不管什么BP。先看求导公式。 automatic differentiation 在 如何直观的解释back propagation算法？ - 知乎用户的回答 ，我指出了和链式法则同样重要的是 ... 这样我们才可以用backpropagation 计算导数 变量之间依赖关系，天然是一个DAG 比如 求 \\frac{\\partial A}{\\partial B} ，按 前面AD 里的计算方式，递归展开变量的定义，直到是输入为止。你会发现，有很多分支的重点不是B，…",
        "updated_time": 1471010079,
        "id": 116504196,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没必要去看这个代码的。你自己写就能写出来的。<br><br>先不管什么BP。先看求导公式。<br><br><a href=\"https://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-tutorial/diff1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">automatic differentiation<i class=\"icon-external\"></i></a><br><br>在<a class=\"internal\" href=\"https://www.zhihu.com/question/27239198/answer/108981153\"> 如何直观的解释back propagation算法？ - 知乎用户的回答</a>，我指出了和链式法则同样重要的是 ...<br><br>这样我们才可以用<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-tutorial/diff2.html\" target=\"_blank\" rel=\"nofollow noreferrer\">backpropagation<i class=\"icon-external\"></i></a>计算导数<br><br>变量之间依赖关系，天然是一个DAG<br><br>比如 求 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+A%7D%7B%5Cpartial+B%7D\" alt=\"\\frac{\\partial A}{\\partial B}\" eeimg=\"1\"> ，按 前面AD 里的计算方式，递归展开变量的定义，直到是输入为止。你会发现，有很多分支的重点不是B，这些都是不需要算的。<br><br>所以，我们只需要知道B被哪些变量用到了，根据那些变量的导数乘好(前面提到的双目运算符导数拆开后的因子)之后加起来，就是 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+A%7D%7B%5Cpartial+B%7D\" alt=\"\\frac{\\partial A}{\\partial B}\" eeimg=\"1\"> 了<br><br>这样，我们只需要从A出发，递归展开变量的定义，比如<br><br><div class=\"highlight\"><pre><code class=\"language-text\">v3 = v1 + v2\nv4 = v3 * v2\n</code></pre></div><br>双目运算符记作 x f y，<br><br>我们要计算关于v4的导数<br><br>依赖关系可以表示成<br><br><div class=\"highlight\"><pre><code class=\"language-text\">v3 : (v4, x)\nv2 : (v3, y) (v4, y)\nv1 : (v3, x)\n</code></pre></div><br>因为 <br><br><img src=\"https://www.zhihu.com/equation?tex=Z+%3D+F+%5Ccdot+G+%26%2C%26+%5Cfrac%7B%5Cpartial+Z%7D%7B%5Cpartial+X%7D+%3D+G+%5Ccdot+%5Cfrac%7B%5Cpartial+F%7D%7B%5Cpartial+X%7D+%2B+F+%5Ccdot+%5Cfrac%7B%5Cpartial+G%7D%7B%5Cpartial+X%7D\" alt=\"Z = F \\cdot G &amp;,&amp; \\frac{\\partial Z}{\\partial X} = G \\cdot \\frac{\\partial F}{\\partial X} + F \\cdot \\frac{\\partial G}{\\partial X}\" eeimg=\"1\"><br><br><br>计算 (v4, x)<br><br>就是  v4 的导数， 乘以 左边那个因子，也就是 v2<br><br>这样就全算出来了",
        "extras": ""
    },
    {
        "question": {
            "title": "零基础学习OpenCL，有哪些好的建议？",
            "updated_time": 1469686248,
            "question_type": "normal",
            "type": "question",
            "created": 1469686248,
            "url": "https://www.zhihu.com/api/v4/questions/48984738",
            "id": 48984738
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/115404444",
        "thumbnail": "",
        "created_time": 1470498853,
        "excerpt": "我不会OpenCL啊。 我以为group_id local_id什么的就代表分块，kernel里就写最简单的 计算 就好了，然而别人的代码都不是这么写的，而是这样 for(;;){\n 复制到local\n barrier\n 计算\n barrier\n 复制到输出\n}\n 真心看不懂 GPU计算优化的原理是什么？ - GPU 通用计算 ",
        "updated_time": 1470536633,
        "id": 115404444,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我不会OpenCL啊。<br><br>我以为group_id local_id什么的就代表分块，kernel里就写最简单的 计算 就好了，然而别人的代码都不是这么写的，而是这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">for(;;){\n  复制到local\n  barrier\n  计算\n  barrier\n  复制到输出\n}\n</code></pre></div><br>真心看不懂<br><br><a class=\"internal\" href=\"https://www.zhihu.com/question/49313492\">GPU计算优化的原理是什么？ - GPU 通用计算</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "音乐人的梦想是什么？",
            "updated_time": 1470453693,
            "question_type": "normal",
            "type": "question",
            "created": 1470453192,
            "url": "https://www.zhihu.com/api/v4/questions/49305464",
            "id": 49305464
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/115289792",
        "thumbnail": "",
        "created_time": 1470454729,
        "excerpt": "音乐在自然界主要用于两种场合，一是求偶，二是宗教仪式，这个我五岁就知道了啊，naive。",
        "updated_time": 1470489355,
        "id": 115289792,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "音乐在自然界主要用于两种场合，一是求偶，二是宗教仪式，这个我五岁就知道了啊，naive。",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样才能抑制住膜拜轮子哥的情绪？",
            "updated_time": 1470277178,
            "question_type": "normal",
            "type": "question",
            "created": 1470277123,
            "url": "https://www.zhihu.com/api/v4/questions/49228870",
            "id": 49228870
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/115121977",
        "thumbnail": "",
        "created_time": 1470373672,
        "excerpt": "你们能好好答题么？为什么有些自称清华或者北大的，也许事实上也是，认真答题，写了一长串，有理有据，我却没有产生膜拜的情绪。为什么一看到轮子哥的答案，我就立即膜拜的五体投地。 所以，我要好好分析一下。比如为什么很多大学不准大一新生报四六级？ - vczh 的回答 \n是怕你们考不上，玷污了学校的名声。像我华南皇家理工大学，以前入学的时候会有一次英语测验，考的题目非常难。但是只要你拿到了好成绩，你就可以大一的时候…",
        "updated_time": 1470377376,
        "id": 115121977,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你们能好好答题么？为什么有些自称清华或者北大的，也许事实上也是，认真答题，写了一长串，有理有据，我却没有产生膜拜的情绪。为什么一看到轮子哥的答案，我就立即膜拜的五体投地。<br><br>所以，我要好好分析一下。比如<a class=\"internal\" href=\"https://www.zhihu.com/question/47821503/answer/107861864\">为什么很多大学不准大一新生报四六级？ - vczh 的回答</a><br><br><blockquote>\n是怕你们考不上，玷污了学校的名声。像我华南皇家理工大学，以前入学的时候会有一次英语测验，<b>考的题目非常难</b>。但是只要你拿到了好成绩，你就可以大一的时候报四六级没人管。</blockquote><br>看了这个我就想啊，一定是轮子哥英语水平非常好，可以轻松通过非常难的考试，他英语为什么会这么好，我怎么才能向他学习一个呢。所以注意力就转移到了轮子哥身上，而不是具体问题上。<br><br>又比如<a href=\"https://www.zhihu.com/question/49197504/answer/114761178\" class=\"internal\">技术人员如何保证自己不会随着技术发展和消失而被抛弃？ - vczh 的回答</a><br><br><blockquote>好好学习和研究基础知识，不要总是把目光放在工具和API上面，那么你的知识就<b>永远都不会过时</b>。</blockquote><br>于是我就想啊，轮子哥一定是掌握了什么永不过时的知识，才会这么说，他为什么会这么厉害，我要学习学习。你看注意力再次被转移到轮子哥为什么这么厉害上。<br><br>这里有两点，一是要有比较，比如难vs简单，会过时vs不会过时，第二不要直接说谁和谁比，而是要借助看上去客观的第三方，把及格线划到自己后面去。<br><br>比如我现在立即来学习一个，轮子哥英语非常好，都觉得六级考试难，他考了两次都没过，我第一次考就考砸了，不敢再去考第二次了，你们不要来黑我，很惭愧，只得了五百八十几分。",
        "extras": ""
    },
    {
        "question": {
            "title": "linux下进程间通信性能调优怎么进行？",
            "updated_time": 1470280458,
            "question_type": "normal",
            "type": "question",
            "created": 1470228591,
            "url": "https://www.zhihu.com/api/v4/questions/49213218",
            "id": 49213218
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/114842392",
        "thumbnail": "",
        "created_time": 1470237271,
        "excerpt": "你这种情况用个锁就够了，难道你觉得futex不行，还是走什么unix socket快? 正常都是原子操作，只有在空或者满的时候用锁去等啊",
        "updated_time": 1470238555,
        "id": 114842392,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这种情况用个锁就够了，难道你觉得futex不行，还是走什么unix socket快?<br><br>正常都是原子操作，只有在空或者满的时候用锁去等啊",
        "extras": ""
    },
    {
        "question": {
            "title": "TCP 为什么是三次握手，为什么不是两次或四次？",
            "updated_time": 1470309935,
            "question_type": "normal",
            "type": "question",
            "created": 1408023494,
            "url": "https://www.zhihu.com/api/v4/questions/24853633",
            "id": 24853633
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/114728550",
        "thumbnail": "",
        "created_time": 1470199868,
        "excerpt": "这样才能有SYN flood啊",
        "updated_time": 1470199868,
        "id": 114728550,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这样才能有SYN flood啊",
        "extras": ""
    },
    {
        "question": {
            "title": "i18n 和 L10n有什么区别？",
            "updated_time": 1469968792,
            "question_type": "normal",
            "type": "question",
            "created": 1469968792,
            "url": "https://www.zhihu.com/api/v4/questions/49099135",
            "id": 49099135
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/114531781",
        "thumbnail": "",
        "created_time": 1470111297,
        "excerpt": "i18n是把$翻译成美元 l10n是接受人民币支付",
        "updated_time": 1470111297,
        "id": 114531781,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "i18n是把$翻译成美元<br><br>l10n是接受人民币支付",
        "extras": ""
    },
    {
        "question": {
            "title": "红黑树的删除疑问？",
            "updated_time": 1462286374,
            "question_type": "normal",
            "type": "question",
            "created": 1461766452,
            "url": "https://www.zhihu.com/api/v4/questions/44730529",
            "id": 44730529
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/114149563",
        "thumbnail": "",
        "created_time": 1469930481,
        "excerpt": "推荐 Missing method: How to delete from Okasaki's red-black trees 因为这个图多",
        "updated_time": 1469930481,
        "id": 114149563,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "推荐<a href=\"https://link.zhihu.com/?target=http%3A//matt.might.net/articles/red-black-delete/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Missing method: How to delete from Okasaki's red-black trees<i class=\"icon-external\"></i></a><br><br>因为这个图多",
        "extras": ""
    },
    {
        "question": {
            "title": "leveldb中atomic_pointer里面memory barrier的几点疑问？",
            "updated_time": 1470039937,
            "question_type": "normal",
            "type": "question",
            "created": 1469801263,
            "url": "https://www.zhihu.com/api/v4/questions/49039919",
            "id": 49039919
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/113939908",
        "thumbnail": "",
        "created_time": 1469806121,
        "excerpt": "gcc - difference in mfence and asm volatile (\"\" : : : \"memory\") ",
        "updated_time": 1469806121,
        "id": 113939908,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/12183311/difference-in-mfence-and-asm-volatile-memory\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gcc - difference in mfence and asm volatile (\"\" : : : \"memory\")<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待央行发行基于区块链的法定数字货币？",
            "updated_time": 1486222154,
            "question_type": "normal",
            "type": "question",
            "created": 1486222154,
            "url": "https://www.zhihu.com/api/v4/questions/55418262",
            "id": 55418262
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144590519",
        "thumbnail": "",
        "created_time": 1486289198,
        "excerpt": "big brother is watching you",
        "updated_time": 1486289198,
        "id": 144590519,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "big brother is watching you",
        "extras": ""
    },
    {
        "question": {
            "title": "有哪些计算机语言是由华人主导或参与设计的？",
            "updated_time": 1472469178,
            "question_type": "normal",
            "type": "question",
            "created": 1472469000,
            "url": "https://www.zhihu.com/api/v4/questions/50142171",
            "id": 50142171
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144590116",
        "thumbnail": "",
        "created_time": 1486289031,
        "excerpt": "竟然没人提Roger Hui，J语言可是第0代中文编程语言",
        "updated_time": 1486289085,
        "id": 144590116,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "竟然没人提Roger Hui，J语言可是第0代中文编程语言",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么立党对自己智商这么自信？",
            "updated_time": 1486187541,
            "question_type": "normal",
            "type": "question",
            "created": 1486186865,
            "url": "https://www.zhihu.com/api/v4/questions/55395911",
            "id": 55395911
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144563504",
        "thumbnail": "",
        "created_time": 1486279182,
        "excerpt": "这个问题是我问的。怎么还要邀请我来回答啊。 我只能说毕竟立党是成功人士。成功人士成天比来比去，生怕学历不如别人，智商测出来比人低，这是为了啥？因为成功人士就是靠学历，智商什么来让你接受他们的忽悠的。为什么人们常说智商税？就是因为智商的概念比引力波面膜先发明，不然就该叫引力波税了。立党比一般意义上的成功人士还要成功，在他的努力下，不仅成功是要有资格的，连失败，朋克都是要有资格的。 然而弱智的我，当年…",
        "updated_time": 1486279183,
        "id": 144563504,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个问题是我问的。怎么还要邀请我来回答啊。<br><br>我只能说毕竟立党是成功人士。成功人士成天比来比去，生怕学历不如别人，智商测出来比人低，这是为了啥？因为成功人士就是靠学历，智商什么来让你接受他们的忽悠的。为什么人们常说智商税？就是因为智商的概念比引力波面膜先发明，不然就该叫引力波税了。立党比一般意义上的成功人士还要成功，在他的努力下，不仅成功是要有资格的，连失败，朋克都是要有资格的。<br><br>然而弱智的我，当年偷看到的记录，差不多所有正常智商范围内的，备注里不是写着哭闹就是写着说自己是被骗来的，其他的普遍都不超过70，备注里倒是没写啥，想必都是挺配合的。由此不难得出，我的智商绝对是到不了70的。然而，医生却敢在那里说我的智商属于正常范围不必担心，而我妈竟然敢相信医生对结论深信不疑，想来这就是所谓的被收了智商税吧。所谓的智商，也许指的就是能看出别人在完全没必要撒谎的地方撒了谎吧。如此看来，成功人士的确是挺不容易的。",
        "extras": ""
    },
    {
        "question": {
            "title": "现在新事物越来越多，汉字是否应该加字加偏旁部首了？",
            "updated_time": 1487559768,
            "question_type": "normal",
            "type": "question",
            "created": 1481081522,
            "url": "https://www.zhihu.com/api/v4/questions/53380048",
            "id": 53380048
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144447983",
        "thumbnail": "",
        "created_time": 1486216726,
        "excerpt": "按目前的情况，还是先尽量不要造新的字。而是用unicode的IDS来组字。 至于外来词的问题，我认为最好从源头上去解决，成立一个汉字标准委员会，字只规定意思，不规定读音，避免不同语言都用汉字写之后，同一个组合去承担不同的意思。参考 知乎专栏 看上去万事俱备，只差一个字组出来不太难看的组字程序了",
        "updated_time": 1486217484,
        "id": 144447983,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "按目前的情况，还是先尽量不要造新的字。而是用unicode的IDS来组字。<br><br>至于外来词的问题，我认为最好从源头上去解决，成立一个汉字标准委员会，字只规定意思，不规定读音，避免不同语言都用汉字写之后，同一个组合去承担不同的意思。参考<a href=\"https://zhuanlan.zhihu.com/p/25084647\" class=\"internal\"> 知乎专栏</a><br><br>看上去万事俱备，只差一个字组出来不太难看的组字程序了",
        "extras": ""
    },
    {
        "question": {
            "title": "什么是函数式编程, 函数式编程语言的必要特性有哪些？",
            "updated_time": 1486903186,
            "question_type": "normal",
            "type": "question",
            "created": 1486088317,
            "url": "https://www.zhihu.com/api/v4/questions/55350871",
            "id": 55350871
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144375063",
        "thumbnail": "",
        "created_time": 1486191865,
        "excerpt": "对于Haskell来说，自从有了 (.) . (.) 形式就可以说是函数式了",
        "updated_time": 1486191887,
        "id": 144375063,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "对于Haskell来说，自从有了 (.) . (.) 形式就可以说是函数式了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待福岛核电站二号机组近日被发现压力容器已被烧穿？",
            "updated_time": 1486183377,
            "question_type": "normal",
            "type": "question",
            "created": 1486091981,
            "url": "https://www.zhihu.com/api/v4/questions/55352779",
            "id": 55352779
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/144367678",
        "thumbnail": "",
        "created_time": 1486189617,
        "excerpt": "这锅阿童木背么？",
        "updated_time": 1486194762,
        "id": 144367678,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这锅阿童木背么？",
        "extras": ""
    },
    {
        "question": {
            "title": "智商140+是一种怎么样的体验？",
            "updated_time": 1486228558,
            "question_type": "normal",
            "type": "question",
            "created": 1413261537,
            "url": "https://www.zhihu.com/api/v4/questions/26024354",
            "id": 26024354
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144351742",
        "thumbnail": "",
        "created_time": 1486184043,
        "excerpt": "支持 @立党 。一般学校老师认为学生特别笨，都会建议去专业医院测试一下智商，看看是不是真的弱智。作为弱智，我也被骗去过，完全搞不懂他们这是什么鬼题目，还有这个要求那个要求，超级麻烦，题目不长，还要给你解释半天，做了没几题就不想继续做了。不过，我顺便偷看了一下那里的记录，就没有能答完所有题的，且不论对不对，用时多少，大部分连一小半都没答到，也就是几乎全是弱智(总分200，70以下好像就是弱智了吧？)。顿时觉…",
        "updated_time": 1486188925,
        "id": 144351742,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "支持 <a data-hash=\"b6f0c45a4d0dc84f228977e0d70bd700\" href=\"https://www.zhihu.com/people/b6f0c45a4d0dc84f228977e0d70bd700\" class=\"member_mention\" data-hovercard=\"p$b$b6f0c45a4d0dc84f228977e0d70bd700\">@立党</a> 。一般学校老师认为学生特别笨，都会建议去专业医院测试一下智商，看看是不是真的弱智。作为弱智，我也被骗去过，完全搞不懂他们这是什么鬼题目，还有这个要求那个要求，超级麻烦，题目不长，还要给你解释半天，做了没几题就不想继续做了。不过，我顺便偷看了一下那里的记录，就没有能答完所有题的，且不论对不对，用时多少，大部分连一小半都没答到，也就是几乎全是弱智(总分200，70以下好像就是弱智了吧？)。顿时觉得弱智才是正常的 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "将滕王阁序作为勃学经典是否合适？",
            "updated_time": 1486104317,
            "question_type": "normal",
            "type": "question",
            "created": 1486104317,
            "url": "https://www.zhihu.com/api/v4/questions/55359414",
            "id": 55359414
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144225781",
        "thumbnail": "",
        "created_time": 1486120030,
        "excerpt": "很合适，不坠青云之志，充分体现了嘴上说的是失败，心里想的还是成功的心态",
        "updated_time": 1486120042,
        "id": 144225781,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "很合适，不坠青云之志，充分体现了嘴上说的是失败，心里想的还是成功的心态",
        "extras": ""
    },
    {
        "question": {
            "title": "Vue 中如何使用 MutationObserver 做批量处理？",
            "updated_time": 1486116748,
            "question_type": "normal",
            "type": "question",
            "created": 1486112167,
            "url": "https://www.zhihu.com/api/v4/questions/55364497",
            "id": 55364497
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/144218031",
        "thumbnail": "",
        "created_time": 1486117105,
        "excerpt": "为了避免主动触发reflow，所以才要把所有修改一次完成，vue.js采用的是主流的requestanimationframe方案。至于，MutationObserver，只是改变DOM树就会触发回调了吧，这个真的能保证是在reflow之后才调用吗？",
        "updated_time": 1486229751,
        "id": 144218031,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "为了避免主动触发reflow，所以才要把所有修改一次完成，vue.js采用的是主流的requestanimationframe方案。至于，MutationObserver，只是改变DOM树就会触发回调了吧，这个真的能保证是在reflow之后才调用吗？",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么业内不流行基于移动端的Web APP去使用H5整站 canvas技术？",
            "updated_time": 1486109520,
            "question_type": "normal",
            "type": "question",
            "created": 1486100149,
            "url": "https://www.zhihu.com/api/v4/questions/55357068",
            "id": 55357068
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144211643",
        "thumbnail": "",
        "created_time": 1486114772,
        "excerpt": "字体根本不受控制啊，画出来的字根本不能看",
        "updated_time": 1486114793,
        "id": 144211643,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "字体根本不受控制啊，画出来的字根本不能看",
        "extras": ""
    },
    {
        "question": {
            "title": "如果5周岁儿童自学完小学数学，接下来该学什么好？",
            "updated_time": 1486051396,
            "question_type": "normal",
            "type": "question",
            "created": 1486051396,
            "url": "https://www.zhihu.com/api/v4/questions/55343678",
            "id": 55343678
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144185968",
        "thumbnail": "",
        "created_time": 1486106361,
        "excerpt": "当然是Principia Mathematica，小朋友看了都说好",
        "updated_time": 1486106362,
        "id": 144185968,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是Principia Mathematica，小朋友看了都说好",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待葛巾支持「占卜算命应有垂直专属问答平台」等观点？",
            "updated_time": 1486109820,
            "question_type": "normal",
            "type": "question",
            "created": 1485577459,
            "url": "https://www.zhihu.com/api/v4/questions/55181445",
            "id": 55181445
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144148892",
        "thumbnail": "",
        "created_time": 1486093534,
        "excerpt": "毕竟成功人士。葛巾这种一看就是成功人士，竟然还有人去关注，也是醉了。 现代占卜学的开山之作是Kolmogorov的Foundations of the Theory of Probability，你不给小朋友推荐看这个，而去教小朋友学什么传统占卜，失败人士当然会认为你是误人子弟了。我认为知乎即便再成功，也不会封杀现代占卜学的内容。假如你不以现代占卜学去阐释传统占卜，虽然我不支持删除，但是被删了也没啥可惜的吧。",
        "updated_time": 1486094737,
        "id": 144148892,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "毕竟成功人士。葛巾这种一看就是成功人士，竟然还有人去关注，也是醉了。<br><br>现代占卜学的开山之作是Kolmogorov的Foundations of the Theory of Probability，你不给小朋友推荐看这个，而去教小朋友学什么传统占卜，失败人士当然会认为你是误人子弟了。我认为知乎即便再成功，也不会封杀现代占卜学的内容。假如你不以现代占卜学去阐释传统占卜，虽然我不支持删除，但是被删了也没啥可惜的吧。",
        "extras": ""
    },
    {
        "question": {
            "title": "中文那么博大精深,为什么翻译一些技术书籍会被很多技术人员吐槽，劝导初学者看英文版？",
            "updated_time": 1486035182,
            "question_type": "normal",
            "type": "question",
            "created": 1486032452,
            "url": "https://www.zhihu.com/api/v4/questions/55332433",
            "id": 55332433
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144061713",
        "thumbnail": "",
        "created_time": 1486044337,
        "excerpt": "翻译超级花时间，出版社应该是等不了那么久的，他们巴不得你一天能翻译一章。你自己去试试知道了。 英文文章看上去可以接受，只要不是特别口语化的文字，你要是直接写成中文，往往会立即暴露出其既不通顺也不连贯的本质。仅仅是把原文写成通顺连贯的中文就很花时间了，很多术语，你也不好自己喜欢哪个就用哪个，而是应该哪个翻译流行你就得用哪个，还有很多介于术语和一般名词之间的，特别头疼，不当术语也许可以把句子理的很顺…",
        "updated_time": 1486045600,
        "id": 144061713,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "翻译超级花时间，出版社应该是等不了那么久的，他们巴不得你一天能翻译一章。你自己去试试知道了。<br><br>英文文章看上去可以接受，只要不是特别口语化的文字，你要是直接写成中文，往往会立即暴露出其既不通顺也不连贯的本质。仅仅是把原文写成通顺连贯的中文就很花时间了，很多术语，你也不好自己喜欢哪个就用哪个，而是应该哪个翻译流行你就得用哪个，还有很多介于术语和一般名词之间的，特别头疼，不当术语也许可以把句子理的很顺，当术语看待也当术语看待的好处。反反复复来回改，还要考证这个那个，一天能翻译一页英文就非常不错了，出来可能就只有三五行字啊 ... 自己都能体会到这进度太慢了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何深入了解python原理？",
            "updated_time": 1486133090,
            "question_type": "normal",
            "type": "question",
            "created": 1486021105,
            "url": "https://www.zhihu.com/api/v4/questions/55327073",
            "id": 55327073
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144050886",
        "thumbnail": "",
        "created_time": 1486040917,
        "excerpt": "这种脑残文理会他们干什么。以前是喷精通，现在是连会都不让说了啊。职位要求里写着要会Python，难道我简历里应该写不会，我是不是傻？ 按他们的思路延伸下去，估计不知道怎么用END_FINALLY实现GOSUB，都是Python新手。不过，要是真的都像他们说的这样，不能说都不好，也有一个好的，比如C++就没人敢用了。所以，他们仅仅是嘴巴上说说而已，不过是把及格线紧紧划在自己身后，怒斥不如自己的都是新手。毕竟能问出这么烂的问题的，…",
        "updated_time": 1486044275,
        "id": 144050886,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这种脑残文理会他们干什么。以前是喷精通，现在是连会都不让说了啊。职位要求里写着要会Python，难道我简历里应该写不会，我是不是傻？<br><br>按他们的思路延伸下去，估计不知道怎么用END_FINALLY实现GOSUB，都是Python新手。不过，要是真的都像他们说的这样，不能说都不好，也有一个好的，比如C++就没人敢用了。所以，他们仅仅是嘴巴上说说而已，不过是把及格线紧紧划在自己身后，怒斥不如自己的都是新手。毕竟能问出这么烂的问题的，肯定也是水货。slice可不一定会copy，不信去看NumPy。<br><br>然而可悲的现实是，当下就是这种成功人士当道，整天就会吹嘘自己知道这个，知道那个，往往还只知道其一，不知道其二，然而很多公司就喜欢追捧这样的成功人士。写程序，不是看你知道的多，知道的少，是看你程序能不能写出来啊。有些东西，不知道又怎么了，比如你的程序从来就不需要修改传进来的参数，不知道9，怎么了？<br><br>程序都写不出来，知道的再多有啥用，所谓的运行效率高有啥用，程序没写出来，你优化的再好，速度也是0啊。既然说实话，大家都不能保证100%比随便挑出来的一位七岁小朋友先把程序写出来，何苦相互为难呢？",
        "extras": ""
    },
    {
        "question": {
            "title": "计算机科学有什么凄美的故事？",
            "updated_time": 1485404817,
            "question_type": "normal",
            "type": "question",
            "created": 1485404564,
            "url": "https://www.zhihu.com/api/v4/questions/55138039",
            "id": 55138039
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144045483",
        "thumbnail": "",
        "created_time": 1486039035,
        "excerpt": "Iverson's Better Math改名APL (逃",
        "updated_time": 1486039036,
        "id": 144045483,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Iverson's Better Math改名APL (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "加州大学伯克利分校2017年2月1日的骚乱活动究竟是怎样的情况？",
            "updated_time": 1486085472,
            "question_type": "normal",
            "type": "question",
            "created": 1486007541,
            "url": "https://www.zhihu.com/api/v4/questions/55320845",
            "id": 55320845
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/144028290",
        "thumbnail": "",
        "created_time": 1486032711,
        "excerpt": "UCB高才生曾博都还没表态呢",
        "updated_time": 1486099175,
        "id": 144028290,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "UCB高才生曾博都还没表态呢",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 C++ 11 auto 关键字？",
            "updated_time": 1442135335,
            "question_type": "normal",
            "type": "question",
            "created": 1441868986,
            "url": "https://www.zhihu.com/api/v4/questions/35517805",
            "id": 35517805
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144023129",
        "thumbnail": "",
        "created_time": 1486030678,
        "excerpt": "auto让Stateful Metaprogramming上了一个台阶。本来只能记数的，有了auto就立即可以记类型了。 没有auto，你在一个函数中调用了一个模板函数，一般来说编译器会等当前函数实例化完成之后再去实例化被调用的函数。有了auto，我们就可以强迫编译器在看到这个调用时，立刻去实例化被调用的函数。这样就可以大大简化borrow checker的实现了 (逃",
        "updated_time": 1486034950,
        "id": 144023129,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "auto让Stateful Metaprogramming上了一个台阶。本来只能记数的，有了auto就立即可以记类型了。<br><br>没有auto，你在一个函数中调用了一个模板函数，一般来说编译器会等当前函数实例化完成之后再去实例化被调用的函数。有了auto，我们就可以强迫编译器在看到这个调用时，立刻去实例化被调用的函数。这样就可以大大简化borrow checker的实现了 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "请问如何看待知乎答案日渐水平低下，没有水平准入条件？",
            "updated_time": 1486026982,
            "question_type": "normal",
            "type": "question",
            "created": 1486026982,
            "url": "https://www.zhihu.com/api/v4/questions/55329959",
            "id": 55329959
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144015631",
        "thumbnail": "",
        "created_time": 1486027748,
        "excerpt": "设立准入制度？那你还能看到任何反对？",
        "updated_time": 1486027749,
        "id": 144015631,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "设立准入制度？那你还能看到任何反对？",
        "extras": ""
    },
    {
        "question": {
            "title": "自学真的能系统地学会很多东西吗？",
            "updated_time": 1486020013,
            "question_type": "normal",
            "type": "question",
            "created": 1485268078,
            "url": "https://www.zhihu.com/api/v4/questions/55098794",
            "id": 55098794
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/144001542",
        "thumbnail": "",
        "created_time": 1486022306,
        "excerpt": "当然是不能啦。从来就没有什么能让你系统的学会很多东西。",
        "updated_time": 1486022307,
        "id": 144001542,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是不能啦。从来就没有什么能让你<b>系统</b>的学会很多东西。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价外交部新闻发言人陆慷的英语水平？",
            "updated_time": 1485864731,
            "question_type": "normal",
            "type": "question",
            "created": 1485750180,
            "url": "https://www.zhihu.com/api/v4/questions/55232401",
            "id": 55232401
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143994843",
        "thumbnail": "",
        "created_time": 1486019465,
        "excerpt": "不知道为什么高票答案吹捧外交部翻译室。外交部发言人的英语水平和外交部翻译室有半毛钱关系。外交部翻译室，上次都出了把任性翻译成capricious这种事故，还能在媒体上强吹任性姐，不信你搜一下新闻，当时确实有正面报道的。感觉国内这些翻译英语都是跟希拉里学的，翻译几句大白话都能给你甩几个比较生僻或者过于正式的词出来。比如，make ____ great again 都能给翻译成 rejuvenation 。这还不如发言人自己上。",
        "updated_time": 1486022483,
        "id": 143994843,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不知道为什么高票答案吹捧外交部翻译室。外交部发言人的英语水平和外交部翻译室有半毛钱关系。外交部翻译室，上次都出了把任性翻译成capricious这种事故，还能在媒体上强吹任性姐，不信你搜一下新闻，当时确实有正面报道的。感觉国内这些翻译英语都是跟希拉里学的，翻译几句大白话都能给你甩几个比较生僻或者过于正式的词出来。比如，make ____ great again 都能给翻译成 rejuvenation 。这还不如发言人自己上。",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样看待曾老师曾经参加「九言」这样的变现活动？",
            "updated_time": 1469934317,
            "question_type": "normal",
            "type": "question",
            "created": 1469706959,
            "url": "https://www.zhihu.com/api/v4/questions/48998826",
            "id": 48998826
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/113831226",
        "thumbnail": "",
        "created_time": 1469769593,
        "excerpt": "赚钱不可耻，可耻的是没赚到钱。曾老师至少搞了两次吧，一次是给九言打广告，一次是给某留学中介打广告，都没搞到几个钱。他就是眼红别人当网红赚的比他多。可是别人当网红都是互相捧臭脚的，哪有曾老师这样互相拆台，动不动就被禁言了的，这样当网红能赚到钱就有鬼了。偏偏曾老师就认为他把这些网红都黑一遍，他就能赚的比他们加起来都多了。 我建议曾老师好好向实力派网红学习一个 陈天同学和我在知乎上相识，后来线下交流过几…",
        "updated_time": 1469798325,
        "id": 113831226,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "赚钱不可耻，可耻的是没赚到钱。曾老师至少搞了两次吧，一次是给九言打广告，一次是给某留学中介打广告，都没搞到几个钱。他就是眼红别人当网红赚的比他多。可是别人当网红都是互相捧臭脚的，哪有曾老师这样互相拆台，动不动就被禁言了的，这样当网红能赚到钱就有鬼了。偏偏曾老师就认为他把这些网红都黑一遍，他就能赚的比他们加起来都多了。<br><br>我建议曾老师好好向实力派网红学习一个<br><br><blockquote>陈天同学和我在知乎上相识，后来线下交流过几次。我们俩背景很<b>相似</b>，<b>都</b>是技术出身，也<b>都</b>喜欢写blog来讨论技术和职业发展。天哥先拿了创新工场的投资开始创业做在线旅游，而我则刚刚加入Facebook进行例行工作。而后创业结束的他，回到Juniper并且随之transfer到美国，并且<b>直接</b>通过高级人才引进的渠道<b>直接</b>拿到绿卡，<b>非常</b>厉害。天哥的这篇“软件开发模式”我看了之后非常喜欢，所以这里推荐给大家，<br><br>作者：覃超<br>链接：<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20941886\">「漫谈技术」需要注意的软件开发模式 - 覃超帝国兴亡史 - 跨越美利坚&amp;技术精进之路 - 知乎专栏</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 Uber 从 PostgreSQL 改为 MySQL？",
            "updated_time": 1469607480,
            "question_type": "normal",
            "type": "question",
            "created": 1469598618,
            "url": "https://www.zhihu.com/api/v4/questions/48945137",
            "id": 48945137
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/113734542",
        "thumbnail": "",
        "created_time": 1469716913,
        "excerpt": "Uber之前就换过啊 Migrating Uber from MySQL to PostgreSQL ",
        "updated_time": 1469754673,
        "id": 113734542,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Uber之前就换过啊<a href=\"https://link.zhihu.com/?target=https%3A//www.yumpu.com/en/document/view/53683323/migrating-uber-from-mysql-to-postgresql\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Migrating Uber from MySQL to PostgreSQL<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么知乎还不永封假的大勃勃？",
            "updated_time": 1484558954,
            "question_type": "normal",
            "type": "question",
            "created": 1469290231,
            "url": "https://www.zhihu.com/api/v4/questions/48821389",
            "id": 48821389
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/112882234",
        "thumbnail": "",
        "created_time": 1469347381,
        "excerpt": "浙大，我对不起你 - 知乎书馆 - 知乎专栏 看上去又通过立党认证了，不知道是咋回事。当然不排除是立党客串的",
        "updated_time": 1469347381,
        "id": 112882234,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://zhuanlan.zhihu.com/p/21703202\" class=\"internal\">浙大，我对不起你 - 知乎书馆 - 知乎专栏</a><br><br>看上去又通过立党认证了，不知道是咋回事。当然不排除是立党客串的",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样看待b大巅峰之作『LiFT深度学习框架』无人问津？",
            "updated_time": 1469415625,
            "question_type": "normal",
            "type": "question",
            "created": 1469334694,
            "url": "https://www.zhihu.com/api/v4/questions/48832018",
            "id": 48832018
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/112855042",
        "thumbnail": "",
        "created_time": 1469336191,
        "excerpt": "你这黑的。只有许式伟才会说什么巅峰之作吧。 ----------------------------- 理念再好，没有跑分的数字很难宣传啊。毕竟porn也是很重要的。 而LiFT还没能跑分是因为integer set library优化的速度很慢很慢，在抄袭了ppcg的默认参数之后还是很慢，要想调isl的参数不容易啊。 就来看一个简单的convolution Input :: (in 24 24)\nK1 :: (in 8 5 5)\nB1 :: (in 8)\nPool1 :: (out 8 10 10)\n\nrelu\"0 := (0.0 >. y)\nratio\"1 := (y / ((re…",
        "updated_time": 1470055655,
        "id": 112855042,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这黑的。只有许式伟才会说什么巅峰之作吧。<br><br>-----------------------------<br><br>理念再好，没有跑分的数字很难宣传啊。毕竟porn也是很重要的。<br><br>而LiFT还没能跑分是因为integer set library优化的速度很慢很慢，在抄袭了ppcg的默认参数之后还是很慢，要想调isl的参数不容易啊。<br><br>就来看一个简单的convolution<br><br><div class=\"highlight\"><pre><code class=\"language-text\">Input :: (in 24 24)\nK1 :: (in 8 5 5)\nB1 :: (in 8)\nPool1 :: (out 8 10 10)\n\nrelu\"0 := (0.0 &gt;. y)\nratio\"1 := (y / ((reduce 1 +) y))\n\nConv1 := ((((trim 4 4)\"2) (((oblique 2 +)\"4) (K1 ((*\"2 0)\"2 2) Input))) + B1)\n\nRelu1 := (relu Conv1)\nPool1 := (((stride 2 2)\"2) (((trim 1 1)\"2) (((oblique 2 &gt;.)\"4) (((duplicate 2 2)\"0) Relu1))))\n</code></pre></div><br>采用了ppcg的默认参数之后，那个schedule在分块之前直接生成AST会变成这样<br><br><div class=\"highlight\"><pre><code class=\"language-c\">  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">23</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">23</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">S22</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c4</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n          <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c5</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c5</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">S26</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"n\">c4</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c3</span> <span class=\"o\">+</span> <span class=\"n\">c5</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">,</span> <span class=\"n\">c5</span><span class=\"p\">);</span>\n        <span class=\"n\">S24</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c3</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n        <span class=\"n\">S25</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">19</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">19</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">+=</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">S16</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c4</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n          <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c5</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">c5</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">S28</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"n\">c4</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c3</span> <span class=\"o\">+</span> <span class=\"n\">c5</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">,</span> <span class=\"n\">c5</span><span class=\"p\">);</span>\n        <span class=\"n\">S18</span><span class=\"p\">(</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n</code></pre></div><br>这就有了一个问题，convolution和max pooling分开了，也就是和再快也快不过CuDNN了，这是不可接受的。<br><br>使用更合适的参数优化，生成出来的AST是这样的<br><br><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c0</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">;</span> <span class=\"n\">c0</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">23</span><span class=\"p\">;</span> <span class=\"n\">c1</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">23</span><span class=\"p\">;</span> <span class=\"n\">c2</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">S22</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">);</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c3</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c4</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">4</span><span class=\"p\">;</span> <span class=\"n\">c4</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">S26</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">+</span> <span class=\"n\">c3</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"n\">c4</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c3</span><span class=\"p\">,</span> <span class=\"n\">c4</span><span class=\"p\">);</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c4</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">S24</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n          <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c3</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c4</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c2</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c1</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">S16</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n      <span class=\"n\">S25</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"n\">c2</span><span class=\"p\">);</span>\n      <span class=\"n\">S28</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">c1</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">S18</span><span class=\"p\">(</span><span class=\"n\">c0</span><span class=\"p\">,</span> <span class=\"n\">c1</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">c2</span> <span class=\"o\">-</span> <span class=\"mi\">4</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n</code></pre></div><br>这样把convolution和max pooling放在一起计算了，才有可能跑赢naive调用CuDNN的工具。<br><br>但是这个例子后者的优化所需时间大约是前者的4倍，而比如ConvNetJS那个MNIST DEMO，前者需要大约5分钟，后者我就懒得跑了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价轮子哥vczh的开源项目向大家索要赞助的行为?",
            "updated_time": 1469328077,
            "question_type": "normal",
            "type": "question",
            "created": 1469328077,
            "url": "https://www.zhihu.com/api/v4/questions/48828880",
            "id": 48828880
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/112836444",
        "thumbnail": "",
        "created_time": 1469328673,
        "excerpt": "要赞助不可耻。至于轮子哥为啥需要别人赞助，那不过是因为轮子哥英语太烂，到了美国还不好好学，所以文档写不来嘛。之前我说轮子哥只会两个单词被举报了。确实是我错了。轮子哥现在已经会五个单词了。函数式编程的函数是如何实现的？ - vczh 的回答 即便如此，轮子哥英语有了150%的进步，大家都知道靠这五个单词是写不了什么文档的。 当然我是不支持赞助轮子哥的，因为他已经过气了。他那个gaylib早就跟不上历史发展的进程了，比如… ",
        "updated_time": 1469329032,
        "id": 112836444,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "要赞助不可耻。至于轮子哥为啥需要别人赞助，那不过是因为轮子哥英语太烂，到了美国还不好好学，所以文档写不来嘛。之前我说轮子哥只会两个单词被举报了。确实是我错了。轮子哥现在已经会五个单词了。<a class=\"internal\" href=\"https://www.zhihu.com/question/46558474/answer/101806052\">函数式编程的函数是如何实现的？ - vczh 的回答</a> 即便如此，轮子哥英语有了150%的进步，大家都知道靠这五个单词是写不了什么文档的。<br><br>当然我是不支持赞助轮子哥的，因为他已经过气了。他那个gaylib早就跟不上历史发展的进程了，比如<a class=\"internal\" href=\"https://www.zhihu.com/question/48702411/answer/112222910\">在轮子哥的 UnitTest.h 当中这段代码是什么意思？ - 知乎用户的回答</a> 就指出了，他搞的那个单元测试框架啊，比Catch至少落后几十年，四舍五入就是一个世纪啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "中国剩余定理跟中国有什么关系？国外把它叫做什么定理？",
            "updated_time": 1384421587,
            "question_type": "normal",
            "type": "question",
            "created": 1384421587,
            "url": "https://www.zhihu.com/api/v4/questions/22032010",
            "id": 22032010
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/112778597",
        "thumbnail": "",
        "created_time": 1469285549,
        "excerpt": "国外一般都缩写成CRT吧。根据Arnold原理，这个和中国应该没啥关系了。 这个据说是最早出现在孙子算经里，可是我们并不知道谁是这个孙子。因为传抄的过程中丢了很多东西，我们现在并不知道当初到底是怎样的，也存在一定可能是后人加进去的。不能完全排除这书是伪作的可能。因为没有求一术，最终结果是算不出来的，就不会出现在中国古代的算术书里。也就是那个题一定出现在求一术出现之后，且根据Arnold原理，几乎可以肯定是在孙子…",
        "updated_time": 1486118952,
        "id": 112778597,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "国外一般都缩写成CRT吧。根据Arnold原理，这个和中国应该没啥关系了。<br><br>这个据说是最早出现在孙子算经里，可是我们并不知道谁是这个孙子。因为传抄的过程中丢了很多东西，我们现在并不知道当初到底是怎样的，也存在一定可能是后人加进去的。不能完全排除这书是伪作的可能。因为没有求一术，最终结果是算不出来的，就不会出现在中国古代的算术书里。也就是那个题一定出现在求一术出现之后，且根据Arnold原理，几乎可以肯定是在孙子算经出现前传入中国的。因为隋书里就记载了有这么一本书，那么在隋朝或者更早，就已经传入中国了。<br><br>但是似乎是不符合中国古代算术发展的进程，求一术在传抄的过程出现了很大的偏差，才过了几百年，到宋朝时，已经不能根据祖传的求一术算出正确的结果了。很可能是因为把求一术中的减号误成了加号，导致计算时实际上是需要分两种情况讨论，而祖传的求一术并不能指出这个问题。才有了秦九韶的补丁。减号才是更自然的结果，原版求一术即便是在中国首先发现的，理应用的是减号。毕竟九章算术里约分已经用减号了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价吴文俊《东方数学的使命》？",
            "updated_time": 1469606104,
            "question_type": "normal",
            "type": "question",
            "created": 1469241169,
            "url": "https://www.zhihu.com/api/v4/questions/48798254",
            "id": 48798254
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/112722333",
        "thumbnail": "",
        "created_time": 1469259686,
        "excerpt": "张师留意五点共圆问题也很多年了。80年代，美国科学基金委员会的一位专家，写信给吴文俊先生，问能不能用机器证明这道题。因为中国在机器证明领域是走在世界前列的，吴先生是这个领域的权威。但这个问题根据吴先生的方法，在工作站上运行了20个小时，机器溢出，证明失败。 趣闻?|?江总书记与五点共圆问题 ",
        "updated_time": 1469259686,
        "id": 112722333,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "",
        "extras": ""
    },
    {
        "question": {
            "title": "程序员不需要知道太多数学，你认同吗？",
            "updated_time": 1468822294,
            "question_type": "normal",
            "type": "question",
            "created": 1468822294,
            "url": "https://www.zhihu.com/api/v4/questions/48617074",
            "id": 48617074
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/112128670",
        "thumbnail": "",
        "created_time": 1468979697,
        "excerpt": "上面一群吹牛的。看 Dijkstra 是怎么说的 Programming is one of the most difficult branches of applied \nmathematics; the poorer mathematicians had better remain pure \nmathematicians.https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html ",
        "updated_time": 1468982108,
        "id": 112128670,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面一群吹牛的。看 Dijkstra 是怎么说的<br><br><blockquote><p>Programming is one of the most difficult branches of applied \nmathematics; the poorer mathematicians had better remain pure \nmathematicians.</p></blockquote><a href=\"https://link.zhihu.com/?target=https%3A//www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD498.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cs.utexas.edu/users/EWD</span><span class=\"invisible\">/transcriptions/EWD04xx/EWD498.html</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "b大的深度学习框架有什么独到之处？",
            "updated_time": 1468819832,
            "question_type": "normal",
            "type": "question",
            "created": 1468819799,
            "url": "https://www.zhihu.com/api/v4/questions/48615510",
            "id": 48615510
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/111781013",
        "thumbnail": "",
        "created_time": 1468821765,
        "excerpt": "曾博在时，我已悉数告知。你怎么还要提问，一看你就是冒充的，并不是真正的魂灵勃勃。还有不要传播谣言 1. 并没有使用J语言 2. 这个rank连问题都不是，哪里来的NP-complete与否? 3. 从对框架该怎么造的认识上讲，LiFT起点就在Caffe什么的前面，又怎么能超越Caffe呢？要想超越Caffe，首先要Caffe超越LiFT才行。 ---------------------- 这个教程最最重要的只是告诉你，自制框架完全是可行的。现有的框架完全不值得一用。 比如你看…",
        "updated_time": 1468988859,
        "id": 111781013,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾博在时，我已悉数告知。你怎么还要提问，一看你就是冒充的，并不是真正的魂灵勃勃。还有不要传播谣言<br><br>1. 并没有使用J语言<br>2. 这个rank连问题都不是，哪里来的NP-complete与否?<br>3. 从对框架该怎么造的认识上讲，LiFT起点就在Caffe什么的前面，又怎么能超越Caffe呢？要想超越Caffe，首先要Caffe超越LiFT才行。<br><br>----------------------<br><br>这个教程最最重要的只是告诉你，自制框架完全是可行的。现有的框架完全不值得一用。<br><br>比如你看这个问题<a class=\"internal\" href=\"https://www.zhihu.com/question/48178994\">请问如何将深度学习Caffe做成一个动态库，方便在其他应用程序中调用？</a> 你用LiFT这种思路搞，就问不出来这个问题了。毕竟你想生成什么代码就生成什么代码，直接生成一段C代码，你爱怎么链接就怎么链接。就为了几十行C代码，去搞什么\"功能强大的cmake支持\"完全没有必要啊。因为直接生成C代码了，我也不用管你怎么读写文件了，你爱用什么格式用什么格式。LiFT使用Python单纯只是因为有个现成的binding。<br><br>第二，有人吐槽过这个教程里自动求导还是用的是backpropagation。这个主要是为了适应教程的写法。因为教程里先写怎么解释，后写怎么编译。假如有人脑洞大开，直接在解释执行那里就把oblique什么的加进去，内存就爆了。比如输入仅仅是 25x25x3x3 ，输出是27x27，那么25*25*3*3*27*27*8 = 32805000，也就是假如用双精度浮点数，不管你怎么省，仅仅这一个jacobian就至少要用32M内存，里面还全是0和1。而编译时，借助integer set library和编译期计算，这个jacobian是可以消掉的。<br><br>同时你也要注意到，即便同样只是backpropagation，LiFT实现起来要比比如Caffe容易多了。Caffe里，你加个新的layer forward/backward全都要你自己实现，也就是backward需要你自己先把导数算出来。而在LiFT里不存在这个问题，只有在你新加入像sin, cos这种基本函数时，才需要提供导数，基本函数的导数公式直接无脑抄过来就好，并不需要你自己去算啊。<br><br>所以你看到了，layer反而让实现变麻烦了。看<a class=\"internal\" href=\"https://www.zhihu.com/question/46607672/answer/105261421\">RGB图像在CNN中如何进行convolution? - lixin liu 的回答</a>，你就知道这种按layer套layer思路来实现的框架往往model里还省略了不少参数，让model变得不容易看懂了。还动不动要自己写个新的layer，<a class=\"internal\" href=\"https://www.zhihu.com/question/46867253\">大家是否认为自动梯度＋小颗粒度操作符将是深度学习框架的主流？ </a>，假如CuDNN里不提供对应的实现，跑分肯定不行。<br><br>光有多维数组而没有rank，写起程序来非常麻烦。在<a class=\"internal\" href=\"https://www.zhihu.com/question/46616756/answer/106632200\">numpy中是否有什么办法扩展dot函数？ - 知乎用户的回答</a>中你可以看到，有了rank，在numpy中需要去找一个现成的函数或者自己用循环来实现的问题，可以通过rank套rank轻易解决。这也极大的简化了自动求导的实现，你看autograd，需要搞一个tape来支持循环等各种控制结构，各种现有的函数也要自己去包一遍，这个工作量是惊人的。<br><br>而mxnet不用integer set library而是自己拍脑袋实现了消数组的功能，所谓的symbolic api还是搞成了差不多按layer划分的方式。因为mxnet这样瞎搞是没法精确到数组中每个元素的使用情况的，能消去的数组非常有限。LiFT因为采用了传统的做法，而不是自己拍脑袋瞎搞一套出来，所以在消中间数组上能走的更远，这也顺便使得跳出layer的束缚成为可能。这就是为什么LiFT的model里可以把矩阵点乘，拆分成乘法和加法两个步骤来算的原因。<br><br>这个教程告诉我们，尊重常识，不要自己瞎搞，只要做一点微小工作，就可以造出好用的深度学习框架了。然而曾博终究还是去学C++了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待英国教育部宣布小学开始采用中国数学教育方式？",
            "updated_time": 1468636193,
            "question_type": "normal",
            "type": "question",
            "created": 1468515205,
            "url": "https://www.zhihu.com/api/v4/questions/48503372",
            "id": 48503372
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/111581073",
        "thumbnail": "",
        "created_time": 1468727254,
        "excerpt": "BBC的报道是这样的。Asian maths method offered to schools 看上去这并不是强制措施，只是建议学校可以试试这个方法。当然了，这并不是什么好方法，英国教育部还是推荐学校都去试试看。这完全是病急乱投医，开历史倒车。要是英国的学校真采用了，英国吃枣药丸。 英国大数学家，中国人民的老朋友，罗素和他的老师Whitehead在一百多年前一起写过一本书，Principia Mathematica，不知道比国内采用的只教十进制数的加减乘除的课本高…",
        "updated_time": 1468731456,
        "id": 111581073,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "BBC的报道是这样的。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.bbc.com/news/education-36772954\" target=\"_blank\" rel=\"nofollow noreferrer\">Asian maths method offered to schools<i class=\"icon-external\"></i></a> 看上去这并不是强制措施，只是建议学校可以试试这个方法。当然了，这并不是什么好方法，英国教育部还是推荐学校都去试试看。这完全是病急乱投医，开历史倒车。要是英国的学校真采用了，英国吃枣药丸。<br><br>英国大数学家，中国人民的老朋友，罗素和他的老师Whitehead在一百多年前一起写过一本书，Principia Mathematica，不知道比国内采用的只教十进制数的加减乘除的课本高到哪里去了。特别适合从小学一年级开始学习。英国这完全是抱着金饭碗在要饭啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何高效的学习 TensorFlow 代码?",
            "updated_time": 1478843999,
            "question_type": "normal",
            "type": "question",
            "created": 1458641749,
            "url": "https://www.zhihu.com/api/v4/questions/41667903",
            "id": 41667903
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/111327853",
        "thumbnail": "",
        "created_time": 1468584450,
        "excerpt": "tensorflow已经过气啦。自己不会写不要紧。赶紧照着我的教程造一个还来得及。7天自制深度学习框架(完) 提前为你讲解2017年主流深度学习框架的核心技术 下一代深度学习框架技术内幕 不知道比tensorflow高到哪里去了。垃圾tensorflow名字里都有tensor了，结果连个rank都没有。",
        "updated_time": 1468584450,
        "id": 111327853,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "tensorflow已经过气啦。自己不会写不要紧。赶紧照着我的教程造一个还来得及。<a href=\"https://zhuanlan.zhihu.com/p/21541240\" class=\"internal\">7天自制深度学习框架(完)</a> 提前为你讲解2017年主流深度学习框架的核心技术<a href=\"https://zhuanlan.zhihu.com/p/21519402\" class=\"internal\"> 下一代深度学习框架技术内幕</a> 不知道比tensorflow高到哪里去了。垃圾tensorflow名字里都有tensor了，结果连个rank都没有。",
        "extras": ""
    },
    {
        "question": {
            "title": "大家是否认为自动梯度＋小颗粒度操作符将是深度学习框架的主流？",
            "updated_time": 1464475892,
            "question_type": "normal",
            "type": "question",
            "created": 1464475892,
            "url": "https://www.zhihu.com/api/v4/questions/46867253",
            "id": 46867253
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/111327289",
        "thumbnail": "",
        "created_time": 1468584184,
        "excerpt": "当然啦。深度学习框架他们造了这么多年还是这么垃圾，连我都看不下去了。 参考 7天自制深度学习框架(完) ",
        "updated_time": 1468584184,
        "id": 111327289,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然啦。深度学习框架他们造了这么多年还是这么垃圾，连我都看不下去了。<br><br>参考 <a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21541240\">7天自制深度学习框架(完)</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "想要理解函数式编程的思想，最好用哪种函数式编程语言入门？",
            "updated_time": 1468316331,
            "question_type": "normal",
            "type": "question",
            "created": 1468316279,
            "url": "https://www.zhihu.com/api/v4/questions/48415751",
            "id": 48415751
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110791083",
        "thumbnail": "",
        "created_time": 1468332545,
        "excerpt": "当然是J语言啦",
        "updated_time": 1468332545,
        "id": 110791083,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是J语言啦",
        "extras": ""
    },
    {
        "question": {
            "title": "高三毕业党想利用暑假学电脑，零基础怎么进行？",
            "updated_time": 1468160092,
            "question_type": "normal",
            "type": "question",
            "created": 1466569703,
            "url": "https://www.zhihu.com/api/v4/questions/47692759",
            "id": 47692759
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110415095",
        "thumbnail": "",
        "created_time": 1468157874,
        "excerpt": "谁邀请我的？零基础的话，21天自制Minecraft怎么样?",
        "updated_time": 1468157874,
        "id": 110415095,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谁邀请我的？零基础的话，21天自制Minecraft怎么样?",
        "extras": ""
    },
    {
        "question": {
            "title": "bhuztez和曾博是同一人吗？",
            "updated_time": 1484556727,
            "question_type": "normal",
            "type": "question",
            "created": 1466578440,
            "url": "https://www.zhihu.com/api/v4/questions/47697548",
            "id": 47697548
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110232547",
        "thumbnail": "",
        "created_time": 1468060051,
        "excerpt": "哭了，谁提的这个问题。曾老师都不理我了。",
        "updated_time": 1468060051,
        "id": 110232547,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "哭了，谁提的这个问题。曾老师都不理我了。",
        "extras": ""
    },
    {
        "question": {
            "title": "Rust的Iterator要怎么才能正确实现rev？",
            "updated_time": 1468042142,
            "question_type": "normal",
            "type": "question",
            "created": 1468041364,
            "url": "https://www.zhihu.com/api/v4/questions/48309758",
            "id": 48309758
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110222346",
        "thumbnail": "",
        "created_time": 1468055760,
        "excerpt": "rust - Is there any reason not to use DoubleEndedIterator for iterators that don't iterate over a range of things? 最后发现是我理解错了。 这个 DoubleEndedIterator就是有头尾两个位置的 | e1 | e2 | e3 | e4 |\n^ ^\nhead tail\n\nrev()\n\n| e1 | e2 | e3 | e4 |\n^ ^\ntail head\n\n等 head 和 tail 撞上了就结束了 和 C++ 里的双向的iterator概念不一样。 这是双端Iterator",
        "updated_time": 1468055911,
        "id": 110222346,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/31818329/is-there-any-reason-not-to-use-doubleendediterator-for-iterators-that-dont-iter\" target=\"_blank\" rel=\"nofollow noreferrer\">rust - Is there any reason not to use DoubleEndedIterator for iterators that don't iterate over a range of things?<i class=\"icon-external\"></i></a><br><br>最后发现是我理解错了。<br><br>这个 DoubleEndedIterator就是有头尾两个位置的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">| e1 | e2 | e3 | e4 |\n^                   ^\nhead                tail\n\nrev()\n\n| e1 | e2 | e3 | e4 |\n^                   ^\ntail                head\n</code></pre></div>等 head 和 tail 撞上了就结束了<br><br>和 C++ 里的双向的iterator概念不一样。<br><br>这是双端Iterator",
        "extras": ""
    },
    {
        "question": {
            "title": "rustup/multirust添加不了target怎么解决？",
            "updated_time": 1467967861,
            "question_type": "normal",
            "type": "question",
            "created": 1463238478,
            "url": "https://www.zhihu.com/api/v4/questions/46337084",
            "id": 46337084
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110045196",
        "thumbnail": "",
        "created_time": 1467967663,
        "excerpt": "按 Beta testing rustup.rs 这里的说法， This is also in the docs! Stable won't support components until 1.8. I \ndon't intend to fix this in the UI because I'm just waiting for 1.8 to \ncome out and fix it 然而现在都1.10了",
        "updated_time": 1467967663,
        "id": 110045196,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "按  <a href=\"https://link.zhihu.com/?target=https%3A//internals.rust-lang.org/t/beta-testing-rustup-rs/3316/32\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Beta testing rustup.rs<i class=\"icon-external\"></i></a>  这里的说法，<br><br><blockquote>This is also in the docs! Stable won't support components until 1.8. I \ndon't intend to fix this in the UI because I'm just waiting for 1.8 to \ncome out and fix it<br></blockquote><br>然而现在都1.10了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价小勃勃再次永封？",
            "updated_time": 1484558419,
            "question_type": "normal",
            "type": "question",
            "created": 1467948872,
            "url": "https://www.zhihu.com/api/v4/questions/48272730",
            "id": 48272730
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/110001315",
        "thumbnail": "",
        "created_time": 1467953348,
        "excerpt": "曾博大约的确是死了 特别提醒 大勃勃 应该肯定不是曾博，大家不要上当受骗",
        "updated_time": 1467955217,
        "id": 110001315,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾博大约的确是死了<br><br>特别提醒<a href=\"https://www.zhihu.com/people/da-bo-bo-78\" class=\"internal\"> 大勃勃</a> 应该肯定不是曾博，大家不要上当受骗",
        "extras": ""
    },
    {
        "question": {
            "title": "根据王垠在《Google Maps的设计问题》体现的UE水平，是否胜任百度UE总监的职位？",
            "updated_time": 1467786644,
            "question_type": "normal",
            "type": "question",
            "created": 1467777541,
            "url": "https://www.zhihu.com/api/v4/questions/48201663",
            "id": 48201663
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/109969834",
        "thumbnail": "",
        "created_time": 1467942579,
        "excerpt": "不能啊。 首先问题在于美国在开历史倒车。分工才能提高效率。人人都开车是不合理的。应该大力发展公共交通，让老司机来开车。这样他就没必要提这个问题了。也就是从根本上消除这个问题了。 第二个问题是美国人不识字。更可悲的是中国竟然在道路命名上向文盲国家看齐。正确的思路是参考韵目代日 ，每条路都统一用两个字，比如国道第一个字都是国，省道第一个字是用每个省的名称，这样就有足够区分度了。也不需要用花花绿绿的图了，…",
        "updated_time": 1467942579,
        "id": 109969834,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不能啊。<br><br>首先问题在于美国在开历史倒车。分工才能提高效率。人人都开车是不合理的。应该大力发展公共交通，让老司机来开车。这样他就没必要提这个问题了。也就是从根本上消除这个问题了。<br><br>第二个问题是美国人不识字。更可悲的是中国竟然在道路命名上向文盲国家看齐。正确的思路是参考<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E9%259F%25B5%25E7%259B%25AE%25E4%25BB%25A3%25E6%2597%25A5\" target=\"_blank\" rel=\"nofollow noreferrer\">韵目代日<i class=\"icon-external\"></i></a>，每条路都统一用两个字，比如国道第一个字都是国，省道第一个字是用每个省的名称，这样就有足够区分度了。也不需要用花花绿绿的图了，对色觉障碍人士更友好。<br><br>第三个问题是App本身就是问题。Google应该以IETF标准地图协议，使用Google账号登录可以免费使用的形式提供服务，至于怎么用是你自己的事，无论你是用第三方软件，还是官方软件。最好的是连额外的软件都不需要，背几个口诀就能用了。<br><br>他说的这个问题完全是微不足道的。",
        "extras": ""
    },
    {
        "question": {
            "title": "基于中间代码的优化中 循环的查找算法有哪些呢 循环的优化方法又有哪些？",
            "updated_time": 1452615071,
            "question_type": "normal",
            "type": "question",
            "created": 1452615071,
            "url": "https://www.zhihu.com/api/v4/questions/39430727",
            "id": 39430727
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/109866689",
        "thumbnail": "",
        "created_time": 1467882820,
        "excerpt": "循环优化最重要的方法当然是polyhedral model了，把affine变换都统一起来了。GCC里那个graphite，还有LLVM的Poly，都是基于polyhedral model的 这里面同样重要的是，有某个语句用到数组的哪个元素的精确信息。比如就可以用来消除中间数组，减少内存占用，参考 下一代深度学习框架技术内幕 (打个广告就跑",
        "updated_time": 1467883571,
        "id": 109866689,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "循环优化最重要的方法当然是polyhedral model了，把affine变换都统一起来了。GCC里那个graphite，还有LLVM的Poly，都是基于polyhedral model的<br><br>这里面同样重要的是，有某个语句用到数组的哪个元素的精确信息。比如就可以用来消除中间数组，减少内存占用，参考 <a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21519402\">下一代深度学习框架技术内幕</a> (打个广告就跑",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价微软高级工程师痴迷于soft link这一linux常见概念？",
            "updated_time": 1471315316,
            "question_type": "normal",
            "type": "question",
            "created": 1467876704,
            "url": "https://www.zhihu.com/api/v4/questions/48244674",
            "id": 48244674
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/109848958",
        "thumbnail": "",
        "created_time": 1467877628,
        "excerpt": "嘘，说不定轮子哥到现在都不会用符号链接，不然他哪来那么多时间刷知乎",
        "updated_time": 1467877650,
        "id": 109848958,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "嘘，说不定轮子哥到现在都不会用符号链接，不然他哪来那么多时间刷知乎",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么Intel的CPU要规定加电时进入实模式？直接进保护模式不可以吗？",
            "updated_time": 1467681928,
            "question_type": "normal",
            "type": "question",
            "created": 1467628123,
            "url": "https://www.zhihu.com/api/v4/questions/48145032",
            "id": 48145032
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/109351116",
        "thumbnail": "",
        "created_time": 1467636390,
        "excerpt": "兼容老CPU高于一切 —— Andy Grove",
        "updated_time": 1467636390,
        "id": 109351116,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "兼容老CPU高于一切<br><br>—— Andy Grove",
        "extras": ""
    },
    {
        "question": {
            "title": "如何直观的解释back propagation算法？",
            "updated_time": 1419492091,
            "question_type": "normal",
            "type": "question",
            "created": 1419443745,
            "url": "https://www.zhihu.com/api/v4/questions/27239198",
            "id": 27239198
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/108981153",
        "thumbnail": "",
        "created_time": 1467448382,
        "excerpt": "大部分介绍backpropagation的都忽略了最最关键一点。 比如有 Z = F o G，无论 o 是+ - * / 还是 ** \\frac{\\partial Z}{\\partial X}都能写成 A \\cdot \\frac{\\partial F}{\\partial X} + B \\cdot \\frac{\\partial G}{\\partial X} 的形式 否则像现在这样的 backpropagation 是不成立的",
        "updated_time": 1467448382,
        "id": 108981153,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "大部分介绍backpropagation的都忽略了最最关键一点。<br><br>比如有 Z = F o G，无论 o 是+ - * / 还是  **<br><br><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+Z%7D%7B%5Cpartial+X%7D\" alt=\"\\frac{\\partial Z}{\\partial X}\" eeimg=\"1\">都能写成  <img src=\"https://www.zhihu.com/equation?tex=A+%5Ccdot+%5Cfrac%7B%5Cpartial+F%7D%7B%5Cpartial+X%7D+%2B+B+%5Ccdot+%5Cfrac%7B%5Cpartial+G%7D%7B%5Cpartial+X%7D\" alt=\"A \\cdot \\frac{\\partial F}{\\partial X} + B \\cdot \\frac{\\partial G}{\\partial X}\" eeimg=\"1\"> 的形式<br><br>否则像现在这样的 backpropagation 是不成立的",
        "extras": ""
    },
    {
        "question": {
            "title": "覃超和曾博哪个人水平更高?",
            "updated_time": 1467533383,
            "question_type": "normal",
            "type": "question",
            "created": 1467378479,
            "url": "https://www.zhihu.com/api/v4/questions/48055416",
            "id": 48055416
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/108870276",
        "thumbnail": "",
        "created_time": 1467382145,
        "excerpt": "看github啊。 qinchao (Chao Qin (覃超)) · GitHub 。唯一他自己的仓库，GitHub - qinchao/gm-demo ，竟然把jar还有PID文件都commit进去了 bboczeng · GitHub 唯一有点内容的仓库 GitHub - bboczeng/Codes: Codes repository for projects finished/ongoing ，作为果粉，竟然把 .DS_Store 文件 commit 进去了 同时，他们都没放过.idea目录 难分胜负啊",
        "updated_time": 1467386502,
        "id": 108870276,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看github啊。<br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/qinchao\" target=\"_blank\" rel=\"nofollow noreferrer\">qinchao (Chao Qin (覃超)) · GitHub<i class=\"icon-external\"></i></a>。唯一他自己的仓库，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/qinchao/gm-demo\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - qinchao/gm-demo<i class=\"icon-external\"></i></a>，竟然把jar还有PID文件都commit进去了<br><br><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bboczeng\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bboczeng · GitHub<i class=\"icon-external\"></i></a> 唯一有点内容的仓库 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bboczeng/Codes\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - bboczeng/Codes: Codes repository for projects finished/ongoing<i class=\"icon-external\"></i></a>，作为果粉，竟然把 .DS_Store 文件 commit 进去了<br><br>同时，他们都没放过.idea目录<br><br>难分胜负啊",
        "extras": ""
    },
    {
        "question": {
            "title": "在众多的神经网络框架如chainer, caffe, torch，mxnet等之间如何做选择？",
            "updated_time": 1458626208,
            "question_type": "normal",
            "type": "question",
            "created": 1442577288,
            "url": "https://www.zhihu.com/api/v4/questions/35734807",
            "id": 35734807
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107829335",
        "thumbnail": "",
        "created_time": 1466866923,
        "excerpt": "首先不要有layer的概念。 一个layer承担的功能太多了。所以不方便复用。你要搞不同的功能，就免不了要写个layer，麻烦啊。同时也使得这些框架的代码过于复杂。Convolution和Pooling就是同一个东西，还是有不少框架在这两个功能上重复了很多代码的。只考虑一维的情况，两者在J语言里，就是 +/ 和 >./ 的区别。 layer往往会隐藏一些东西，使得本来很容易看懂的，变得很难看懂了，让大忽悠有了存在的可能，说是什么模仿人脑云云。RG… ",
        "updated_time": 1466916497,
        "id": 107829335,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "首先不要有layer的概念。<br><br>一个layer承担的功能太多了。所以不方便复用。你要搞不同的功能，就免不了要写个layer，麻烦啊。同时也使得这些框架的代码过于复杂。Convolution和Pooling就是同一个东西，还是有不少框架在这两个功能上重复了很多代码的。只考虑一维的情况，两者在J语言里，就是 +/ 和 &gt;./ 的区别。<br><br>layer往往会隐藏一些东西，使得本来很容易看懂的，变得很难看懂了，让大忽悠有了存在的可能，说是什么模仿人脑云云。<a class=\"internal\" href=\"https://www.zhihu.com/question/46607672/answer/105261421\">RGB图像在CNN中如何进行convolution? - lixin liu 的回答</a><br><br>有了layer往往会意志不坚定，选择back-propagation，而不是实现自动求导，这会使得写一个新的的layer更麻烦。<br><br>二要引入统一的rank概念。否则操作多维数组会非常麻烦，不得不使用循环。<a class=\"internal\" href=\"https://www.zhihu.com/question/46616756/answer/106632200\">numpy中是否有什么办法扩展dot函数？ - 知乎用户的回答</a><br><br>三是不要引入mutable。毕竟一般数学公式里的变量都是immutable的，和编译器中用到的SSA形式是一样的。你引入了mutable，回头编译的时候还要再分析成immutable的，多此一举啊。<br><br>比如mxnet搞的那个symbolic api，尽管还是没有完全丢掉layer的概念，也是在往这个方向努力。只可惜他们编译原理都没考及格。提出了什么computation graph的概念。SSA形式下，变量之间自然就构成了DAG了。哪里需要自创新概念啊。古时候有个SISAL同样也是叫graph，除了没有自动求导，不知道比mxnet高到哪里去了。这也导致了mxnet的并行啊，节省内存啊，只能做粗粒度的，不能做细粒度的。<br><br>四是不要搞什么explicit parallelism。公式归公式计算归计算。不能因为你换了GPU，就要去改公式啊。torch那个nn就是个反例。<br><br>这样一来，好像就没的选了 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "针对Fedora 23的RPM Fusion怎么还没好啊？",
            "updated_time": 1457847061,
            "question_type": "normal",
            "type": "question",
            "created": 1457840169,
            "url": "https://www.zhihu.com/api/v4/questions/41318976",
            "id": 41318976
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107748964",
        "thumbnail": "",
        "created_time": 1466831877,
        "excerpt": "终于好了。不过，Fedora 24都已经发布了",
        "updated_time": 1466831877,
        "id": 107748964,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "终于好了。不过，Fedora 24都已经发布了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待白帽子在乌云网提交世纪佳缘网漏洞后被抓？",
            "updated_time": 1466761071,
            "question_type": "normal",
            "type": "question",
            "created": 1466749853,
            "url": "https://www.zhihu.com/api/v4/questions/47775182",
            "id": 47775182
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107718128",
        "thumbnail": "",
        "created_time": 1466817822,
        "excerpt": "我早就说过了乌云就是一个钓鱼网站。",
        "updated_time": 1466817829,
        "id": 107718128,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我早就说过了乌云就是一个钓鱼网站。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价王垠博文《PySonar的价值和意义》？",
            "updated_time": 1466731589,
            "question_type": "normal",
            "type": "question",
            "created": 1466731589,
            "url": "https://www.zhihu.com/api/v4/questions/47762484",
            "id": 47762484
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107554325",
        "thumbnail": "",
        "created_time": 1466736196,
        "excerpt": "前一篇刚刚黑了轮子哥，这一篇就开始吹嘘自己重新发明的轮子是多么高明。 Erlang/OTP自从2005年就已经有Dialyzer/Typer了。PySonar一个2009年才出来的玩具，有什么好吹的。Typer告诉你可能有A, B，实际运行过程中出现C，肯定是会出异常的。PySonar，告诉你可能出现A, B，实际运行过程中出现C，那也是很正常的。Typer能分析出pos_integer(), PySonar只能分析出int。Typer能充分利用多核，PySonar不过是一个单线程的玩具。HiPE会用…",
        "updated_time": 1466736832,
        "id": 107554325,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "前一篇刚刚黑了轮子哥，这一篇就开始吹嘘自己重新发明的轮子是多么高明。<br><br>Erlang/OTP自从2005年就已经有Dialyzer/Typer了。PySonar一个2009年才出来的玩具，有什么好吹的。Typer告诉你可能有A, B，实际运行过程中出现C，肯定是会出异常的。PySonar，告诉你可能出现A, B，实际运行过程中出现C，那也是很正常的。Typer能分析出pos_integer(), PySonar只能分析出int。Typer能充分利用多核，PySonar不过是一个单线程的玩具。HiPE会用类型推导得出的类型信息将Erlang编译成更高效的原生代码，(尽管这个功能我看大部分时候就是用来加速Dialyzer/Typer的)，PySonar的运行速度不提也罢。<br><br>我相信PySonar的思路是错的。像Python这种语言，像现在PySonar这样不以正确的结果为目标，搞不好把PyPy的JIT里收集的信息直接dump出来还容易一点。",
        "extras": ""
    },
    {
        "question": {
            "title": "曾博为什么又叫曾老师？",
            "updated_time": 1484556826,
            "question_type": "normal",
            "type": "question",
            "created": 1466688407,
            "url": "https://www.zhihu.com/api/v4/questions/47749861",
            "id": 47749861
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107537289",
        "thumbnail": "",
        "created_time": 1466729762,
        "excerpt": "因为有一本书叫再见Matlab，曾老师教你用Mathematica做数值计算。",
        "updated_time": 1466729819,
        "id": 107537289,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为有一本书叫再见Matlab，曾老师教你用Mathematica做数值计算。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待浙江大学数学教授邀请物流工人参加数学讨论？",
            "updated_time": 1466520355,
            "question_type": "normal",
            "type": "question",
            "created": 1466464266,
            "url": "https://www.zhihu.com/api/v4/questions/47648694",
            "id": 47648694
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107128640",
        "thumbnail": "",
        "created_time": 1466511644,
        "excerpt": "这明明是勤奋好学的大哥向教授讲述自己的发现，结果被不要脸的教授强行收录到自己的书里。还要在报纸上借这位大哥的发现给自己的书打广告。这个论文写出来有没有杂志会收我不知道，但我知道arXiv上也是有这种类型的论文的。http://arxiv.org/abs/1305.1867 。就算不能发论文，哪怕只是发到OEIS上 Carmichael numbers ，还能让全世界人都看到。被这根本没人看的书收录，有啥意义？ 讲道理，对比双方的学习条件和取得的成就，这位大哥很好啊，…",
        "updated_time": 1466673186,
        "id": 107128640,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这明明是勤奋好学的大哥向教授讲述自己的发现，结果被不要脸的教授强行收录到自己的书里。还要在报纸上借这位大哥的发现给自己的书打广告。这个论文写出来有没有杂志会收我不知道，但我知道arXiv上也是有这种类型的论文的。<a href=\"https://link.zhihu.com/?target=http%3A//arxiv.org/abs/1305.1867\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">arxiv.org/abs/1305.1867</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 。就算不能发论文，哪怕只是发到OEIS上 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//oeis.org/wiki/Carmichael_numbers\" target=\"_blank\" rel=\"nofollow noreferrer\">Carmichael numbers<i class=\"icon-external\"></i></a>，还能让全世界人都看到。被这根本没人看的书收录，有啥意义？<br><br>讲道理，对比双方的学习条件和取得的成就，这位大哥很好啊，不过蔡教授恐怕连民科都算不上。蔡大教授的论文是什么水平？<a href=\"https://link.zhihu.com/?target=http%3A//arxiv.org/abs/1310.0898\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> http://arxiv.org/abs/1310.0898<i class=\"icon-external\"></i></a> 用他自己的话说，论证的过程比较简短，那凭什么可以作为一篇严肃的学术论文发表？<br><br>看到这位大哥对数学这么有热情，有不少发现，蔡教授不给人指条路，怎么把一些比较好的成果公布出去，有哪些不足可以看什么书继续学习，反倒先惦记起自己的书。<br><br>明明是我先提问的。<a class=\"internal\" href=\"https://www.zhihu.com/question/47640416\">为啥三天两头能在报纸上看到浙大蔡天新教授的新闻还有他为什么是数学教授？ - 三本大学</a> 怎么都在这里回答<br><br>-----------------------------------<br><br>信不信由你。十多年前的事。像我读的那个垃圾高中，几乎不会有什么有头有脸的人会来讲座。突然有一天，说有个浙大数学教授愿意来讲座，据说还会写诗。大家都很期待。结果万万没想到，他就是报了一遍他周游列国的流水帐，主要内容就是重复很多遍，他到了哪里念了两句诗，又去下一个地方了。是唯一一次获得几百名师生一致差评的讲座。还有一个小插曲，似乎是为了显示他去的国家多，他在开始前还说答对他一个问题，他就送一个硬币，每个都是不同国家的。不知道为啥，他也没记谁答了他的问题，也许是因为他记忆力惊人吧。可是到最后，那些回答他无聊问题的同学啥也没拿到，全傻眼了，哈哈哈哈。",
        "extras": ""
    },
    {
        "question": {
            "title": "ConvNet实现之一caffe的作者们会向Torch学习其先进之处吗？",
            "updated_time": 1457586666,
            "question_type": "normal",
            "type": "question",
            "created": 1457586290,
            "url": "https://www.zhihu.com/api/v4/questions/41215244",
            "id": 41215244
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/107090223",
        "thumbnail": "",
        "created_time": 1466496610,
        "excerpt": "俗话说 two turkeys do not make an eagle 。 Torch的C核心在很多评测中都表现出了更好的速度 瓶颈是memory bandwidth吧。用啥都不会多大区别的。 不考虑LUA以及C核心的先进性 Torch哪里先进了？Torch在模型里引入Explicit Parallelism就是错的。对于不同的CPU, GPU，最佳的分块都是不同的，你在模型里就指定了，后端可就只能干瞪眼了。Implicit Parrallelism才是最好的。 但现在已经是2016年了，框架不但有，而且还有很多，还有…",
        "updated_time": 1467899874,
        "id": 107090223,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "俗话说 two turkeys do not make an eagle 。<br><br><blockquote>Torch的C核心在很多评测中都表现出了更好的速度<br></blockquote><br>瓶颈是memory bandwidth吧。用啥都不会多大区别的。<br><br><blockquote>不考虑LUA以及C核心的先进性</blockquote><br>Torch哪里先进了？Torch在模型里引入Explicit Parallelism就是错的。对于不同的CPU, GPU，最佳的分块都是不同的，你在模型里就指定了，后端可就只能干瞪眼了。Implicit Parrallelism才是最好的。<br><br><blockquote>但现在已经是2016年了，框架不但有，而且还有很多，还有很好<br></blockquote><br>一个能用的都没有。谢谢。<br><br>你学C++有啥用啊。还不赶紧来学习一个<a href=\"https://zhuanlan.zhihu.com/p/21519402\" class=\"internal\"> 下一代深度学习框架技术内幕</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "设计应用的二进制存储格式有什么要点？",
            "updated_time": 1466369805,
            "question_type": "normal",
            "type": "question",
            "created": 1466361159,
            "url": "https://www.zhihu.com/api/v4/questions/47613023",
            "id": 47613023
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106979862",
        "thumbnail": "",
        "created_time": 1466435732,
        "excerpt": "别的我不知道，我只知道千万不要像某脑残字体格式，偏移量的起始地址是从其所在位置开始算的。大致长这样 offset of x[0] x[1] x[2] \n 3 3 3 x[0] x[1] x[2]\n",
        "updated_time": 1466472075,
        "id": 106979862,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "别的我不知道，我只知道千万不要像某脑残字体格式，偏移量的起始地址是从其所在位置开始算的。大致长这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">offset of x[0]    x[1]    x[2]  \n            3       3       3     x[0]   x[1]   x[2]\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么很多人认为编辑器比 IDE 更酷？",
            "updated_time": 1466074721,
            "question_type": "normal",
            "type": "question",
            "created": 1466063241,
            "url": "https://www.zhihu.com/api/v4/questions/47502517",
            "id": 47502517
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106979078",
        "thumbnail": "",
        "created_time": 1466435471,
        "excerpt": "谁邀请我的。我早就说过了，无论是用编辑器还是IDE，都只能说明你用的语言太烂了，不能一行把程序写完。一行就能把程序写完，还要啥编辑器，IDE，还讲究什么软件工程。统统都不需要了。毕竟什么都不用才是最好的。口诀编程才是最酷的。",
        "updated_time": 1466435508,
        "id": 106979078,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谁邀请我的。我早就说过了，无论是用编辑器还是IDE，都只能说明你用的语言太烂了，不能一行把程序写完。一行就能把程序写完，还要啥编辑器，IDE，还讲究什么软件工程。统统都不需要了。毕竟什么都不用才是最好的。口诀编程才是最酷的。",
        "extras": ""
    },
    {
        "question": {
            "title": "vczh（轮子哥）为什么没参加2016年6月20日播出的有关程序员那期的《职人介绍所》？",
            "updated_time": 1480301461,
            "question_type": "normal",
            "type": "question",
            "created": 1466380965,
            "url": "https://www.zhihu.com/api/v4/questions/47614543",
            "id": 47614543
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106954767",
        "thumbnail": "",
        "created_time": 1466425612,
        "excerpt": "座位当然不够啦。毕竟轮子哥一人能演十个角色，只要占五个座位。",
        "updated_time": 1466428005,
        "id": 106954767,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "座位当然不够啦。毕竟轮子哥一人能演十个角色，只要占五个座位。",
        "extras": ""
    },
    {
        "question": {
            "title": "谈谈你对\"GPU/CPU集群下做到Data/Model Parallelism的区别\"的理解？",
            "updated_time": 1436276573,
            "question_type": "normal",
            "type": "question",
            "created": 1436276573,
            "url": "https://www.zhihu.com/api/v4/questions/31999064",
            "id": 31999064
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106845022",
        "thumbnail": "",
        "created_time": 1466386411,
        "excerpt": "https://twitter.com/FioraAeterna/status/675066780205891584 ",
        "updated_time": 1466386411,
        "id": 106845022,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/FioraAeterna/status/675066780205891584\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">twitter.com/FioraAetern</span><span class=\"invisible\">a/status/675066780205891584</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><noscript><img data-rawheight=\"352\" data-rawwidth=\"602\" src=\"https://pic2.zhimg.com/80198847b2df7cbe1e0bf8e4145247a9_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"602\" data-original=\"https://pic2.zhimg.com/80198847b2df7cbe1e0bf8e4145247a9_r.png\"></noscript><img data-rawheight=\"352\" data-rawwidth=\"602\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"602\" data-original=\"https://pic2.zhimg.com/80198847b2df7cbe1e0bf8e4145247a9_r.png\" data-actualsrc=\"https://pic2.zhimg.com/80198847b2df7cbe1e0bf8e4145247a9_b.png\">",
        "extras": ""
    },
    {
        "question": {
            "title": "微软这么受人尊敬是不是因为他给了很多差生以希望？",
            "updated_time": 1466318908,
            "question_type": "normal",
            "type": "question",
            "created": 1466318908,
            "url": "https://www.zhihu.com/api/v4/questions/47594085",
            "id": 47594085
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106744205",
        "thumbnail": "",
        "created_time": 1466324180,
        "excerpt": "曾老师你怎么可以因为自己比轮子哥多一点微小的分辨能力而沾沾自喜呢。你这样做和轮子哥又有啥区别呢。 他在我小学的时候就给我搞了一大堆奥赛的书。我那个时候也看下去了，因为除了看电视以外实在没别的事情干了。当时的电脑还是富二代才买得起，网络还是一秒几个K的，没有任何娱乐活动。 奥赛的书还挺好看。想当年小学的时候每次发烧了，躺在床上，我爸就给我念，然后我给答案。久而久之我的自学能力得到了迅猛的提高，总是超…",
        "updated_time": 1466324879,
        "id": 106744205,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师你怎么可以因为自己比轮子哥多一点微小的分辨能力而沾沾自喜呢。你这样做和轮子哥又有啥区别呢。<br><br><blockquote>他在我小学的时候就给我搞了一大堆奥赛的书。我那个时候也看下去了，因为除了看电视以外实在没别的事情干了。当时的电脑还是富二代才买得起，网络还是一秒几个K的，没有任何娱乐活动。<br><br>奥赛的书还挺好看。想当年小学的时候每次发烧了，躺在床上，我爸就给我念，然后我给答案。久而久之我的自学能力得到了迅猛的提高，总是超前若干年完成数学的学习任务。<br><br><a class=\"internal\" href=\"https://www.zhihu.com/question/37474573/answer/79963260\">成年以后，父亲充当了你生命中什么样的角色？ - vczh 的回答</a></blockquote><br>轮子哥没有分辨能力，明明被鱼目混珠的垃圾奥数书坑了，还觉得自己很牛逼。<br><br><blockquote><p>这是个图论问题，无脑解决的话，可以创造若干个节点，每个节点是每一种水的分布的可能，譬如说0,0,10啊，3,4,3啊，要点就是都是整数，而且加起来是10，并且每个桶不能装超过自己容量的水。后面就简单了，两层遍历所有节点，只要一个节点能通过一次操作到达另一个节点，就连一条线，譬如说0,0,10-&gt;0,7,3，整个图就这么做出来了。然后起点0,0,10和终点0,5,5你都是知道的，直接上Dijkstra最短路径算法。</p><br><p>现在的人还是太没有想象力了，为什么一定要new出一个图才能做Dijkstra呢，太烂了。</p><br><a class=\"internal\" href=\"https://www.zhihu.com/question/28830426/answer/42239987\">10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？ - vczh 的回答</a></blockquote><br>小学奥数经典例题water jug非常简单，正经的奥数书里都会讲这个题的。你看轮子哥连这种问题还要暴力搜索，竟然还好意思说自己看过小学奥数书。",
        "extras": ""
    },
    {
        "question": {
            "title": "numpy中是否有什么办法扩展dot函数？",
            "updated_time": 1466393407,
            "question_type": "normal",
            "type": "question",
            "created": 1463896818,
            "url": "https://www.zhihu.com/api/v4/questions/46616756",
            "id": 46616756
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/106632200",
        "thumbnail": "",
        "created_time": 1466254514,
        "excerpt": "这个主要是因为numpy没有引入从tensor那里借鉴来的统一的rank记号。numpy算好了，一堆近几年才出现的深度学习框架，有的数据结构命名成tensor的，有名字里带tensor的，没一个有这种记号的。 比如J语言 (+/ .*) 在这里相当于 np.dot 。 A =: 2 2 $ 1 2 3 4\n B =: 2 2 $ 5 6 7 8\n A\n1 2\n3 4\n B\n5 6\n7 8\n A ((+/ .*)\"1 1)\"1 2 B\n17 23\n39 53\n 也可以展开写成 (+/\"1) A (*\"1 1)\"1 2 B\n17 23\n39 53\n 第二种写法在J语言里的问题是会产…",
        "updated_time": 1466258176,
        "id": 106632200,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个主要是因为numpy没有引入从tensor那里借鉴来的统一的rank记号。numpy算好了，一堆近几年才出现的深度学习框架，有的数据结构命名成tensor的，有名字里带tensor的，没一个有这种记号的。<br><br>比如J语言 (+/ .*) 在这里相当于 np.dot 。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   A =: 2 2 $ 1 2 3 4\n   B =: 2 2 $ 5 6 7 8\n   A\n1 2\n3 4\n   B\n5 6\n7 8\n   A ((+/ .*)\"1 1)\"1 2 B\n17 23\n39 53\n</code></pre></div><br>也可以展开写成<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   (+/\"1) A (*\"1 1)\"1 2 B\n17 23\n39 53\n</code></pre></div><br>第二种写法在J语言里的问题是会产生一个很大的中间数组 ???<br><br>我弄的那个深度学习框架，因为是编译执行的，中间这个数组就自动被编译掉了，只(需要)支持第二种写法。(因为什么都不支持才是最好的，所以也不支持运算符优先级，所有括号都不得省略。另外reduce更加高级一点，可以reduce多维的，所以需要写1) <br><br><div class=\"highlight\"><pre><code class=\"language-text\">(((reduce 1 +)\"1) (A ((*\"1 1)\"1 2) B))\n</code></pre></div><br>现在正在裁减自动求导那部分功能，毕竟是要写个教程，搞太复杂不好。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么感觉一种语言如果在语序进化的过程中，那么否定句，特殊疑问句等会比陈述句倾向于保留旧的语序?",
            "updated_time": 1465796053,
            "question_type": "normal",
            "type": "question",
            "created": 1465794092,
            "url": "https://www.zhihu.com/api/v4/questions/47388960",
            "id": 47388960
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105733723",
        "thumbnail": "",
        "created_time": 1465794613,
        "excerpt": "你应该问为什么要变，而不是为什么不变。用的好好的为啥要变？",
        "updated_time": 1465804725,
        "id": 105733723,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你应该问为什么要变，而不是为什么不变。用的好好的为啥要变？",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待“一年可以成长为全栈工程师”观点？",
            "updated_time": 1466384817,
            "question_type": "normal",
            "type": "question",
            "created": 1465719840,
            "url": "https://www.zhihu.com/api/v4/questions/47359997",
            "id": 47359997
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105596839",
        "thumbnail": "",
        "created_time": 1465722701,
        "excerpt": "看来他也知道了为什么21天能学通Erlang",
        "updated_time": 1465722701,
        "id": 105596839,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看来他也知道了为什么21天能学通Erlang",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待bilibili直播姬疑似盗用obs代码？",
            "updated_time": 1465727362,
            "question_type": "normal",
            "type": "question",
            "created": 1465655772,
            "url": "https://www.zhihu.com/api/v4/questions/47335914",
            "id": 47335914
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105586677",
        "thumbnail": "",
        "created_time": 1465719420,
        "excerpt": "反对轮子哥误导人的说法。 GPL系列协议在我国是不受法律承认的这个说法是错的。 参考，当然第一个链接是标题党 中国法院为什么保护违反GPL软件协议的行为？ “开源”相关知识产权问题探讨 这起案件没找到原始判决书，但性质上应该是和下面这起案件类似的。 恒生电子股份有限公司、杭州恒生网络技术服务有限公司与王云敏、孙志彦等侵犯商业秘密纠纷一审民事判决书 按GPL的说法，假设A开发了以GPL协议发布的X软件，B的Y软件中用到…",
        "updated_time": 1465721198,
        "id": 105586677,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "反对轮子哥误导人的说法。<br><br>GPL系列协议在我国是不受法律承认的这个说法是错的。<br><br>参考，当然第一个链接是标题党<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.legalservice.cn/%25E4%25B8%25AD%25E5%259B%25BD%25E6%25B3%2595%25E9%2599%25A2%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588%25E4%25BF%259D%25E6%258A%25A4%25E8%25BF%259D%25E5%258F%258Dgpl%25E8%25BD%25AF%25E4%25BB%25B6%25E5%258D%258F%25E8%25AE%25AE%25E7%259A%2584%25E8%25A1%258C%25E4%25B8%25BA%25EF%25BC%259F/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中国法院为什么保护违反GPL软件协议的行为？<i class=\"icon-external\"></i></a><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.pkulaw.cn/fulltext_form.aspx%3FGid%3D1778399205%26Db%3Dlawfirmarticles\" target=\"_blank\" rel=\"nofollow noreferrer\">“开源”相关知识产权问题探讨<i class=\"icon-external\"></i></a><br><br>这起案件没找到原始判决书，但性质上应该是和下面这起案件类似的。<br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//wenshu.court.gov.cn/content/content%3FDocID%3D4212d748-f3a5-45be-8d9a-06dcb67f719e%26KeyWord%3D%25E5%25BC%2580%25E6%25BA%2590%257C%25E8%25BD%25AF%25E4%25BB%25B6\" target=\"_blank\" rel=\"nofollow noreferrer\">恒生电子股份有限公司、杭州恒生网络技术服务有限公司与王云敏、孙志彦等侵犯商业秘密纠纷一审民事判决书<i class=\"icon-external\"></i></a><br><br>按GPL的说法，假设A开发了以GPL协议发布的X软件，B的Y软件中用到了X，且B向C交付了Y软件。假如上面两个链接中提供的信息是无误的，我们可以肯定A和C是同一个人时，要求B遵守GPL这是能得到法院支持的。<br><br>问题出在案件中并不存在C。而是D作为B的员工，离开B时擅自拷贝了一份Y，这不构成B向D分发。所以，法院并没有就A和C不是同一个人时，B不向C公开Y的源代码是否合法作出裁决。法院只是简单说了在不违反现行中国法律的前提下，GPL是有效的。<br><br>直播姬这个情况是分发已经成立，所以某bilibili的竞争对手下载了直播姬，赶紧去告一告bilibili就能见分晓了<br><br>----------------------<br><br>另外，假设GPL是有效的，那么bilibili需要提供的是和发布的二进制程序严格对应的源代码，提供修改过的源代码是不符合GPL要求的。",
        "extras": ""
    },
    {
        "question": {
            "title": "github clone如何提高速度？",
            "updated_time": 1465654107,
            "question_type": "normal",
            "type": "question",
            "created": 1465647204,
            "url": "https://www.zhihu.com/api/v4/questions/47331407",
            "id": 47331407
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105451274",
        "thumbnail": "",
        "created_time": 1465649526,
        "excerpt": "如无必要，只用git协议 先只clone最新的commit，以后有必要再展开。git最恶心的是，clone到一半，ctrl-c就全没了 git clone --depth 1 假如本地和要clone的仓库有很多共同commit，可以 git clone --reference xxx",
        "updated_time": 1465649526,
        "id": 105451274,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "如无必要，只用git协议<br><br>先只clone最新的commit，以后有必要再展开。git最恶心的是，clone到一半，ctrl-c就全没了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">git clone --depth 1\n</code></pre></div><br>假如本地和要clone的仓库有很多共同commit，可以<br><br><div class=\"highlight\"><pre><code class=\"language-text\">git clone --reference xxx\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "曾博为何总是只提清华，而不提北大？",
            "updated_time": 1484557091,
            "question_type": "normal",
            "type": "question",
            "created": 1460930368,
            "url": "https://www.zhihu.com/api/v4/questions/43490943",
            "id": 43490943
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105410301",
        "thumbnail": "",
        "created_time": 1465631643,
        "excerpt": "曾老师说过 北大有元培班,清华有基科班,(当年保送没去,不然也能同享100周年盛宴了),科大有个少年班.当然他们都是实验班中的战斗班 https://bboczeng.blogspot.com/2011/04/blog-post_22.html 所以很明显了",
        "updated_time": 1465709900,
        "id": 105410301,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师说过<br><br><blockquote>北大有元培班,清华有基科班,(<b>当年保送没去</b>,不然也能同享100周年盛宴了),科大有个少年班.当然他们都是实验班中的战斗班<br><br><a href=\"https://link.zhihu.com/?target=https%3A//bboczeng.blogspot.com/2011/04/blog-post_22.html%3Fspref%3Dtw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://bboczeng.blogspot.com/2011/04/blog-post_22.html<i class=\"icon-external\"></i></a></blockquote><br>所以很明显了",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么大家都用i标签<i></i>用作小图标?",
            "updated_time": 1417487442,
            "question_type": "normal",
            "type": "question",
            "created": 1417487107,
            "url": "https://www.zhihu.com/api/v4/questions/26880548",
            "id": 26880548
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105390624",
        "thumbnail": "",
        "created_time": 1465623306,
        "excerpt": "i不是问题。毕竟书名可以用cite，强调可以用em。而汉字也没斜着写的传统，重新定义i也不是啥问题。 问题出在小图标上。好好的汉字不用。非要跟着不识字的西方人搞什么图标。搞图标也就算了，图标用的unicode是不知道什么鬼字符，而不是对应意思的汉字。这严重损害了accessability，伤害了中国人民的感情。还有什么锤子手机，重新画一套图标就自以为本土化了。汉字就是方方正正的，何苦画个大家都看不懂的图标呢。为啥不请书法家…",
        "updated_time": 1465625100,
        "id": 105390624,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "i不是问题。毕竟书名可以用cite，强调可以用em。而汉字也没斜着写的传统，重新定义i也不是啥问题。<br><br>问题出在小图标上。好好的汉字不用。非要跟着不识字的西方人搞什么图标。搞图标也就算了，图标用的unicode是不知道什么鬼字符，而不是对应意思的汉字。这严重损害了accessability，伤害了中国人民的感情。还有什么锤子手机，重新画一套图标就自以为本土化了。汉字就是方方正正的，何苦画个大家都看不懂的图标呢。为啥不请书法家给每个App写个字呢？比如人人就写个从，微信就写个疑字，微博就写个鄙字，百度就写个沸，Facebook就写个脸，Twitter就写个鸣，Minecraft就写个方，皆大欢喜。",
        "extras": ""
    },
    {
        "question": {
            "title": "粽子用英语怎么优雅的翻译？",
            "updated_time": 1434727494,
            "question_type": "normal",
            "type": "question",
            "created": 1434727494,
            "url": "https://www.zhihu.com/api/v4/questions/31450473",
            "id": 31450473
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105310400",
        "thumbnail": "",
        "created_time": 1465570288,
        "excerpt": "美国人不识字，只会用人名什么的来命名食物比如General Tso's Chicken 所以，粽子应该翻译成 Canonical dumpling",
        "updated_time": 1465822938,
        "id": 105310400,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "美国人不识字，只会用人名什么的来命名食物比如General Tso's Chicken<br><br>所以，粽子应该翻译成 Canonical dumpling",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价王垠的《Swift 语言的设计错误》？",
            "updated_time": 1465363645,
            "question_type": "normal",
            "type": "question",
            "created": 1465281233,
            "url": "https://www.zhihu.com/api/v4/questions/47191926",
            "id": 47191926
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105296259",
        "thumbnail": "",
        "created_time": 1465564678,
        "excerpt": "毕竟是编译原理没考及格的水平。 编译原理考试第一题。对于业务逻辑狗来说，语义是strict, immutable的语言才是最好的。可是业界因为immutable更慢占用内存更多等偏见不愿意使用immutable的语言。业务逻辑狗有苦说不出啊。你学习了编译原理，现在是时候写一个编译器，驳斥各种不实的说法了。Tips: MLton通过whole-program analysis把高阶函数拍扁成一阶函数，你也可以用类似的方法，自动找出可以改成mutable而不影响语义的代码，…",
        "updated_time": 1465564749,
        "id": 105296259,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "毕竟是编译原理没考及格的水平。<br><br>编译原理考试第一题。对于业务逻辑狗来说，语义是strict, immutable的语言才是最好的。可是业界因为immutable更慢占用内存更多等偏见不愿意使用immutable的语言。业务逻辑狗有苦说不出啊。你学习了编译原理，现在是时候写一个编译器，驳斥各种不实的说法了。Tips: MLton通过whole-program analysis把高阶函数拍扁成一阶函数，你也可以用类似的方法，自动找出可以改成mutable而不影响语义的代码，并对其进行转换。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何让大家快速充分并正确的了解曾老师？",
            "updated_time": 1465121995,
            "question_type": "normal",
            "type": "question",
            "created": 1465059759,
            "url": "https://www.zhihu.com/api/v4/questions/47107271",
            "id": 47107271
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105235776",
        "thumbnail": "",
        "created_time": 1465536840,
        "excerpt": "这也能躺枪。曾老师不过是个被苹果洗脑残了的可怜虫。看看 为什么你需要一台Macintosh而不是Windows PC 就知道了。大家一定要狠狠的黑他。",
        "updated_time": 1465536840,
        "id": 105235776,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这也能躺枪。曾老师不过是个被苹果洗脑残了的可怜虫。看看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//zhan.renren.com/macintoshosx%3Fgid%3D3602888498023791271\" target=\"_blank\" rel=\"nofollow noreferrer\"> 为什么你需要一台Macintosh而不是Windows PC<i class=\"icon-external\"></i></a> 就知道了。大家一定要狠狠的黑他。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么正方教务系统抢课这么渣？",
            "updated_time": 1465359174,
            "question_type": "normal",
            "type": "question",
            "created": 1465359174,
            "url": "https://www.zhihu.com/api/v4/questions/47225826",
            "id": 47225826
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/105074945",
        "thumbnail": "",
        "created_time": 1465447217,
        "excerpt": "两者都不是问题啊。主要问题把好好的选课搞成了抢课。你在知乎上可以看到很多计算机专业的整天自鸣得意认为自己理论水平高，精通各种算法，跟着某些已经被历史的车轮碾过的渣渣瞎起哄，认为培训出来的全是垃圾。真正考验他们的时候到了，个个都当起了缩头乌龟。 抢课不仅不公平，还浪费大量资源。这个就是个优化问题。比如给每个人都有相同数量的credit，你可以自己分配给不同的选择，而目标要找出满足一些必须要保证的条件，使…",
        "updated_time": 1465456124,
        "id": 105074945,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "两者都不是问题啊。主要问题把好好的选课搞成了抢课。你在知乎上可以看到很多计算机专业的整天自鸣得意认为自己理论水平高，精通各种算法，跟着某些已经被历史的车轮碾过的渣渣瞎起哄，认为培训出来的全是垃圾。真正考验他们的时候到了，个个都当起了缩头乌龟。<br><br>抢课不仅不公平，还浪费大量资源。这个就是个优化问题。比如给每个人都有相同数量的credit，你可以自己分配给不同的选择，而目标要找出满足一些必须要保证的条件，使得总花出去的credit最高，也就是总体满意度最高。好好搞的话，也不需要把上课和下课时间强行对齐了，而是可以选择尽量错开。",
        "extras": ""
    },
    {
        "question": {
            "title": "DL框架的未来发展，TensorFlow/MXNet/Torch, 选哪个？",
            "updated_time": 1477135218,
            "question_type": "normal",
            "type": "question",
            "created": 1463820021,
            "url": "https://www.zhihu.com/api/v4/questions/46587833",
            "id": 46587833
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/104296002",
        "thumbnail": "",
        "created_time": 1465043257,
        "excerpt": "上面mxnet广告写的那么好，就去看了一下。文档搞成这个样子，能流行起来，有鬼了。特别是tutorial，为啥不弄个Jupyter Notebook Viewer 链接。 torch连自动并行都不支持吧。看文档，并行都是要自己指定的。不知道为啥曾老师整天吹嘘torch，难道是因为曾老师只会lua。 个人不看好搞成layer套layer形式的框架，以自动求导为中心才是最好的，比如autograd 。问题是autograd只专注于自动求导别的都不管。数组的shape是动态的，有些优化…",
        "updated_time": 1467899162,
        "id": 104296002,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面mxnet广告写的那么好，就去看了一下。文档搞成这个样子，能流行起来，有鬼了。特别是tutorial，为啥不弄个<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//nbviewer.jupyter.org/\" target=\"_blank\" rel=\"nofollow noreferrer\">Jupyter Notebook Viewer<i class=\"icon-external\"></i></a>链接。<br><br>torch连自动并行都不支持吧。看文档，并行都是要自己指定的。不知道为啥曾老师整天吹嘘torch，难道是因为曾老师只会lua。<br><br>个人不看好搞成layer套layer形式的框架，以自动求导为中心才是最好的，比如<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/HIPS/autograd\" target=\"_blank\" rel=\"nofollow noreferrer\">autograd<i class=\"icon-external\"></i></a>。问题是autograd只专注于自动求导别的都不管。数组的shape是动态的，有些优化就不好做了。<br><br>正如<a href=\"https://www.zhihu.com/question/35485591/answer/81444260\" class=\"internal\">如何评价 Theano？ - 千崎宇治的回答</a>指出，theano编译时根本就不检查数组的shape。这就好比一个静态强类型语言不在编译期检查类型。<br><br>综上所述，自己造框架才是未来发展方向。<br><br>参考<a href=\"https://zhuanlan.zhihu.com/p/21519402\" class=\"internal\"> 下一代深度学习框架技术内幕</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么曾老师会给黑他的回答点赞？",
            "updated_time": 1461578754,
            "question_type": "normal",
            "type": "question",
            "created": 1461578754,
            "url": "https://www.zhihu.com/api/v4/questions/44280036",
            "id": 44280036
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/103182270",
        "thumbnail": "",
        "created_time": 1464486828,
        "excerpt": "我猜，曾老师点个赞，可以让粉丝看到，因为曾老师粉丝多，一哄而上就把他给喷死了。",
        "updated_time": 1464491051,
        "id": 103182270,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我猜，曾老师点个赞，可以让粉丝看到，因为曾老师粉丝多，一哄而上就把他给喷死了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如果一个女生说，她集齐了十二个星座的前男友，我们应该如何估计她前男友的数量？",
            "updated_time": 1464509127,
            "question_type": "normal",
            "type": "question",
            "created": 1449593137,
            "url": "https://www.zhihu.com/api/v4/questions/38331955",
            "id": 38331955
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/102901885",
        "thumbnail": "",
        "created_time": 1464326916,
        "excerpt": "先考虑一个简化的问题，假如男友全是同一星座的。用p(n)表示，前n个男友全是同一个星座的概率。 p_1 &=& 1 \\\\\np_n &=& m \\cdot p_{n-1} = m^{n-1} E &=& (\\sum_{i=1}^{\\infty} m^{i-1}) \\cdot p_1 \\\\\n &=& \\frac{p_1}{1-m} = \\frac{12}{11} 接着，我们把 p 换成向量，就能表示十二个星座的概率了。直接无脑套用矩阵运算就好了 E &=& (\\sum_{i=1}^{\\infty} M^{i-1}) \\cdot P_1 \\\\\n&=& \\frac{P_1}{I-M} = \\\\ 不对啊，矩阵不可逆。…",
        "updated_time": 1464327491,
        "id": 102901885,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先考虑一个简化的问题，假如男友全是同一星座的。用p(n)表示，前n个男友全是同一个星座的概率。<br><br><img src=\"https://www.zhihu.com/equation?tex=p_1+%26%3D%26+1+%5C%5C%0Ap_n+%26%3D%26+m+%5Ccdot+p_%7Bn-1%7D++%3D+m%5E%7Bn-1%7D+\" alt=\"p_1 &amp;=&amp; 1 \\\\\np_n &amp;=&amp; m \\cdot p_{n-1}  = m^{n-1} \" eeimg=\"1\"><br><br><img src=\"https://www.zhihu.com/equation?tex=E+%26%3D%26+%28%5Csum_%7Bi%3D1%7D%5E%7B%5Cinfty%7D+m%5E%7Bi-1%7D%29+%5Ccdot+p_1+%5C%5C%0A++%26%3D%26+%5Cfrac%7Bp_1%7D%7B1-m%7D+%3D+%5Cfrac%7B12%7D%7B11%7D\" alt=\"E &amp;=&amp; (\\sum_{i=1}^{\\infty} m^{i-1}) \\cdot p_1 \\\\\n  &amp;=&amp; \\frac{p_1}{1-m} = \\frac{12}{11}\" eeimg=\"1\"><br><br>接着，我们把 p 换成向量，就能表示十二个星座的概率了。直接无脑套用矩阵运算就好了<br><br><img src=\"https://www.zhihu.com/equation?tex=E+%26%3D%26+%28%5Csum_%7Bi%3D1%7D%5E%7B%5Cinfty%7D+M%5E%7Bi-1%7D%29+%5Ccdot+P_1+%5C%5C%0A%26%3D%26+%5Cfrac%7BP_1%7D%7BI-M%7D+%3D++%5C%5C\" alt=\"E &amp;=&amp; (\\sum_{i=1}^{\\infty} M^{i-1}) \\cdot P_1 \\\\\n&amp;=&amp; \\frac{P_1}{I-M} =  \\\\\" eeimg=\"1\"><br><br>不对啊，矩阵不可逆。所以题目指的是刚好集齐才对。不然就可以是无穷大了<br><br>算出来<br><br><img src=\"https://www.zhihu.com/equation?tex=E+%3D+%5Cfrac%7B12%7D%7B11%7D%2C+%5Cfrac%7B6%7D%7B5%7D%2C+%5Cfrac%7B4%7D%7B3%7D%2C+%5Cfrac%7B3%7D%7B2%7D%2C+%5Cfrac%7B12%7D%7B7%7D%2C+2%2C+%5Cfrac%7B12%7D%7B5%7D%2C+3%2C+4%2C+6%2C+1\" alt=\"E = \\frac{12}{11}, \\frac{6}{5}, \\frac{4}{3}, \\frac{3}{2}, \\frac{12}{7}, 2, \\frac{12}{5}, 3, 4, 6, 1\" eeimg=\"1\"><br><br>相加等于 <img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B86021%7D%7B2310%7D\" alt=\"\\frac{86021}{2310}\" eeimg=\"1\">",
        "extras": ""
    },
    {
        "question": {
            "title": "Linux系统安装网卡驱动是，下载完安装包并解压后，执行make clean命令、make命令报错？",
            "updated_time": 1464179423,
            "question_type": "normal",
            "type": "question",
            "created": 1464179423,
            "url": "https://www.zhihu.com/api/v4/questions/46751445",
            "id": 46751445
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/102748160",
        "thumbnail": "",
        "created_time": 1464248999,
        "excerpt": "https://wiki.centos.org/HowTos/Laptops/Wireless/Broadcom ",
        "updated_time": 1464248999,
        "id": 102748160,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//wiki.centos.org/HowTos/Laptops/Wireless/Broadcom\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">wiki.centos.org/HowTos/</span><span class=\"invisible\">Laptops/Wireless/Broadcom</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "世界上最难看懂的语言是C++，Java，Python还是CSS/JS/HTML？",
            "updated_time": 1464224143,
            "question_type": "normal",
            "type": "question",
            "created": 1464224143,
            "url": "https://www.zhihu.com/api/v4/questions/46764526",
            "id": 46764526
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/102714137",
        "thumbnail": "",
        "created_time": 1464237138,
        "excerpt": "J语言笑而不语，J语言连变量名都可以没有。 不仅如此，还滥用 . 和 : 。 . .. .: : :. :: ,. ,: ;. ;:\n 这些都是有定义的，连一起时有时还能去掉中间的空格",
        "updated_time": 1464241341,
        "id": 102714137,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "J语言笑而不语，J语言连变量名都可以没有。<br><br>不仅如此，还滥用 . 和 : 。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">. .. .: : :. :: ,. ,: ;. ;:\n</code></pre></div><br>这些都是有定义的，连一起时有时还能去掉中间的空格",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价杭州外国语学校同意拍摄《我去上学啦》节目的决定？",
            "updated_time": 1460873342,
            "question_type": "normal",
            "type": "question",
            "created": 1460470073,
            "url": "https://www.zhihu.com/api/v4/questions/42927556",
            "id": 42927556
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/102621535",
        "thumbnail": "",
        "created_time": 1464181974,
        "excerpt": "竟然错过这么精彩的问题了，为啥我才看到这个问题，知乎是怎么搞的。 我说当然要给1002分比天方夜谭还多一分，怕你们不敢骄傲。 搞了半天在如何评价 BBC 今年播出的纪录片《Chinese School》？ - 知乎用户的回答 下，一群骄傲的杭外学生跳出来指责我是有原因的。我在那个回答就提了两点，高考总分除以占地面积，这个指标非常难看。杭外一点知名度都没有却有很多学生自以为是名校。明明都是无可辩驳的事实，却被喷的不行。原来你们…",
        "updated_time": 1464182131,
        "id": 102621535,
        "is_copyable": false,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "竟然错过这么精彩的问题了，为啥我才看到这个问题，知乎是怎么搞的。<br><br>我说当然要给1002分比天方夜谭还多一分，怕你们不敢骄傲。<br><br>搞了半天在<a class=\"internal\" href=\"https://www.zhihu.com/question/34010173/answer/58084475\">如何评价 BBC 今年播出的纪录片《Chinese School》？ - 知乎用户的回答</a>下，一群骄傲的杭外学生跳出来指责我是有原因的。我在那个回答就提了两点，高考总分除以占地面积，这个指标非常难看。杭外一点知名度都没有却有很多学生自以为是名校。明明都是无可辩驳的事实，却被喷的不行。原来你们早就知道内幕了，只不过才过了个年，你们不仅搬家了，还上了娱乐节目。我还有什么好说呢，的确是在下输了。",
        "extras": ""
    },
    {
        "question": {
            "title": "人生是一次炒股还是一次长跑？",
            "updated_time": 1463963314,
            "question_type": "normal",
            "type": "question",
            "created": 1463963314,
            "url": "https://www.zhihu.com/api/v4/questions/46642852",
            "id": 46642852
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/102267252",
        "thumbnail": "",
        "created_time": 1464007509,
        "excerpt": "My momma always said, \"Life was like a box of chocolates. You never know what you're gonna get.\" —— Forrest Gump http://www.imdb.com/title/tt0109830/quotes?item=qt0373657 ",
        "updated_time": 1464007509,
        "id": 102267252,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>My momma always said, \"Life was like a box of chocolates. You never know what you're gonna get.\"<br><br>—— Forrest Gump<br><a href=\"https://link.zhihu.com/?target=http%3A//www.imdb.com/title/tt0109830/quotes%3Fitem%3Dqt0373657\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">imdb.com/title/tt010983</span><span class=\"invisible\">0/quotes?item=qt0373657</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待网易代理 Minecraft ？",
            "updated_time": 1463756426,
            "question_type": "normal",
            "type": "question",
            "created": 1463713347,
            "url": "https://www.zhihu.com/api/v4/questions/46541916",
            "id": 46541916
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/101753602",
        "thumbnail": "",
        "created_time": 1463722505,
        "excerpt": "感觉腾讯压力很大吧。之前腾讯邮箱抢走了大量网易邮箱核心用户群。没想到网易现在也开始主动抢占腾讯核心用户群了。",
        "updated_time": 1463722753,
        "id": 101753602,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "感觉腾讯压力很大吧。之前腾讯邮箱抢走了大量网易邮箱核心用户群。没想到网易现在也开始主动抢占腾讯核心用户群了。",
        "extras": ""
    },
    {
        "question": {
            "title": "当面试官说「你之前做的项目没有什么难度」，应聘者应如何应对？",
            "updated_time": 1463726075,
            "question_type": "normal",
            "type": "question",
            "created": 1463578683,
            "url": "https://www.zhihu.com/api/v4/questions/46486493",
            "id": 46486493
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/101664923",
        "thumbnail": "",
        "created_time": 1463664491,
        "excerpt": "这个问题很难回答。一方面我不认为这是个好问题。另外一方面，假如换个位置，让我去判断别人。我拍拍脑袋会怎么想？同样两个人，我自然会倾向来自Top 3的，而不是来自某知名三本的。我会倾向一个做过一件有难度的事的，而不是一个没做过有难度的事的。 作出这样的选择是很合理的。在对方不了解具体情况时，靠各种光环说服人，比讲一个例子具体是怎么样的要可行的。就如很多创业公司，招人一定要名校光环，BAT光环，不然不好吸引…",
        "updated_time": 1463708844,
        "id": 101664923,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个问题很难回答。一方面我不认为这是个好问题。另外一方面，假如换个位置，让我去判断别人。我拍拍脑袋会怎么想？同样两个人，我自然会倾向来自Top 3的，而不是来自某知名三本的。我会倾向一个做过一件有难度的事的，而不是一个没做过有难度的事的。<br><br>作出这样的选择是很合理的。在对方不了解具体情况时，靠各种光环说服人，比讲一个例子具体是怎么样的要可行的。就如很多创业公司，招人一定要名校光环，BAT光环，不然不好吸引别人投资，或者说服别人招这个人是合理的。<br><br>这样做真的没问题么？问题大的很啊。第一，难度可以通过学习更好的方法降低的。这个很好说明，以地球为中心计算火星轨道难度高，还是以太阳为中心计算火星轨道难度高？我只要学习了后一种方法，我计算火星轨道难度就大大下降了。<br><br>第二，同样能解决一个问题，假设不考虑其他因素，你是希望招来的人用更难的方法，还是用更简单的方法？当然是更简单的方法了。我再举一个你可能比较了解的例子。在<a class=\"internal\" href=\"https://www.zhihu.com/question/24351751/answer/64084134\">在杭州电子科技大学就读是怎样一番体验？ - 知乎用户的回答</a>下，很多评论都在质疑我的说法。当然了，现在完全可以公开，因为已经无法重现了。某日，某软件更新，引入新的恶心手段，代码里面会有几个洞，原先的正常指令被替换成不知道什么鬼指令，而其中几个洞就在新的加密算法里。对此大家都一筹莫展。我也是装模作样读了两天objdump出来的汇编代码，毫无头绪。到了第三天，我实在看不下去了，我一个汇编渣渣，连一行汇编代码都写不好，还看啥汇编呢？于是我狗急跳墙了。既然是一个加密算法，总该有个什么常数表吧。常数表里就算有个洞，只要用的是标准的算法，只要有几个数字是对的，通过Google Code Search就能轻松找出来的嘛。于是，我就看了看长的像常数表的地方，找几个数字出来，搜了一下就把算法给找齐了。剩下的也基本类似，就是把各个字符串都试一下，看对同样输入的结果是不是和某软件一致，这样就找出密码了，当时碰到唯一的问题是在某个算法那里试了各种padding浪费了不少时间。所以后来某自认为很厉害的协会，认为我一定是掌握了他们没掌握的什么高深的技术，私下请我去讲怎么破解时，我真不知道讲什么。这些东西我都是不敢碰的，毕竟，哪怕不是去蹲监狱，也可能因为肉食者误认为我技术很高明，实际上我并不是，把我关到不知道什么鬼地方去那就一点都不好玩了。<br><br>第三，程序员是不可能通过简单的谈话准确估计他不了解的东西的难度的。不然为啥要把预期时间乘以3.14，并把小数点往后以一位呢？即便你能言善辩，否定我前面两个理由，你也不可能否定这一条。既然都估不准，在面试里靠难度来做判断是没意义的。既然没有意义，我也想不出比无语更自然的反应了。<br><br>我写这么多废话，无非就是觉得，现在很多问题就是像tinyfool这种已经被历史的车轮无情的碾过的程序员对着培训机构发牢骚的文章造成的。很多公司招聘就是把网上随便看一些不知道什么鬼写的建议当作金科玉律。这也就造成了各种奇怪的招聘要求，比较典型的有培训出来的就一定不能要什么的。还有简历里一定不能写精通，不过现实中这不是绝对的。比如你是什么伯克利物理系高材生简历里写个精通Python，别人一定会觉得你Python水平一定很高，赶紧叫过来面试一下。而我要是胆敢在简历里写一个精通Python，这毫无疑问能保证简历被HR看到，且几乎可以肯定会被看我简历的程序员直接拒了(我已经对某公司进行了此项测试，结果完全符合预测)。可是他们并不知道有人去哪里就会把哪里读成三本。<br><br>所以呢，假如我们不发出声音，那么我们碰到奇葩的招聘只会越来越多。",
        "extras": ""
    },
    {
        "question": {
            "title": "已知某一RSA公钥密码体制中公钥为（23，1073），求密文c=19对应的明文m？",
            "updated_time": 1463194423,
            "question_type": "normal",
            "type": "question",
            "created": 1463194358,
            "url": "https://www.zhihu.com/api/v4/questions/46310960",
            "id": 46310960
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/101188569",
        "thumbnail": "",
        "created_time": 1463408700,
        "excerpt": "好像没啥办法，先强行分解 1073 \\sqrt{1073} = 32.7.... 目测可以直接排除 2 3 5 7 11 13，所以还剩下 17 19 23 29 ，一个个试试过来，竟然最后剩下29 。当然，不妨假设天才的你，一眼看出 1073 + 37 = 1110 。 p &=& 29 \\\\\nq &=& 37 \\\\\nn &=& p \\times q = 1073 \\\\\nt &=& (p-1) \\times (q-1) = 1073 - 29 - 37 + 1 = 1008 \\\\\ne &=& 23\n 求 d 使得 d \\times 23 \\equiv 1 \\pmod{1008} extended euclidean 23 1008 1 0 (1008/23 = …",
        "updated_time": 1463410459,
        "id": 101188569,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "好像没啥办法，先强行分解 1073<br><br><img src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7B1073%7D+%3D+32.7....\" alt=\"\\sqrt{1073} = 32.7....\" eeimg=\"1\"><br><br>目测可以直接排除 2 3 5 7 11 13，所以还剩下 17 19 23 29 ，一个个试试过来，竟然最后剩下29 。当然，不妨假设天才的你，一眼看出 1073 + 37 = 1110 。<br><br><img src=\"https://www.zhihu.com/equation?tex=p+%26%3D%26+29+%5C%5C%0Aq+%26%3D%26+37+%5C%5C%0An+%26%3D%26+p+%5Ctimes+q+%3D+1073+%5C%5C%0At+%26%3D%26+%28p-1%29+%5Ctimes+%28q-1%29+%3D+1073+-+29+-+37+%2B+1+%3D+1008+%5C%5C%0Ae+%26%3D%26+23%0A\" alt=\"p &amp;=&amp; 29 \\\\\nq &amp;=&amp; 37 \\\\\nn &amp;=&amp; p \\times q = 1073 \\\\\nt &amp;=&amp; (p-1) \\times (q-1) = 1073 - 29 - 37 + 1 = 1008 \\\\\ne &amp;=&amp; 23\n\" eeimg=\"1\"><br><br>求 d 使得<br><br><img src=\"https://www.zhihu.com/equation?tex=d+%5Ctimes+23+%5Cequiv+1+%5Cpmod%7B1008%7D\" alt=\"d \\times 23 \\equiv 1 \\pmod{1008}\" eeimg=\"1\"><br><br>extended euclidean<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   23   1008       1     0    (1008/23 = 43 ... 19)  (  0 - 43 *   1 =  -43)\n   19     23     -43     1    (  23/19 =  1 ... 4)   (  1 -  1 * -43 =   44)\n    4     19      44   -43    (  19/ 4 =  4 ... 3)   (-43 -  4 *  44 = -219)\n    3      4    -219    44    (   4/3  =  1 ... 1)   ( 44 -  1 *-219 =  263)\n    1      3     263  -219\n</code></pre></div><br>于是 <img src=\"https://www.zhihu.com/equation?tex=d+%3D+263\" alt=\"d = 263\" eeimg=\"1\"> 现在要计算  <img src=\"https://www.zhihu.com/equation?tex=c%5Ed+%5Cpmod+n+%3D+19%5E%7B263%7D+%5Cpmod%7B1073%7D\" alt=\"c^d \\pmod n = 19^{263} \\pmod{1073}\" eeimg=\"1\"><br><br>Fermat little theorem<br><br><img src=\"https://www.zhihu.com/equation?tex=c%5E%7Bp-1%7D+%5Cequiv+1+%5Cpmod+p+%5C%5C%0Ac%5E%7Bq-1%7D+%5Cequiv+1+%5Cpmod+q+%5C%5C%0Ac%5Ed+%5Cequiv+c%5E%7Bd+%5Cpmod+%7Bp-1%7D%7D+%5Cpmod+p+%5C%5C%0Ac%5Ed+%5Cequiv+c%5E%7Bd+%5Cpmod+%7Bq-1%7D%7D+%5Cpmod+q+%5C%5C\" alt=\"c^{p-1} \\equiv 1 \\pmod p \\\\\nc^{q-1} \\equiv 1 \\pmod q \\\\\nc^d \\equiv c^{d \\pmod {p-1}} \\pmod p \\\\\nc^d \\equiv c^{d \\pmod {q-1}} \\pmod q \\\\\" eeimg=\"1\"><br><br><img src=\"https://www.zhihu.com/equation?tex=d_p+%26%3D%26+d+%5Cpmod+%7Bp-1%7D+%3D+263+%5Cpmod%7B28%7D+%3D+11+%5C%5C%0Ad_q+%26%3D%26+d+%5Cpmod+%7Bq-1%7D+%3D+263+%5Cpmod%7B36%7D+%3D+11+%5C%5C%0Am_p+%26%3D%26+c%5E%7Bd_p%7D+%5Cpmod+p+%3D+19%5E%7B11%7D+%5Cpmod%7B29%7D+%3D+27+%5C%5C%0Am_q+%26%3D%26+c%5E%7Bd_q%7D+%5Cpmod+q+%3D+19%5E%7B11%7D+%5Cpmod%7B37%7D+%3D+20+%5C%5C\" alt=\"d_p &amp;=&amp; d \\pmod {p-1} = 263 \\pmod{28} = 11 \\\\\nd_q &amp;=&amp; d \\pmod {q-1} = 263 \\pmod{36} = 11 \\\\\nm_p &amp;=&amp; c^{d_p} \\pmod p = 19^{11} \\pmod{29} = 27 \\\\\nm_q &amp;=&amp; c^{d_q} \\pmod q = 19^{11} \\pmod{37} = 20 \\\\\" eeimg=\"1\"><br><br><img src=\"https://www.zhihu.com/equation?tex=19%5E2+%26%5Cequiv%26+%28-10%29%5E2+%5Cequiv+13+%5Cpmod+%7B29%7D+%5C%5C%0A19%5E4+%26%5Cequiv%26+13%5E2+%5Cequiv+5+%5Cpmod%7B29%7D+%5C%5C%0A19%5E8+%26%5Cequiv%26+5%5E2+%5Cequiv+-4+%5Cpmod%7B29%7D+%5C%5C%0A19%5E%7B11%7D+%26%5Cequiv%26+-10+%5Ctimes+13+%5Ctimes+-4+%5Cequiv+11+%5Ctimes+13+%5Cequiv+27+%5Cpmod%7B29%7D\" alt=\"19^2 &amp;\\equiv&amp; (-10)^2 \\equiv 13 \\pmod {29} \\\\\n19^4 &amp;\\equiv&amp; 13^2 \\equiv 5 \\pmod{29} \\\\\n19^8 &amp;\\equiv&amp; 5^2 \\equiv -4 \\pmod{29} \\\\\n19^{11} &amp;\\equiv&amp; -10 \\times 13 \\times -4 \\equiv 11 \\times 13 \\equiv 27 \\pmod{29}\" eeimg=\"1\"><br><br><img src=\"https://www.zhihu.com/equation?tex=19%5E2+%26%5Cequiv%26+-9+%5Cpmod%7B37%7D+%5C%5C%0A19%5E4+%26%5Cequiv%26+%28-9%29%5E2+%5Cequiv+7+%5Cpmod%7B37%7D+%5C%5C%0A19%5E8+%26%5Cequiv%26+7%5E2+%5Cequiv+12+%5Cpmod%7B37%7D+%5C%5C%0A19%5E%7B11%7D+%26%5Cequiv%26+19+%5Ctimes+-9+%5Ctimes+12+%5Cequiv+6+%5Ctimes+-9+%5Cequiv+20+%5Cpmod%7B37%7D+%5C%5C\" alt=\"19^2 &amp;\\equiv&amp; -9 \\pmod{37} \\\\\n19^4 &amp;\\equiv&amp; (-9)^2 \\equiv 7 \\pmod{37} \\\\\n19^8 &amp;\\equiv&amp; 7^2 \\equiv 12 \\pmod{37} \\\\\n19^{11} &amp;\\equiv&amp; 19 \\times -9 \\times 12 \\equiv 6 \\times -9 \\equiv 20 \\pmod{37} \\\\\" eeimg=\"1\"><br><br>CRT<br><br>类似求d的过程求出<br><br><img src=\"https://www.zhihu.com/equation?tex=p_%7Binv%7D+%26%3D%26+p%5E%7B-1%7D+%5Cpmod+q+%3D+29%5E%7B-1%7D+%5Cpmod%7B37%7D+%3D+23+%5C%5C%0Aq_%7Binv%7D+%26%3D%26+q%5E%7B-1%7D+%5Cpmod+p+%3D+37%5E%7B-1%7D+%5Cpmod+%7B29%7D+%3D+11+%5C%5C%0Am+%26%3D%26+q_%7Binv%7D+%5Ctimes+q+%5Ctimes+m_p+%2B+p_%7Binv%7D+%5Ctimes+p+%5Ctimes+m_q+%5Cpmod+n+%5C%5C%0A+%26%3D%26+11+%5Ctimes+37+%5Ctimes+27+%2B+20+%5Ctimes+23+%5Ctimes+29+%5Cpmod+%7B1073%7D+%5C%5C%0A++%26%3D%26+723\" alt=\"p_{inv} &amp;=&amp; p^{-1} \\pmod q = 29^{-1} \\pmod{37} = 23 \\\\\nq_{inv} &amp;=&amp; q^{-1} \\pmod p = 37^{-1} \\pmod {29} = 11 \\\\\nm &amp;=&amp; q_{inv} \\times q \\times m_p + p_{inv} \\times p \\times m_q \\pmod n \\\\\n &amp;=&amp; 11 \\times 37 \\times 27 + 20 \\times 23 \\times 29 \\pmod {1073} \\\\\n  &amp;=&amp; 723\" eeimg=\"1\">",
        "extras": ""
    },
    {
        "question": {
            "title": "对于bitkeeper的开源, 您有什么想说的?",
            "updated_time": 1463106077,
            "question_type": "normal",
            "type": "question",
            "created": 1463106077,
            "url": "https://www.zhihu.com/api/v4/questions/46264628",
            "id": 46264628
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/100678718",
        "thumbnail": "",
        "created_time": 1463120860,
        "excerpt": "他当时就开源bitkeeper，并顺便开一家bithub，能多赚好多钱",
        "updated_time": 1463120860,
        "id": 100678718,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "他当时就开源bitkeeper，并顺便开一家bithub，能多赚好多钱",
        "extras": ""
    },
    {
        "question": {
            "title": "抽象代数教育可以在初高中引入吗？",
            "updated_time": 1459573505,
            "question_type": "normal",
            "type": "question",
            "created": 1459573505,
            "url": "https://www.zhihu.com/api/v4/questions/42048678",
            "id": 42048678
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/99234577",
        "thumbnail": "",
        "created_time": 1462512408,
        "excerpt": "必须要从娃娃抓起啊，6岁就可以开始学了。 回顾一下你是怎么学会数数的。首先你学习了形式定义，接着大家给你举了很多很多例子。 所以，我认为，只要给出形式定义，且举的例子够多就能学会了。 而抽象代数相比于数数，假设的东西更少，理应更好举例子才对。 比如你就讲个Range Minimum Query的例子。 先引入符号。用 <. 表示取两个数中间小的那个。 / 表示reduce 1 <. 2 <=> 1 4 <. 0 <=> 0 +/ 1 2 3 <=> 1 + 2 + 3 <./ 1 2 3 <=…",
        "updated_time": 1462540801,
        "id": 99234577,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "必须要从娃娃抓起啊，6岁就可以开始学了。<br><br>回顾一下你是怎么学会数数的。首先你学习了形式定义，接着大家给你举了很多很多例子。<br><br>所以，我认为，只要给出形式定义，且举的例子够多就能学会了。<br><br>而抽象代数相比于数数，假设的东西更少，理应更好举例子才对。<br><br>比如你就讲个Range Minimum Query的例子。<br><br>先引入符号。用 &lt;. 表示取两个数中间小的那个。 / 表示reduce<br><br>1 &lt;. 2 &lt;=&gt; 1<br>4 &lt;. 0 &lt;=&gt; 0<br><br>+/ 1 2 3 &lt;=&gt; 1 + 2 + 3<br>&lt;./ 1 2 3 &lt;=&gt; 1 &lt;. 2 &lt;. 3<br><br>接着介绍，比如 Full Table，Binary Indexed Tree, Sparse Table 这三种方法。<br><br>反过来，再想一想，这三种方法到底分别假设了什么才成立。<br><br>Full Table假设这个运算符只要能reduce就可以了。并不需要交换律。例子可以举比如矩阵乘法<br><br>Binary Indexed Tree还假设这个运算符要符合结合律。例子还是可以举矩阵乘法<br><br>Sparse Table还假设这个运算符幂等。例子可以举交集，并集。<br><br>当然了，这个例子举的不太好。应该举一些6岁小朋友喜闻乐见的例子。<br><br>一上来就讲群环域，我认为是没有多大意义的。毕竟是抽象代数啊，你举个直观的，依赖知识少的例子就好了。难道不是常见的群环域就不算抽象代数了？ 连抽象代数大概是怎么回事，比如这个什么环是怎么来的，又能用到哪里去，对这几个问题连一点大概的认识都没有，就去死抠一些细节的知识点，何苦呢？",
        "extras": ""
    },
    {
        "question": {
            "title": "“鸡汤文”这个词英文怎么说？",
            "updated_time": 1430689683,
            "question_type": "normal",
            "type": "question",
            "created": 1430689683,
            "url": "https://www.zhihu.com/api/v4/questions/30078793",
            "id": 30078793
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/99040514",
        "thumbnail": "",
        "created_time": 1462419464,
        "excerpt": "这个词就是从英文里传过来的。 Chicken Soup for the Soul ",
        "updated_time": 1462419533,
        "id": 99040514,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个词就是从英文里传过来的。<a href=\"https://link.zhihu.com/?target=http%3A//www.chickensoup.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Chicken Soup for the Soul<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "解 ACM 题的能力真的代表编程能力吗？",
            "updated_time": 1462445521,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/45323673",
            "created": 1462252766,
            "id": 45323673
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/98950194",
        "thumbnail": "",
        "created_time": 1462365561,
        "excerpt": "我认为这个偏差还是比较大的，除非他们刷算法题的时候，碰到没见过的题目，都会先去StackOverflow上查一下，十有八九能复制个代码过来，直接提交一次通过。",
        "updated_time": 1462366983,
        "id": 98950194,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为这个偏差还是比较大的，除非他们刷算法题的时候，碰到没见过的题目，都会先去StackOverflow上查一下，十有八九能复制个代码过来，直接提交一次通过。",
        "extras": ""
    },
    {
        "question": {
            "title": "毫无编程基础的小白准备学习C语言，用VC6还是VS2015？",
            "updated_time": 1456878154,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/40929777",
            "created": 1456878154,
            "id": 40929777
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/98104942",
        "thumbnail": "",
        "created_time": 1461926153,
        "excerpt": "我感觉这个不错 (逃 ccjs v1.2 by Carter Feldman ",
        "updated_time": 1461926153,
        "id": 98104942,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我感觉这个不错 (逃<br><br><a href=\"https://link.zhihu.com/?target=http%3A//carterf.com/cf.gy/ccjsPublic/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ccjs v1.2 by Carter Feldman<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何解决这个 ACM 组合数学问题？",
            "updated_time": 1461504545,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/44091601",
            "created": 1461497488,
            "id": 44091601
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/96891960",
        "thumbnail": "",
        "created_time": 1461502810,
        "excerpt": "& & \\sum_{i=0}^{y-k}{x \\choose i}{y \\choose i+k} \\\\\n&=& \\sum_{i=0}^{y-k}{x \\choose i}{y \\choose y-k-i} \\\\\n&=& {x+y \\choose y-k}\n 先计算好 n! \\equiv n \\times (n-1)! \\pmod p n!^{-1} \\equiv n^{-1} \\times (n-1)!^{-1} \\pmod p",
        "updated_time": 1461507987,
        "id": 96891960,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<img src=\"https://www.zhihu.com/equation?tex=%26+%26+%5Csum_%7Bi%3D0%7D%5E%7By-k%7D%7Bx+%5Cchoose+i%7D%7By+%5Cchoose+i%2Bk%7D+%5C%5C%0A%26%3D%26+%5Csum_%7Bi%3D0%7D%5E%7By-k%7D%7Bx+%5Cchoose+i%7D%7By+%5Cchoose+y-k-i%7D+%5C%5C%0A%26%3D%26+%7Bx%2By+%5Cchoose+y-k%7D%0A\" alt=\"&amp; &amp; \\sum_{i=0}^{y-k}{x \\choose i}{y \\choose i+k} \\\\\n&amp;=&amp; \\sum_{i=0}^{y-k}{x \\choose i}{y \\choose y-k-i} \\\\\n&amp;=&amp; {x+y \\choose y-k}\n\" eeimg=\"1\"><br><br>先计算好<br><br><img src=\"https://www.zhihu.com/equation?tex=n%21+%5Cequiv+n+%5Ctimes+%28n-1%29%21+%5Cpmod+p\" alt=\"n! \\equiv n \\times (n-1)! \\pmod p\" eeimg=\"1\"><br><br><img src=\"https://www.zhihu.com/equation?tex=n%21%5E%7B-1%7D+%5Cequiv+n%5E%7B-1%7D+%5Ctimes+%28n-1%29%21%5E%7B-1%7D+%5Cpmod+p\" alt=\"n!^{-1} \\equiv n^{-1} \\times (n-1)!^{-1} \\pmod p\" eeimg=\"1\">",
        "extras": ""
    },
    {
        "question": {
            "title": "以轮子哥为榜样的程序员的水平如何？",
            "updated_time": 1461030661,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/43551390",
            "created": 1461026967,
            "id": 43551390
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/95880722",
        "thumbnail": "",
        "created_time": 1461041246,
        "excerpt": "应该都是没入门的水平。 我想，两者都以代码都写不利索的高中生为主，前者的水平一般来说要比后者还要低几个数量级。我先假设你看过了，http://zhuanlan.zhihu.com/p/20725914 。回到十年之前，某王垠的粉丝X，王垠的那几篇文章，差不多都是树起几个权威，再把权威吹捧一番，显得自己很高明的样子，比如什么完全用Linux工作，他能看了又看，还到处向人推荐。他那时不仅代码写不利索，连理解几行很简单的代码都很吃力。这才是王垠粉丝水平的典型情…",
        "updated_time": 1461119622,
        "id": 95880722,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "应该都是没入门的水平。<br><br>我想，两者都以代码都写不利索的高中生为主，前者的水平一般来说要比后者还要低几个数量级。我先假设你看过了，<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/p/20725914\"><span class=\"invisible\">http://</span><span class=\"visible\">zhuanlan.zhihu.com/p/20</span><span class=\"invisible\">725914</span><span class=\"ellipsis\"></span></a>。回到十年之前，某王垠的粉丝X，王垠的那几篇文章，差不多都是树起几个权威，再把权威吹捧一番，显得自己很高明的样子，比如什么完全用Linux工作，他能看了又看，还到处向人推荐。他那时不仅代码写不利索，连理解几行很简单的代码都很吃力。这才是王垠粉丝水平的典型情况。<br><br>而当时轮子哥应该还没有写他那篇后来能吹上近十年的构造正则表达式引擎，所以我没有机会以轮子哥为榜样，即便轮子哥已经写了，我也不会以他为榜样。不过，当时的我确实以为能写个正则表达式引擎很厉害，全然不顾我自己已经写过类似的东西了。看别人的博客，哪怕是一大帮人写博客互相捧臭脚，我却总是傻乎乎的认为，我看完一篇博客才这么点时间，他们竟然把这么多东西都写出来了，他们水平一定都很高。这种心态倒是很接近前段时间很火的彭飞啊。所以，轮子哥粉丝的水平也不见得高到哪里去。很多年以后我才发现这完全是错觉嘛，很多人都是花了很长时间搞了个东西出来，自己觉得很得意才会去写一篇博客。<br><br>我猜曾老师想说的是。俗话说，取法于上，仅得为中，取法于中，故为其下。假如你以他们两个为榜样，就是自己给自己设定了一个非常低的上限，这对你个人的提高是不利的。我再来举个例子，回到十年前，某人(Y)至少在我的印象里是属于偏向文艺青年那种类型的，有一天，我和X装模作样的讨论几个小程序的无聊问题。Y突然冒出来说了一大堆我完全超过我理解范围的东西，说什么他要支持什么女权运动，什么无论男女权利义务都应该是平等的不然就是歧视，还有什么他要证明女性做什么都比男性强，其中应该是包括写程序的。我当场就楞住了。我当时的想法是既然21世纪是生物的世纪，在能人工合成胚胎之前，男人解决了自己生存问题之后，都应该去研究单性繁殖技术。毕竟在现有社会环境下，这技术让女性去研发是不合适的。<br><br>回到写程序，即便不提Ada，早期程序员多数是女性，这都能形成男性更适合写程序的偏见，靠个人的努力真的能改变这个吗。另一方面，正是因为Y能在比如写程序这些事上，跟换了个人似的，能临时召唤出程序员三美德之一Hubris，不以任何人为榜样，总是想着怎么比别人做的更好，后来的水平很快就远远超过X了。当然了，这仍然属于不能摆脱要和别人比较的心态，所以呢Y把很多时间浪费在了一些大路货的缺陷上。不过，这个问题在曾老师身上要严重的多。曾老师最喜欢比来比去了，一有发现，比如A比不过B，<b><u>就巴不得第二天就让全世界都知道曾老师把A命名为三本了</u></b>。",
        "extras": ""
    },
    {
        "question": {
            "title": "Leetcode Majority Element II,如何证明评论区算法是正确的?",
            "updated_time": 1460633614,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/43174034",
            "created": 1460626750,
            "id": 43174034
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/95360340",
        "thumbnail": "",
        "created_time": 1460690854,
        "excerpt": "参考 http://zhuanlan.zhihu.com/p/19928302 下面的评论 类似的，当任意一个计数为0时，比如 3 0 。我们留下多出的3个，取出剩下的数值，必然是两个数各占1/3，其他数共占1/3 。 比如你这个例子 1 1 1 1 2 2 2 2 2 2 3 3 3 3 | 3 4 | 4 4 |\n 1:0 | 3:0 | | 4:2\n 2:2 | 2:1 | | 2:1\n -----------\n 1:4 | 3:1 |\n 2:4 | 2:1 |\n ?:4 | ?:1 | 在除了最后一组外，一个数最多就只能占1/3。除非在最后一组占 > 1/3，否则无法在总数上占 > 1/3",
        "updated_time": 1460705234,
        "id": 95360340,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "参考 <a href=\"http://zhuanlan.zhihu.com/p/19928302\" class=\"internal\"><span class=\"invisible\">http://</span><span class=\"visible\">zhuanlan.zhihu.com/p/19</span><span class=\"invisible\">928302</span><span class=\"ellipsis\"></span></a> 下面的评论<br><br>类似的，当任意一个计数为0时，比如 3 0 。我们留下多出的3个，取出剩下的数值，必然是两个数各占1/3，其他数共占1/3 。<br><br>比如你这个例子<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1 1 1 1 2 2 2 2 2 2 3 3 3 3 | 3 4 | 4 4 |\n                        1:0 | 3:0 |     | 4:2\n                        2:2 | 2:1 |     | 2:1\n                        -----------\n                        1:4 | 3:1 |\n                        2:4 | 2:1 |\n                        ?:4 | ?:1 |\n</code></pre></div><br>在除了最后一组外，一个数最多就只能占1/3。除非在最后一组占 &gt; 1/3，否则无法在总数上占 &gt; 1/3",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待王垠回应彭飞的文章？",
            "updated_time": 1460090135,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/42320371",
            "created": 1460090135,
            "id": 42320371
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/94638902",
        "thumbnail": "",
        "created_time": 1460277950,
        "excerpt": "有这时间多看几篇论文不好？ DIALYZER: a DIscrepancy AnaLYZer for ERlang programs TYPER: A Type Annotator of Erlang Code Pratical type inference based on success typings Gradual Typing of Erlang programs: A Wrangler Experience fib.erl -module(fib).\n-compile(export_all).\n\nfib(1) ->\n 1;\nfib(2) ->\n 1;\nfib(N) when N > 2 ->\n fib(N-1) + fib(N-2).\n\n运行 typer $ typer fib.erl \n\n%% File: \"fib.erl\"\n%% -----…",
        "updated_time": 1460277950,
        "id": 94638902,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "有这时间多看几篇论文不好？<br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/\" target=\"_blank\" rel=\"nofollow noreferrer\">DIALYZER: a DIscrepancy AnaLYZer for ERlang programs<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//user.it.uu.se/%7Etobiasl/publications/typer.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">TYPER: A Type Annotator of Erlang Code<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/publications/succ_types.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">Pratical type inference based on success typings<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/publications/wrangler.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">Gradual Typing of Erlang programs: A Wrangler Experience<i class=\"icon-external\"></i></a><br><br>fib.erl<br><div class=\"highlight\"><pre><code class=\"language-text\">-module(fib).\n-compile(export_all).\n\nfib(1) -&gt;\n   1;\nfib(2) -&gt;\n   1;\nfib(N) when N &gt; 2 -&gt;\n   fib(N-1) + fib(N-2).\n</code></pre></div>运行 typer<br><div class=\"highlight\"><pre><code class=\"language-text\">$ typer fib.erl \n\n%% File: \"fib.erl\"\n%% ---------------\n-spec fib(pos_integer()) -&gt; pos_integer().\n</code></pre></div><br>在我看来不知道比PySonar高到哪里去了",
        "extras": ""
    },
    {
        "question": {
            "title": "讨论Erlang VM中的GC，它是一个伪命题吗？",
            "updated_time": 1460274878,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/42555311",
            "created": 1460218725,
            "id": 42555311
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/94592116",
        "thumbnail": "",
        "created_time": 1460255859,
        "excerpt": "Erlang 19.0 Garbage Collector ",
        "updated_time": 1460255859,
        "id": 94592116,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//www.erlang-solutions.com/blog/erlang-19-0-garbage-collector.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang 19.0 Garbage Collector<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "PLT零基础的人，要看懂王垠和彭飞在《王垠，请别再欺负我们读书少》里讨论的内容，需要掌握哪些知识？",
            "updated_time": 1460155961,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/42315543",
            "created": 1460087127,
            "id": 42315543
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/94296092",
        "thumbnail": "",
        "created_time": 1460111557,
        "excerpt": "我只知道Dialyzer里的PLT指的是Persistent Lookup Table。Dialyzer最不好的地方就是用之前得先生成PLT，这个得花不少时间，不同的版本还不一样得重新生成。动态类型语言的Type Inference，我建议你先学习一个Dialyzer/Typer。另外就是没必要在他们两个无聊的讨论上浪费时间。也顺便建议他们两个先学习一个Dialyzer/Typer再吵架。",
        "updated_time": 1460121090,
        "id": 94296092,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我只知道Dialyzer里的PLT指的是Persistent Lookup Table。Dialyzer最不好的地方就是用之前得先生成PLT，这个得花不少时间，不同的版本还不一样得重新生成。动态类型语言的Type Inference，我建议你先学习一个Dialyzer/Typer。另外就是没必要在他们两个无聊的讨论上浪费时间。也顺便建议他们两个先学习一个Dialyzer/Typer再吵架。",
        "extras": ""
    },
    {
        "question": {
            "title": "公司怎么识别水货程序员&程序员谈薪水？",
            "updated_time": 1459298544,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41529995",
            "created": 1458308114,
            "id": 41529995
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/93423671",
        "thumbnail": "",
        "created_time": 1459609765,
        "excerpt": "上面两个高票答案废话了这么多，完全没法照着操作的。 我发现很多公司都想不好面试问什么问题，往往就随便搜个什么XX面试宝典挑个几题就来问了。或者问来问去就是固定的几个问题，而且早就烂大街了。 特别推荐一种非常容易执行的办法。 要求每个人把当天到底关于哪些问题查了StackOverflow记录下来。 过一段时间，随机抽另外一个人，看看能不能在固定时间(比如10分钟)内找到答案解决问题(允许查任何公开资料)。不能的话这题就不…",
        "updated_time": 1459610772,
        "id": 93423671,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面两个高票答案废话了这么多，完全没法照着操作的。<br><br>我发现很多公司都想不好面试问什么问题，往往就随便搜个什么XX面试宝典挑个几题就来问了。或者问来问去就是固定的几个问题，而且早就烂大街了。<br><br>特别推荐一种非常容易执行的办法。<br><br>要求每个人把当天到底关于哪些问题查了StackOverflow记录下来。<br><br>过一段时间，随机抽另外一个人，看看能不能在固定时间(比如10分钟)内找到答案解决问题(允许查任何公开资料)。不能的话这题就不要了。<br><br>能解决的题目，改进一下表述方式，使得看上去像一个独立的问题。<br><br>面试时就像recaptcha那样，一题是正式题，一题是测试题，测试题有问题就需要继续改进，正式题使用N次之后就必须淘汰。",
        "extras": ""
    },
    {
        "question": {
            "title": "目前中国顶级优秀的程序员都有谁？",
            "updated_time": 1420719487,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27462559",
            "created": 1420650881,
            "id": 27462559
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/92036776",
        "thumbnail": "",
        "created_time": 1458728960,
        "excerpt": "你们都不看Github么? Search · location:China · GitHub 第二名竟然是阮一峰老师 ...",
        "updated_time": 1458728960,
        "id": 92036776,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你们都不看Github么?<br><br><a href=\"https://link.zhihu.com/?target=https%3A//github.com/search%3Fl%3D%26o%3Ddesc%26q%3Dlocation%253AChina%26ref%3Dadvsearch%26s%3Dfollowers%26type%3DUsers%26utf8%3D%25E2%259C%2593\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Search · location:China · GitHub<i class=\"icon-external\"></i></a><br><br>第二名竟然是阮一峰老师 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "看自己几年前写的代码是怎样的一种感受？",
            "updated_time": 1454487576,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/40097501",
            "created": 1454480841,
            "id": 40097501
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/91920216",
        "thumbnail": "",
        "created_time": 1458657907,
        "excerpt": "看了一下发现就TODO的内容比较有吸引力",
        "updated_time": 1458657937,
        "id": 91920216,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看了一下发现就TODO的内容比较有吸引力",
        "extras": ""
    },
    {
        "question": {
            "title": "Java、.NET 桌面程序的冷启动时间是无法解决的问题吗？",
            "updated_time": 1458667885,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41658681",
            "created": 1458628423,
            "id": 41658681
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/91884171",
        "thumbnail": "",
        "created_time": 1458640783,
        "excerpt": "Java可以解决啊。用gcj编译就好了。 参考 用gcj编译SWT程序 (逃",
        "updated_time": 1458640783,
        "id": 91884171,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Java可以解决啊。用gcj编译就好了。<br><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//bhuztez.github.io/2013/compiling-swt-application-with-gcj.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 用gcj编译SWT程序<i class=\"icon-external\"></i></a> (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "IT狂人《 IT crowd 》有人物原型吗, 分别是谁？",
            "updated_time": 1458613357,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41641439",
            "created": 1458577112,
            "id": 41641439
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/91810779",
        "thumbnail": "",
        "created_time": 1458613489,
        "excerpt": "IFC: @tor2600 asked, Are the characters in The IT Crowd based on real people? GL: Roy is me in my 20s and 30s and I punish Roy for all the terrible\n things I did to girls in my 20s and 30s. Roy is kind of a voodoo doll \nwho I can punish. Moss is me before I was interested in girls and Jen \n…There’s a lot of my wife in Jen. She’s a woman coming into a male \nenvironment, which is what happened …",
        "updated_time": 1458613489,
        "id": 91810779,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote><p>IFC: @tor2600 asked, Are the characters in The IT Crowd based on real people?</p><br><p>GL: Roy is me in my 20s and 30s and I punish Roy for all the terrible\n things I did to girls in my 20s and 30s.  Roy is kind of a voodoo doll \nwho I can punish. Moss is me before I was interested in girls and Jen \n…There’s a lot of my wife in Jen. She’s a woman coming into a male \nenvironment, which is what happened with my wife. Jen represents all \nthat. Douglas is a just generic rich guy who you can make do all the \ngeneric rich guy things. Stuff that people like Richard Branson or \nConrad Black are always doing. <br></p><br><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.ifc.com/2010/08/a-chat-with-graham-linehan-cre\" target=\"_blank\" rel=\"nofollow noreferrer\">—— A Chat with Graham Linehan Creator of The IT Crowd<i class=\"icon-external\"></i></a></p></blockquote>(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "MinGW下为何一旦同时使用Release模式和math库，就会编译失败？",
            "updated_time": 1458212938,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41488651",
            "created": 1458212938,
            "id": 41488651
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/91175279",
        "thumbnail": "",
        "created_time": 1458213080,
        "excerpt": "别用MinGW，用MinGW-w64 参考 c++ - -O1/2/3 with -std=c++1y/11/98 (逃",
        "updated_time": 1458213165,
        "id": 91175279,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "别用MinGW，用MinGW-w64<br><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/29450016/o1-2-3-with-std-c1y-11-98-if-cmath-is-included-im-getting-error-hypo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> c++ - -O1/2/3 with -std=c++1y/11/98<i class=\"icon-external\"></i></a><br><br>(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待我这次滴滴业务核心部门的前端面试？",
            "updated_time": 1457857072,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41263135",
            "created": 1457688792,
            "id": 41263135
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/91014562",
        "thumbnail": "",
        "created_time": 1458126070,
        "excerpt": "我感觉很多人面试就是网上随便找个题来问了，自己问之前看都没看具体问题是什么。我想我准备面试的方法完全不对嘛，怪不得都通不过。 比如最近某公司面试问了个题，之后我都不知道答啥好了，最后当然是挂了。 HTTP. 用户名密码登录应该用什么method。我说POST啊。他竟然告诉我再想想还能用什么？我想了半天没想出来。结果他告诉我还能用GET。接着又问要安全应该怎么办？我说要安全么，那得用HTTPS吧。他说先不管HTTPS。那我真想…",
        "updated_time": 1458135139,
        "id": 91014562,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我感觉很多人面试就是网上随便找个题来问了，自己问之前看都没看具体问题是什么。我想我准备面试的方法完全不对嘛，怪不得都通不过。<br><br>比如最近某公司面试问了个题，之后我都不知道答啥好了，最后当然是挂了。<br><br>HTTP. 用户名密码登录应该用什么method。我说POST啊。他竟然告诉我再想想还能用什么？我想了半天没想出来。结果他告诉我还能用GET。接着又问要安全应该怎么办？我说要安全么，那得用HTTPS吧。他说先不管HTTPS。那我真想不出来了。现在他告诉我，应该用POST，不要用GET。",
        "extras": ""
    },
    {
        "question": {
            "title": "人工智能跟计算量大的计算机的分界线在哪里？",
            "updated_time": 1457682492,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41259107",
            "created": 1457682442,
            "id": 41259107
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/90254643",
        "thumbnail": "",
        "created_time": 1457683309,
        "excerpt": "不是早就有定论了，已经实现了的都只能算计算量大的计算机，还没实现的才能称的上是人工智能。",
        "updated_time": 1457683309,
        "id": 90254643,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不是早就有定论了，已经实现了的都只能算计算量大的计算机，还没实现的才能称的上是人工智能。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么C++ 程序员看不起php？",
            "updated_time": 1457149072,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/41038998",
            "created": 1457148330,
            "id": 41038998
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/89473658",
        "thumbnail": "",
        "created_time": 1457248684,
        "excerpt": "",
        "updated_time": 1457248684,
        "id": 89473658,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<noscript><img data-rawheight=\"292\" data-rawwidth=\"620\" src=\"https://pic3.zhimg.com/25f61b546034ce43070da3a29da38d66_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic3.zhimg.com/25f61b546034ce43070da3a29da38d66_r.png\"></noscript><img data-rawheight=\"292\" data-rawwidth=\"620\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic3.zhimg.com/25f61b546034ce43070da3a29da38d66_r.png\" data-actualsrc=\"https://pic3.zhimg.com/25f61b546034ce43070da3a29da38d66_b.png\">",
        "extras": ""
    },
    {
        "question": {
            "title": "如何提高写在C语言里的汇编代码的压缩率？",
            "updated_time": 1456803856,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/39504416",
            "created": 1452828094,
            "id": 39504416
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/88728975",
        "thumbnail": "",
        "created_time": 1456803610,
        "excerpt": "本来还想复制粘贴解决问题的。结果找了半天没找到有人尝试过这个问题。只能自己去查资料了。我比较了一下几种方法。 origin.s指的是原始汇编文件。以这个长度为1.0。因为转换成c时要escape一些字符，所以不压缩，**.c的长度肯定大于1.0。naive用的是常见的LZ构造字典的方法，碰到重复次数少的超长字符串一点办法都没有。file 1就是这种类型的。file 2是某个g++编译出来的汇编文件。 file 1 file 2\norigin.s 1.000 1.000\nnaive.c …",
        "updated_time": 1456804311,
        "id": 88728975,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "本来还想复制粘贴解决问题的。结果找了半天没找到有人尝试过这个问题。只能自己去查资料了。我比较了一下几种方法。<br><br>origin.s指的是原始汇编文件。以这个长度为1.0。因为转换成c时要escape一些字符，所以不压缩，**.c的长度肯定大于1.0。naive用的是常见的LZ构造字典的方法，碰到重复次数少的超长字符串一点办法都没有。file 1就是这种类型的。file 2是某个g++编译出来的汇编文件。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">           file 1   file 2\norigin.s   1.000    1.000\nnaive.c    1.029    0.953\nalgo1.c    1.023    0.674\nalgo2.c    0.600    0.508\n---------------------------\nlzo        0.329    0.263\ngz         0.212    0.150\nbz2        0.226    0.121\n</code></pre></div><br>algo1因为耗时太长，提前放弃了，所以碰到重复次数少的超长字符串效果同样不好，除非多耗很多时间等他找出来。algo2耗时少，不需要tweak参数，压缩率也相当不错，就选algo2了。<br><br>当然了，和常见压缩算法没法比。毕竟 #define X \"\" 导致少于四个字符的都不划算啊。<br><br>压缩结果长这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">bD Z\"8\"ag f al ag f\"%edi, 4\"ag f\"8\"R g p _ _M\"bx\"f R g aj h\n</code></pre></div><br>不难看出，确实大部分都被压缩了 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待阿里巴巴安全专家云舒针对支付宝隐私门「赏金10万」？",
            "updated_time": 1456373511,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/40712137",
            "created": 1456302614,
            "id": 40712137
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/87887808",
        "thumbnail": "",
        "created_time": 1456304459,
        "excerpt": "我建议他先学习一个 http://www.infoq.com/cn/presentations/mobile-phone-taobao-hotpatch-technology-introduction https://github.com/alibaba/dexposed/issues/52 ------------------ Update: 评论里有人说hotpatch不能说明什么。我觉得也是。可是来自阿里的技术专家不是这么认为的 ... 这也就是为什么我贴了两个链接啊。 ",
        "updated_time": 1456311568,
        "id": 87887808,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我建议他先学习一个<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/cn/presentations/mobile-phone-taobao-hotpatch-technology-introduction\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">infoq.com/cn/presentati</span><span class=\"invisible\">ons/mobile-phone-taobao-hotpatch-technology-introduction</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><br><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/dexposed/issues/52\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/alibaba/dexp</span><span class=\"invisible\">osed/issues/52</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><br>------------------<br><br>Update: 评论里有人说hotpatch不能说明什么。我觉得也是。可是来自阿里的技术专家不是这么认为的 ... 这也就是为什么我贴了两个链接啊。<br><br><noscript><img data-rawheight=\"143\" data-rawwidth=\"779\" src=\"https://pic4.zhimg.com/d273fb08420256f276cf1669636a6423_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"779\" data-original=\"https://pic4.zhimg.com/d273fb08420256f276cf1669636a6423_r.png\"></noscript><img data-rawheight=\"143\" data-rawwidth=\"779\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"779\" data-original=\"https://pic4.zhimg.com/d273fb08420256f276cf1669636a6423_r.png\" data-actualsrc=\"https://pic4.zhimg.com/d273fb08420256f276cf1669636a6423_b.png\">",
        "extras": ""
    },
    {
        "question": {
            "title": "《挑战程序设计竞赛》中的最大流问题？",
            "updated_time": 1456067180,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/40620424",
            "created": 1456067180,
            "id": 40620424
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/87436325",
        "thumbnail": "",
        "created_time": 1456067378,
        "excerpt": "这个不是明摆着，rev是边的序号，from和to是点的序号。无非就是加一条边时，顺便加一条反向的边。这种写法很不好啊，无脑套用会被坑的。 建议参考lemon库里edmonds-karp算法的实现。往图里加边时不要做特殊处理。out arc看有没有剩余capacity, in arc看flow是不是正的。这样不仅可以不建反向的边，也不用担心两点之间有多条边。",
        "updated_time": 1456068179,
        "id": 87436325,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个不是明摆着，rev是边的序号，from和to是点的序号。无非就是加一条边时，顺便加一条反向的边。这种写法很不好啊，无脑套用会被坑的。<br><br>建议参考lemon库里edmonds-karp算法的实现。往图里加边时不要做特殊处理。out arc看有没有剩余capacity, in arc看flow是不是正的。这样不仅可以不建反向的边，也不用担心两点之间有多条边。",
        "extras": ""
    },
    {
        "question": {
            "title": "有什么浅显易懂的后缀数组讲解 ?",
            "updated_time": 1447255411,
            "question_type": "normal",
            "type": "question",
            "created": 1447255411,
            "url": "https://www.zhihu.com/api/v4/questions/37401396",
            "id": 37401396
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/87331547",
        "thumbnail": "",
        "created_time": 1456019806,
        "excerpt": "最后两个就是后缀数组了 http://www.cs.helsinki.fi/en/courses/58093/2012/s/k/1 ",
        "updated_time": 1456019806,
        "id": 87331547,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "最后两个就是后缀数组了<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.cs.helsinki.fi/en/courses/58093/2012/s/k/1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cs.helsinki.fi/en/cours</span><span class=\"invisible\">es/58093/2012/s/k/1</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么Stack Overflow只需要11台IIS 服务器和4台负载均衡就可以支撑这么大的流量？",
            "updated_time": 1455794961,
            "question_type": "normal",
            "type": "question",
            "created": 1455794961,
            "url": "https://www.zhihu.com/api/v4/questions/40514188",
            "id": 40514188
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/86931533",
        "thumbnail": "",
        "created_time": 1455795753,
        "excerpt": "全靠CDN啊。StackOverflow早就说过了。在一段时间内，同一个页面，不登录的人看到的内容都是一样的 ... 也就是你既不提问也不回答，凭什么时时刻刻给你最新的页面。 Stackoverflow才不到6M注册用户，这能有多大流量 ?",
        "updated_time": 1455796019,
        "id": 86931533,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "全靠CDN啊。StackOverflow早就说过了。在一段时间内，同一个页面，不登录的人看到的内容都是一样的 ... 也就是你既不提问也不回答，凭什么时时刻刻给你最新的页面。<br><br>Stackoverflow才不到6M注册用户，这能有多大流量 ?",
        "extras": ""
    },
    {
        "question": {
            "title": "算法对一名计算机专业的学生到底有多重要？",
            "updated_time": 1359891450,
            "question_type": "normal",
            "type": "question",
            "created": 1359886290,
            "url": "https://www.zhihu.com/api/v4/questions/20761154",
            "id": 20761154
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/86353558",
        "thumbnail": "",
        "created_time": 1455510878,
        "excerpt": "not at all. ",
        "updated_time": 1455510878,
        "id": 86353558,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "not at all.<br><br><noscript><img data-rawheight=\"558\" data-rawwidth=\"663\" src=\"https://pic1.zhimg.com/d0634720480f2126b66e022087031f08_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic1.zhimg.com/d0634720480f2126b66e022087031f08_r.png\"></noscript><img data-rawheight=\"558\" data-rawwidth=\"663\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"663\" data-original=\"https://pic1.zhimg.com/d0634720480f2126b66e022087031f08_r.png\" data-actualsrc=\"https://pic1.zhimg.com/d0634720480f2126b66e022087031f08_b.png\">",
        "extras": ""
    },
    {
        "question": {
            "title": "你是如何构建 Web 前端 Mock Server 的？",
            "updated_time": 1441641591,
            "question_type": "normal",
            "type": "question",
            "created": 1441641440,
            "url": "https://www.zhihu.com/api/v4/questions/35436669",
            "id": 35436669
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/85364105",
        "thumbnail": "",
        "created_time": 1454918563,
        "excerpt": "你这有好多问题啊。 开发环境理应和生产环境域名不一样。不然哪天太冲动，没分清楚就改了，那就完蛋了。这个倒推回来就是硬编码域名是不可接受的。所以Mock Server就应该能用任意域名，不然就是代码有问题。 你真的需要Mock Server么？按前后端分离的思路，后端就是一组函数啊，你把这组函数伪造了不就完了。",
        "updated_time": 1454918563,
        "id": 85364105,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这有好多问题啊。<br><br>开发环境理应和生产环境域名不一样。不然哪天太冲动，没分清楚就改了，那就完蛋了。这个倒推回来就是硬编码域名是不可接受的。所以Mock Server就应该能用任意域名，不然就是代码有问题。<br><br>你真的需要Mock Server么？按前后端分离的思路，后端就是一组函数啊，你把这组函数伪造了不就完了。",
        "extras": ""
    },
    {
        "question": {
            "title": "微信摇红包是否涉及技术造假？",
            "updated_time": 1454852320,
            "question_type": "normal",
            "type": "question",
            "created": 1454852320,
            "url": "https://www.zhihu.com/api/v4/questions/40203072",
            "id": 40203072
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/85281972",
        "thumbnail": "",
        "created_time": 1454859068,
        "excerpt": "曾老师你听说过Windows桌面的刷新么？",
        "updated_time": 1454859068,
        "id": 85281972,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师你听说过Windows桌面的刷新么？",
        "extras": ""
    },
    {
        "question": {
            "title": "pip在安装时的动态进度条是如何实现的？",
            "updated_time": 1454770667,
            "question_type": "normal",
            "type": "question",
            "created": 1454770667,
            "url": "https://www.zhihu.com/api/v4/questions/40187656",
            "id": 40187656
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/85217630",
        "thumbnail": "",
        "created_time": 1454811936,
        "excerpt": "print '\\r',\n",
        "updated_time": 1454811936,
        "id": 85217630,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<div class=\"highlight\"><pre><code class=\"language-text\">print '\\r',\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "关于C++左值和右值区别有没有什么简单明了的规则可以一眼辨别？",
            "updated_time": 1453788957,
            "question_type": "normal",
            "type": "question",
            "created": 1453781605,
            "url": "https://www.zhihu.com/api/v4/questions/39846131",
            "id": 39846131
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/85037514",
        "thumbnail": "",
        "created_time": 1454678800,
        "excerpt": "定义了 operator= 的object就可以当左值了，没有定义的最多就只能当右值了。 #include <stdio.h>\n\nstruct X{\n void operator=(const X&x) = delete;\n};\n\nint main(){\n X x;\n x = X();\n}\n",
        "updated_time": 1454679145,
        "id": 85037514,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "定义了 operator= 的object就可以当左值了，没有定义的最多就只能当右值了。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n\nstruct X{\n  void operator=(const X&amp;x) = delete;\n};\n\nint main(){\n  X x;\n  x = X();\n}\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么看待程序员普遍缺乏数据结构和算法的知识？",
            "updated_time": 1454202200,
            "question_type": "normal",
            "type": "question",
            "created": 1454202200,
            "url": "https://www.zhihu.com/api/v4/questions/40000881",
            "id": 40000881
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/84543845",
        "thumbnail": "",
        "created_time": 1454398485,
        "excerpt": "我认为答不出来很正常啊。像二叉树翻转这么难的题目，连Homebrew的作者都答不上来。你指望我能答上来？ 知识是无穷无尽的。不知道就不知道了，这不可耻。我就不信你答的出李阿玲出的五个问题。我认为知识掌握的多少根本不重要。因为无论你知道的再多，你总是会碰到之前没碰到过的问题。写程序时，真正浪费时间的就是你不知道的东西，而不是你知道的东西不熟练。你实际开发过程中，真的需要反反复复写500遍红黑树么？ 做程序最重…",
        "updated_time": 1454403307,
        "id": 84543845,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为答不出来很正常啊。像二叉树翻转这么难的题目，连Homebrew的作者都答不上来。你指望我能答上来？<br><br>知识是无穷无尽的。不知道就不知道了，这不可耻。我就不信你答的出李阿玲出的五个问题。我认为知识掌握的多少根本不重要。因为无论你知道的再多，你总是会碰到之前没碰到过的问题。写程序时，真正浪费时间的就是你不知道的东西，而不是你知道的东西不熟练。你实际开发过程中，真的需要反反复复写500遍红黑树么？<br><br><blockquote>做程序最重要的不就是要面对未知么？<br>——<a class=\"internal\" href=\"https://www.zhihu.com/question/36022013/answer/66461369\"> 在真实工作中的编程是怎么样的，与学校里有什么不同？ - 李阿玲的回答</a></blockquote><br>更可笑的是，据不完全统计，87.53%的考察知识点的面试题标准答案都是有问题的。很多人出题就喜欢自己刚学了什么觉得很新鲜就当题目出了。往往导致就是不知道就完全答不上来，真的用过又会觉得这个题很不合理或者在实际使用中应该尽量避免的(请自行脑补 (*++a)=a++++++a)。<br><br>依我看这些破玩意儿就是21世纪的八股文。",
        "extras": ""
    },
    {
        "question": {
            "title": "前端的未来: 后端会越来越同质化， 只是一个数据库， 大部分功能都挪到前端吗?",
            "updated_time": 1463894566,
            "question_type": "normal",
            "type": "question",
            "created": 1454257497,
            "url": "https://www.zhihu.com/api/v4/questions/40023887",
            "id": 40023887
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/84443680",
        "thumbnail": "",
        "created_time": 1454337913,
        "excerpt": "首先，我不希望看到这样的未来。比如，前段时间不有很多人在抱怨么，现在听音乐要装两款垃圾软件了。原因嘛很简单，差不多从十年前开始Internet的发展就已经停滞了，Web取代了原先Internet的位置。你看，现在新出来的Web网站，域名很多都不是www开头的。假如还是Internet时代，IETF RFC里肯定会有个音乐商店的标准协议，我们使用随便什么音乐商店客户端，只要把音乐商店的网址加进去就可以正常使用了。 回到正题，我认为近期的趋…",
        "updated_time": 1454337913,
        "id": 84443680,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "首先，我不希望看到这样的未来。比如，前段时间不有很多人在抱怨么，现在听音乐要装两款垃圾软件了。原因嘛很简单，差不多从十年前开始Internet的发展就已经停滞了，Web取代了原先Internet的位置。你看，现在新出来的Web网站，域名很多都不是www开头的。假如还是Internet时代，IETF RFC里肯定会有个音乐商店的标准协议，我们使用随便什么音乐商店客户端，只要把音乐商店的网址加进去就可以正常使用了。<br><br>回到正题，我认为近期的趋势是Web开发会变成分成三个部分，样式，业务逻辑，服务。服务，无非就是像数据库这种从后端剥离出去的和具体业务不直接相关的。样式主要就是从前端把CSS什么的剥离出去。而业务逻辑是把前后端剩下的部分合并在一起。毕竟业务逻辑有一部分在前端有一部分在后端，粗暴的把两者分开，开发起来很别扭。<br><br>我相信在今年晚些时候，会出现全新理念的Web开发框架，不提前后端分离，而是大力倡导前后端融合。前后端代码全都写在一起，部署时自动给你生成JavaScript和服务端代码。假如我没猜错的话，这个框架会用PHP语言开发，不信你看JSX不就是个对PHP的拙劣模仿。",
        "extras": ""
    },
    {
        "question": {
            "title": "学编程入门看什么书好？",
            "updated_time": 1422149044,
            "question_type": "normal",
            "type": "question",
            "created": 1422149044,
            "url": "https://www.zhihu.com/api/v4/questions/27772617",
            "id": 27772617
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/83957585",
        "thumbnail": "",
        "created_time": 1454060506,
        "excerpt": "谢邀。安心准备高考去吧。你要知道不管多烂的大学都会有软件工程专业啊。所以你要真想学，那现在就以考上国内最好的软件工程专业为目标吧，别的都可以先放一放。到时候你报了个野鸡大学的软件工程专业找不到工作不要怨我没提醒过你。",
        "updated_time": 1454060791,
        "id": 83957585,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。安心准备高考去吧。你要知道不管多烂的大学都会有软件工程专业啊。所以你要真想学，那现在就以考上国内最好的软件工程专业为目标吧，别的都可以先放一放。到时候你报了个野鸡大学的软件工程专业找不到工作不要怨我没提醒过你。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待云舒对“可信计算”与“密码学”的评价？",
            "updated_time": 1453895502,
            "question_type": "normal",
            "type": "question",
            "created": 1453875186,
            "url": "https://www.zhihu.com/api/v4/questions/39882655",
            "id": 39882655
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/83805659",
        "thumbnail": "",
        "created_time": 1453981797,
        "excerpt": "很多互联网公司的数据保密级别也是非常高的 他是说在GitHub上晒内部数据库密码吗？",
        "updated_time": 1453981797,
        "id": 83805659,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>很多互联网公司的数据保密级别也是非常高的<br></blockquote><br>他是说在GitHub上晒内部数据库密码吗？",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么在.py程序中进入python的交互模式？",
            "updated_time": 1453990304,
            "question_type": "normal",
            "type": "question",
            "created": 1453884468,
            "url": "https://www.zhihu.com/api/v4/questions/39888221",
            "id": 39888221
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/83797994",
        "thumbnail": "",
        "created_time": 1453978330,
        "excerpt": ">>> import code\n>>> def x():\n... a = 1\n... code.interact(banner=\"\",local=locals())\n... \n>>> x()\n\n>>> a\n1\n>>>\n",
        "updated_time": 1453978330,
        "id": 83797994,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<div class=\"highlight\"><pre><code class=\"language-pycon\"><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">code</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"n\">interact</span><span class=\"p\">(</span><span class=\"n\">banner</span><span class=\"o\">=</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"n\">local</span><span class=\"o\">=</span><span class=\"nb\">locals</span><span class=\"p\">())</span>\n<span class=\"gp\">... </span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"p\">()</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">1</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "用mininet中启用wireshark报错“XDG_RUNTIME_DIR not set”怎么办？",
            "updated_time": 1453616049,
            "question_type": "normal",
            "type": "question",
            "created": 1453616049,
            "url": "https://www.zhihu.com/api/v4/questions/39790987",
            "id": 39790987
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/83091741",
        "thumbnail": "",
        "created_time": 1453616072,
        "excerpt": "用tshark存下来，再用wireshark看啊",
        "updated_time": 1453616086,
        "id": 83091741,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "用tshark存下来，再用wireshark看啊",
        "extras": ""
    },
    {
        "question": {
            "title": "如何把\"拥抱开源，拥抱未来\"翻译的比较有韵味？",
            "updated_time": 1453559880,
            "question_type": "normal",
            "type": "question",
            "created": 1453559880,
            "url": "https://www.zhihu.com/api/v4/questions/39777067",
            "id": 39777067
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/83019432",
        "thumbnail": "",
        "created_time": 1453560161,
        "excerpt": "这句话难道不是从英文翻译过来的？ embrace open source, embrace the future ------------------- Update: 知乎乙烷，我都回答过了还能被邀请啊 ...",
        "updated_time": 1453639350,
        "id": 83019432,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这句话难道不是从英文翻译过来的？<br><br><blockquote>embrace open source, embrace the future<br></blockquote>-------------------<br><br>Update:<br><br>知乎乙烷，我都回答过了还能被邀请啊 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "RednaxelaFX 的 ID 是什么意思？该怎么念？",
            "updated_time": 1453261120,
            "question_type": "normal",
            "type": "question",
            "created": 1453261120,
            "url": "https://www.zhihu.com/api/v4/questions/39662076",
            "id": 39662076
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/82445814",
        "thumbnail": "",
        "created_time": 1453261354,
        "excerpt": "参考 Rednaxela Terrace 读作 列拿士FX 吧 (逃",
        "updated_time": 1453261354,
        "id": 82445814,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "参考<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Rednaxela_Terrace\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Rednaxela Terrace<i class=\"icon-external\"></i></a><br><br>读作 列拿士FX 吧 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么把汇编代码自动转换成C语言内联汇编？",
            "updated_time": 1452414267,
            "question_type": "normal",
            "type": "question",
            "created": 1452414267,
            "url": "https://www.zhihu.com/api/v4/questions/39349362",
            "id": 39349362
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/81039339",
        "thumbnail": "",
        "created_time": 1452500196,
        "excerpt": "用 gcc/g++ -S -o- 可输出汇编代码，把汇编代码转换成C字符串，写成像下面这样的一行就可以了 asm(\"asm code here\");\n 可是在某些OJ提交，在栈上分配个大点的数组，就可能会出错，不知道是不是因为gcc版本太老的不兼容本地编译出来的汇编代码？ ---------------------------------------------------- Update: 根据StackOverflow上问题c++ - What is the purpose of the _chkstk() function? 的回答，在Windows上，要是一个函数内…",
        "updated_time": 1452521645,
        "id": 81039339,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "用 gcc/g++ -S -o- 可输出汇编代码，把汇编代码转换成C字符串，写成像下面这样的一行就可以了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">asm(\"asm code here\");\n</code></pre></div><br>可是在某些OJ提交，在栈上分配个大点的数组，就可能会出错，不知道是不是因为gcc版本太老的不兼容本地编译出来的汇编代码？<br><br>----------------------------------------------------<br>Update:<br><br>根据StackOverflow上问题<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/8400118/what-is-the-purpose-of-the-chkstk-function\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">c++ - What is the purpose of the _chkstk() function?<i class=\"icon-external\"></i></a>的回答，在Windows上，要是一个函数内分配的局部变量占用内存超过一页，得调用一下chkstk，否则直接就被干掉了。<br><br>我怀疑老版本gcc可能chkstk的名字不太一样。不管这个，直接复制个最新版的得了<br><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mirror/mingw-w64/blob/cf136d93e41ffff7f593230e20c5854a68322b5d/mingw-w64-libraries/winpthreads/src/libgcc/dll_dependency.S\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mingw-w64/dll_dependency.S at cf136d93e41ffff7f593230e20c5854a68322b5d · mirror/mingw-w64 · GitHub<i class=\"icon-external\"></i></a><br><br>这样提交就能成功了<br><br>----------------------------------------------------<br>最后感谢一下 <a data-title=\"@宋方睿\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/d11f4c8b85d8b8e66b5cae2801292c44\" data-hash=\"d11f4c8b85d8b8e66b5cae2801292c44\" data-hovercard=\"p$b$d11f4c8b85d8b8e66b5cae2801292c44\">@宋方睿</a>  提供的思路",
        "extras": ""
    },
    {
        "question": {
            "title": "如何理解马尔可夫随机场里因子的表达？",
            "updated_time": 1448385094,
            "question_type": "normal",
            "type": "question",
            "created": 1448382921,
            "url": "https://www.zhihu.com/api/v4/questions/37853887",
            "id": 37853887
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/80582394",
        "thumbnail": "",
        "created_time": 1452240840,
        "excerpt": "这个一开始我也很困惑，在网上找到的很多教程在这里都是糊弄过去的。直到我发现了有一个Hammersley-Clifford theorem ，把这个定理推一遍，这个问题就明白了。 ---------------- 比如说，假设有事件X1 X2，你想计算出p(X1) p(X2) p(X1|X2) p(X2|X1) ... (请自行脑补not X1, not X2) 假设有事件X1 X2 X3，你想计算出 p(X1) p(X2) p(X3) p(X1|X2X3) p(X2|X1X3) p(X3|X1X2) ... 你并不知道，X1 X2 ... Xn之间的关系，你希望能有一个…",
        "updated_time": 1452243801,
        "id": 80582394,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个一开始我也很困惑，在网上找到的很多教程在这里都是糊弄过去的。直到我发现了有一个<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Hammersley%25E2%2580%2593Clifford_theorem\" target=\"_blank\" rel=\"nofollow noreferrer\">Hammersley-Clifford theorem<i class=\"icon-external\"></i></a>，把这个定理推一遍，这个问题就明白了。<br>----------------<br>比如说，假设有事件X1 X2，你想计算出p(X1) p(X2) p(X1|X2) p(X2|X1) ...  (请自行脑补not X1, not X2)<br>假设有事件X1 X2 X3，你想计算出 p(X1) p(X2) p(X3) p(X1|X2X3) p(X2|X1X3) p(X3|X1X2) ...<br><br>你并不知道，X1 X2 ... Xn之间的关系，你希望能有一个神奇的模型，只需要比较少的参数，就能计算所有关于X1 X2 ... Xn之间能定义出来的概率。<br><br>Hammersley-Clifford theorem说的是，假如这个X1 X2 .. Xn 符合Markov property，那么就可以用Gibbs XXX来表示，或者假如你发现可以用Gibbs XXX来表示，那么他们就符合Markov property，两者是等价的。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么自己写的qsort比不上C语言库里自带的qsort效率高？",
            "updated_time": 1452081690,
            "question_type": "normal",
            "type": "question",
            "created": 1452058984,
            "url": "https://www.zhihu.com/api/v4/questions/39214230",
            "id": 39214230
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/80555241",
        "thumbnail": "",
        "created_time": 1452230442,
        "excerpt": "因为libc里的qsort不一定是quicksort啊 a libc qsort() shootout of sorts ",
        "updated_time": 1452230442,
        "id": 80555241,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为libc里的qsort不一定是quicksort啊<br><br><a href=\"https://link.zhihu.com/?target=http%3A//calmerthanyouare.org/2013/05/31/qsort-shootout.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">a libc qsort() shootout of sorts<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "使用Erlang实现http server是否更有优势？",
            "updated_time": 1451459971,
            "question_type": "normal",
            "type": "question",
            "created": 1451459971,
            "url": "https://www.zhihu.com/api/v4/questions/39016704",
            "id": 39016704
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/79250845",
        "thumbnail": "",
        "created_time": 1451460309,
        "excerpt": "谢邀。用Erlang当然方便了。随手就给你写一个出来。 -module(my_http_server).\n\n-export([start/0, accept/1, handle_connection/1]).\n\n\nstart() ->\n {ok, Socket} = gen_tcp:listen(8080, [binary, {packet, http}, {active, false}, {reuseaddr, true}]),\n Pid = spawn(?MODULE, accept, [Socket]),\n ok = gen_tcp:controlling_process(Socket, Pid),\n ok.\n\n\naccept(Socket) ->\n {ok, Conn} = gen_tcp:accept(Socket),\n Pid = …",
        "updated_time": 1451460335,
        "id": 79250845,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。用Erlang当然方便了。随手就给你写一个出来。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">my_http_server</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Socket</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}]),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Socket</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Conn</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">handle_connection</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_request</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"nv\">Headers</span> <span class=\"o\">=</span> <span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">inet</span><span class=\"p\">:</span><span class=\"nf\">setopts</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">}]),</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_header</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Value</span><span class=\"p\">}}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[{</span><span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"nv\">Value</span><span class=\"p\">}|</span><span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)];</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">http_eoh</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[]</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"s\">\"/\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">_)</span> <span class=\"o\">-&gt;</span> \n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n           <span class=\"nv\">Socket</span><span class=\"p\">,</span>\n           <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: text-plain</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n</code></pre></div><br>不服你可以用C++写一个啊",
        "extras": ""
    },
    {
        "question": {
            "title": "像知乎这样的评论回复模式，数据库应该怎么设计比较好，考虑性能、可扩展性等？",
            "updated_time": 1451299337,
            "question_type": "normal",
            "type": "question",
            "created": 1451299337,
            "url": "https://www.zhihu.com/api/v4/questions/38959595",
            "id": 38959595
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/78970191",
        "thumbnail": "",
        "created_time": 1451301561,
        "excerpt": "谢邀。评论学Disqus就好了嘛 Scaling Threaded Comments on Django at Disqus 知乎数据库结构全是anti pattern吧，毕竟是能出现-1条评论的数据库设计。",
        "updated_time": 1451301853,
        "id": 78970191,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。评论学Disqus就好了嘛<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cramer.io/2010/05/30/scaling-threaded-comments-on-django-at-disqus/\" target=\"_blank\" rel=\"nofollow noreferrer\"> Scaling Threaded Comments on Django at Disqus<i class=\"icon-external\"></i></a><br><br>知乎数据库结构全是anti pattern吧，毕竟是能出现-1条评论的数据库设计。",
        "extras": ""
    },
    {
        "question": {
            "title": "以什么方式自杀才有互联网和码农的风格？",
            "updated_time": 1450677475,
            "question_type": "normal",
            "type": "question",
            "created": 1450670881,
            "url": "https://www.zhihu.com/api/v4/questions/38730211",
            "id": 38730211
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/77852292",
        "thumbnail": "",
        "created_time": 1450686740,
        "excerpt": "这个还是很简单的。不妨假设曾老师是有九条命的程序员。看看我能不能用完这九条命。 一 曾老师得了心脏病，经医生全力抢救后装上了心脏起搏机。几个月后回医院复查， 医生检查后决定调整一下这个心脏起搏机的参数，在告知曾老师后，熟练的拿出遥控器开始设置。曾老师猛然想起来这心脏起搏机的程序是自己在很多年前写的，当时为了赶进度并没有写完整的形式证明。凭借超人的记忆，曾老师想起来这个地方有Bug，还没来得及反应，只见…",
        "updated_time": 1456844766,
        "id": 77852292,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个还是很简单的。不妨假设曾老师是有九条命的程序员。看看我能不能用完这九条命。<br><br>一<br><br>曾老师得了心脏病，经医生全力抢救后装上了心脏起搏机。几个月后回医院复查， 医生检查后决定调整一下这个心脏起搏机的参数，在告知曾老师后，熟练的拿出遥控器开始设置。曾老师猛然想起来这心脏起搏机的程序是自己在很多年前写的，当时为了赶进度并没有写完整的形式证明。凭借超人的记忆，曾老师想起来这个地方有Bug，还没来得及反应，只见医生已经按下了确认，曾老师就一命呜呼了。<br><br>二<br><br>曾老师搞物理研究忽悠不到经费。怒而改行写程序去了。凭借过人的智商，短短两年就成为了波音FFF的软件承包商。曾老师每次乘坐飞机，都会选择FFF机型。当然了，志得意满的曾老师，不会忘了继续到知乎上找轮子哥什么的撕逼。有一次，飞机刚起飞，他看到bhuztez在知乎上问闰秒又来了，你们的软件真的都没问题吗。曾老师刚想上去嘲讽一下轮子哥，猛然想起来，这个波音FFF的控制程序，只是用Matlab自动生成的代码在Simulink里仿真测试了一下，这个闰秒，显然也没有正确处理。曾老师赶紧看了一下时间，淡定的闭上了眼睛。<br><br>三<br><br>曾老师赚够了钱，开着他的智能飞机环游世界。当然了，天才的曾老师当然会亲自改造飞机。曾老师的飞机会吸入他的土豪金iPhone，这样曾老师就可以用Siri来控制飞机的飞行路线了，当然了，Siri还会顺便通报沿途的情况。这个飞机也是很安全的，碰到紧急情况，有弹射座椅会把身手敏捷的曾老师弹出去。有一天，刚飞到一个火山口，Siri报警紧急情况紧急情况，前方火山口即将喷发。曾老师的智能飞机当即将曾老师弹了出去。<br><br>四<br><br>曾老师非常鄙视机器学习论文灌水。凭借扎实的统计学基础，曾老师做一个真正的机器学习的例子，去弄个搞笑诺贝尔奖玩玩。曾老师利用大数据分析各种笑话，综合了大量素材之后，写一个程序，输入关键词就可以自动生成一个非常好笑的笑话。写论文时，曾老师随便输入了一个词，这个程序就生成出了一个史上最好笑的笑话。曾老师笑了三天三夜都合不拢嘴，活活把自己笑死了。<br><br>五<br><br>六<br><br>七<br><br>八<br><br>九",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待「如何看待《自己动手写编译器、链接器》一书大量抄袭开源编译器 TCC？」这么久了还有水军洗地？",
            "updated_time": 1450524340,
            "question_type": "normal",
            "type": "question",
            "created": 1450524340,
            "url": "https://www.zhihu.com/api/v4/questions/38682365",
            "id": 38682365
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/77582568",
        "thumbnail": "",
        "created_time": 1450527886,
        "excerpt": "反对轮子哥。就算LGPL不受支持，无论如何这个署名权是属于原作者的，没经过他同意，把他名字拿掉肯定是不对的。 不知道是作者还是出版社花钱买水军了。豆瓣评分可是有6.7啊自己动手写编译器、链接器 (豆瓣) 根据 如何看待《自己动手写编译器、链接器》一书大量抄袭开源编译器 TCC？ - sohu北极狼的回答 找到作者照片一张 赠送《自己动手写编译器、链接器》给斯坦福大学计算机系教授、龙书作者Monica 我怀疑下面很多匿名用户都是…",
        "updated_time": 1450529201,
        "id": 77582568,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "反对轮子哥。就算LGPL不受支持，无论如何这个署名权是属于原作者的，没经过他同意，把他名字拿掉肯定是不对的。<br><br>不知道是作者还是出版社花钱买水军了。豆瓣评分可是有6.7啊<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26339438/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自己动手写编译器、链接器 (豆瓣)<i class=\"icon-external\"></i></a><br><br>根据 <a href=\"https://www.zhihu.com/question/36352665/answer/72984130\" class=\"internal\">如何看待《自己动手写编译器、链接器》一书大量抄袭开源编译器 TCC？ - sohu北极狼的回答</a> 找到作者照片一张<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/boyublog/p/4967401.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 赠送《自己动手写编译器、链接器》给斯坦福大学计算机系教授、龙书作者Monica<i class=\"icon-external\"></i></a><br><br>我怀疑下面很多匿名用户都是作者马甲",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待唐纳德·特朗普（Donald Trump）在共和党内支持率升破 40%？",
            "updated_time": 1458104883,
            "question_type": "normal",
            "type": "question",
            "created": 1440626159,
            "url": "https://www.zhihu.com/api/v4/questions/35062190",
            "id": 35062190
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/77238007",
        "thumbnail": "",
        "created_time": 1450343645,
        "excerpt": "Trump比较会做生意吧。花的每一分钱都实实在在的买到了支持率。其他人还活在上个世纪吧，只会拿着财团的钱砸电视广告。从Youtube上看，Trump可是大获全胜啊。恶搞视频数量比剩下几位加起来都多吧。Obama是把互联网+众筹引入竞选行业，Trump可是把UGC引入了竞选行业。",
        "updated_time": 1450348171,
        "id": 77238007,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Trump比较会做生意吧。花的每一分钱都实实在在的买到了支持率。其他人还活在上个世纪吧，只会拿着财团的钱砸电视广告。从Youtube上看，Trump可是大获全胜啊。恶搞视频数量比剩下几位加起来都多吧。Obama是把互联网+众筹引入竞选行业，Trump可是把UGC引入了竞选行业。",
        "extras": ""
    },
    {
        "question": {
            "title": "Erlang排列组合示例中引发对列表解析的一些疑问？",
            "updated_time": 1450151939,
            "question_type": "normal",
            "type": "question",
            "created": 1450146727,
            "url": "https://www.zhihu.com/api/v4/questions/38534812",
            "id": 38534812
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/76855265",
        "thumbnail": "",
        "created_time": 1450151556,
        "excerpt": "我就给你举个简单的例子 1> A = [1,2].\n[1,2]\n2> B = [3,4].\n[3,4]\n3> [{X,Y} || X <- A, Y <- B].\n[{1,3},{1,4},{2,3},{2,4}]\n4>\n",
        "updated_time": 1450151556,
        "id": 76855265,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我就给你举个简单的例子<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1&gt; A = [1,2].\n[1,2]\n2&gt; B = [3,4].\n[3,4]\n3&gt; [{X,Y} || X &lt;- A, Y &lt;- B].\n[{1,3},{1,4},{2,3},{2,4}]\n4&gt;\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待刘强东所说解决淘宝假货问题“只要一个程序员一天时间”？",
            "updated_time": 1449811505,
            "question_type": "normal",
            "type": "question",
            "created": 1449811505,
            "url": "https://www.zhihu.com/api/v4/questions/38413465",
            "id": 38413465
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/76787711",
        "thumbnail": "",
        "created_time": 1450104498,
        "excerpt": "说明他也看过21天学通Erlang啊",
        "updated_time": 1450105430,
        "id": 76787711,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "说明他也看过21天学通Erlang啊",
        "extras": ""
    },
    {
        "question": {
            "title": "在Java中，我需要开发一个树！树肯定要递归遍历，每个字节点都要查询数据库！太耗性能！有什么好的方案？",
            "updated_time": 1449802021,
            "question_type": "normal",
            "type": "question",
            "created": 1449744340,
            "url": "https://www.zhihu.com/api/v4/questions/38390672",
            "id": 38390672
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/76162667",
        "thumbnail": "",
        "created_time": 1449744623,
        "excerpt": "关键词 recursive common table expression",
        "updated_time": 1449744623,
        "id": 76162667,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "关键词 recursive common table expression",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么有些大公司技术弱爆了？",
            "updated_time": 1449689917,
            "question_type": "normal",
            "type": "question",
            "created": 1436405425,
            "url": "https://www.zhihu.com/api/v4/questions/32039226",
            "id": 32039226
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75971541",
        "thumbnail": "",
        "created_time": 1449644691,
        "excerpt": "上面洗地洗的好欢。在另外一些问题里，比如 20岁，中专学历，安卓培训出来却发现要简历造假才有面试机会，而我不想，有没有合理的途径能找到一份工作？ - Android ，又一个个痛斥学历低的能力不行啦，培训班出来的各种造假啦。接着学历一个比一个高，对造假各种不能容忍，技术水平都是过硬的。开发出来这屎样，还敢出来洗地，学历造假不能忍，开发的时候各种糊弄，难道不也是造假么，怎么就能忍了？不仅忍了，还要洗地。不仅洗地…",
        "updated_time": 1449644842,
        "id": 75971541,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面洗地洗的好欢。在另外一些问题里，比如<a class=\"internal\" href=\"http://www.zhihu.com/question/38160761\"> 20岁，中专学历，安卓培训出来却发现要简历造假才有面试机会，而我不想，有没有合理的途径能找到一份工作？ - Android</a>，又一个个痛斥学历低的能力不行啦，培训班出来的各种造假啦。接着学历一个比一个高，对造假各种不能容忍，技术水平都是过硬的。开发出来这屎样，还敢出来洗地，学历造假不能忍，开发的时候各种糊弄，难道不也是造假么，怎么就能忍了？不仅忍了，还要洗地。不仅洗地，还要教育别人能忍才是水平。你们这是一百步笑五十步啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "2015大学英语四级637分水平如何什么概念？",
            "updated_time": 1440211546,
            "question_type": "normal",
            "type": "question",
            "created": 1440211546,
            "url": "https://www.zhihu.com/api/v4/questions/34897764",
            "id": 34897764
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75703505",
        "thumbnail": "",
        "created_time": 1449494526,
        "excerpt": "这个98.XX%是根据那个正态分布算出来的，并不反映实际情况。我根据某年大数据计算出来这个数字大约在 99.8XX% - 99.98XX% 之间。但是说实话四级只能考这么几分只能勉强算是垃圾水平。按照知乎的标准，英语四级得裸考700分才算及格的。恩，就是这样。",
        "updated_time": 1449494899,
        "id": 75703505,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个98.XX%是根据那个正态分布算出来的，并不反映实际情况。我根据某年大数据计算出来这个数字大约在 99.8XX% - 99.98XX% 之间。但是说实话四级只能考这么几分只能勉强算是垃圾水平。按照知乎的标准，英语四级得裸考700分才算及格的。恩，就是这样。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么python代码有时候在命令行下和Python Shell中执行的结果不一样呢 ?",
            "updated_time": 1437443590,
            "question_type": "normal",
            "type": "question",
            "created": 1437443590,
            "url": "https://www.zhihu.com/api/v4/questions/33003448",
            "id": 33003448
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75651411",
        "thumbnail": "",
        "created_time": 1449473232,
        "excerpt": "首先，如上面 @柯豪 的答案所说，Shell的行为并不完全和Python代码一致 >>> for i in range(5):\n... i\n... \n0\n1\n2\n3\n4\n 如上面的 @壮壮 答案所说，在Idle里运行，实际上你并不能看到标准输出，你只能看到Python代码往标准输出里写的东西，因为Idle里的输出就是靠改sys.stdout实现的。这也就是为什么还有 @Shawn Wu 里能在直接从命令行启动的Python Shell里看到输出。并不是因为这个Shell的实现不一致导致的。",
        "updated_time": 1449473440,
        "id": 75651411,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "首先，如上面 <a data-title=\"@柯豪\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/a09134b1bb8860d6b26e96f163f264cd\" data-hash=\"a09134b1bb8860d6b26e96f163f264cd\" data-tip=\"p$b$a09134b1bb8860d6b26e96f163f264cd\" data-hovercard=\"p$b$a09134b1bb8860d6b26e96f163f264cd\">@柯豪</a> 的答案所说，Shell的行为并不完全和Python代码一致<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; for i in range(5):\n...     i\n... \n0\n1\n2\n3\n4\n</code></pre></div><br>如上面的 @<a class=\"internal\" href=\"http://www.zhihu.com/people/zhuang-zhuang-48\">壮壮</a> 答案所说，在Idle里运行，实际上你并不能看到标准输出，你只能看到Python代码往标准输出里写的东西，因为Idle里的输出就是靠改sys.stdout实现的。这也就是为什么还有  <a data-title=\"@Shawn Wu\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/48fe62b9505f9f6998bb19fa898d5b05\" data-hash=\"48fe62b9505f9f6998bb19fa898d5b05\" data-tip=\"p$b$48fe62b9505f9f6998bb19fa898d5b05\" data-hovercard=\"p$b$48fe62b9505f9f6998bb19fa898d5b05\">@Shawn Wu</a> 里能在直接从命令行启动的Python Shell里看到输出。并不是因为这个Shell的实现不一致导致的。",
        "extras": ""
    },
    {
        "question": {
            "title": "编程比开饭馆有趣吗？",
            "updated_time": 1449465374,
            "question_type": "normal",
            "type": "question",
            "created": 1449464994,
            "url": "https://www.zhihu.com/api/v4/questions/38272361",
            "id": 38272361
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75631443",
        "thumbnail": "",
        "created_time": 1449466372,
        "excerpt": "我认为能造出一台能自己做菜的机器才是最有趣的 ...",
        "updated_time": 1449466372,
        "id": 75631443,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为能造出一台能自己做菜的机器才是最有趣的 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "协程的好处是什么？",
            "updated_time": 1451433548,
            "question_type": "normal",
            "type": "question",
            "created": 1349315569,
            "url": "https://www.zhihu.com/api/v4/questions/20511233",
            "id": 20511233
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75267275",
        "thumbnail": "",
        "created_time": 1449234594,
        "excerpt": "轮子哥又来为微软发明历史了。C#在2012年才引入await，至少Alice ML在这之前好多年就有await了，肯定还有更早的await。更别说各种名字不叫await的对同样功能的实现了。而且非要死抠await的话，C#里出现这种东西实质上是语言设计的缺陷，有啥好吹的。",
        "updated_time": 1449235515,
        "id": 75267275,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "轮子哥又来为微软发明历史了。C#在2012年才引入await，至少Alice ML在这之前好多年就有await了，肯定还有更早的await。更别说各种名字不叫await的对同样功能的实现了。而且非要死抠await的话，C#里出现这种东西实质上是语言设计的缺陷，有啥好吹的。",
        "extras": ""
    },
    {
        "question": {
            "title": "国内程序员需要达到什么样的水平，才能有大房子、玩跑车、去瑞士滑雪、去马尔代夫旅游？",
            "updated_time": 1458142455,
            "question_type": "normal",
            "type": "question",
            "created": 1449197830,
            "url": "https://www.zhihu.com/api/v4/questions/38172957",
            "id": 38172957
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/75188645",
        "thumbnail": "",
        "created_time": 1449200644,
        "excerpt": "先预防性拉黑 @云舒 了。我几乎从来就没用过拉黑。我可不想评论区被用来输出阿里的价值观。 ------------------------------------------------- 首先， @云舒 现在根本就不能算程序员啊。 @云舒 现在是资本家啊。资本家为了忽悠别人为他打工，难道该整天炫耀自己捐了多少多少钱？当然不能啦。当然要把自己的生活描述成我们这种连饭都吃不上的人意淫的富人的生活，至于是不是真的这样，根本不重要。 当然了，在他那个时代确实不…",
        "updated_time": 1449207802,
        "id": 75188645,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先预防性拉黑 <a data-title=\"@云舒\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/18b17051663bffa1f556049e8e885fba\" data-hash=\"18b17051663bffa1f556049e8e885fba\" data-tip=\"p$b$18b17051663bffa1f556049e8e885fba\" data-hovercard=\"p$b$18b17051663bffa1f556049e8e885fba\">@云舒</a> 了。我几乎从来就没用过拉黑。我可不想评论区被用来输出阿里的价值观。<br><br>-------------------------------------------------<br><br>首先， <a data-title=\"@云舒\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/18b17051663bffa1f556049e8e885fba\" data-hash=\"18b17051663bffa1f556049e8e885fba\" data-tip=\"p$b$18b17051663bffa1f556049e8e885fba\" data-hovercard=\"p$b$18b17051663bffa1f556049e8e885fba\">@云舒</a> 现在根本就不能算程序员啊。 <a data-title=\"@云舒\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/18b17051663bffa1f556049e8e885fba\" data-hash=\"18b17051663bffa1f556049e8e885fba\" data-tip=\"p$b$18b17051663bffa1f556049e8e885fba\" data-hovercard=\"p$b$18b17051663bffa1f556049e8e885fba\">@云舒</a> 现在是资本家啊。资本家为了忽悠别人为他打工，难道该整天炫耀自己捐了多少多少钱？当然不能啦。当然要把自己的生活描述成我们这种连饭都吃不上的人意淫的富人的生活，至于是不是真的这样，根本不重要。<br><br>当然了，在他那个时代确实不难啊，毕竟那个时代国内会写程序的少，稍微会写一点点就很值钱了。许式伟更传奇呢，连程序都写不顺溜，都能靠一直当程序员升职加薪当上CEO呢。现在，就他们当年那点水平想找到工作都够呛，假如你听他的认为没学历也能轻松进入BAT，那你就应该看看我这个反例。光吹牛的水平我就比他们高了至少一个数量级，更别说写程序了，能找到工作么？连面试机会都拿不到。<br><br>现在当然很难了，也许根本就没可能。你至少得是名校毕业的，能答出很多四选一但是实际没一个答案是对的的选择题，通过层层筛选，才能勉强进入阿里啊。这样才只比他们当年落后没多少。之后就更难了，升职的名额就这么几个，你当然要付出比他们多几十倍的努力才能升上去，假如你不带着光环跳槽及时离开阿里，从股票上获得的收入也就他们的一个零头罢了。",
        "extras": ""
    },
    {
        "question": {
            "title": "编译原理（龙书）的句法分析部分内容是不是有很大问题？",
            "updated_time": 1449179693,
            "question_type": "normal",
            "type": "question",
            "created": 1449054244,
            "url": "https://www.zhihu.com/api/v4/questions/38117091",
            "id": 38117091
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/74949094",
        "thumbnail": "",
        "created_time": 1449054313,
        "excerpt": "不不不，龙书的正确读法是从后往前读。老是有人提这种问题。我答这么多遍，都觉得自己是个复读机了。简单的说就是先学Datalog，龙书里剩下的内容要么是trivial的，要么就是可以从Datalog推导出来的，要么就是给Datalog扩展了一下。因为这个Datalog Evaluation就是Earley Deduction，所以不讲Earley也是正常的。",
        "updated_time": 1449057497,
        "id": 74949094,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不不不，龙书的正确读法是从后往前读。老是有人提这种问题。我答这么多遍，都觉得自己是个复读机了。简单的说就是先学Datalog，龙书里剩下的内容要么是trivial的，要么就是可以从Datalog推导出来的，要么就是给Datalog扩展了一下。因为这个Datalog Evaluation就是Earley Deduction，所以不讲Earley也是正常的。",
        "extras": ""
    },
    {
        "question": {
            "title": "有了自己的孩子，你会采取哪些和自己父母不一样的儿童教养方式？",
            "updated_time": 1434512189,
            "question_type": "normal",
            "type": "question",
            "created": 1434501874,
            "url": "https://www.zhihu.com/api/v4/questions/31367713",
            "id": 31367713
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/74823552",
        "thumbnail": "",
        "created_time": 1448980433,
        "excerpt": "当然是坚决不能有孩子了。倒推回来就是不能结婚了。别的地方我不知道，反正在国内，结婚大致等于两个年轻人举白旗向世俗教投降了，除了生孩子带孩子再也没有存在的意义了。倒推回来当然就是不能谈恋爱了，要是谈恋爱被家长发现了，不管最后跟谁，结婚大约是跑不了了的。等到这两个悲惨的年轻人的孩子长大了，他们却早已可悲的变成了世俗的一部分。 说永远要比做容易。更何况小孩的精力永远要比成年人旺盛的多。反正我是不认为我…",
        "updated_time": 1449022583,
        "id": 74823552,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是坚决不能有孩子了。倒推回来就是不能结婚了。别的地方我不知道，反正在国内，结婚大致等于两个年轻人举白旗向世俗教投降了，除了生孩子带孩子再也没有存在的意义了。倒推回来当然就是不能谈恋爱了，要是谈恋爱被家长发现了，不管最后跟谁，结婚大约是跑不了了的。等到这两个悲惨的年轻人的孩子长大了，他们却早已可悲的变成了世俗的一部分。<br><br>说永远要比做容易。更何况小孩的精力永远要比成年人旺盛的多。反正我是不认为我能在精疲力尽的时候还能保持足够的理智，而不是无脑的重复自己父母当时的错误。因为我从小到大父母都是这么做的，等我碰到相同的情况，不好好想一想，几乎可以肯定会采取同样的做法。等我能采用正确的应对方法了，估计孩子都早已经长大了。<br><br>世俗教是这个世界上最隐蔽最肮脏最恶心的宗教，因为他总是披着世俗的外衣。<br>------------------------------------------------<br><br>以上只是我5-7岁时对这个恶心的世界的一点点粗浅的认识。",
        "extras": ""
    },
    {
        "question": {
            "title": "用递归算法，譬如斐波那契数列来测试编程语言&VM执行效率是否可靠？为什么？",
            "updated_time": 1458635033,
            "question_type": "normal",
            "type": "question",
            "created": 1447215570,
            "url": "https://www.zhihu.com/api/v4/questions/37383404",
            "id": 37383404
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/74794161",
        "thumbnail": "",
        "created_time": 1448966189,
        "excerpt": "快快加上Erlang代码 #!/usr/bin/env escript\n-mode(compile).\n-compile([native, {hipe, [o3]}]).\n\nfibonacci(0) -> 0;\nfibonacci(1) -> 1;\nfibonacci(N) -> fibonacci(N-1)+fibonacci(N-2).\n\nmain([]) ->\n {Time,_} = timer:tc(fun fibonacci/1, [30]),\n io:format(\"~p~n\",[Time/1000000]).\n 马上就能说明 Erlang > Java 了 （逃",
        "updated_time": 1472265945,
        "id": 74794161,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "快快加上Erlang代码<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"err\">#</span><span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">escript</span>\n<span class=\"p\">-</span><span class=\"ni\">mode</span><span class=\"p\">(</span><span class=\"n\">compile</span><span class=\"p\">).</span>\n<span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">([</span><span class=\"n\">native</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">hipe</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">o3</span><span class=\"p\">]}]).</span>\n\n<span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">).</span>\n\n<span class=\"nf\">main</span><span class=\"p\">([])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"nv\">Time</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nn\">timer</span><span class=\"p\">:</span><span class=\"nf\">tc</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]),</span>\n    <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">~p~n</span><span class=\"s\">\"</span><span class=\"p\">,[</span><span class=\"nv\">Time</span><span class=\"o\">/</span><span class=\"mi\">1000000</span><span class=\"p\">]).</span>\n</code></pre></div><br>马上就能说明 Erlang &gt; Java 了 （逃",
        "extras": ""
    },
    {
        "question": {
            "title": "为啥 Erlang 没有像 Go、Scala 语言那样崛起？",
            "updated_time": 1454346895,
            "question_type": "normal",
            "type": "question",
            "created": 1448867596,
            "url": "https://www.zhihu.com/api/v4/questions/38032439",
            "id": 38032439
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/74636097",
        "thumbnail": "",
        "created_time": 1448880280,
        "excerpt": "最大的锅当然是爱立信的。明明是自己花了很长时间搞出来确实好的语言，却因为不是公开标准或没有开源实现拒绝在新产品中使用Erlang开发，这是什么脑残想法，难道就不能自己开源么？最后当然是开源了，可是这错过了9个9的宣传啊。本来是一个极好的让业内非程序员都知道这门语言开发效率高的机会。 ... the rest of the world was wrong and ... we were right— A History of Erlang Erlang是一门精简的语言，基本上只保留了真正…",
        "updated_time": 1448942853,
        "id": 74636097,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "最大的锅当然是爱立信的。明明是自己花了很长时间搞出来确实好的语言，却因为不是公开标准或没有开源实现拒绝在新产品中使用Erlang开发，这是什么脑残想法，难道就不能自己开源么？最后当然是开源了，可是这错过了9个9的宣传啊。本来是一个极好的让业内非程序员都知道这门语言开发效率高的机会。<br><br><blockquote><b>... the rest of the world was wrong and ... we were right</b><p>— A History of Erlang</p></blockquote><br>Erlang是一门精简的语言，基本上只保留了真正有用的语言特性，目前除了模仿C语言的header和宏以外，就没有别的语言里很多看上去无比花哨但实际上有和没有没区别的语言特性。就像XXX说的那样，假如你已经学了某些流行的语言，你没法通过学习掌握Erlang，你只能通过unlearn来掌握Erlang，这对很多人来说是前所未有的体验。比如<br><br><a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/cateches/status/670096508021161984\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">twitter.com/cateches/st</span><span class=\"invisible\">atus/670096508021161984</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><br><noscript><img data-rawheight=\"496\" data-rawwidth=\"784\" src=\"https://pic3.zhimg.com/ac205cd4a693f0a067e7e9a601f5b4c2_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"784\" data-original=\"https://pic3.zhimg.com/ac205cd4a693f0a067e7e9a601f5b4c2_r.png\"></noscript><img data-rawheight=\"496\" data-rawwidth=\"784\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"784\" data-original=\"https://pic3.zhimg.com/ac205cd4a693f0a067e7e9a601f5b4c2_r.png\" data-actualsrc=\"https://pic3.zhimg.com/ac205cd4a693f0a067e7e9a601f5b4c2_b.png\"><br>很不幸，现在应该没有人会认为有通用的语言，但是被洗脑的人还是会去和他所熟悉的语言比较，假如看上去有很大不同，就会隐隐认为不通用。<br><br>第三呢是因为Erlang太强大了，在某些极端情况用其他开发的程序直接就整个进程crash了，Erlang竟然还能撑住，结果却被黑成了只适合用来开发XXX的。没见过这么不要脸的黑。明明Erlang是为control plane设计的，在data plane都吊打你们，还有脸说Erlang不适合开发业务逻辑。<br><br>-------------------------------<br><br>在全球范围内看，也许Go不能算崛起，但是在国内Go确实火的不行啊，不知道有啥好反对的。<br><br>乱扣帽子的都来了。Go才是最最脑残的精英主义的产物。Erlang才是最最实用主义的体现。<br><br>Rob Pike就是精英主义的典范啊。同样的东西他自己写出来的就是多么优雅多么...多么....，RMS写出来的就是渣。RMS才是真自由主义。假如Rob Pike没那么精英主义，他一定会去给Ada的开源实现加上GC(Ada最早的标准里规定的语义就是允许有GC的，只是说具体实现里GC是可选的，没有GC也可以认为是符合标准的而已)，而不是搞出个脑残的Go来。如果不是这种精英主义，谁会想当然的认为以Go的语义，一个naive的GC就够用了？现在Go 1.5 GC改进了一点点就是再一次改变世界了？Go不是没magic，Go是连该有的都给你去掉了。<br><br>Erlang是非常实用的语言。Erlang开发效率大约8倍于别的语言可是有第三方实验证明的。Go语言有么？有的话，赶紧把论文地址贴上来。<br><br>-------------------------------<br><br>当然了，现实是很荒诞的，用什么语言，基本上都不是由专业程序员说了算的。比如Java当年不就是靠Applet刷存在感的么。所以，争取专业程序员的支持是没有意义的。",
        "extras": ""
    },
    {
        "question": {
            "title": "最快的算法题?",
            "updated_time": 1448880960,
            "question_type": "normal",
            "type": "question",
            "created": 1448865577,
            "url": "https://www.zhihu.com/api/v4/questions/38031089",
            "id": 38031089
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/74619385",
        "thumbnail": "",
        "created_time": 1448873275,
        "excerpt": "我来扔个代码 def d(n):\n s = 0\n for i in xrange(1, int(n**0.5)+1):\n s += n/i*i\n\n i = int(n**0.5)+1\n for j in xrange(n/i, 0, -1):\n s += j * ((i+n/j)*(n/j-i+1)/2)\n i = n/j+1\n\n return s\n 结果 >>> d(10**12)\n822467033425357340138978\n 用时小于1秒",
        "updated_time": 1448877834,
        "id": 74619385,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我来扔个代码<br><br><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">d</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span>\n\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">s</span> <span class=\"o\">+=</span> <span class=\"n\">j</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">/</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">s</span>\n</code></pre></div><br>结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; d(10**12)\n822467033425357340138978\n</code></pre></div><br>用时小于1秒",
        "extras": ""
    },
    {
        "question": {
            "title": "一个只有命令行的Linux裸机，如何从无到有？",
            "updated_time": 1448586648,
            "question_type": "normal",
            "type": "question",
            "created": 1448439252,
            "url": "https://www.zhihu.com/api/v4/questions/37872722",
            "id": 37872722
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/73893520",
        "thumbnail": "",
        "created_time": 1448442174,
        "excerpt": "More on Using Bash's Built-in /dev/tcp File (TCP/IP) ",
        "updated_time": 1448442174,
        "id": 73893520,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=http%3A//www.linuxjournal.com/content/more-using-bashs-built-devtcp-file-tcpip\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">More on Using Bash's Built-in /dev/tcp File (TCP/IP)<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "想学习一下KVM，有没有相关书籍和小项目推荐？",
            "updated_time": 1309064815,
            "question_type": "normal",
            "type": "question",
            "created": 1309064815,
            "url": "https://www.zhihu.com/api/v4/questions/19735293",
            "id": 19735293
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/73182535",
        "thumbnail": "",
        "created_time": 1448030565,
        "excerpt": "文档 https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt 值得参考小项目，比如 Google的 google/novm · GitHub ，尽管是用Go写的",
        "updated_time": 1448030565,
        "id": 73182535,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "文档 <a href=\"https://link.zhihu.com/?target=https%3A//www.kernel.org/doc/Documentation/virtual/kvm/api.txt\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kernel.org/doc/Document</span><span class=\"invisible\">ation/virtual/kvm/api.txt</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><br>值得参考小项目，比如 Google的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/google/novm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">google/novm · GitHub<i class=\"icon-external\"></i></a> ，尽管是用Go写的",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待那些研究数学的人，数学到底有没有用？",
            "updated_time": 1447607116,
            "question_type": "normal",
            "type": "question",
            "created": 1446996603,
            "url": "https://www.zhihu.com/api/v4/questions/37310518",
            "id": 37310518
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/72626036",
        "thumbnail": "",
        "created_time": 1447740876,
        "excerpt": "当然有用啦 数学学的好，能搬起石头砸自己的脚 ——泊松",
        "updated_time": 1447768870,
        "id": 72626036,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<p>当然有用啦</p><br><blockquote><p>数学学的好，能搬起石头砸自己的脚<br></p><p>——泊松</p></blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "网页上的视频播放器是如何编写的？",
            "updated_time": 1346149364,
            "question_type": "normal",
            "type": "question",
            "created": 1346148753,
            "url": "https://www.zhihu.com/api/v4/questions/20447883",
            "id": 20447883
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/72529580",
        "thumbnail": "",
        "created_time": 1447682965,
        "excerpt": "反对 @邵成 的答案 上面那几个一看就是Flash播flv的。和HTML5完全两个概念。 然后可以从里面取帧画到一个<canvas>上 绕这么大个弯干啥，可不可行都是个问题。直接在上面叠一层HTML元素就完啦。推荐 clappr/clappr · GitHub 要播分段flv还是得自己用Media Source Extension才行。",
        "updated_time": 1447682965,
        "id": 72529580,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "反对  <a data-title=\"@邵成\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2d8f51b6523e01a8529606f466d98198\" data-hash=\"2d8f51b6523e01a8529606f466d98198\" data-hovercard=\"p$b$2d8f51b6523e01a8529606f466d98198\">@邵成</a>  的答案<br><br>上面那几个一看就是Flash播flv的。和HTML5完全两个概念。<br><br><blockquote>然后可以从里面取帧画到一个&lt;canvas&gt;上<br></blockquote><br>绕这么大个弯干啥，可不可行都是个问题。直接在上面叠一层HTML元素就完啦。推荐 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/clappr/clappr\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">clappr/clappr · GitHub<i class=\"icon-external\"></i></a><br><br>要播分段flv还是得自己用Media Source Extension才行。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价龙芯中科：政府应该把国外芯片挡一挡？",
            "updated_time": 1445938331,
            "question_type": "normal",
            "type": "question",
            "created": 1445938331,
            "url": "https://www.zhihu.com/api/v4/questions/36927881",
            "id": 36927881
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/72440533",
        "thumbnail": "",
        "created_time": 1447648667,
        "excerpt": "那我要提一个问题： 两岸和平统一之后，龙芯还有什么存在的意义？ - 台湾 ",
        "updated_time": 1447648667,
        "id": 72440533,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "那我要提一个问题： <a href=\"http://www.zhihu.com/question/37194758\" class=\"internal\">两岸和平统一之后，龙芯还有什么存在的意义？ - 台湾</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "函数式编程和反应式编程（reactive programming）有什么区别？",
            "updated_time": 1462341961,
            "question_type": "normal",
            "type": "question",
            "created": 1444655598,
            "url": "https://www.zhihu.com/api/v4/questions/36431501",
            "id": 36431501
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/72374923",
        "thumbnail": "",
        "created_time": 1447601850,
        "excerpt": "谢邀。我不知道这有什么区别。一般认为APL家族的都是典型的函数式语言，而一般认为spreadsheet是一种响应式编程风格。假如Wikipedia没说错的话，基于APL的APLDOT是最早的spreadsheet(至少也是之一)。而比如APL家族里的A+就是一种把这种风格做成语言原生特性的。 假如你了解APL，你就会知道reactive是一个很糟糕的名词，那些框架不过是对APL家族的拙劣模仿。并不比许式伟用cerl模仿Erlang高明多少。 首先来回顾一下什么是函数式风…",
        "updated_time": 1447646730,
        "id": 72374923,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。我不知道这有什么区别。一般认为APL家族的都是典型的函数式语言，而一般认为spreadsheet是一种响应式编程风格。假如Wikipedia没说错的话，基于APL的APLDOT是最早的spreadsheet(至少也是之一)。而比如APL家族里的A+就是一种把这种风格做成语言原生特性的。<br><br>假如你了解APL，你就会知道reactive是一个很糟糕的名词，那些框架不过是对APL家族的拙劣模仿。并不比许式伟用cerl模仿Erlang高明多少。<br><br>首先来回顾一下什么是函数式风格。函数式风格不是lazy，不是immutable，不是____不就是___上的____ ，这有什么难理解的。简单的说函数式风格就是用函数把函数组合成函数。能让你方便的使用这种风格写程序的语言才叫函数式语言。<br><br>比如，J语言<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   1 2 +/ 3 4\n4 5\n5 6\n</code></pre></div><br>因为使用函数式的风格，在这里完全避免了one-element-at-a-time这种思维模式。<br><br>只不过J语言基本的数据类型是数组，也就是从自然数映射到一个数值。而FRP的基本数据类型是time series(FIXME: this is a buzzword)，也就是从实数映射到一个数值。而你要写的函数，输入输出都是time series。使用函数式风格，就可以避免陷入one-event-at-a-time的思维模式。<br><br>很难举出一个非常直观的例子，因为时间是看不见的。你要好好想一想，在spreadsheet里，可以认为，每个格子在每个时间点上都有一个数值，你改动了某个格子的数值，也就是从这个时间点开始这个格子的数值是另外一个数了，而所有用公式定义的格子，公式里有用到这个格子的数值的，从这个时间点开始，他们的数值也变了。<br><br>而这个Functional Reactive Programming的名字起的非常不好。首先呢，这个Haskell扭曲了functional的定义，大家都理解不了这里哪里functional了，要不就是瞎凑了一堆似是而非的理由(你一定想起object-oriented了吧)。Reactive指的是实现方式，函数式风格是为了帮助你避免思维方式被具体实现所限制。假如都这么起名的话，Erlang应该叫作Objective Callback Programming，不妨缩写成Objective-C。",
        "extras": ""
    },
    {
        "question": {
            "title": "使用Erlang如何计算七牛上传凭证的安全URL Base64?",
            "updated_time": 1447259556,
            "question_type": "normal",
            "type": "question",
            "created": 1447259556,
            "url": "https://www.zhihu.com/api/v4/questions/37403186",
            "id": 37403186
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/71912453",
        "thumbnail": "",
        "created_time": 1447320754,
        "excerpt": "谢邀。这个问题是因为七牛云文档写的不好。 请注意那句说的不是很清楚的话 此处输出的是每个字节的十六进制表示 我想那句话是这个意思 1> list_to_integer(\"c10e287f2b1e7f547b20a9ebce2aada26ab20ef2\", 16).\n1102150956966393481553827879863479836242594631410\n2> binary_to_integer(<<\"c10e287f2b1e7f547b20a9ebce2aada26ab20ef2\">>, 16).\n1102150956966393481553827879863479836242594631410\n3> 16#c10e287f2b1e7f547b20a9eb…",
        "updated_time": 1447320754,
        "id": 71912453,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。这个问题是因为七牛云文档写的不好。<br><br>请注意那句说的不是很清楚的话<br><br><blockquote>此处输出的是每个字节的十六进制表示<br></blockquote><br>我想那句话是这个意思<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1&gt; list_to_integer(\"c10e287f2b1e7f547b20a9ebce2aada26ab20ef2\", 16).\n1102150956966393481553827879863479836242594631410\n2&gt; binary_to_integer(&lt;&lt;\"c10e287f2b1e7f547b20a9ebce2aada26ab20ef2\"&gt;&gt;, 16).\n1102150956966393481553827879863479836242594631410\n3&gt; 16#c10e287f2b1e7f547b20a9ebce2aada26ab20ef2.\n1102150956966393481553827879863479836242594631410\n4&gt; X = 1102150956966393481553827879863479836242594631410.\n1102150956966393481553827879863479836242594631410\n5&gt; base64:encode(&lt;&lt;X:160&gt;&gt;).\n&lt;&lt;\"wQ4ofysef1R7IKnrziqtomqyDvI=\"&gt;&gt;\n6&gt;\n</code></pre></div><br>...",
        "extras": ""
    },
    {
        "question": {
            "title": "Erlang之父，如何看待Elixir？",
            "updated_time": 1446832454,
            "question_type": "normal",
            "type": "question",
            "created": 1446832454,
            "url": "https://www.zhihu.com/api/v4/questions/37256965",
            "id": 37256965
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/71164132",
        "thumbnail": "",
        "created_time": 1446861649,
        "excerpt": "A Week with Elixir ",
        "updated_time": 1446861649,
        "id": 71164132,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=http%3A//joearms.github.io/2013/05/31/a-week-with-elixir.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Week with Elixir<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "黄色视频网站是如何工作的？",
            "updated_time": 1446599912,
            "question_type": "normal",
            "type": "question",
            "created": 1446599912,
            "url": "https://www.zhihu.com/api/v4/questions/37160044",
            "id": 37160044
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/71118856",
        "thumbnail": "",
        "created_time": 1446819227,
        "excerpt": "曾老师你是打算开一个直播网站么？参考，如何评价Facebook于2016年元旦左右正式入华？ - 知乎用户的回答 ",
        "updated_time": 1446819227,
        "id": 71118856,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师你是打算开一个直播网站么？参考，<a class=\"internal\" href=\"http://www.zhihu.com/question/36126840/answer/71007470\">如何评价Facebook于2016年元旦左右正式入华？ - 知乎用户的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "Whatsapp 在过去 5 年，是如何做到如此强劲的用户增长？",
            "updated_time": 1392951047,
            "question_type": "normal",
            "type": "question",
            "created": 1392871840,
            "url": "https://www.zhihu.com/api/v4/questions/22798708",
            "id": 22798708
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/69955398",
        "thumbnail": "",
        "created_time": 1446129969,
        "excerpt": "WhatsApp's Co-Founder on How the App Became a Phenomenon 所谓不花钱做市场推广一说完全就是忽悠人的。 WhatsApp创始人最近都已经承认了主要就是靠预装。 预装且第一年免费，我感觉这和国内流氓软件的做法并没有本质区别。",
        "updated_time": 1446129969,
        "id": 69955398,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=http%3A//www.wired.com/2015/10/whatsapps-co-founder-on-how-the-iconoclastic-app-got-huge/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WhatsApp's Co-Founder on How the App Became a Phenomenon<i class=\"icon-external\"></i></a><br><br>所谓不花钱做市场推广一说完全就是忽悠人的。<br><br>WhatsApp创始人最近都已经承认了主要就是靠预装。<br><br>预装且第一年免费，我感觉这和国内流氓软件的做法并没有本质区别。",
        "extras": ""
    },
    {
        "question": {
            "title": "在简化代码时最有优势的是 Python 吗？",
            "updated_time": 1446127255,
            "question_type": "normal",
            "type": "question",
            "created": 1435978160,
            "url": "https://www.zhihu.com/api/v4/questions/31899866",
            "id": 31899866
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/69772850",
        "thumbnail": "",
        "created_time": 1446026867,
        "excerpt": "谢邀。好像是Perl 6最强大了 6, 12 ... * > 100\n 在简化代码时最有优势的是python嗎？ - Zete 的回答 里面的J语言代码写的太奇怪了，一般不这么写啊 NB. 令A为1到20\n A =: 1+i.20\n A\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\n NB. 2除A的余数\n 2 | A\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n NB. 3除A的余数\n 3 | A\n1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2\n NB. 2 3 分别除A的余数\n 2 3 |/ A\n1 0 1 0 1 0 1 0 1…",
        "updated_time": 1453711463,
        "id": 69772850,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。好像是Perl 6最强大了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">6, 12 ... * &gt; 100\n</code></pre></div><br><a href=\"http://www.zhihu.com/question/31899866/answer/54107956\" class=\"internal\">在简化代码时最有优势的是python嗎？ - Zete 的回答</a> 里面的J语言代码写的太奇怪了，一般不这么写啊<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   NB. 令A为1到20\n   A =: 1+i.20\n   A\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n\n   NB. 2除A的余数\n   2 | A\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n   NB. 3除A的余数\n   3 | A\n1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2\n   NB. 2 3 分别除A的余数\n   2 3 |/ A\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2\n   NB. 2 3 分别除A的余数 等于0\n   0 = 2 3 |/ A\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0\n   NB. 2 3分别除A的余数 都等于0\n   *./ 0 = 2 3 |/ A\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0\n   NB. A中 2 3分别除A的余数 都等于0 的\n   A #~ *./ 0 = 2 3 |/ A\n6 12 18\n   NB. A中 所有 2 3分别除A的余数 都等于0 的 之和\n   +/ A #~ *./ 0 = 2 3 |/ A\n36\n\n   NB. 写成一个函数\n   f =: 4:'+/ y #~ *./ 0 = x |/ y'\n   f =: 4 : '+/ y #~ *./ 0 = x |/ y'\n   2 3 f A\n36\n   2 3 f 1+i.100\n816\n\n   NB. 现在开始把变量去掉，这样表情就很丰富了\n   2 3 ([: 0&amp;= |/) A\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0\n   2 3 ([: *./ [: 0&amp;= |/) A\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0\n   2 3 (] #~ [: *./ [: 0&amp;= |/) A\n6 12 18\n   2 3 ([: +/ ] #~ [: *./ [: 0&amp;= |/) A\n36\n   g =: [: +/ ] #~ [: *./ [: 0&amp;= |/\n   2 3 g A\n36\n   2 3 g 1+i.100\n816\n\n   NB. 现在把多于的空格去掉\n   2 3 ([:+/]#~[:*./[:0&amp;=|/) A\n36\n   h =: [:+/]#~[:*./[:0&amp;=|/\n   2 3 h A\n36\n   2 3 h 1+i.100\n816\n\n   NB. 开始改进\n   NB. 2 3分别除A的余数 都等于0\n   *./ 0 = 2 3 |/ A\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0\n   NB. 也可以先求最小公倍数再求余数等于0\n   0 = A |~ *./ 2 3\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0\n   i =: 4 : '+/ y #~ 0 = y |~ *./ x'\n   2 3 i A\n36\n   2 3 i 1+i.100\n816\n   NB. 去掉变量和空格\n   j =: [:+/]#~[:0&amp;=(|~*./)~\n   2 3 j A\n36\n   2 3 j 1+i.100\n816\n</code></pre></div><br>J语言字符也不少嘛",
        "extras": ""
    },
    {
        "question": {
            "title": "使用yield可以做哪些很酷的事情？",
            "updated_time": 1444996825,
            "question_type": "normal",
            "type": "question",
            "created": 1444996825,
            "url": "https://www.zhihu.com/api/v4/questions/36567099",
            "id": 36567099
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/68061639",
        "thumbnail": "",
        "created_time": 1445005220,
        "excerpt": "这个问题就是给我准备的嘛 当有人声称在CPython里实现了一个沙盒的时候就可以用yield去逗他了，I was looking through the code and saw someone submitted this but didn't run it:... 酷到没工作...",
        "updated_time": 1445007154,
        "id": 68061639,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个问题就是给我准备的嘛<br><br>当有人声称在CPython里实现了一个沙盒的时候就可以用yield去逗他了，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D6658381\" target=\"_blank\" rel=\"nofollow noreferrer\">I was looking through the code and saw someone submitted this but didn't run it:...<i class=\"icon-external\"></i></a><br><br>酷到没工作...",
        "extras": ""
    },
    {
        "question": {
            "title": "「好像突然有了软肋，也突然有了铠甲」可以怎么翻译成英文？",
            "updated_time": 1386045778,
            "question_type": "normal",
            "type": "question",
            "created": 1379482040,
            "url": "https://www.zhihu.com/api/v4/questions/21667621",
            "id": 21667621
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/67260085",
        "thumbnail": "",
        "created_time": 1444554004,
        "excerpt": "一个男生说I have a soft spot for her是什么意思什么情感什么心态呢？ - 知乎用户的回答 ",
        "updated_time": 1444554051,
        "id": 67260085,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"http://www.zhihu.com/question/36069177/answer/67260016\" class=\"internal\">一个男生说I have a soft spot for her是什么意思什么情感什么心态呢？ - 知乎用户的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "一个男生说I have a soft spot for her是什么意思什么情感什么心态呢？",
            "updated_time": 1443579361,
            "question_type": "normal",
            "type": "question",
            "created": 1443579361,
            "url": "https://www.zhihu.com/api/v4/questions/36069177",
            "id": 36069177
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/67260016",
        "thumbnail": "",
        "created_time": 1444553967,
        "excerpt": "「好像突然有了软肋，也突然有了铠甲」可以怎么翻译成英文？ - 知乎用户的回答 ",
        "updated_time": 1444554038,
        "id": 67260016,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"http://www.zhihu.com/question/21667621/answer/67260085\" class=\"internal\">「好像突然有了软肋，也突然有了铠甲」可以怎么翻译成英文？ - 知乎用户的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "轮子哥战泡妹子的技术是什么？",
            "updated_time": 1444547726,
            "question_type": "normal",
            "type": "question",
            "created": 1444522104,
            "url": "https://www.zhihu.com/api/v4/questions/36377767",
            "id": 36377767
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/67223085",
        "thumbnail": "",
        "created_time": 1444533882,
        "excerpt": "曾老师你这么想。轮子哥号称造了很多轮子，然而一个正则表达式他都能吹上10年。同理可得 ...",
        "updated_time": 1444533882,
        "id": 67223085,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师你这么想。轮子哥号称造了很多轮子，然而一个正则表达式他都能吹上10年。同理可得 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "在校生为了面试，有必要强行记住一些复杂算法如红黑树、KMP等的实现吗？",
            "updated_time": 1444205598,
            "question_type": "normal",
            "type": "question",
            "created": 1443858429,
            "url": "https://www.zhihu.com/api/v4/questions/36149122",
            "id": 36149122
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/66383750",
        "thumbnail": "",
        "created_time": 1444030002,
        "excerpt": "只需要背这些就好了 ... (你要是名校毕业的，手上大把Offer的自然不需要背啦) 尽管我非常不认同这种做法，现在的情况就是一个初级的岗位，如果没有针对性准备，考的题目除了少数天才和已经经验丰富融会贯通的人，根本就不可能顺利答出来。 所以，不仅要背，还要背得很熟，确保怎么都不会出错才行啊。还有直接问一个算法的算法复杂度的，最后的公式还一点都不简单，你打算现场重新推一遍么？推错了，咋办？像我这种渣渣，连推个Re…",
        "updated_time": 1444035887,
        "id": 66383750,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "只需要背这些就好了 ... (你要是名校毕业的，手上大把Offer的自然不需要背啦)<br><br>尽管我非常不认同这种做法，现在的情况就是一个初级的岗位，如果没有针对性准备，考的题目除了少数天才和已经经验丰富融会贯通的人，根本就不可能顺利答出来。<br><br>所以，不仅要背，还要背得很熟，确保怎么都不会出错才行啊。还有直接问一个算法的算法复杂度的，最后的公式还一点都不简单，你打算现场重新推一遍么？推错了，咋办？像我这种渣渣，连推个Reservoir sampling，都能一次正确，一次方向反了的 ... 而且难道你面试能迅速进入完全放松的状态？你能保证每次面试的时候状态都很好，而不是困的不行？必须得留够犯错的空间啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "GCC中-O1 -O2 -O3 优化的原理是什么？",
            "updated_time": 1418644605,
            "question_type": "normal",
            "type": "question",
            "created": 1418644605,
            "url": "https://www.zhihu.com/api/v4/questions/27090458",
            "id": 27090458
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/65566675",
        "thumbnail": "",
        "created_time": 1443452980,
        "excerpt": "有区别的一个个试过来就是了嘛，比如 gcc -Q -O1 --help=optimizers\n",
        "updated_time": 1443452980,
        "id": 65566675,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "有区别的一个个试过来就是了嘛，比如<br><br><div class=\"highlight\"><pre><code class=\"language-text\">gcc -Q -O1 --help=optimizers\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "小学奥数或者华数普及是真得在帮助学生的发展么？",
            "updated_time": 1347335216,
            "question_type": "normal",
            "type": "question",
            "created": 1306244495,
            "url": "https://www.zhihu.com/api/v4/questions/19669157",
            "id": 19669157
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/65563823",
        "thumbnail": "",
        "created_time": 1443451823,
        "excerpt": "小学奥数对任何人来说都是浪费时间。题目简单的要死，完全没有任何意义。现在就算有小朋友说对数学有兴趣，不知道该学什么好。我都是极力反对去参加什么竞赛的。我推荐的都是随便选个Topic，看看资料，做做题，回头把我讲明白了就可以了。这才是普及数学的正道啊，搞数学竞赛那都是邪教。 不过，我主要是来讲笑话的。怨念是从接近20年前开始的。我也记不得那个时候有没有上小学了。不过这没有关系。反正就从那个时候，我就开始讨…",
        "updated_time": 1445083900,
        "id": 65563823,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "小学奥数对任何人来说都是浪费时间。题目简单的要死，完全没有任何意义。现在就算有小朋友说对数学有兴趣，不知道该学什么好。我都是极力反对去参加什么竞赛的。我推荐的都是随便选个Topic，看看资料，做做题，回头把我讲明白了就可以了。这才是普及数学的正道啊，搞数学竞赛那都是邪教。<br><br>不过，我主要是来讲笑话的。怨念是从接近20年前开始的。我也记不得那个时候有没有上小学了。不过这没有关系。反正就从那个时候，我就开始讨厌过年了。因为那年过年，主题变成了亲戚家的孩子学习多么多么好，数学竞赛拿了个二等奖，有加分，最后考上了一所他们认为的不比杭州前X差的初中，然而我却从来没听说过这所学校的名字。我当时当然是很不屑，这种不知名的学校就算考的上我也不想去呢，数学竞赛拿个奖也没什么了不起的。<br><br>那个时候流行的是华罗庚什么什么比赛，等到我能参加这个比赛的年纪，一看我就是又慢又粗心，1+1算个10秒钟都能算成5的，远远不如奥数难度的题，只要稍微绕一点，我就没耐心做了，选择直接放弃，是脑子正常的老师都不会觉得我去参加什么数学竞赛会拿什么奖的。没办法我就是爱吹牛，我说了这种数学竞赛题那么简单，随便找个人都能一天刷掉100。老师当场就火大了，有本事你去刷刷看。<br><br>我还真的去书店里找题目去了。然而天有不测风云。真的让我找到了一本华罗庚什么什么比赛题库，现在可能还买不到了。而且是分类好的，每一题都有详细解答。所有的怨念驱使着我在一个寒假，连续N天每天不耐烦的刷掉大约100题，把这本题库给刷完了。等老师听说了这事，... 后来么，我也就去参加了一下比赛，我没等时间结束就知道自己有一题错了，错在哪里了。<br><br>这不是说我有多厉害，真心是题库编的好。真的是换谁都能做到。你要是不信，可以看看我现在这个样子，你还觉得有帮助么？",
        "extras": ""
    },
    {
        "question": {
            "title": "在杭州电子科技大学就读是怎样一番体验？",
            "updated_time": 1404301167,
            "question_type": "normal",
            "type": "question",
            "created": 1404301167,
            "url": "https://www.zhihu.com/api/v4/questions/24351751",
            "id": 24351751
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/64084134",
        "thumbnail": "",
        "created_time": 1442502592,
        "excerpt": "先上结论，假如你还想找到工作的话，千万别报这个学校 超烂的体验。不体验拍拍脑袋也知道会是超烂的。只怪自己脑子水进的太多了。不然怎么还能去这种垃圾学校。这垃圾学校最大的毛病就是竟然毫不觉得自己烂爆了。看这校名能被翻译成H Dianzi U就知道了。校名都这样了，竟然还能有人在回答里吹英语老师的。更恶心的是，全校男女比例竟然还没到7:1，唯一的卖点竟然是假的，感觉是被耍了。我就是冲着男女比例高才报的啊。 课超级多…",
        "updated_time": 1444227777,
        "id": 64084134,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先上结论，假如你还想找到工作的话，千万别报这个学校<br><br>超烂的体验。不体验拍拍脑袋也知道会是超烂的。只怪自己脑子水进的太多了。不然怎么还能去这种垃圾学校。这垃圾学校最大的毛病就是竟然毫不觉得自己烂爆了。看这校名能被翻译成H Dianzi U就知道了。校名都这样了，竟然还能有人在回答里吹英语老师的。更恶心的是，全校男女比例竟然还没到7:1，唯一的卖点竟然是假的，感觉是被耍了。我就是冲着男女比例高才报的啊。<br><br>课超级多，晚上都能有课，还要点名。要是每十门课能碰到一个不是纯敷衍的老师已经算不错了。还有脑残的不知道从哪里学来的短学期，敢在面试高峰期安排短学期，还必须要到，也算是少有的亮点了，真的是很有创意。然而更奇葩的是退学还不能随便退的，正常流程都走完了还能不让退的，真的是要把人逼疯了。说退学容易的，你倒是来退一个给我看看。<br><br>不要看他们吹这个协会厉害那个协会牛逼，然而当年都是连个弱智的闪讯都搞不定的渣渣。还要让我去讲是怎么破解的，这不是搞笑么。我又不会破解的。老老实实读三天代码就搞定的事，有必要破解么？再说了传播破解的方法是违法的吧。<br><br>有个教概率论的老师，选一本垃圾的浙大编的教材也就算了，讲课也不好好讲，整天就会说每节课最后会讲一道题，答案记好了，考试就考这么几题。还说是为了大家考浙大研究生的时候分数好看点。不求你讲的多好，打一个学期酱油，也总该能有点基本的认识吧。结果还没自己后来看一下午E.T. Jaynes的书效果好。",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么看阿里巴巴指责巴伦周刊看空阿里的文章是篡改数据？",
            "updated_time": 1442299918,
            "question_type": "normal",
            "type": "question",
            "created": 1442299626,
            "url": "https://www.zhihu.com/api/v4/questions/35629402",
            "id": 35629402
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/63738409",
        "thumbnail": "",
        "created_time": 1442300306,
        "excerpt": "Laing先生用“虚拟所有权”来形容“可变利益实体”结构(即VIE结构)，声称“阿里巴巴集团的股东不实际拥有组成公司的业务……”。 我记得就是马云跳出来说VIE有问题的，企图把大家都拉下水 ... 当时已经有其他通过VIE融资的公司拿到了牌照，马云以VIE会导致拿不到牌照，强行改变支付宝股权结构。这也能洗的话，那没什么不能洗了。",
        "updated_time": 1442301489,
        "id": 63738409,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>Laing先生用“虚拟所有权”来形容“可变利益实体”结构(即VIE结构)，声称“阿里巴巴集团的股东不实际拥有组成公司的业务……”。<br></blockquote>我记得就是马云跳出来说VIE有问题的，企图把大家都拉下水 ... 当时已经有其他通过VIE融资的公司拿到了牌照，马云以VIE会导致拿不到牌照，强行改变支付宝股权结构。这也能洗的话，那没什么不能洗了。",
        "extras": ""
    },
    {
        "question": {
            "title": "我们要做的第一件事，就是杀掉所有的语言专家。这句话什么意思？为什么这么说？",
            "updated_time": 1427428753,
            "question_type": "normal",
            "type": "question",
            "created": 1427428170,
            "url": "https://www.zhihu.com/api/v4/questions/29083214",
            "id": 29083214
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/63455911",
        "thumbnail": "",
        "created_time": 1442120118,
        "excerpt": "这个翻译有问题吧。原文我拍拍脑袋都知道是 language lawyer 。language lawyer不理解的话，你就想一下谭浩强，没错就是那种整天出 print(i++, ++i) 之类的问题来考你的人。 为什么说C++会杀掉所有language lawyer呢？因为C++有意识的继承了C语言最大的优点，即有很多未定义行为。C语言有未定义行为主要是因为一开始没考虑到。而C++明显是故意的。正是这些未定义行为，让language lawyer成为了众人的笑柄。不然我想我们肯定会认…",
        "updated_time": 1442121101,
        "id": 63455911,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个翻译有问题吧。原文我拍拍脑袋都知道是 language lawyer 。language lawyer不理解的话，你就想一下谭浩强，没错就是那种整天出 print(i++, ++i) 之类的问题来考你的人。<br><br>为什么说C++会杀掉所有language lawyer呢？因为C++有意识的继承了C语言最大的优点，即有很多未定义行为。C语言有未定义行为主要是因为一开始没考虑到。而C++明显是故意的。正是这些未定义行为，让language lawyer成为了众人的笑柄。不然我想我们肯定会认为谭浩强是熟读C++语言标准的专家。",
        "extras": ""
    },
    {
        "question": {
            "title": "假装成大神是怎样的一种体验？如何假装成大神？",
            "updated_time": 1440948645,
            "question_type": "normal",
            "type": "question",
            "created": 1440948645,
            "url": "https://www.zhihu.com/api/v4/questions/35183281",
            "id": 35183281
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/62118507",
        "thumbnail": "",
        "created_time": 1441277997,
        "excerpt": "对于我这种弱渣来说，要挑选一个简单容易达成的目标，要能迎合大部分人的错误认识，要耐心等待时机。比如，我整天吹嘘Erlang大法好，事实上我根本就不懂Erlang。要怎么样才能让人相信我会Erlang呢？据我观察，国内有很不好的风气，认为只有懂底层才算懂。然而Erlang解释器可能是所有语言里面最难写的一个了，这可要怎么办才好啊？我看了下排行榜，最近那个OSv还有rumpkernel快要火起来了。要在这两个上面运行起Erlang难度也不小…",
        "updated_time": 1441278269,
        "id": 62118507,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "对于我这种弱渣来说，要挑选一个简单容易达成的目标，要能迎合大部分人的错误认识，要耐心等待时机。比如，我整天吹嘘Erlang大法好，事实上我根本就不懂Erlang。要怎么样才能让人相信我会Erlang呢？据我观察，国内有很不好的风气，认为只有懂底层才算懂。然而Erlang解释器可能是所有语言里面最难写的一个了，这可要怎么办才好啊？我看了下排行榜，最近那个OSv还有rumpkernel快要火起来了。要在这两个上面运行起Erlang难度也不小啊。那个时候rumpkernel连rumprun都没有，所以不用考虑了。而osv-apps里已经有Erjang了，想必是有人尝试过但是失败了。于是我就等啊等，等啊等，等啊等，等到OSv官方把绝大部分影响Erlang在OSv上启动的问题都解决了，果断发布一个有问题但是能让Erlang启动起来的脚本，这样我只做了一些微不足道的工作，功劳就都被我占了，就再也没人认为我不懂Erlang了。<br><br>不过这方面的行家要属许式伟了。他什么都不需要做，只需要说自己懂Erlang，大家就都认为他懂Erlang了，他说是时候放弃Erlang了，大家就都放弃Erlang了。我建议你向他多学习学习。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么Python要使用有明显缺陷的引用计数而不是像JavaScript一样的标记清除？",
            "updated_time": 1438028656,
            "question_type": "normal",
            "type": "question",
            "created": 1438028656,
            "url": "https://www.zhihu.com/api/v4/questions/33529443",
            "id": 33529443
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/61470343",
        "thumbnail": "",
        "created_time": 1440900707,
        "excerpt": "Python现在还用引用计数是因为很久很久以前Python很老土的在引用计数上打了个补丁，就这么一直打补丁打过来的 Garbage Collection for Python ",
        "updated_time": 1440900734,
        "id": 61470343,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Python现在还用引用计数是因为很久很久以前Python很老土的在引用计数上打了个补丁，就这么一直打补丁打过来的<br><br><a href=\"https://link.zhihu.com/?target=http%3A//arctrix.com/nas/python/gc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Garbage Collection for Python<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "我已经掌握了一个程序员应该掌握的基础知识，怎样读好大学?",
            "updated_time": 1448902763,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/33602894",
            "created": 1438178334,
            "id": 33602894
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/60435514",
        "thumbnail": "",
        "created_time": 1440304223,
        "excerpt": "照你这么说，的确没有必要。但是你要在国内找工作，还是需要学历的 ...。所以还是有必要，最好还是985以上，至少也得211 ...",
        "updated_time": 1440304363,
        "id": 60435514,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "照你这么说，的确没有必要。但是你要在国内找工作，还是需要学历的 ...。所以还是有必要，最好还是985以上，至少也得211 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "erlang有哪些好用的库?",
            "updated_time": 1439372119,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/34500981",
            "created": 1439372119,
            "id": 34500981
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/59336777",
        "thumbnail": "",
        "created_time": 1439631036,
        "excerpt": "谢邀。广告时间到了。 当然是extralib了。 change-code/extralib · GitHub extralib的本意是一些质量略低于标准库(kernel和stdlib)，但是从功能上讲是目前标准库所欠缺的功能，展示Erlang的潜力。 很多无脑黑认为Erlang缺乏metaprogramming能力，实际上Erlang是目前metaprogramming能力最强的语言。Erlang提供了parse_transform，还有隐藏的更深的core_transform。 更棒的是，现在在extralib里，我们引入了ext_syntax_trans，你…",
        "updated_time": 1440036446,
        "id": 59336777,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。广告时间到了。 当然是extralib了。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/change-code/extralib\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> change-code/extralib · GitHub<i class=\"icon-external\"></i></a><br><br>extralib的本意是一些质量略低于标准库(kernel和stdlib)，但是从功能上讲是目前标准库所欠缺的功能，展示Erlang的潜力。<br><br>很多无脑黑认为Erlang缺乏metaprogramming能力，实际上Erlang是目前metaprogramming能力最强的语言。Erlang提供了parse_transform，还有隐藏的更深的core_transform。<br><br>更棒的是，现在在extralib里，我们引入了ext_syntax_trans，你可以使用任意语法写Erlang程序了，同时，还复制粘贴了一遍Erlang的parser，这样，就可以有scan_transform了。<br><br>现在就是来看看这个scan_transform有多大的威力了。在你的Erlang代码里加入这么两行，在Erlang里你就可以有和Python一样的Raw String了。 <a data-title=\"@牛耿\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/6a2b0782caf6924f9acfba5c4270bb03\" data-hash=\"6a2b0782caf6924f9acfba5c4270bb03\" data-tip=\"p$b$6a2b0782caf6924f9acfba5c4270bb03\" data-hovercard=\"p$b$6a2b0782caf6924f9acfba5c4270bb03\">@牛耿</a><br><br><div class=\"highlight\"><pre><code class=\"language-text\">-compile({parse_transform, ext_syntax_trans}).\n-compile({parser, {ext_epp, parse_file, [{passes, [ext_tokenline_pp, ext_rawstring_pp]}, {scan_options, [text]}]}}).\n</code></pre></div><br>在有这个之前你是这么写正则表达式的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">\"\\\\r\\\\n\\\"\"\n</code></pre></div><br>现在你可以这么写了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">r\"\\r\\n\\\"\"\n</code></pre></div><br>还不快来用Erlang",
        "extras": ""
    },
    {
        "question": {
            "title": "能不能有人简单的解释下 miniKanren 的实现方式？",
            "updated_time": 1439200426,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/34416029",
            "created": 1439200426,
            "id": 34416029
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/58588651",
        "thumbnail": "",
        "created_time": 1439201177,
        "excerpt": "miniKanren的实现不就是合一和回溯么，这有什么难理解的。而且不知道比Prolog丑到哪里去了 (逃 合一看 Relational programming in miniKanren: Techniques, applications, and implementations 回溯看 Structure and Interpretation \nof Computer Programs 优美的Prolog看 Warren's Abstract Machine: A Tutorial Reconstruction ",
        "updated_time": 1439201390,
        "id": 58588651,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "miniKanren的实现不就是合一和回溯么，这有什么难理解的。而且不知道比Prolog丑到哪里去了 (逃<br><br>合一看 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//gradworks.umi.com/33/80/3380156.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Relational programming in miniKanren: Techniques, applications, and implementations<i class=\"icon-external\"></i></a><br>回溯看 <a href=\"https://link.zhihu.com/?target=http%3A//mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Structure and Interpretation \nof Computer Programs<i class=\"icon-external\"></i></a><br>优美的Prolog看  <a href=\"https://link.zhihu.com/?target=http%3A//wambook.sourceforge.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Warren's Abstract Machine: A Tutorial Reconstruction<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 BBC 今年播出的纪录片《Chinese School》？",
            "updated_time": 1438940163,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/34010173",
            "created": 1438665089,
            "id": 34010173
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/58084475",
        "thumbnail": "",
        "created_time": 1438873291,
        "excerpt": "BBC已完。这就是为什么我只看半岛电视台的节目了 (逃 ------------------------- 看看人家英国的学校，碰到困惑敢于去做实验检验，尽管做实验的条件并不成熟，那也比啥事情拍拍脑袋就做决定，美其名曰顶层设计要好的多。更别说国内的学校热衷于搞什么狗屁实验班，完全没有任何实验的意思。要是你们好好做实验，教学水平至少要比现在好5倍。 If you don't run experiments before you start designing a NEW system, your ENTIRE …",
        "updated_time": 1444451504,
        "id": 58084475,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "BBC已完。这就是为什么我只看半岛电视台的节目了 (逃<br><br>-------------------------<br><br>看看人家英国的学校，碰到困惑敢于去做实验检验，尽管做实验的条件并不成熟，那也比啥事情拍拍脑袋就做决定，美其名曰顶层设计要好的多。更别说国内的学校热衷于搞什么狗屁实验班，完全没有任何实验的意思。要是你们好好做实验，教学水平至少要比现在好5倍。<br><br><blockquote><p>If you don't run experiments before you start designing a NEW system, your ENTIRE SYSTEM will be an experiment!</p><p>—— Mike Williams</p></blockquote><br>我不知道是不是时代变了。至少据我非常有限的了解，杭外是一所学风奇差的学校，比这所英国学校在节目上的表现还差多啦。上课的时候，哪里是只有自己管自己说话不听老师的，明明是有吃东西的，打瞌睡的，管自己看不知道什么书的，玩不知道什么鸟游戏的，拿手机看个NBA比分还要相互交流比赛进展的，这不算什么，还有在走廊上路上大吼大叫的，也根本就不存在每天上课都要穿校服这种事，好像只存在过周一升旗要穿傻不垃圾的西装这回事。<br><br>所谓的对老师的尊重也完全不存在啊。Dr. Jennifer至少讲了五遍才让下面的学生相信，她说应该用fine, thank you, and you回答how are you时，不是在讲笑话，要是换成节目中的老师岂不是要让所有人都去面壁了。没人觉得嘲讽老师有啥不对啊，甚至曾发生过有学生要求学校换老师的事，后来还真的给换了。高考成绩也奇差无比啊。经常吹牛说自己是杭州前X，结果多少年没有出过高考状元了？高考状元可能偶然因素比较大。可是有很多届高考总分除以占地面积在整个浙江省都是毫无悬念垫底的，这又该怎么解释呢？<br><br>杭外除了整天灌鸡汤也没多大能耐。连英语教学水平也退步得很快吧，只会整天强调再强调背课文多么有用，完全就是传销洗脑的套路么，依我看，传销洗脑的水平还比你们高那么一点。甚至有一段时间，每次课都得浪费20分钟看一篇心灵鸡汤。在很长一段时间内，整天就在为有别的学校没有的比如招生上的特权而沾沾自喜，危机意识则基本只停留在口头上。相比所占有的资源，杭外所取得的成绩根本就不值一提。有特权本来就是一件很恶心的事，当然了站着茅坑不拉屎比这更恶心。实际上所有人都很清楚，假如不发生什么天大的意外，杭外的衰败是不可避免的。<br><br>学校里的老师和学生未必会觉得自己水平比别的学校高多少，但是很多都会很无脑的认为自己在杭州算一所知名的学校，几乎所有在杭州的人都应该知道有这么一所学校，连出租车司机师傅不知道杭外在哪里都要抱怨一下。客观来讲，杭外在杭州完全就是一所毫无存在感的学校，你问我知不知道，我第一反应肯定是不知道。杭外也没出过什么知名校友，同样在杭州，看看人家杭高前段时间还出过最年轻XXX，杭外有么？所以，至少我完全不能理解为啥他们整天会觉得自己知名度很高的样子。不过，这不恰好是没落学校典型的心态嘛。<br><br>别的我不知道，就算BBC要坚持自己对中国学校的看法，把杭外这么一所正在衰落，纪律涣散，不尊重老师，没出过哪怕一个知名校友却要坚持认为自己是名校的学校，放到里面是非常不合适的，完全是在误导观众。我不认为在杭外教书的老师真的能做到BBC所假想的中国式教育。<br><br>当然了，这节目里面所谓的中国教育模式，根本和中国一点关系都没有。我听说过一种说法，这是普鲁士人发明的，我没有查资料，不是很确定到底这是谁发明的，总之肯定不是中国人发明的，这本身就是向西方学习的结果。现在常见的学校，差不多是普鲁士人在大约300年前发明的，在那个时代是有非常积极的意义的。在没东西吃的时候，突然每餐都能吃上垃圾食品快餐，比饿肚子强太多太多了。这也是普鲁士能强大的部分原因。这也是为什么很多国家都逐步实施了类似的教育制度。所以无论BBC要吹还是要黑，其实都和中国没多大关系。毕竟归根结底这些都是西方发明的。<br><br>这种模式最大的好处是在国家层面上能最快的速度让绝大多数人都能掌握一些基本的知识，这对一个国家来说比绝大多数人连一些基本的知识都没有可强太多了。但是，对个体来讲，采用这种方式，学习效率低的可怕。很多人会觉得这样出来会缺乏创造力什么的，恰恰是因为学习效率太低，学不到足够的知识导致的。毕竟创造那也得是站在巨人的肩膀上的，不是么？",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么看待玉伯和左耳朵耗子之间的论战？",
            "updated_time": 1438519873,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/33406762",
            "created": 1437816116,
            "id": 33406762
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/57346949",
        "thumbnail": "",
        "created_time": 1438416180,
        "excerpt": "我没看见论战，我只看见左耳朵耗子被玉伯吊打 ... 玉伯避而不谈任何具体问题，却一直在那里谆谆告诫大家要接地气。更为重要的是玉伯根本就不提什么是土方法，也不是没提，讲了半句就不讲了。这也就把土方法的解释权牢牢的控制在自己手里。假如你把一件事情做成了，那么你就是正确使用了土方法。假如没有，那你就是没有领会土方法的精髓。至于土方法到底该怎么定义，你最好还是不知道的好。 所谓“我待过的淘宝和支付宝两家公司，…",
        "updated_time": 1438425545,
        "id": 57346949,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我没看见论战，我只看见左耳朵耗子被玉伯吊打 ...<br><br>玉伯避而不谈任何具体问题，却一直在那里谆谆告诫大家要接地气。更为重要的是玉伯根本就不提什么是土方法，也不是没提，讲了半句就不讲了。这也就把土方法的解释权牢牢的控制在自己手里。假如你把一件事情做成了，那么你就是正确使用了土方法。假如没有，那你就是没有领会土方法的精髓。至于土方法到底该怎么定义，你最好还是不知道的好。<br><br>所谓“我待过的淘宝和支付宝两家公司，这么多年，从来没看到小而精的团队能持久存活“，问题并不出在小而精的团队到底有没有用，而是在淘宝和支付宝根本就不可能存在小而精的团队。国内有很多垃圾公司，淘宝和支付宝就是其中的典型。他们理解的管理水平，就是谁能管的人多谁管理水平就高。就算真的存在一个软件研发管理方面的专家，他能每18个月让他管理的业务需要的人手减少一半，而redundancy增加一倍，也断然是不可能升职加薪的，不被降级并入别的团队就该谢天谢地了。既然这是一个资本的时代，一切都应该用钱来衡量。一个人在某个行业的管理水平，当然是看他能管理的业务值多少钱，他能给这项业务增加多少价值，而不是他手下直接或者间接管理多少个人啊。<br><br>不过呢，这恰恰是玉伯值得学习的地方。他可是给广大程序员指了一条明路啊。毕竟软件行业有一点好，越招人就越缺人。假如你对阿里企业文化的三大法宝(化名，倒立，破冰)有着清醒的认识，何不利用垃圾公司的管理问题，升职加薪，直到跳槽能当上至少CTO，走上人生的巅峰。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么说考研成功无法弥补高考的失败？",
            "updated_time": 1434025505,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31209907",
            "created": 1434025505,
            "id": 31209907
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/55205393",
        "thumbnail": "",
        "created_time": 1436969120,
        "excerpt": "这真的没啥。可是很多公司招人就是看本科学历，非XXX直接就刷掉了。所以才会说考研成功无法弥补高考失败。",
        "updated_time": 1436969120,
        "id": 55205393,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这真的没啥。可是很多公司招人就是看本科学历，非XXX直接就刷掉了。所以才会说考研成功无法弥补高考失败。",
        "extras": ""
    },
    {
        "question": {
            "title": "编译器后端优化有哪些经典的必读论文？",
            "updated_time": 1431415898,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30306387",
            "created": 1431415898,
            "id": 30306387
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/52668366",
        "thumbnail": "",
        "created_time": 1435221610,
        "excerpt": "Making Graphs Reducible with Controlled Node Splitting 这个问题好像根本就没什么人讨论。很多网上的教程在这里直接就糊弄过去了，虽然糊弄过去影响也不大。反过来看，这篇的确是必读的，因为类似的内容别的地方根本就找不到嘛 (逃",
        "updated_time": 1455546799,
        "id": 52668366,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Making Graphs Reducible with Controlled Node Splitting<br><br>这个问题好像根本就没什么人讨论。很多网上的教程在这里直接就糊弄过去了，虽然糊弄过去影响也不大。反过来看，这篇的确是必读的，因为类似的内容别的地方根本就找不到嘛 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "跪求这个关于梭哈纸牌游戏的C语言算法？？",
            "updated_time": 1434897026,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31492612",
            "created": 1434882061,
            "id": 31492612
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/52184233",
        "thumbnail": "",
        "created_time": 1434894270,
        "excerpt": "f =: (/:\"1([:|.1&{))@:([:(~.,:<\"0@:#/.~)<\"0)\n f '8K8K6'\n┌─┬─┬─┐\n│8│K│6│\n├─┼─┼─┤\n│2│2│1│\n└─┴─┴─┘\n f 'A9AA4'\n┌─┬─┬─┐\n│A│9│4│\n├─┼─┼─┤\n│3│1│1│\n└─┴─┴─┘\n看这就是代码 (逃",
        "updated_time": 1434894302,
        "id": 52184233,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<div class=\"highlight\"><pre><code class=\"language-text\">   f =: (/:\"1([:|.1&amp;{))@:([:(~.,:&lt;\"0@:#/.~)&lt;\"0)\n   f '8K8K6'\n┌─┬─┬─┐\n│8│K│6│\n├─┼─┼─┤\n│2│2│1│\n└─┴─┴─┘\n   f 'A9AA4'\n┌─┬─┬─┐\n│A│9│4│\n├─┼─┼─┤\n│3│1│1│\n└─┴─┴─┘\n</code></pre></div>看这就是代码 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待小米路由进行 404 网页劫持？",
            "updated_time": 1434893756,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30358197",
            "created": 1431574063,
            "id": 30358197
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/52130641",
        "thumbnail": "",
        "created_time": 1434861563,
        "excerpt": "现在你们理解什么叫互联网风口上的猪了吧 现在你们理解为什么要GPL了吧 而且我早就预告过了，你们还非要去买 ... 高级黑客是如何入侵计算机系统的？ - 知乎用户的回答 ",
        "updated_time": 1434865451,
        "id": 52130641,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "现在你们理解什么叫互联网风口上的猪了吧<br><br>现在你们理解为什么要GPL了吧<br><br>而且我早就预告过了，你们还非要去买 ...<br><br><a href=\"http://www.zhihu.com/question/20419457/answer/21278761\" class=\"internal\">高级黑客是如何入侵计算机系统的？ - 知乎用户的回答</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何通俗地解释 CGI、FastCGI、php-fpm 之间的关系？",
            "updated_time": 1438192514,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30672017",
            "created": 1432566810,
            "id": 30672017
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/52130406",
        "thumbnail": "",
        "created_time": 1434861426,
        "excerpt": "上面的回答多少都有些问题吧。 CGI是HTTP Server和一个独立的进程之间的协议，把HTTP Request的Header设置成进程的环境变量，HTTP Request的正文设置成进程的标准输入，而进程的标准输出就是HTTP Response包括Header和正文。 FASTCGI是和HTTP协议类似的概念。无非就是规定了在同一个TCP连接里怎么同时传多个HTTP连接。这实际上导致了个问题，有个HTTP连接传个大文件不肯让出FASTCGI连接，在同一个FASTCGI连接里的其他HTTP连接就…",
        "updated_time": 1434861426,
        "id": 52130406,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面的回答多少都有些问题吧。<br><br>CGI是HTTP Server和一个独立的进程之间的协议，把HTTP Request的Header设置成进程的环境变量，HTTP Request的正文设置成进程的标准输入，而进程的标准输出就是HTTP Response包括Header和正文。<br><br>FASTCGI是和HTTP协议类似的概念。无非就是规定了在同一个TCP连接里怎么同时传多个HTTP连接。这实际上导致了个问题，有个HTTP连接传个大文件不肯让出FASTCGI连接，在同一个FASTCGI连接里的其他HTTP连接就傻了。所以Lighttpd? 引入了 X-SENDFILE 。<br><br>php-fpm就相当于是Apache+mod_php。无非php-fpm自带了FASTCGI Server，而Apache是HTTP Server。<br><br>那个WSGI和这个问题没啥关系吧。WSGI这个只是Python内部的一个接口。无论你前面是FASTCGI，HTTP，SCGI，uWSGI等协议，你的FASTCGI/HTTP/SCGI/uWSGI Server都以相同的参数格式去调用一个函数，这样你用Python写的Web应用并不需要修改代码，就可以运行在不同的Server后面了。无非CGI协议是进程间的，而WSGI是进程内的。",
        "extras": ""
    },
    {
        "question": {
            "title": "阿里云的云盾定期对云主机监听端口做SQL注入攻击，这是业界的通常做法吗，有何风险？",
            "updated_time": 1434167268,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31256812",
            "created": 1434167268,
            "id": 31256812
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/52075822",
        "thumbnail": "",
        "created_time": 1434809679,
        "excerpt": "这个竟然不是Opt-In，而是Opt-Out的，不小心把服务搞挂了，算谁的责任？参考：警惕阿里云的云盾扫描占用大量CPU 竟然还需要有进程在客户虚拟机里面运行，参考 阿里云服务器查杀关闭云盾进程 这个云盾是来搞笑的吧 ... ------------ 竟然还有给这种行为洗地的。毫无疑问题主是中了阿里云全家桶嘛 ...",
        "updated_time": 1434813337,
        "id": 52075822,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个竟然不是Opt-In，而是Opt-Out的，不小心把服务搞挂了，算谁的责任？参考：<a href=\"https://link.zhihu.com/?target=http%3A//www.cmhello.com/aliyun-yundun.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">警惕阿里云的云盾扫描占用大量CPU<i class=\"icon-external\"></i></a><br><br>竟然还需要有进程在客户虚拟机里面运行，参考<a href=\"https://link.zhihu.com/?target=http%3A//www.kejianet.cn/aliyundun/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 阿里云服务器查杀关闭云盾进程<i class=\"icon-external\"></i></a><br><br>这个云盾是来搞笑的吧 ...<br><br>------------<br><br>竟然还有给这种行为洗地的。毫无疑问题主是中了阿里云全家桶嘛 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "你有什么道理后悔没有早点知道？",
            "updated_time": 1460198068,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23819007",
            "created": 1400413521,
            "id": 23819007
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/51725555",
        "thumbnail": "",
        "created_time": 1434550805,
        "excerpt": "The fundamental cause of the trouble is that in the modern world the \nstupid are cocksure while the intelligent are full of doubt.—Bertrand Russell",
        "updated_time": 1434550805,
        "id": 51725555,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote><p>The fundamental cause of the trouble is that in the modern world the \nstupid are cocksure while the intelligent are full of doubt.</p><p>—Bertrand Russell</p></blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "二十岁这个年龄应该读什么书？",
            "updated_time": 1433934728,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31165590",
            "created": 1433934728,
            "id": 31165590
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/51375359",
        "thumbnail": "",
        "created_time": 1434295262,
        "excerpt": "当然是 HitchHiker's Guide to the Galaxy ，因为 里面包括了Answer to the ultimate question of life, the universe and everything。",
        "updated_time": 1434295295,
        "id": 51375359,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然是 HitchHiker's Guide to the Galaxy ，因为 里面包括了Answer to the ultimate question of life, the universe and everything。",
        "extras": ""
    },
    {
        "question": {
            "title": "在 Python 中，为什么 pow 这样的函数可以直接调用，而 floor 这样的函数得先导入模块？",
            "updated_time": 1434243385,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31259978",
            "created": 1434175505,
            "id": 31259978
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/51316232",
        "thumbnail": "",
        "created_time": 1434259004,
        "excerpt": "看到蓝色来冒充Python专家了，特来批判一番。这里首先是黑魔法，不然有些问题就解释不清楚啦。 >>> __builtins__\n<module '__builtin__' (built-in)>\n>>> pow(2,2)\n4\n>>> __builtins__ = None\n>>> pow(2,2)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nNameError: name 'pow' is not defined\n>>> __builtins__ = {'pow':1}\n>>> pow\n1\n>>>\n 只是模块载入默认填充的__builtins__刚好是那个__builtin…",
        "updated_time": 1434266386,
        "id": 51316232,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看到蓝色来冒充Python专家了，特来批判一番。这里首先是黑魔法，不然有些问题就解释不清楚啦。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; __builtins__\n&lt;module '__builtin__' (built-in)&gt;\n&gt;&gt;&gt; pow(2,2)\n4\n&gt;&gt;&gt; __builtins__ = None\n&gt;&gt;&gt; pow(2,2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'pow' is not defined\n&gt;&gt;&gt; __builtins__ = {'pow':1}\n&gt;&gt;&gt; pow\n1\n&gt;&gt;&gt;\n</code></pre></div><br>只是模块载入默认填充的__builtins__刚好是那个__builtin__模块。所以，你想不手动导入floor也不是不可行的。<br><br>--------------------------<br><br>非要说编译器会把pow替换掉。来来来，我dump出来给你看<br><br>Python代码<br><br><div class=\"highlight\"><pre><code class=\"language-text\">print pow(2,2)\n</code></pre></div><br>编译结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">000000       03 f3 0d 0a              MAGIC\n000004       b1 22 7d 55              2015-06-14 06:44:01\n000008       63                       CODE\n000009       00 00 00 00                argcount: 0\n00000d       00 00 00 00                nlocals: 0\n000011       03 00 00 00                stacksize: 3\n000015       40 00 00 00                flags: NOFREE\n000019                                  code:\n000019       73 12 00 00 00               STRING&lt;length: 0x12&gt;:\n00001e       65 00 00                       LOAD_NAME                0x0000\n000021       64 00 00                       LOAD_CONST               0x0000\n000024       64 00 00                       LOAD_CONST               0x0000\n000027       83 02 00                       CALL_FUNCTION            0x0002\n00002a       47                             PRINT_ITEM\n00002b       48                             PRINT_NEWLINE\n00002c       64 01 00                       LOAD_CONST               0x0001\n00002f       53                             RETURN_VALUE\n000030                                  consts:\n000030       28 02 00 00 00               TUPLE&lt;n: 2&gt;: \n000035       69 02 00 00 00                 INT 2\n00003a       4e                             NONE\n00003b                                  names:\n00003b       28 01 00 00 00               TUPLE&lt;n: 1&gt;: \n000040       74 03 00 00 00                 INTERNED&lt;length: 0x3&gt;:\n000045       70 6f 77                         pow\n000048                                  varnames:\n000048       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n00004d                                  freevars:\n00004d       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n000052                                  cellvars:\n000052       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n000057                                  filename:\n000057       73 0a 00 00 00               STRING&lt;length: 0xa&gt;:\n00005c       65 78 61 6d 70 6c 65 2e        example.\n000064       70 79                          py\n000066                                  name:\n000066       74 08 00 00 00               INTERNED&lt;length: 0x8&gt;:\n00006b       3c 6d 6f 64 75 6c 65 3e        &lt;module&gt;\n000073       03 00 00 00                firstlineno: 0x3\n000077                                  lnotab:\n000077       73 00 00 00 00               STRING&lt;length: 0x0&gt;:\n00007c\n</code></pre></div><br>就是这个 LOAD_NAME有黑魔法<br><br>------------------------<br><br>手动eval<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; eval(\"pow\")\n&lt;built-in function pow&gt;\n&gt;&gt;&gt; eval(\"pow\", {'__builtins__':{\"pow\":2}})\n2\n&gt;&gt;&gt; __builtins__ = {\"eval\":eval,\"pow\":1}\n&gt;&gt;&gt; pow\n1\n&gt;&gt;&gt; eval(\"pow\")\n1\n&gt;&gt;&gt; eval(\"pow\", {'__builtins__':{\"pow\":2}})\n2\n&gt;&gt;&gt; eval(\"lambda: pow\", {'__builtins__':{\"pow\":2}})()\n2\n&gt;&gt;&gt; eval(\"floor\", {'__builtins__':{\"floor\":3}})\n3\n</code></pre></div><br>这下总该明白了吧 ... 这个__builtins__就是你在eval时，传进去的globals里的__builtins__决定的。你想有floor就能有floor<br><br>编译器才不管你是不是builtin的函数呢。编译器事实上也管不着，只要允许有 import * 存在，鬼知道这个函数是不是builtin",
        "extras": ""
    },
    {
        "question": {
            "title": "运维人员如何搭建堡垒机（跳板机）？",
            "updated_time": 1433949323,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/31175397",
            "created": 1433949323,
            "id": 31175397
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/50935090",
        "thumbnail": "",
        "created_time": 1433990924,
        "excerpt": "不要使用什么堡垒机，那个完全是个伪安全的玩意儿。堡垒机本身就是个SPOF。 不要觉得BAT就一定做的很好，他们只是too big to fail而已 正确的方法是 零绝不允许用密码登陆，必须用公钥登陆 一要建立个人帐号的概念，必须做到一人一个帐号，绝不允许多个人共用一个个人帐号 二是公共帐号(用来部署服务)要和个人帐号分开，公共帐号绝不允许直接登陆 三打开SSH Agent Forwarding的功能，这样无论怎么跳都是没问题的。 四配置sudo规…",
        "updated_time": 1433991209,
        "id": 50935090,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不要使用什么堡垒机，那个完全是个伪安全的玩意儿。堡垒机本身就是个SPOF。<br><br>不要觉得BAT就一定做的很好，他们只是too big to fail而已<br><br>正确的方法是<br><br>零绝不允许用密码登陆，必须用公钥登陆<br>一要建立个人帐号的概念，必须做到一人一个帐号，绝不允许多个人共用一个个人帐号<br>二是公共帐号(用来部署服务)要和个人帐号分开，公共帐号绝不允许直接登陆<br>三打开SSH Agent Forwarding的功能，这样无论怎么跳都是没问题的。<br>四配置sudo规则使得个人帐号的用户能进入他有权限的公共帐号用户<br>五把SELinux规则配置起来，不允许的操作直接干掉，允许但是有危险的操作全记录下来<br>六把SSH登陆日志，sudo的日志，SELinux的warning什么的通通都发给实时事件流处理平台去，该咋分析就咋分析<br>七有些不需要完全公共帐号权限的操作，建议以unix domain socket的形式提供给个人帐号用户使用(因为有black magic可以检查权限)。<br><br>等这些都建立起来了，再来考虑什么安全加固。<br><br>同时，要赶紧把内部的PaaS搭起来，从源头上就把需要直接登陆机器的需求给减下来。",
        "extras": ""
    },
    {
        "question": {
            "title": "会写 Parser、Tokenizer 是什么水平？",
            "updated_time": 1432836363,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30746665",
            "created": 1432791984,
            "id": 30746665
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/49268298",
        "thumbnail": "",
        "created_time": 1432793634,
        "excerpt": "明明是找不到工作的水平 ... ---------------------------------------------------------- 看看Diagram of π-Calculus ，不仅有Tokenizer, Parser，还额外赠送pi-calculus解释器，以及对运行过程逐步画图 ... 你觉得这水平能高到哪里去 ----------------------------------------------------------- Update: 反对 比如nfa->dfa到最小dfa，LL/LR/SLR/LALR，能做到手写标准的正则引擎，山寨yacc的水平的话，不潜下心来钻研个一年…",
        "updated_time": 1432803433,
        "id": 49268298,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "明明是找不到工作的水平 ...<br><br>----------------------------------------------------------<br><br>看看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//bhuztez.github.io/pi-diagram/\" target=\"_blank\" rel=\"nofollow noreferrer\">Diagram of π-Calculus<i class=\"icon-external\"></i></a>，不仅有Tokenizer, Parser，还额外赠送pi-calculus解释器，以及对运行过程逐步画图 ... 你觉得这水平能高到哪里去<br><br>-----------------------------------------------------------<br><br>Update: <br><br>反对<br><br><blockquote>比如nfa-&gt;dfa到最小dfa，LL/LR/SLR/LALR，能做到手写标准的正则引擎，山寨yacc的水平的话，不潜下心来钻研个一年半载估计是没戏。能做到这个水平，全国任何公司的offer肯定都是任意挑选的。<br></blockquote><br>这个并不难。要花多少时间取决于你想做个凑合能用的，还是Bug-to-Bug Compatible的。前者并不要多久，后者真的需要很长时间。<br><br>你看上面那个链接里的例子，就是自己山寨了个凑合能用的 lex/yacc 。显然我还没找到工作。<br><br><blockquote>而编译器后端的代码生成、数据流分析、寄存器分配这些怎么就没见多少人谈论？还不是因为这部分跟前端相比难得多<br></blockquote><br>数据流分析，实际上和前端是一样的。参考: <a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19945892\">编译原理不就是Datalog嘛 - impress your cat - 知乎专栏</a> 。大部分内容都可以直接从Datalog derive出来。<br><br>至于寄存器分配，已经有人证明了，SSA下的寄存器分配，用graph coloring的话，实际上是在对一个chordal graph着色，也就是比graph coloring问题要简单。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价马云在全球女性创业者大会上的演讲？",
            "updated_time": 1432142968,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30541572",
            "created": 1432139161,
            "id": 30541572
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/48501541",
        "thumbnail": "",
        "created_time": 1432186950,
        "excerpt": "参与阿里巴巴集团新员工的破冰是一种什么样的体验？ - X是一种怎样的体验 ",
        "updated_time": 1432186950,
        "id": 48501541,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"http://www.zhihu.com/question/29759817\" class=\"internal\">参与阿里巴巴集团新员工的破冰是一种什么样的体验？ - X是一种怎样的体验</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么出现了ruby on rails 而没有出现python on pyres?",
            "updated_time": 1431902261,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30455009",
            "created": 1431902261,
            "id": 30455009
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/48151172",
        "thumbnail": "",
        "created_time": 1431916512,
        "excerpt": "主要原因是Ruby on Rails安利水平更高。Django那帮人竟然意识不到自己安利水平不行，还老是用professional来自我安慰也是醉了。 Ruby把monkey patching吹成是metaprogramming。然而吹的再厉害，在日本以外，根本就没有什么人用。原因很简单，没有英文文档是完全没机会火起来的。Ruby的火，很大程度是被Rails带起来的。 Rails为什么要选择Ruby? 相比Node.js说不用callback会带来错觉，Rails里则少了点什么，这也是为啥Rails风头最…",
        "updated_time": 1435404824,
        "id": 48151172,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "主要原因是Ruby on Rails安利水平更高。Django那帮人竟然意识不到自己安利水平不行，还老是用professional来自我安慰也是醉了。<br><br>Ruby把monkey patching吹成是metaprogramming。然而吹的再厉害，在日本以外，根本就没有什么人用。原因很简单，没有英文文档是完全没机会火起来的。Ruby的火，很大程度是被Rails带起来的。<br><br>Rails为什么要选择Ruby? 相比Node.js说不用callback会带来错觉，Rails里则少了点什么，这也是为啥Rails风头最终会被Node.js抢过去。而Ruby里有类似的东西。Ruby强调编程本身就是快乐的。尽管实际上并没有什么用，你愿意痛苦的写20分钟把问题搞定，还是快乐的写两个小时把问题搞定。可是这种讲感觉的东西是没法反驳的，非常适合用来安利。你也看到了，Rails有非常强大的道路自信，从一开始就认为自己是全宇宙最正确的做法。凡是DHH说的都是对的。其他框架都是有这样那样的毛病的。<br><br>也因为Ruby提倡monkey patching，一不小心就会把自己坑死，以便体现作者能吞下玻璃而不伤身体的魔法。即便用了大量monkey patching，代码依旧太长了，拿来宣传一点用都没有。这也是可以补救的，用scaffolding把要写的代码先生成出来(这和他要喷的Java有啥不同吗？)，代码长步骤多也不要紧，可以录视频嘛，顺便鼓励脑残粉说多录视频可以极大的提高你的编程水平。<br><br>没有爹怎么办？可以让o'reilly把作者评为hacker of the year。把各种不管何种程度，反正只要用过Rails的公司名，都列在首页上。Django在这点上就做的非常不好，一直以professional的原因拒绝把非报业网站列在首页上，直到完全没人用Django了，才想起来还是列的好。也不肯抓住<a href=\"https://link.zhihu.com/?target=http%3A//justin.tv\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">justin.tv</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>从Rails转Django这个大新闻，把Rails批判一番。Rails社区可没少嘲讽过Django。<br><br>Rails版本号更新很勤快，4.0都出来。Django的2.0还遥遥无期呢。而且Rails每次大版本升级，都带来了大量功能更新。尽管Rails 4.0更接近Django 1.0而不是Rails 1.0。可是这样可以多曝光啊。<br><br>Django本身在Python社区就不太受欢迎，一开始认为是黑魔法太多，不够pythonic。Django在这一点上确实做的不够好，尽管是最早支持WSGI的框架之一，却是最晚把这个接口给你暴露出来的。而ORM部分代码乱的完全没法看，Bug多我就不说了，想想Rails 4.0之前有修不完的SQL注入漏洞，Django这已经算不错了。后来很多人认为Django太重量级了。然而在他们眼里轻量级的Flask，内存占用比Django多，跑分比Django慢。<br><br>-------------<br><br>Update: Flask比Django慢？参考<a href=\"https://link.zhihu.com/?target=http%3A//blog.startifact.com/posts/morepath-from-werkzeug-to-webob.html%23\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Morepath: from Werkzeug to WebOb<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "「我不在乎输赢，我就是认真」用英语怎么翻译？",
            "updated_time": 1401986877,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23924057",
            "created": 1401148835,
            "id": 23924057
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/47692658",
        "thumbnail": "",
        "created_time": 1431521763,
        "excerpt": "I am the loser. I am serious.",
        "updated_time": 1431521763,
        "id": 47692658,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "I am the loser. I am serious.",
        "extras": ""
    },
    {
        "question": {
            "title": "如何理解和使用Erlang的Dialyzer?",
            "updated_time": 1431153618,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30223446",
            "created": 1431153618,
            "id": 30223446
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/47231837",
        "thumbnail": "",
        "created_time": 1431154526,
        "excerpt": "很多人在使用Dialyzer时都可能会碰到一点小问题。主要原因是Dialyzer太能吃CPU了，特别是一开始建立plt文件时。 所以，特别建议，一定不要强制把HiPE关掉。按Type Specifications and Erlang 的建议，一个个来，别一次把所有标准库都选上。即便如此，假如你的CPU核数不是超级多，还是很容易开始之后直接卡死。建议比如用 +S 1:1 限制Dialyzer只用一个CPU核心。 不然CPU 100%个大半个小时也是很可能的 ... 以上才是我想答的内容 --…",
        "updated_time": 1431154701,
        "id": 47231837,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "很多人在使用Dialyzer时都可能会碰到一点小问题。主要原因是Dialyzer太能吃CPU了，特别是一开始建立plt文件时。<br><br>所以，特别建议，一定不要强制把HiPE关掉。按<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//learnyousomeerlang.com/dialyzer\" target=\"_blank\" rel=\"nofollow noreferrer\">Type Specifications and Erlang<i class=\"icon-external\"></i></a>的建议，一个个来，别一次把所有标准库都选上。即便如此，假如你的CPU核数不是超级多，还是很容易开始之后直接卡死。建议比如用 +S 1:1 限制Dialyzer只用一个CPU核心。<br><br>不然CPU 100%个大半个小时也是很可能的 ...<br><br>以上才是我想答的内容<br><br>------------------<br><br>你只是用一下Dialyzer没必要完全理解那些论文的，那是讲怎么自己写一个Dialyzer之类的工具的。<br><br>不只是Dialyzer，还有typer，在不少情形能直接就帮你把类型分析出来。",
        "extras": ""
    },
    {
        "question": {
            "title": "字符串在各类语言里是怎么处理的?",
            "updated_time": 1430837312,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30106980",
            "created": 1430792356,
            "id": 30106980
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/47174738",
        "thumbnail": "",
        "created_time": 1431095762,
        "excerpt": "相比之下Erlang的字符串处理就要简单粗暴的多了。 不妨先直接无视各种不常用的情况。 iolist的类型定义可以写成 -type iolist() :: binary() | [iolist()].\n 在拼接字符串的时候完全不Copy。直接构造一个新的list就完了。 IOList3 = [IOList1, IOList2].\n 反正 gen_tcp:send 什么的都能接受，直接就当 iovec 发出去了嘛。 我就是要把两个binary拼起来怎么办？比如 Bin3 = <<Bin1/binary, Bin2/binary>>\n Erlang会机智的计算出Bin…",
        "updated_time": 1431095762,
        "id": 47174738,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "相比之下Erlang的字符串处理就要简单粗暴的多了。<br><br>不妨先直接无视各种不常用的情况。<br><br>iolist的类型定义可以写成<br><br><div class=\"highlight\"><pre><code class=\"language-text\">-type iolist() :: binary() | [iolist()].\n</code></pre></div><br>在拼接字符串的时候完全不Copy。直接构造一个新的list就完了。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">IOList3 = [IOList1, IOList2].\n</code></pre></div><br>反正 gen_tcp:send 什么的都能接受，直接就当 iovec 发出去了嘛。<br><br>我就是要把两个binary拼起来怎么办？比如<br><br><div class=\"highlight\"><pre><code class=\"language-text\">Bin3 = &lt;&lt;Bin1/binary, Bin2/binary&gt;&gt;\n</code></pre></div><br>Erlang会机智的计算出Bin1, Bin2 长度之和，先占好坑，再把字符串都复制进去。",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么反驳大学老师说做软件很简单的观点？",
            "updated_time": 1430298987,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/29943074",
            "created": 1430206952,
            "id": 29943074
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/46949404",
        "thumbnail": "",
        "created_time": 1430917160,
        "excerpt": "他说的没错。但是话说一半就不好啦。 正是因为硬件太难，所以硬件的路是越来越窄的。硬件难就难在实验成本太高，周期太长。相比之下软件就灵活多了。复杂的东西只要有可能都会放到软件去做。所以，大家都看到了，数字电路把模拟电路边缘化了，FPGA挤占了很多数字电路的空间，Ethernet逼死了ATM，接下来，SDN也很可能让交换机硬件制造变得无利可图。单纯从实验效果看，通用的必然比不过专用的。但是你架不住大路货便宜啊，同样的…",
        "updated_time": 1430917160,
        "id": 46949404,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "他说的没错。但是话说一半就不好啦。<br><br>正是因为硬件太难，所以硬件的路是越来越窄的。硬件难就难在实验成本太高，周期太长。相比之下软件就灵活多了。复杂的东西只要有可能都会放到软件去做。所以，大家都看到了，数字电路把模拟电路边缘化了，FPGA挤占了很多数字电路的空间，Ethernet逼死了ATM，接下来，SDN也很可能让交换机硬件制造变得无利可图。单纯从实验效果看，通用的必然比不过专用的。但是你架不住大路货便宜啊，同样的价格大路货都能买到比你好几个等级的了，做出的效果自然比你好啦。<br><br>因此按目前的形势，最终剩下的必然是利润率高门槛也非常高的专业设备制造商，靠量大赚钱的通用设备制造商，其他的都是软件的地盘了。前两个市场要想进入首先得很有钱，而且也不需要很多人。从找工作角度讲，越软的岗位越多。",
        "extras": ""
    },
    {
        "question": {
            "title": "知乎的服务器架构在业界处于什么水平？和同规模的创业公司 (Startup) 相比较如何？",
            "updated_time": 1430879481,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/30109084",
            "created": 1430797907,
            "id": 30109084
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/46839467",
        "thumbnail": "",
        "created_time": 1430831789,
        "excerpt": "完全是胡闹的水平。而且已经积重难返了。知乎最大的问题是不按(zun)常(zhong)理(chang)出(shi)牌。一开始选Python肯定不是因为Python有多么好，或者他们Python用的多么熟练。而是因为Quora用的是Python。选Tornado必然是类似的原因。就算你能说出Tornado的无数优点，你肯定也会用Cyclone而不是Tornado的。所以选Tornado肯定是因为Facebook这个大品牌。数据库选MySQL几乎就堵死了做任何LBS尝试的可能。所以，最后的结果是表面上看…",
        "updated_time": 1430831789,
        "id": 46839467,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "完全是胡闹的水平。而且已经积重难返了。知乎最大的问题是不按(zun)常(zhong)理(chang)出(shi)牌。一开始选Python肯定不是因为Python有多么好，或者他们Python用的多么熟练。而是因为Quora用的是Python。选Tornado必然是类似的原因。就算你能说出Tornado的无数优点，你肯定也会用Cyclone而不是Tornado的。所以选Tornado肯定是因为Facebook这个大品牌。数据库选MySQL几乎就堵死了做任何LBS尝试的可能。所以，最后的结果是表面上看到的是无比高的逼格。实际上是在自我催眠。和那些为了推卸责任的官僚的做法有异曲同工之妙。",
        "extras": ""
    },
    {
        "question": {
            "title": "男朋友什么都懂，完全没办法在智商上压制他，怎么办？",
            "updated_time": 1447739203,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23192719",
            "created": 1395979233,
            "id": 23192719
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/46791712",
        "thumbnail": "",
        "created_time": 1430796668,
        "excerpt": "鄒忌脩八尺有餘身體昳麗朝服衣冠窺鏡謂其妻曰我孰與城北徐公美其妻曰君美甚徐公何能及公也城北徐公齊國之美麗者也忌不自信而復問其妾曰吾孰與徐公美妾曰徐公何能及君也旦日客從外來與坐談問之客曰吾與徐公孰美客曰徐公不若君之美也明日徐公來孰視之自以為不如窺鏡而自視又弗如遠甚暮寢而思之曰吾妻之美我者私我也妾之美我者畏我也客之美我者欲有求於我也",
        "updated_time": 1430796668,
        "id": 46791712,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>鄒忌脩八尺有餘身體昳麗朝服衣冠窺鏡謂其妻曰我孰與城北徐公美其妻曰君美甚徐公何能及公也城北徐公齊國之美麗者也忌不自信而復問其妾曰吾孰與徐公美妾曰徐公何能及君也旦日客從外來與坐談問之客曰吾與徐公孰美客曰徐公不若君之美也明日徐公來孰視之自以為不如窺鏡而自視又弗如遠甚暮寢而思之曰吾妻之美我者私我也妾之美我者畏我也客之美我者欲有求於我也</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待Erlang之父Joe Armstrong觉得OO编程很烂？",
            "updated_time": 1430035262,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/29888990",
            "created": 1430029505,
            "id": 29888990
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/45950234",
        "thumbnail": "",
        "created_time": 1430039958,
        "excerpt": "谢邀。他这个说法是错的，后来已经更正啦 \n\nErlang has got all these things. It's got isolation, it's got \npolymorphism and it's got pure messaging. From that point of view, we \nmight say it's the only object oriented language and perhaps I was a bit\n premature in saying that object oriented languages are about. You can \ntry it and see it for yourself. ——Ralph Johnson, Joe Armstrong on the State … ",
        "updated_time": 1430041992,
        "id": 45950234,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀。他这个说法是错的，后来已经更正啦<br><br><blockquote>\n\nErlang has got all these things. It's got isolation, it's got \npolymorphism and it's got pure messaging. From that point of view, we \nmight say it's <i>the only object oriented language</i> and perhaps <u>I was a bit\n premature in saying that object oriented languages are about</u>. You can \ntry it and see it for yourself.<br>——<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/interviews/johnson-armstrong-oop\" target=\"_blank\" rel=\"nofollow noreferrer\">Ralph Johnson, Joe Armstrong on the State of OOP<i class=\"icon-external\"></i></a></blockquote><br>Erlang只适合用来写业务逻辑。因为Erlang是为Control Plane设计的，为低延时牺牲吞吐量。但是大部分语言看上去都是为了提高吞吐量而设计的，结果连吞吐量也拼不过Erlang，竟然还有脸说Erlang不适合写业务逻辑。",
        "extras": ""
    },
    {
        "question": {
            "title": "机器学习专家与统计学家观点上有哪些不同？",
            "updated_time": 1429419357,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/29687860",
            "created": 1429419357,
            "id": 29687860
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/45870798",
        "thumbnail": "",
        "created_time": 1429960473,
        "excerpt": "难道不是互相吐槽对方不懂概率吗？ (逃",
        "updated_time": 1429960473,
        "id": 45870798,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "难道不是互相吐槽对方不懂概率吗？ (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "函数式编程如何工程化？",
            "updated_time": 1382234083,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21849253",
            "created": 1382234083,
            "id": 21849253
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/45289021",
        "thumbnail": "",
        "created_time": 1429452516,
        "excerpt": "有个未经证实的传言。当年Joe Armstrong因为在UNIX上的Smalltalk一GC就是一下午，实在忍不可忍，去订了一台Smalltalk Machine。结果快递公司花了几个月才把货送到，这个时候Joe Armstrong他们已经用Prolog开发出后来成为Erlang的原型了。后来这台机器不知道为啥就转给Ivar Jacobson去玩了。在Smalltalk的基础上，Ivar Jacobson和另外两位老爷爷一起发明了UML。UML大法非常好，后来爱立信在开发新一代产品时，决定主要采用C++和UM…",
        "updated_time": 1429452672,
        "id": 45289021,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "有个未经证实的传言。当年Joe Armstrong因为在UNIX上的Smalltalk一GC就是一下午，实在忍不可忍，去订了一台Smalltalk Machine。结果快递公司花了几个月才把货送到，这个时候Joe Armstrong他们已经用Prolog开发出后来成为Erlang的原型了。后来这台机器不知道为啥就转给Ivar Jacobson去玩了。在Smalltalk的基础上，Ivar Jacobson和另外两位老爷爷一起发明了UML。UML大法非常好，后来爱立信在开发新一代产品时，决定主要采用C++和UML。结果开发了N年也没开发出来。无奈之下，抱着死马当活马医的心态，决定试试Erlang，竟然顺利完成了，也就有了AXD301，竟然卖出去了，还赚到钱了。<br><br>不过上面内容不是重点，我要提醒你的是Erlang并不是函数式语言。Erlang是OO语言。<br><br>APL家族才能算是函数式语言。显然他们不需要考虑工程问题。因为一切程序用APL都只需要一行就能写完了。反正只有一行，背都把它背下来了。你常用的程序也就不到100个，你趁小时候记忆力好的时候，把这些个程序都背下来，要用的时候随时输一遍就好了，反正就只有一行。",
        "extras": ""
    },
    {
        "question": {
            "title": "程序员简历掺水是否比较普遍?",
            "updated_time": 1430482247,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/29630065",
            "created": 1429233153,
            "id": 29630065
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/45128651",
        "thumbnail": "",
        "created_time": 1429319422,
        "excerpt": "这都是被逼的。Job Description里有哪些buzzword都在简历里抄一遍，上面要求X年以上经验，你就写个X年，你不一定非要写X年工作经验，你可以写有X年使用ZZZ的经验，不然简历根本就没人看，感觉是好像有个正则表达式在过滤一样，就检查一下里面有没有出现各种buzzword以及X年，简历没人看你写的再准确有屁用啊。",
        "updated_time": 1429319471,
        "id": 45128651,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这都是被逼的。Job Description里有哪些buzzword都在简历里抄一遍，上面要求X年以上经验，你就写个X年，你不一定非要写X年工作经验，你可以写有X年使用ZZZ的经验，不然简历根本就没人看，感觉是好像有个正则表达式在过滤一样，就检查一下里面有没有出现各种buzzword以及X年，简历没人看你写的再准确有屁用啊。",
        "extras": ""
    },
    {
        "question": {
            "title": "杨辉三角如何不用数组在编程中实现？",
            "updated_time": 1426989709,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28948010",
            "created": 1426989709,
            "id": 28948010
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/45088943",
        "thumbnail": "",
        "created_time": 1429269364,
        "excerpt": "谢邀 代码 #!/usr/bin/env python2\n\nfor n in xrange(10):\n p = 1\n print p,\n\n for k in xrange(1,n+1):\n p = p * (n+1-k) / k\n print p,\n\n print\n 结果 1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1\n1 6 15 20 15 6 1\n1 7 21 35 35 21 7 1\n1 8 28 56 70 56 28 8 1\n1 9 36 84 126 126 84 36 9 1\n (逃",
        "updated_time": 1429269364,
        "id": 45088943,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谢邀<br><br>代码<br><div class=\"highlight\"><pre><code class=\"language-text\">#!/usr/bin/env python2\n\nfor n in xrange(10):\n    p = 1\n    print p,\n\n    for k in xrange(1,n+1):\n        p = p * (n+1-k) / k\n        print p,\n\n    print\n</code></pre></div><br>结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1\n1 6 15 20 15 6 1\n1 7 21 35 35 21 7 1\n1 8 28 56 70 56 28 8 1\n1 9 36 84 126 126 84 36 9 1\n</code></pre></div><br>(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "做一个简单的搜索引擎，需要哪些知识和技术？",
            "updated_time": 1428048472,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/29271575",
            "created": 1428048472,
            "id": 29271575
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/43791904",
        "thumbnail": "",
        "created_time": 1428068818,
        "excerpt": "https://pythonhosted.org/Whoosh/ ",
        "updated_time": 1428068818,
        "id": 43791904,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//pythonhosted.org/Whoosh/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pythonhosted.org/Whoosh</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "关于python递归的逻辑困惑？",
            "updated_time": 1427039330,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28966774",
            "created": 1427039068,
            "id": 28966774
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/42743911",
        "thumbnail": "",
        "created_time": 1427078583,
        "excerpt": "你可以在后面几行代码 sumtree2 = sumtree\nsumtree = None\n 再运行一下看看会发生什么 这实际上是一个作用域的问题。数学上的递归其实你一样也不理解。不然你告诉我数学公式里作用域规则是怎么样的？答不出来吧。我也答不出来，没事，很多号称专业研究数学的也不能立即答上来 (逃",
        "updated_time": 1427079253,
        "id": 42743911,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你可以在后面几行代码<br><br><div class=\"highlight\"><pre><code class=\"language-text\">sumtree2 = sumtree\nsumtree = None\n</code></pre></div><br>再运行一下看看会发生什么<br><br>这实际上是一个作用域的问题。数学上的递归其实你一样也不理解。不然你告诉我数学公式里作用域规则是怎么样的？答不出来吧。我也答不出来，没事，很多号称专业研究数学的也不能立即答上来 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "错排问题求解？",
            "updated_time": 1426941652,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25872094",
            "created": 1412842789,
            "id": 25872094
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/42599775",
        "thumbnail": "",
        "created_time": 1426920544,
        "excerpt": "按计算器 6的阶乘除以自然常数 四舍五入 就得到了答案 当然了这个数字太小了，不能充分体现这种按计算器方法的优势",
        "updated_time": 1426920544,
        "id": 42599775,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "按计算器 6的阶乘除以自然常数 四舍五入 就得到了答案<br><br>当然了这个数字太小了，不能充分体现这种按计算器方法的优势",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样用96个bit实现一个全局唯一且不可预测的uniqueid？",
            "updated_time": 1426847132,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28911715",
            "created": 1426842760,
            "id": 28911715
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/42539018",
        "thumbnail": "",
        "created_time": 1426849049,
        "excerpt": "首先不要认为你真的搞的定时间戳的问题，能不依赖时间戳就尽量不要依赖。都用线程号了，干脆每个线程弄个计数器算了 其次，全局唯一，不可预测，生成效率，只能选2个。我有一个精妙的证明，但是这里写不下 (逃",
        "updated_time": 1426849776,
        "id": 42539018,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "首先不要认为你真的搞的定时间戳的问题，能不依赖时间戳就尽量不要依赖。都用线程号了，干脆每个线程弄个计数器算了<br><br>其次，全局唯一，不可预测，生成效率，只能选2个。我有一个精妙的证明，但是这里写不下 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "python库 twisted 的 LineOnlyReceiver中_buffer是个类变量, 这样不会有问题吗?",
            "updated_time": 1426675930,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28862743",
            "created": 1426675930,
            "id": 28862743
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/42353211",
        "thumbnail": "",
        "created_time": 1426675991,
        "excerpt": "没问题的。这个相当于提供了一个默认值。Twisted里常见的风格。没必要大惊小怪 self._buffer 赋值的时候并不会修改类变量的值",
        "updated_time": 1426676152,
        "id": 42353211,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没问题的。这个相当于提供了一个默认值。Twisted里常见的风格。没必要大惊小怪<br><br>self._buffer 赋值的时候并不会修改类变量的值",
        "extras": ""
    },
    {
        "question": {
            "title": "10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？",
            "updated_time": 1426604132,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28830426",
            "created": 1426576705,
            "id": 28830426
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/42239930",
        "thumbnail": "",
        "created_time": 1426576969,
        "excerpt": "就是和 bezout identity 相关的，其实主要考点是分情况讨论，情况巨多而已 仅仅是求解，因为数字凑巧，可以reduce成Pouring Water - impress your cat - 知乎专栏 无非就是10不停往7倒，直到7满了，7不停往3倒直到3满了，3满了就往10倒，就可以了 放弃了，还是看简化的问题，自己去证明吧 Pouring Water证明 - impress your cat - 知乎专栏 ",
        "updated_time": 1426649254,
        "id": 42239930,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "就是和 bezout identity 相关的，其实主要考点是分情况讨论，情况巨多而已<br><br>仅仅是求解，因为数字凑巧，可以reduce成<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a><br><br>无非就是10不停往7倒，直到7满了，7不停往3倒直到3满了，3满了就往10倒，就可以了<br><br>放弃了，还是看简化的问题，自己去证明吧<br><br><a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19979754\" class=\"internal\">Pouring Water证明 - impress your cat - 知乎专栏</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么有人心算比计算机还快？",
            "updated_time": 1426354691,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21997155",
            "created": 1384011747,
            "id": 21997155
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/41958668",
        "thumbnail": "",
        "created_time": 1426300677,
        "excerpt": "那都是骗人的，不服来算个逆矩阵试试？",
        "updated_time": 1426300677,
        "id": 41958668,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "那都是骗人的，不服来算个逆矩阵试试？",
        "extras": ""
    },
    {
        "question": {
            "title": "如果有另一个平行宇宙，塞班要怎么样才能反制刚刚蹿红的 iOS？",
            "updated_time": 1425982148,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27828667",
            "created": 1422387874,
            "id": 27828667
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/41546822",
        "thumbnail": "",
        "created_time": 1425903369,
        "excerpt": "没救的，主要原因不是Symbian本身又啥问题，而是诺基亚董事会表现出来的判断力还不如键盘侠 ...",
        "updated_time": 1425903389,
        "id": 41546822,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没救的，主要原因不是Symbian本身又啥问题，而是诺基亚董事会表现出来的判断力还不如键盘侠 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样用通俗的语言解释什么叫 REST，以及什么是 RESTful？",
            "updated_time": 1446036675,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28557115",
            "created": 1425612583,
            "id": 28557115
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/41381668",
        "thumbnail": "",
        "created_time": 1425732488,
        "excerpt": "据我所知，作为buzzword的REST的意思是正确使用HTTP的语义 ...",
        "updated_time": 1425732488,
        "id": 41381668,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "据我所知，作为buzzword的REST的意思是正确使用HTTP的语义 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "如何用 C++ 在 10 行内写出八皇后？",
            "updated_time": 1425645422,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28543312",
            "created": 1425550024,
            "id": 28543312
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/41204895",
        "thumbnail": "",
        "created_time": 1425551698,
        "excerpt": "既然有人邀请我了，我就来了，解法参考 如何简化求解八妃问题的代码？ - 知乎用户的回答 #include <iostream>\n#include <algorithm>\n#include <bitset>\n#include <numeric>\n#include <utility>\nint main() {\n for (int queens[] = {0,1,2,3,4,5,6,7}; ::std::next_permutation(queens,queens+8); )\n if ((::std::bitset<15>(::std::accumulate(queens,queens+8, ::std::make_pair(0, 0), [](::std::pair<int, int> a, int b){ret…",
        "updated_time": 1425617081,
        "id": 41204895,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "既然有人邀请我了，我就来了，解法参考 <a class=\"internal\" href=\"http://www.zhihu.com/question/27710152/answer/37758735\">如何简化求解八妃问题的代码？ - 知乎用户的回答</a><br><br><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include &lt;iostream&gt;</span>\n<span class=\"cp\">#include &lt;algorithm&gt;</span>\n<span class=\"cp\">#include &lt;bitset&gt;</span>\n<span class=\"cp\">#include &lt;numeric&gt;</span>\n<span class=\"cp\">#include &lt;utility&gt;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">queens</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">};</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">next_permutation</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span><span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">);</span> <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bitset</span><span class=\"o\">&lt;</span><span class=\"mi\">15</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span><span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">[](</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">){</span><span class=\"k\">return</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);}).</span><span class=\"n\">first</span><span class=\"p\">).</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bitset</span><span class=\"o\">&lt;</span><span class=\"mi\">15</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span> <span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">[](</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">){</span><span class=\"k\">return</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);}).</span><span class=\"n\">first</span><span class=\"p\">).</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n      <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>算上include，刚好十行，<u>充分运用了C++标准库<br></u><br>你们这些连include都没的，也好意思贴上来么？<br><br>现在问题来了，<b>15K 的工作在哪里？</b><br><br>----------------------------------------------------------------------------<br>更新<br><br>J语言 49字符<div class=\"highlight\"><pre><code class=\"language-text\">(i.(([:*./\"1[:(#=+/@:~:)\"1(+,:-)\"1)#])i.@:!A.i.)8\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "在编译器原理中的defunctionalization的概念、为什么引入，有什么用途与意义？",
            "updated_time": 1425362260,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28489379",
            "created": 1425362260,
            "id": 28489379
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/41007629",
        "thumbnail": "",
        "created_time": 1425363192,
        "excerpt": "主要就是类型检查时很容易在closure这里没法检查只能做成例外，即便你类型检查能做对，去掉的好处是你后面的pass就不需要能处理高阶函数了嘛，省点事有啥不好的。 比如，有 f: X -> Y -> Z g: (Y->Z) -> ??? 我们只关心 X Y Z 无视 ??? 就是了 检查 g (f x) 时，我们检查 x 类型是否为X，是的话，f x类型就是 Y -> Z，符合 g 的要求。 这样看似就没有问题了。但是你继续往下编译 假如用一种naive的实现，(f x)的类型就变成了类似…",
        "updated_time": 1425366786,
        "id": 41007629,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "user_type": "people",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "主要就是类型检查时很容易在closure这里没法检查只能做成例外，即便你类型检查能做对，去掉的好处是你后面的pass就不需要能处理高阶函数了嘛，省点事有啥不好的。<br><br>比如，有<br><br>f: X -&gt; Y -&gt; Z<br>g: (Y-&gt;Z) -&gt; ???<br><br>我们只关心 X Y Z 无视 ??? 就是了<br><br>检查 g (f x) 时，我们检查 x 类型是否为X，是的话，f x类型就是 Y -&gt; Z，符合 g 的要求。<br><br>这样看似就没有问题了。但是你继续往下编译<br><br>假如用一种naive的实现，(f x)的类型就变成了类似<br><br><div class=\"highlight\"><pre><code class=\"language-text\">struct {\n    function *f\n    X *var_1\n}\n</code></pre></div>而 g 里要调用 (f x) ，假设第一个参数名是 arg1<br><div class=\"highlight\"><pre><code class=\"language-text\"> ((function *)arg1)(arg1, y)\n</code></pre></div>实际上，就是在类型上开了个后门，我们不管closure里面装的是啥，只要用起来是一样的，我们就认为他们都是一样的。<br><br>比如又有 h: X -&gt; Y - &gt; Y -&gt; Z  <br>(h x y) 就变成<br><div class=\"highlight\"><pre><code class=\"language-text\">struct {\n    function *f\n    X *var_1\n    Y *var_2\n}\n</code></pre></div><br><br>这么做的问题是后面的优化就约等于没法做了。无论如何要分析这里面的类型，一定是要找出所有可能传入这里的closure的。所以，我认为MLton的做法很好，也不用什么高难度的技巧，到这一步就是直接做一次whole-program分析把他们都找出来。<br><br>我是mlton脑残粉 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "写不出数据结构的人是不是不适合编程？",
            "updated_time": 1456416210,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28446967",
            "created": 1425192360,
            "id": 28446967
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/40861229",
        "thumbnail": "",
        "created_time": 1425205326,
        "excerpt": "题主别灰心，以前我也写不出来，可是后来我学了点ML语言的皮毛，瞬间就会了",
        "updated_time": 1425205343,
        "id": 40861229,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "题主别灰心，以前我也写不出来，可是后来我学了点ML语言的皮毛，瞬间就会了",
        "extras": ""
    },
    {
        "question": {
            "title": "工作一年的程序员又跑回学校和应届生一起应聘的话，会有什么优势和劣势？",
            "updated_time": 1424428694,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28263648",
            "created": 1424353421,
            "id": 28263648
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/40160129",
        "thumbnail": "",
        "created_time": 1424430232,
        "excerpt": "我听说有人工作一年后蛋疼去校园招聘玩，结果微软真的招他了，他就这样去了微软。",
        "updated_time": 1424432248,
        "id": 40160129,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我听说有人工作一年后蛋疼去校园招聘玩，结果微软真的招他了，他就这样去了微软。",
        "extras": ""
    },
    {
        "question": {
            "title": "普通人学习什么计算机语言比较好？有没有什么语言打的代码比较少的？",
            "updated_time": 1470398043,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28248249",
            "created": 1424240738,
            "id": 28248249
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/40031865",
        "thumbnail": "",
        "created_time": 1424240831,
        "excerpt": "要代码短，APL家族随便选一门就可以了。要知道在codegolf上，J语言可是经常毫无压力击败专门为codegolf开发的GolfScript的。 谁说APL难学的，看见APL IS EASY TO LEARN没？ 图摘自 APL In Exposition",
        "updated_time": 1424780951,
        "id": 40031865,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "要代码短，APL家族随便选一门就可以了。要知道在codegolf上，J语言可是经常毫无压力击败专门为codegolf开发的GolfScript的。<br><br>谁说APL难学的，看见APL IS EASY TO LEARN没？<br><br><noscript><img data-rawheight=\"209\" data-rawwidth=\"681\" src=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_r.jpg\"></noscript><img data-rawheight=\"209\" data-rawwidth=\"681\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"681\" data-original=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_b.jpg\"><br>图摘自 APL In Exposition",
        "extras": ""
    },
    {
        "question": {
            "title": "如何学好程序的静态分析？",
            "updated_time": 1410147491,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25254230",
            "created": 1410147379,
            "id": 25254230
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/39974054",
        "thumbnail": "",
        "created_time": 1424161588,
        "excerpt": "上面一个答案提到了Pysonar2。PySonar确实很好，但是Erlang里的Dialyzer/Typer在一开始就借鉴了王垠后来写的PySonar，完成度还比PySonar家族高多了，看Dialyzer/Typer的论文比对着王垠的slides和代码干瞪眼要好多了。论文链接可以在为了看懂王垠Pysonar，我应该掌握哪些知识？ - 知乎用户的回答 里找到。 比如王垠在slide里提到了PySonar的Limitations Doesn't process bytecode Dialyzer/Typer能 Does not track value/range of …",
        "updated_time": 1424161588,
        "id": 39974054,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "上面一个答案提到了Pysonar2。PySonar确实很好，但是Erlang里的Dialyzer/Typer在一开始就借鉴了王垠后来写的PySonar，完成度还比PySonar家族高多了，看Dialyzer/Typer的论文比对着王垠的slides和代码干瞪眼要好多了。论文链接可以在<a class=\"internal\" href=\"http://www.zhihu.com/question/27938655/answer/38715180\">为了看懂王垠Pysonar，我应该掌握哪些知识？ - 知乎用户的回答</a>里找到。<br><br>比如王垠在slide里提到了PySonar的Limitations<br><blockquote>Doesn't process bytecode<br></blockquote>Dialyzer/Typer能<br><blockquote>Does not track value/range of numbers<br></blockquote>Dialyzer/Typer能<br><blockquote>May produce false-negatives at recursions<br></blockquote>Dialyzer/Typer不会<br><blockquote>More approximations can be used to improve efficiency<br></blockquote>我感觉Dialyzer/Typer已经有过多approximations了，开了HiPE编译之后，速度比不开快了很多很多 ...，再说了，Dialyzer/Typer能用完所有分配给它的CPU，无论给几个核好像都能占完的样子，每次重建plt总是忘了这一点，接着桌面就卡死了<br><br>还有Possible Future Work<br><blockquote>Apply the technique to other (hopefully simpler) languages<br></blockquote>Erlang就是一门更简单的语言<br><blockquote>Publish a paper about the general method<br></blockquote>Dialyzer/Typer的作者在2004-2006年期间就已经发了好几篇论文了<br><br>王垠连related work都不敢列，一定是因为嫉妒 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "Call/cc 如何这样模拟 Goto？",
            "updated_time": 1423791947,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28158804",
            "created": 1423791947,
            "id": 28158804
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/39638553",
        "thumbnail": "",
        "created_time": 1423792265,
        "excerpt": "这是个box啊 > (define (f) (let ((a 0)) (lambda () (set! a (+ a 1)) a))\n> (let ((x (f))) (x))\n1\n> (let ((x (f))) (x) (x))\n2\n> (let ((x (f))) (x) (x) (x))\n3\n>\n",
        "updated_time": 1423793403,
        "id": 39638553,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这是个box啊<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt; (define (f) (let ((a 0)) (lambda () (set! a (+ a 1)) a))\n&gt; (let ((x (f))) (x))\n1\n&gt; (let ((x (f))) (x) (x))\n2\n&gt; (let ((x (f))) (x) (x) (x))\n3\n&gt;\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样用ocaml语言将一个list里面的元素提取？",
            "updated_time": 1423528783,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/28023424",
            "created": 1423205062,
            "id": 28023424
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/39085882",
        "thumbnail": "",
        "created_time": 1423219827,
        "excerpt": "这个不就是unzip嘛，比如Erlang里 1> lists:unzip3([{3,17,32},{2,10,4},{7,5,9}]).\n{[3,2,7],[17,10,5],[32,4,9]}\n 元素是List zip([], []) -> [];\nzip([H1|T1], [H2|T2]) -> [[H1|H2]|zip(T1,T2)].\n\nunzip([]) -> [];\nunzip([L]) -> [[E] || E <- L];\nunzip([H|T]) -> zip(H, unzip(T)).\n\ntest() ->\n [[3,2,7],[17,10,5],[32,4,9]] = unzip([[3,17,32],[2,10,4],[7,5,9]]),\n ok.\n OCaml let rec zip a b =\n match a, b with\n |…",
        "updated_time": 1423223086,
        "id": 39085882,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个不就是unzip嘛，比如Erlang里<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">unzip3</span><span class=\"p\">([{</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">32</span><span class=\"p\">},{</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">},{</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">}]).</span>\n<span class=\"p\">{[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]}</span>\n</code></pre></div><br>元素是List<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">zip</span><span class=\"p\">([],</span> <span class=\"p\">[])</span>           <span class=\"o\">-&gt;</span> <span class=\"p\">[];</span>\n<span class=\"nf\">zip</span><span class=\"p\">([</span><span class=\"nv\">H1</span><span class=\"p\">|</span><span class=\"nv\">T1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nv\">H2</span><span class=\"p\">|</span><span class=\"nv\">T2</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[[</span><span class=\"nv\">H1</span><span class=\"p\">|</span><span class=\"nv\">H2</span><span class=\"p\">]|</span><span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"nv\">T1</span><span class=\"p\">,</span><span class=\"nv\">T2</span><span class=\"p\">)].</span>\n\n<span class=\"nf\">unzip</span><span class=\"p\">([])</span>    <span class=\"o\">-&gt;</span> <span class=\"p\">[];</span>\n<span class=\"nf\">unzip</span><span class=\"p\">([</span><span class=\"nv\">L</span><span class=\"p\">])</span>   <span class=\"o\">-&gt;</span> <span class=\"p\">[[</span><span class=\"nv\">E</span><span class=\"p\">]</span> <span class=\"p\">||</span> <span class=\"nv\">E</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">L</span><span class=\"p\">];</span>\n<span class=\"nf\">unzip</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">zip</span><span class=\"p\">(</span><span class=\"nv\">H</span><span class=\"p\">,</span> <span class=\"n\">unzip</span><span class=\"p\">(</span><span class=\"nv\">T</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">test</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">],[</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">unzip</span><span class=\"p\">([[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">32</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]]),</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n</code></pre></div><br>OCaml<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">zip</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"bp\">[]</span><span class=\"o\">,</span> <span class=\"bp\">[]</span>             <span class=\"o\">-&gt;</span> <span class=\"bp\">[]</span>\n    <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">::</span><span class=\"n\">t1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">h2</span><span class=\"o\">::</span><span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">::</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">zip</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span>\n    <span class=\"o\">|</span> <span class=\"o\">_,</span> <span class=\"o\">_</span>               <span class=\"o\">-&gt;</span> <span class=\"k\">assert</span> <span class=\"bp\">false</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">unzip</span> <span class=\"n\">l</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"bp\">[]</span>         <span class=\"o\">-&gt;</span> <span class=\"bp\">[]</span><span class=\"o\">;</span>\n    <span class=\"o\">|</span> <span class=\"o\">[</span><span class=\"bp\">[]</span><span class=\"o\">]</span>       <span class=\"o\">-&gt;</span> <span class=\"bp\">[]</span><span class=\"o\">;</span>\n    <span class=\"o\">|</span> <span class=\"o\">[(</span><span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span><span class=\"o\">)]</span> <span class=\"o\">-&gt;</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">::</span> <span class=\"n\">unzip</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n    <span class=\"o\">|</span> <span class=\"n\">h</span> <span class=\"o\">::</span> <span class=\"n\">t</span>     <span class=\"o\">-&gt;</span> <span class=\"n\">zip</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">unzip</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"bp\">()</span> <span class=\"o\">=</span>\n  <span class=\"k\">assert</span> <span class=\"o\">([[</span><span class=\"mi\">3</span><span class=\"o\">;</span><span class=\"mi\">2</span><span class=\"o\">;</span><span class=\"mi\">7</span><span class=\"o\">];[</span><span class=\"mi\">17</span><span class=\"o\">;</span><span class=\"mi\">10</span><span class=\"o\">;</span><span class=\"mi\">5</span><span class=\"o\">];[</span><span class=\"mi\">32</span><span class=\"o\">;</span><span class=\"mi\">4</span><span class=\"o\">;</span><span class=\"mi\">9</span><span class=\"o\">]]</span> <span class=\"o\">=</span> <span class=\"n\">unzip</span> <span class=\"o\">[[</span><span class=\"mi\">3</span><span class=\"o\">;</span><span class=\"mi\">17</span><span class=\"o\">;</span><span class=\"mi\">32</span><span class=\"o\">];[</span><span class=\"mi\">2</span><span class=\"o\">;</span><span class=\"mi\">10</span><span class=\"o\">;</span><span class=\"mi\">4</span><span class=\"o\">];[</span><span class=\"mi\">7</span><span class=\"o\">;</span><span class=\"mi\">5</span><span class=\"o\">;</span><span class=\"mi\">9</span><span class=\"o\">]]);</span>\n  <span class=\"bp\">()</span>\n<span class=\"o\">;;</span>\n</code></pre></div><br>...",
        "extras": ""
    },
    {
        "question": {
            "title": "谈恋爱是一件浪费时间的事情吗？",
            "updated_time": 1423405996,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27879227",
            "created": 1422605657,
            "id": 27879227
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/38723858",
        "thumbnail": "",
        "created_time": 1422882086,
        "excerpt": "Yes. The Hitchhiker's Guide to the Galaxy has this to say on the subject of love: Avoid, if at all possible —— The Hitchhiker's Guide to the Galaxy (film) ",
        "updated_time": 1422882086,
        "id": 38723858,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Yes.<br><br><blockquote><i>The Hitchhiker's Guide to the Galaxy</i> has this to say on the subject of love:<br><blockquote><b>Avoid, if at all possible<br></b></blockquote>—— <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//en.wikiquote.org/wiki/The_Hitchhiker%2527s_Guide_to_the_Galaxy_%2528film%2529\" target=\"_blank\" rel=\"nofollow noreferrer\">The Hitchhiker's Guide to the Galaxy (film)<i class=\"icon-external\"></i></a></blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "为了看懂王垠Pysonar，我应该掌握哪些知识？",
            "updated_time": 1422874698,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27938655",
            "created": 1422874698,
            "id": 27938655
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/38715180",
        "thumbnail": "",
        "created_time": 1422875452,
        "excerpt": "Erlang里的Dialyzer/Typer在一开始就借鉴了王垠后来写的PySonar的，所以看Dialyzer/Typer的论文就好了。 DIALYZER: a DIscrepancy AnaLYZer for ERlang programs TYPER: A Type Annotator of Erlang Code Pratical type inference based on success typings Gradual Typing of Erlang programs: A Wrangler Experience ",
        "updated_time": 1422876327,
        "id": 38715180,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Erlang里的Dialyzer/Typer在一开始就借鉴了王垠后来写的PySonar的，所以看Dialyzer/Typer的论文就好了。<br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/\" target=\"_blank\" rel=\"nofollow noreferrer\">DIALYZER: a DIscrepancy AnaLYZer for ERlang programs<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//user.it.uu.se/%7Etobiasl/publications/typer.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">TYPER: A Type Annotator of Erlang Code<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/publications/succ_types.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">Pratical type inference based on success typings<i class=\"icon-external\"></i></a><br><br><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.it.uu.se/research/group/hipe/dialyzer/publications/wrangler.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\">Gradual Typing of Erlang programs: A Wrangler Experience<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "「MySQL」这个词怎么读？",
            "updated_time": 1466299189,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27916065",
            "created": 1422785089,
            "id": 27916065
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/38619559",
        "thumbnail": "",
        "created_time": 1422785458,
        "excerpt": "木鱼SQL ...",
        "updated_time": 1470281433,
        "id": 38619559,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "木鱼SQL ...",
        "extras": ""
    },
    {
        "question": {
            "title": "以集合的方式理解代码,这样做还有哪些缺陷?",
            "updated_time": 1422547051,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27851780",
            "created": 1422497720,
            "id": 27851780
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/38364781",
        "thumbnail": "",
        "created_time": 1422508586,
        "excerpt": "你需要的是一门APL家族的语言 比如你这个问题，在J语言里，可以这么表示Box - impress your cat - 知乎专栏 你的担心是多余的，完全可以只用一行，且不用任何变量来表示 (([:<\"1[:#:[:i.[:2&^#)#&.><) 1 2 3\n┌┬─┬─┬───┬─┬───┬───┬─────┐\n││3│2│2 3│1│1 3│1 2│1 2 3│\n└┴─┴─┴───┴─┴───┴───┴─────┘\n 组合子大法好",
        "updated_time": 1422509625,
        "id": 38364781,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你需要的是一门APL家族的语言<br><br>比如你这个问题，在J语言里，可以这么表示<a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19933594\" class=\"internal\">Box - impress your cat - 知乎专栏</a><br><br>你的担心是多余的，完全可以只用一行，且不用任何变量来表示<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   (([:&lt;\"1[:#:[:i.[:2&amp;^#)#&amp;.&gt;&lt;) 1 2 3\n┌┬─┬─┬───┬─┬───┬───┬─────┐\n││3│2│2 3│1│1 3│1 2│1 2 3│\n└┴─┴─┴───┴─┴───┴───┴─────┘\n</code></pre></div><br>组合子大法好",
        "extras": ""
    },
    {
        "question": {
            "title": "如何实现 Call / CC 或者阴阳谜题（Yin Yang Puzzle）？",
            "updated_time": 1421893401,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27683900",
            "created": 1421726256,
            "id": 27683900
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/37732257",
        "thumbnail": "",
        "created_time": 1421831236,
        "excerpt": "yin yang puzzle不过是 yin = cc()\necho '@'\nyang = cc()\necho '*'\nyin(yang) 无非就是cc会产生平行宇宙。这个用 pi-calculus 来表示比较好 proc yin_cc(O,A,B) {\n new Yin in {\n yin(O,A,B,Yin) | send Yin to Yin\n }\n}\n\nproc yin(O,A,B,YinCC) {\n recv Yin from YinCC;\n send A to O;\n { yin(O,A,B,YinCC) | yang_cc(O,A,B,Yin) }\n}\n\nproc yang_cc(O,A,B,Yin) {\n new Yang in {\n yang(O,A,B,Yin,Yang) | send Yang to Yang\n }\n…",
        "updated_time": 1421842529,
        "id": 37732257,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "yin yang puzzle不过是<br><br><div class=\"highlight\"><pre><code class=\"language-text\">yin = cc()\necho '@'\nyang = cc()\necho '*'\nyin(yang)\n</code></pre></div><br>无非就是cc会产生平行宇宙。这个用 pi-calculus 来表示比较好<br><br><div class=\"highlight\"><pre><code class=\"language-text\">proc yin_cc(O,A,B) {\n    new Yin in {\n        yin(O,A,B,Yin) | send Yin to Yin\n    }\n}\n\nproc yin(O,A,B,YinCC) {\n    recv Yin from YinCC;\n    send A to O;\n    { yin(O,A,B,YinCC) | yang_cc(O,A,B,Yin) }\n}\n\nproc yang_cc(O,A,B,Yin) {\n    new Yang in {\n        yang(O,A,B,Yin,Yang) | send Yang to Yang\n    }\n}\n\nproc yang(O,A,B,Yin,YangCC) {\n    recv Yang from YangCC;\n    send B to O;\n    { yang(O,A,B,Yin,YangCC) | send Yang to Yin }\n}\n\nproc output(O) {\n    recv X from O;\n    output(O)\n}\n\nproc main() {\n    new O, A, B in {\n        output(O) | yin_cc(O,A,B)\n    }\n}\n</code></pre></div><br>这样就能直接看图了 <a href=\"https://link.zhihu.com/?target=http%3A//bhuztez.github.io/pi-diagram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Diagram of π-Calculus<i class=\"icon-external\"></i></a><br><br>一看就会了，就是这么简单<br>----------------------------------------<br><br>我理解的执行过程是这样，不知道为啥这么理解和Ruby不一样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">                  1     2\n- = cc() | -=1 | -=? | -=1 |\necho '@'    @\n+ = cc() | +=2 |     | +=? |\necho '*'    *                 3\n-(+)     |     | -=2 |     | -=2 |\n                  @\n               | +=3 |     | +=? |\n                  *\n                     | +=3 |\n                        *           4\n               | -=3 |           | -=3 |\n                  @\n               | +=4 |           | +=? |\n                  *\n                           | +=4 |\n                              *\n                     | +=4 |\n                        *\n</code></pre></div><br>评论不方便贴代码，直接贴这儿了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">(let ((yin (call-with-current-continuation (lambda (c) c))))\n  (display #\\@)\n  (let ((yang (call-with-current-continuation (lambda (c) c))))\n    (display #\\*)\n    (yin yang)\n  )\n)\n</code></pre></div><br>Scheme明明没问题嘛",
        "extras": ""
    },
    {
        "question": {
            "title": "学习Erlang有什么好的资源？",
            "updated_time": 1381990367,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21832057",
            "created": 1381990367,
            "id": 21832057
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/37147300",
        "thumbnail": "",
        "created_time": 1421136342,
        "excerpt": "官方网站上的An Erlang Course就挺好的。废话也很少。一会儿就看完了嘛。虽然内容有点老了，但总的来说还是很好的嘛。 http://www.erlang.org/course/course.html ",
        "updated_time": 1421136535,
        "id": 37147300,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "官方网站上的An Erlang Course就挺好的。废话也很少。一会儿就看完了嘛。虽然内容有点老了，但总的来说还是很好的嘛。<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.erlang.org/course/course.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">erlang.org/course/cours</span><span class=\"invisible\">e.html</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "Go 这种逆天的语言，为什么 5 年了，还没有火起来呢？",
            "updated_time": 1452681475,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27172183",
            "created": 1419074065,
            "id": 27172183
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/37088220",
        "thumbnail": "",
        "created_time": 1421068018,
        "excerpt": "https://news.ycombinator.com/item?id=8872400 ",
        "updated_time": 1449032229,
        "id": 37088220,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D8872400\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">news.ycombinator.com/it</span><span class=\"invisible\">em?id=8872400</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "Functional Programming 说的就是 Lambda Calculus 吗？",
            "updated_time": 1423989858,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27521806",
            "created": 1420935187,
            "id": 27521806
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/36973566",
        "thumbnail": "",
        "created_time": 1420947331,
        "excerpt": "曾老师你连FP的基本概念都搞错了。FP是基于combinatory logic而不是lambda calculus，尽管两者之间有强烈的联系。没看过John Backus的Can Programming Be Liberated from the von Neumann Style? A Functional Style and Its Algebra of Programs，就别来嚷嚷FP，好不好？ We owe a great debt to Kenneth Iverson for showing us that there are programs that are neither word-at-a- time nor dependent on lambda expressions…",
        "updated_time": 1420947401,
        "id": 36973566,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "",
        "extras": ""
    },
    {
        "question": {
            "title": "你开发过什么不寻常的程序？",
            "updated_time": 1420892574,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27448909",
            "created": 1420608387,
            "id": 27448909
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36948090",
        "thumbnail": "",
        "created_time": 1420902794,
        "excerpt": "山寨腾讯山寨版Robocode，以便山寨版Robocode的代码能在Robocode上运行。顺便爬了山寨Robocode上的所有Robot代码在Robocode里测试了一下是不是真的能运行。 我认为我这个行为属于高阶山寨，腾讯应该把山寨大王的名号让给我",
        "updated_time": 1420902936,
        "id": 36948090,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "山寨腾讯山寨版Robocode，以便山寨版Robocode的代码能在Robocode上运行。顺便爬了山寨Robocode上的所有Robot代码在Robocode里测试了一下是不是真的能运行。<br><br>我认为我这个行为属于高阶山寨，腾讯应该把山寨大王的名号让给我",
        "extras": ""
    },
    {
        "question": {
            "title": "有哪些长得很帅或呆萌的飞行器？",
            "updated_time": 1416672024,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26736052",
            "created": 1416666928,
            "id": 26736052
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36928858",
        "thumbnail": "",
        "created_time": 1420885742,
        "excerpt": "",
        "updated_time": 1420888351,
        "id": 36928858,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<noscript><img data-rawheight=\"450\" data-rawwidth=\"800\" src=\"https://pic4.zhimg.com/56c5174f2376e87384a30359dba3d04b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/56c5174f2376e87384a30359dba3d04b_r.jpg\"></noscript><img data-rawheight=\"450\" data-rawwidth=\"800\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/56c5174f2376e87384a30359dba3d04b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/56c5174f2376e87384a30359dba3d04b_b.jpg\">",
        "extras": ""
    },
    {
        "question": {
            "title": "如何向不懂编程的人解释函数式编程相对于命令式的优点？",
            "updated_time": 1420159371,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27354875",
            "created": 1420159371,
            "id": 27354875
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36293746",
        "thumbnail": "",
        "created_time": 1420164026,
        "excerpt": "这个照搬Erlang the Movie的开头不就好了。代码来自这个玩意有什么大幅优化的余地吗？ - 算法 Functional programming languages have several advantages over\ntraditional languages For example, programs in such languages are\nconsiderably shorter than equivalent programs in imperative languages. Here for\nexample, is a program in C int classify(int m, int kmers[m], int n, float kprob[n][65536], int results…",
        "updated_time": 1420164129,
        "id": 36293746,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个照搬Erlang the Movie的开头不就好了。代码来自<a href=\"http://www.zhihu.com/question/27209781\" class=\"internal\">这个玩意有什么大幅优化的余地吗？ - 算法</a><br><br><blockquote>Functional programming languages have several advantages over\ntraditional languages<br><br>For example, programs in such languages are\nconsiderably shorter than equivalent programs in imperative languages.<br><br>Here for\nexample, is a program in C<br><br><div class=\"highlight\"><pre><code class=\"language-text\">int classify(int m, int kmers[m], int n, float kprob[n][65536], int results[n]) {\n  float sum[n];\n  memset(sum, 0, sizeof(sum));\n\n  for (int i=0; i&lt;m; i++) {\n    for (int j=0; j&lt;n; j++) {  \n      sum[j] += kprob[j][kmers[i]];\n    }\n  }\n\n  float min = sum[0];\n\n  for (int i=1; i&lt;n; i++) {\n    if (sum[i] &lt; min) {\n      min = sum[i];\n    }\n  }\n\n  int count = 0;\n  for (int i=0; i&lt;n; i++) {\n    if (sum[i] == min) {\n      results[count] = i;\n      count += 1;\n    }\n  }\n  return count;\n}\n</code></pre></div><br>and here is the equivalent program in J.<br><br><div class=\"highlight\"><pre><code class=\"language-text\">classify =: 4 : '(I.@:=&lt;./) +/ y {~~. x'\n</code></pre></div></blockquote><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "精通 Python 是一种怎样的体验？",
            "updated_time": 1420129140,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27341859",
            "created": 1420058403,
            "id": 27341859
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36243155",
        "thumbnail": "",
        "created_time": 1420083431,
        "excerpt": "Python is just as easy as ABC. Anyone who know ABC could master python in an hour.",
        "updated_time": 1420083431,
        "id": 36243155,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Python is just as easy as ABC. Anyone who know ABC could master python in an hour.",
        "extras": ""
    },
    {
        "question": {
            "title": "想设计一个简单的程序向女生表白，有什么好的想法?",
            "updated_time": 1419842892,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27305357",
            "created": 1419842892,
            "id": 27305357
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36089576",
        "thumbnail": "",
        "created_time": 1419862616,
        "excerpt": "根据另外一个问题 求大神给我翻译男友写的东西？ - 无机化学 我想我能得出结论了，假如她喜欢你，哪怕你写的程序甚至都不能运行，也会很高兴的。 假如她不喜欢你，无论你程序写得多有意思，那都没用。 至于她是否喜欢你，这个问题可比写个程序难多了",
        "updated_time": 1419862661,
        "id": 36089576,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "根据另外一个问题<a class=\"internal\" href=\"http://www.zhihu.com/question/27219338\"> 求大神给我翻译男友写的东西？ - 无机化学</a><br><br>我想我能得出结论了，假如她喜欢你，哪怕你写的程序甚至都不能运行，也会很高兴的。<br>假如她不喜欢你，无论你程序写得多有意思，那都没用。<br><br>至于她是否喜欢你，这个问题可比写个程序难多了",
        "extras": ""
    },
    {
        "question": {
            "title": "「我对女生的兴趣，还没有我对数学的兴趣高。」这样的男生是怎样的性格？",
            "updated_time": 1419852300,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27291231",
            "created": 1419762164,
            "id": 27291231
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/36016849",
        "thumbnail": "",
        "created_time": 1419767632,
        "excerpt": "这你就不懂了，既然你诚心诚意的问了，那我就大发慈悲的告诉你 smart is the new sexy math is the new porn 就是这样",
        "updated_time": 1419767788,
        "id": 36016849,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这你就不懂了，既然你诚心诚意的问了，那我就大发慈悲的告诉你<br><br>smart is the new sexy<br>math is the new porn<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价subhask?",
            "updated_time": 1486012838,
            "question_type": "normal",
            "type": "question",
            "created": 1486012838,
            "url": "https://www.zhihu.com/api/v4/questions/55323121",
            "id": 55323121
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143979258",
        "thumbnail": "",
        "created_time": 1486013135,
        "excerpt": "跟你的那玩意儿一个毛病啊。对于矩阵什么的计算，数组的shape才是和一般程序的类型对应的。你连shape都不管，讲什么type-safe是没啥意义的 (逃",
        "updated_time": 1486020797,
        "id": 143979258,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "跟你的那玩意儿一个毛病啊。对于矩阵什么的计算，数组的shape才是和一般程序的类型对应的。你连shape都不管，讲什么type-safe是没啥意义的 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "Comonad有什么实际用途？",
            "updated_time": 1485998098,
            "question_type": "normal",
            "type": "question",
            "created": 1485998098,
            "url": "https://www.zhihu.com/api/v4/questions/55316968",
            "id": 55316968
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143974062",
        "thumbnail": "",
        "created_time": 1486011117,
        "excerpt": "(co)monad既有也没有实际用途。 为什么说，(co)monad没有实际用途。因为我们通常看到的说法就是，这里有一个(co)monad，那里有一个(co)monad，到处都是(co)monad，(co)monad就是好，就是好，就是好。毕竟，要是有了实际用途还怎么能号称avoid success at all costs。 为什么说，(co)monad有实际用途。比如我们证明了某种计算能进行，类型要符合(co)monad，同时我们找出几个例子，能说明他们的什么类型能符合(co)monad。 现在问题…",
        "updated_time": 1486011493,
        "id": 143974062,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "(co)monad既有也没有实际用途。<br><br>为什么说，(co)monad没有实际用途。因为我们通常看到的说法就是，这里有一个(co)monad，那里有一个(co)monad，到处都是(co)monad，(co)monad就是好，就是好，就是好。毕竟，要是有了实际用途还怎么能号称avoid success at all costs。<br><br>为什么说，(co)monad有实际用途。比如我们证明了某种计算能进行，类型要符合(co)monad，同时我们找出几个例子，能说明他们的什么类型能符合(co)monad。<br><br>现在问题来了，根据Curry-Howard correspondence，我们该不该把所有要证明的性质都编码到类型里？",
        "extras": ""
    },
    {
        "question": {
            "title": "如何提高阅读能力才能读出如下评论中「我会用谷歌我高人一等」的优越感？",
            "updated_time": 1486108881,
            "question_type": "normal",
            "type": "question",
            "created": 1485944076,
            "url": "https://www.zhihu.com/api/v4/questions/55299307",
            "id": 55299307
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143971510",
        "thumbnail": "",
        "created_time": 1486010129,
        "excerpt": "套路是没错的，要黑别人，首先就要把别人摆到高处，让他不好意思反过来黑你。比如失败人士要黑曾博，肯定一开始就说UCB高才生，扎克勃格御用占星师曾博。 可是他最后还是暴露了成功人士的本质。真才实学20年这样的话都甩出来了。毕竟成功人士要模仿失败人士还是有点难度的。",
        "updated_time": 1486010129,
        "id": 143971510,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "套路是没错的，要黑别人，首先就要把别人摆到高处，让他不好意思反过来黑你。比如失败人士要黑曾博，肯定一开始就说UCB高才生，扎克勃格御用占星师曾博。<br><br>可是他最后还是暴露了成功人士的本质。真才实学20年这样的话都甩出来了。毕竟成功人士要模仿失败人士还是有点难度的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价2017年的央视《中国诗词大会》？",
            "updated_time": 1486004482,
            "question_type": "normal",
            "type": "question",
            "created": 1485741520,
            "url": "https://www.zhihu.com/api/v4/questions/55229351",
            "id": 55229351
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143962998",
        "thumbnail": "",
        "created_time": 1486007018,
        "excerpt": "这个毫无意义啊。就是比谁背的多啊。关键是不实用啊。把这些背下来有啥用？完全和现在的时代脱节啊。 我们真正需要的是把经常用到，但是又不怎么好记的程序，编成容易记忆的顺口溜什么的。就选N位观众来记，主持人出题，选手当场编口诀，谁的口诀记住的人数多，就是谁获胜。",
        "updated_time": 1486007018,
        "id": 143962998,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个毫无意义啊。就是比谁背的多啊。关键是不实用啊。把这些背下来有啥用？完全和现在的时代脱节啊。<br><br>我们真正需要的是把经常用到，但是又不怎么好记的程序，编成容易记忆的顺口溜什么的。就选N位观众来记，主持人出题，选手当场编口诀，谁的口诀记住的人数多，就是谁获胜。",
        "extras": ""
    },
    {
        "question": {
            "title": "应该如何理解Erlang的“就让它崩溃”思想？",
            "updated_time": 1382451546,
            "question_type": "normal",
            "type": "question",
            "created": 1373611391,
            "url": "https://www.zhihu.com/api/v4/questions/21325941",
            "id": 21325941
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143898573",
        "thumbnail": "",
        "created_time": 1485962541,
        "excerpt": "这称不上啥思想吧。 因为Erlang有真正的消息机制，就是可以放心的crash。 你就想想，你一个C语言的库函数，难道出错你就直接abort？ 对于程序来说，错误是客观，异常是主观的。大部分程序语言，很遗憾，都分不清这两者的区别",
        "updated_time": 1485962571,
        "id": 143898573,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这称不上啥思想吧。<br><br>因为Erlang有真正的消息机制，就是可以放心的crash。<br><br>你就想想，你一个C语言的库函数，难道出错你就直接abort？<br><br>对于程序来说，错误是客观，异常是主观的。大部分程序语言，很遗憾，都分不清这两者的区别",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 2017 年 2 月 1 日 GitLab 数据库被误删？",
            "updated_time": 1485963948,
            "question_type": "normal",
            "type": "question",
            "created": 1485946582,
            "url": "https://www.zhihu.com/api/v4/questions/55300424",
            "id": 55300424
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143896990",
        "thumbnail": "",
        "created_time": 1485962112,
        "excerpt": "真正用过GitLab的，都知道这是挺正常的。GitLab这么难部署的东西，这么长时间没出大问题，完全可以称的上奇迹了。",
        "updated_time": 1485962138,
        "id": 143896990,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "真正用过GitLab的，都知道这是挺正常的。GitLab这么难部署的东西，这么长时间没出大问题，完全可以称的上奇迹了。",
        "extras": ""
    },
    {
        "question": {
            "title": "在一所（勃学意义上的）三本可以做到申请到UCB,CMU计算机master吗？",
            "updated_time": 1485964879,
            "question_type": "normal",
            "type": "question",
            "created": 1485958972,
            "url": "https://www.zhihu.com/api/v4/questions/55307392",
            "id": 55307392
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/143896426",
        "thumbnail": "",
        "created_time": 1485961933,
        "excerpt": "我就想不明白了，一个个啥成就也没有做出来，就想去读硕士博士，还一定要名校。这是病，得治啊。 看看Joe Armstrong，9个9的产品开始卖了之后才去读博士的。",
        "updated_time": 1485961987,
        "id": 143896426,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我就想不明白了，一个个啥成就也没有做出来，就想去读硕士博士，还一定要名校。这是病，得治啊。<br><br>看看Joe Armstrong，9个9的产品开始卖了之后才去读博士的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何反驳贬低中国书法、夸耀英文字体设计比中国书法复杂多样的言论？",
            "updated_time": 1485262404,
            "question_type": "normal",
            "type": "question",
            "created": 1463233306,
            "url": "https://www.zhihu.com/api/v4/questions/46333423",
            "id": 46333423
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142714688",
        "thumbnail": "",
        "created_time": 1485317218,
        "excerpt": "英文字体的复杂度完全就是没有必要的，导致排版和字体不能完全分离，外行只有达到Knuth这样的水平才能写出一个结果不太难看的排版算法，依旧不能避免有些情况需要你手工插入一些空格。而汉字全都是方的，等宽的，排版和字体的边界是非常明确的，排版归排版，字体归字体。只支持汉字，排版引擎难度直接就能下降80%。",
        "updated_time": 1485317218,
        "id": 142714688,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "英文字体的复杂度完全就是没有必要的，导致排版和字体不能完全分离，外行只有达到Knuth这样的水平才能写出一个结果不太难看的排版算法，依旧不能避免有些情况需要你手工插入一些空格。而汉字全都是方的，等宽的，排版和字体的边界是非常明确的，排版归排版，字体归字体。只支持汉字，排版引擎难度直接就能下降80%。",
        "extras": ""
    },
    {
        "question": {
            "title": "在科研上，有没有工业界领先于学术界的情况？",
            "updated_time": 1486042090,
            "question_type": "normal",
            "type": "question",
            "created": 1484703181,
            "url": "https://www.zhihu.com/api/v4/questions/54879954",
            "id": 54879954
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142551857",
        "thumbnail": "",
        "created_time": 1485229286,
        "excerpt": "学术界整天只会avoid success at all cost，连Erlang这么简单的东西都搞不出来 (逃",
        "updated_time": 1485229303,
        "id": 142551857,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "学术界整天只会avoid success at all cost，连Erlang这么简单的东西都搞不出来 (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待：老父亲十年苦证“哥德巴赫猜想”？",
            "updated_time": 1485601161,
            "question_type": "normal",
            "type": "question",
            "created": 1485011077,
            "url": "https://www.zhihu.com/api/v4/questions/55007615",
            "id": 55007615
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142482305",
        "thumbnail": "",
        "created_time": 1485181832,
        "excerpt": "这锅还是让教育部门背吧。假如中国像苏联一样，小学三年级就开始学泛函分析，那么这样的悲剧就不会一而再再而三的发生了。 要是小学三年级还没开始学泛函分析，我会亲手把教育部长送到西伯利亚去 ——斯大林",
        "updated_time": 1485236085,
        "id": 142482305,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这锅还是让教育部门背吧。假如中国像苏联一样，小学三年级就开始学泛函分析，那么这样的悲剧就不会一而再再而三的发生了。<br><br><blockquote>要是小学三年级还没开始学泛函分析，我会亲手把教育部长送到西伯利亚去<br><br>——斯大林</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "有哪些适合英语初学者读的英文原版书？",
            "updated_time": 1361412788,
            "question_type": "normal",
            "type": "question",
            "created": 1361412788,
            "url": "https://www.zhihu.com/api/v4/questions/20791265",
            "id": 20791265
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142477332",
        "thumbnail": "",
        "created_time": 1485180043,
        "excerpt": "Project Gutenberg 里这么多，你这问的好像你都已经看完的样子",
        "updated_time": 1485180044,
        "id": 142477332,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//www.gutenberg.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Project Gutenberg<i class=\"icon-external\"></i></a>里这么多，你这问的好像你都已经看完的样子",
        "extras": ""
    },
    {
        "question": {
            "title": "汉语文言的语序的发生，是来自口语的语序，还是独立于口语的语序？",
            "updated_time": 1485143651,
            "question_type": "normal",
            "type": "question",
            "created": 1485143651,
            "url": "https://www.zhihu.com/api/v4/questions/55049735",
            "id": 55049735
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142403521",
        "thumbnail": "",
        "created_time": 1485150896,
        "excerpt": "假设口语区分主格宾格，那么SVO六种顺序都是同一个意思。书面语，始终以SVO记录，并不会导致读出来顺序是错的。所以，即便你假设书面语记录的语序在口语中是正确的，你也不能就因此说书面语的语序就是从口语中来的，更不能说口语中不允许存在别的语序。 书面语规定了SVO的顺序，就不需要记录那些表示主格宾格的变化，因为这些可以从组合顺序中推断出来。假如你是假设是书面语是跟着口语语序的，那么主格宾格的变化去哪里了？你是…",
        "updated_time": 1485151220,
        "id": 142403521,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "假设口语区分主格宾格，那么SVO六种顺序都是同一个意思。书面语，始终以SVO记录，并不会导致读出来顺序是错的。所以，即便你假设书面语记录的语序在口语中是正确的，你也不能就因此说书面语的语序就是从口语中来的，更不能说口语中不允许存在别的语序。<br><br>书面语规定了SVO的顺序，就不需要记录那些表示主格宾格的变化，因为这些可以从组合顺序中推断出来。假如你是假设是书面语是跟着口语语序的，那么主格宾格的变化去哪里了？你是要说这是被省略了吗？",
        "extras": ""
    },
    {
        "question": {
            "title": "高中生花钱上补习班是一种失败人士送钱的行为吗？",
            "updated_time": 1484893228,
            "question_type": "normal",
            "type": "question",
            "created": 1484893228,
            "url": "https://www.zhihu.com/api/v4/questions/54960883",
            "id": 54960883
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/142140899",
        "thumbnail": "",
        "created_time": 1485005086,
        "excerpt": "送点钱真的没什么 如何评价「17岁女生被名校老师性侵」？ - 心理学 - 知乎 ",
        "updated_time": 1485005087,
        "id": 142140899,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "送点钱真的没什么<br><br><a href=\"https://www.zhihu.com/question/54949501\" class=\"internal\">如何评价「17岁女生被名校老师性侵」？ - 心理学 - 知乎</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "失败人士如何过年？",
            "updated_time": 1484960224,
            "question_type": "normal",
            "type": "question",
            "created": 1484729966,
            "url": "https://www.zhihu.com/api/v4/questions/54895914",
            "id": 54895914
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/141784731",
        "thumbnail": "",
        "created_time": 1484815608,
        "excerpt": "难道不是得过且过吗。新年有什么值得庆祝的呢？ 除了社会顶层希望自己的权利再延续一年，资本家希望自己的空手套白狼再久一点今年赚得再狠一点值得期待以外，为什么普通人这么喜欢新年呢？ 难道不是社会的既得利益者才希望这个社会长久吗？ 来年有什么是真正值得期待的？ 知乎 - 与世界分享你的知识、经验和见解 (逃",
        "updated_time": 1484815609,
        "id": 141784731,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>难道不是得过且过吗。新年有什么值得庆祝的呢？<br>除了社会顶层希望自己的权利再延续一年，资本家希望自己的空手套白狼再久一点今年赚得再狠一点值得期待以外，为什么普通人这么喜欢新年呢？<br>难道不是社会的既得利益者才希望这个社会长久吗？<br><br>来年有什么是真正值得期待的？</blockquote><br><a href=\"https://www.zhihu.com/question/54293415\" class=\"internal\">知乎 - 与世界分享你的知识、经验和见解</a><br><br>(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "中文里「除以」和「除」是原本就存在的说法，还是受外文里的被动用法影响翻译过来的？",
            "updated_time": 1409905766,
            "question_type": "normal",
            "type": "question",
            "created": 1409905766,
            "url": "https://www.zhihu.com/api/v4/questions/25149331",
            "id": 25149331
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/141764772",
        "thumbnail": "",
        "created_time": 1484809480,
        "excerpt": "除 以 这两个字都挺难的，反正我到目前还不知道怎么定义其含义而不出反例。 根据我有限的理解，除的本质是减，而divide的本质是分，两者是不同的。必然不是从英文翻译过来的。 除B，应该理解成 -B，不然你怎么解释 三下五除二 。除几应该指的是取走几根棍子 可是我们又有 以B除A得C余D ，以及 以B除 ... 不尽者 的说法，可见 以B除 指的是，不断取走B根棍子，直到不足B根。",
        "updated_time": 1484809495,
        "id": 141764772,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "除 以 这两个字都挺难的，反正我到目前还不知道怎么定义其含义而不出反例。<br><br>根据我有限的理解，除的本质是减，而divide的本质是分，两者是不同的。必然不是从英文翻译过来的。<br><br>除B，应该理解成 -B，不然你怎么解释 三下五除二 。除几应该指的是取走几根棍子<br><br>可是我们又有 以B除A得C余D ，以及 以B除 ... 不尽者 的说法，可见 以B除 指的是，不断取走B根棍子，直到不足B根。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价曾老师的最新头像？",
            "updated_time": 1484718950,
            "question_type": "normal",
            "type": "question",
            "created": 1484557005,
            "url": "https://www.zhihu.com/api/v4/questions/54823492",
            "id": 54823492
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/141249623",
        "thumbnail": "",
        "created_time": 1484557731,
        "excerpt": "给人一种嘴上说着失败，心里想的还是成功的感觉",
        "updated_time": 1484557732,
        "id": 141249623,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "给人一种嘴上说着失败，心里想的还是成功的感觉",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么某校自编教材漏洞百出，而用这些教材的公开课却在知乎上饱受好评？",
            "updated_time": 1484369628,
            "question_type": "normal",
            "type": "question",
            "created": 1484367276,
            "url": "https://www.zhihu.com/api/v4/questions/54748473",
            "id": 54748473
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/141040756",
        "thumbnail": "",
        "created_time": 1484452399,
        "excerpt": "你们爱吹就继续吹吧 我就补充几点 假如他上课都不按这本书来的，那么列在那里干什么？列C语言标准以及用到的各种库的文档不好？ 假如他上课是按这本书来的， 假如他不知道这本书很烂，那么这讲课的水平难道不值得怀疑么？ 假如他知道这本书很烂，还列在那边 ... 我就不说某高才生曾博，上了这门课，碰到问题连可以查一下C gibberish ↔ English 都不知道，还在那里大言不惭的说C比Python简单，C只要掌握了指针就可以了。 课程介…",
        "updated_time": 1484458712,
        "id": 141040756,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你们爱吹就继续吹吧<br><br>我就补充几点<br><br>假如他上课都不按这本书来的，那么列在那里干什么？列C语言标准以及用到的各种库的文档不好？<br><br>假如他上课是按这本书来的，<br><br>假如他不知道这本书很烂，那么这讲课的水平难道不值得怀疑么？<br><br>假如他知道这本书很烂，还列在那边 ...<br><br>我就不说某高才生曾博，上了这门课，碰到问题连可以查一下<a href=\"https://link.zhihu.com/?target=http%3A//cdecl.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C gibberish ↔ English<i class=\"icon-external\"></i></a>都不知道，还在那里大言不惭的说C比Python简单，C只要掌握了指针就可以了。<br><br>课程介绍都能写的自相矛盾<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.icourse163.org/course/ZJU-200001%23/info\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C语言程序设计进阶_浙江大学_中国大学MOOC(慕课)<i class=\"icon-external\"></i></a><br><br><blockquote><p>课程以一个Windows下的图形游戏程序入手，借助一个C语言图形库，展开全部的教学内容。</p><p>...</p><p>Q：我需要特殊版本的计算机吗？</p><p>A：任何计算机都可以用于C语言编程，包括但不限于各个版本的MS Windows、各个版本的Mac OS X、各种发行版本的Linux。有的手机有app也能实现C语言编程，不过我们不推荐那么小的屏幕。</p></blockquote><br>没有对比就没有好坏。只有你上过两门同样的课，比如，上了一门课啥都没学会，但是上了另外一门课，学会了一些，你才能说其中一门好，一门坏。<br><br>最后，要注意，我问的是为什么在知乎上饱受好评，请不要答非所问",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么姓罗的都成功？",
            "updated_time": 1484914991,
            "question_type": "normal",
            "type": "question",
            "created": 1484376079,
            "url": "https://www.zhihu.com/api/v4/questions/54752310",
            "id": 54752310
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140941086",
        "thumbnail": "",
        "created_time": 1484388682,
        "excerpt": "建议题主改名罗卜",
        "updated_time": 1484388682,
        "id": 140941086,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "建议题主改名罗卜",
        "extras": ""
    },
    {
        "question": {
            "title": "如何成为一名优秀的程序员？需要具备哪些基本的素质和能力？",
            "updated_time": 1484234340,
            "question_type": "normal",
            "type": "question",
            "created": 1484234340,
            "url": "https://www.zhihu.com/api/v4/questions/54702532",
            "id": 54702532
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140931343",
        "thumbnail": "",
        "created_time": 1484384030,
        "excerpt": "我没见过什么优秀的程序员。你要我怎么回答。 当然，我也不认为会存在什么优秀的程序员。再说了，我们真的能分辨的出到底啥和写不写的出程序有关系？ 因为计算机的东西是就是是，不是就是不是，使用规则，时间复杂度，stl，c++的规范，有点像生物，死记硬背，最多是活学活用 轮子哥和勃勃是怎么结下梁子的？ - 勃失败的回答 - 知乎 你看曾博说的那么容易，他的编辑器为啥还一直只是\"半成品\"？ 再比如，要完成相同的功能，你和七…",
        "updated_time": 1484384226,
        "id": 140931343,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我没见过什么优秀的程序员。你要我怎么回答。<br><br>当然，我也不认为会存在什么优秀的程序员。再说了，我们真的能分辨的出到底啥和写不写的出程序有关系？<br><br><blockquote>因为计算机的东西是就是是，不是就是不是，使用规则，时间复杂度，stl，c++的规范，有点像生物，死记硬背，最多是活学活用<br><a href=\"https://www.zhihu.com/question/54017075/answer/137518720\" class=\"internal\">轮子哥和勃勃是怎么结下梁子的？ - 勃失败的回答 - 知乎</a></blockquote><br>你看曾博说的那么容易，他的编辑器为啥还一直只是\"半成品\"？<br><br>再比如，要完成相同的功能，你和七岁小朋友同时开始写，即便类似的程序你见过的比小朋友多多了，你真的能保证你一定能比小朋友先完成么？",
        "extras": ""
    },
    {
        "question": {
            "title": "一个有许多线程的进程，我们如何才能改变其中一个线程的工作目录，而不影响其他？",
            "updated_time": 1484361215,
            "question_type": "normal",
            "type": "question",
            "created": 1484361215,
            "url": "https://www.zhihu.com/api/v4/questions/54745540",
            "id": 54745540
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140882542",
        "thumbnail": "",
        "created_time": 1484361664,
        "excerpt": "clone的时候不要设置CLONE_FS就可以了 或者搞一个thread local的变量，存dirfd。之后你都用 openat, mkdirat 这些函数就可以了",
        "updated_time": 1484362215,
        "id": 140882542,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "clone的时候不要设置CLONE_FS就可以了<br><br>或者搞一个thread local的变量，存dirfd。之后你都用 openat, mkdirat 这些函数就可以了",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价这个CPU设计？",
            "updated_time": 1418516254,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27048853",
            "created": 1418397782,
            "id": 27048853
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/35269353",
        "thumbnail": "",
        "created_time": 1418727032,
        "excerpt": "VHDL \nVerilog这种东西，只是做逻辑，可比单片机C语言/汇编语言容易多了。毕竟时代在飞速进步啊，现在这点破玩意儿随便找个9岁小朋友都能完成的。到了大一才只能\n做出这种烂玩意儿，也好意思出来炫耀。在很多年前，就算像我这种弱智，大一的时候该学的东西不好好学，不看书自己闭门造车，结果花了一星期才完成5级流水线(注意我也没想到国内的野鸡学校课也能那么多，弄这个东西把我空余时间全占了，因为是瞎搞的，一开始有一级流…",
        "updated_time": 1467174673,
        "id": 35269353,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "VHDL \nVerilog这种东西，只是做逻辑，可比单片机C语言/汇编语言容易多了。毕竟时代在飞速进步啊，现在这点破玩意儿<b>随便找个9岁小朋友都能完成的</b>。到了大一才只能\n做出这种烂玩意儿，也好意思出来炫耀。在很多年前，就算像我这种弱智，大一的时候该学的东西不好好学，不看书自己闭门造车，结果花了一星期才完成5级流水线(注意我也没想到国内的野鸡学校课也能那么多，弄这个东西把我空余时间全占了，因为是瞎搞的，一开始有一级流水线延时特别大，改了不少才让他们比较均匀，把频率提上去的，不过其实想想也没花多久啊)，不也一直当成笑话讲的。(<a class=\"internal\" href=\"http://www.zhihu.com/question/25113144/answer/30120375\"> 你们读大学时，第一门编程课是用什么编程语言？ - 知乎用户的回答</a>  不信，可以去问 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//book.douban.com/subject/23857924/\" target=\"_blank\" rel=\"nofollow noreferrer\">EDA技术与Verilog HDL<i class=\"icon-external\"></i></a> 这本烂书署名的作者，哪个都可以。)<br><br>我就是来反对很多其他答案的。这有什么厉害的。完全就是个水货。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么 python 社区没有 Bundler 式的应用依赖管理？实现的主要困难在哪里？",
            "updated_time": 1419660986,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/27007086",
            "created": 1418183273,
            "id": 27007086
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/34881876",
        "thumbnail": "",
        "created_time": 1418193524,
        "excerpt": "Easy Install 支持的。 require的时候指定一下版本号就好了。 “Multi-version” mode. Specifying this option prevents easy_install from adding an easy-install.pth entry for the package being installed, and if an entry for any version the package already exists, it will be removed upon successful installation. In multi-version mode, no specific version of the package is available for importing, unles…",
        "updated_time": 1418193524,
        "id": 34881876,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://link.zhihu.com/?target=https%3A//pythonhosted.org/setuptools/easy_install.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Easy Install<i class=\"icon-external\"></i></a> 支持的。 require的时候指定一下版本号就好了。<br><br><blockquote>    “Multi-version” mode. Specifying this option prevents easy_install from adding an easy-install.pth entry for the package being installed, and if an entry for any version the package already exists, it will be removed upon successful installation. In multi-version mode, no specific version of the package is available for importing, unless you use pkg_resources.require() to put it on sys.path. This can be as simple as:<br><br><div class=\"highlight\"><pre><code class=\"language-text\">    from pkg_resources import require\n    require(\"SomePackage\", \"OtherPackage\", \"MyPackage\")\n</code></pre></div><br>    which will put the latest installed version of the specified packages on sys.path for you. (For more advanced uses, like selecting specific versions and enabling optional dependencies, see the pkg_resources API doc.)<br><br>    Changed in 0.6a10: this option is no longer silently enabled when installing to a non-PYTHONPATH, non-“site” directory. You must always explicitly use this option if you want it to be active.</blockquote>",
        "extras": ""
    },
    {
        "question": {
            "title": "主动路由的寻路一开始发起的洪泛改成深度优先算法，是否可行？",
            "updated_time": 1415693518,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26570929",
            "created": 1415693518,
            "id": 26570929
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/34814131",
        "thumbnail": "",
        "created_time": 1418102122,
        "excerpt": "我认为不可行。因为有环的话，DFS会陷入死循环，除非你有记录哪些节点已经访问过了。路由协议了这要这么做也可以，就是每通过一个节点，消息里就把节点编号加进去，消息会越来越长的。同时，肯定也要花更多时间啊，找到的还可能是一条延时无比长的路径。 有很多关于如何避免flooding的研究。比如Scalable Source Routing。主要思路借鉴自DHT。 现在考虑一种简化的DHT。DHT是为了在N个节点上存储好多Key -> Value的数据。假如你的…",
        "updated_time": 1418102706,
        "id": 34814131,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为不可行。因为有环的话，DFS会陷入死循环，除非你有记录哪些节点已经访问过了。路由协议了这要这么做也可以，就是每通过一个节点，消息里就把节点编号加进去，消息会越来越长的。同时，肯定也要花更多时间啊，找到的还可能是一条延时无比长的路径。<br><br>有很多关于如何避免flooding的研究。比如Scalable Source Routing。主要思路借鉴自DHT。<br><br>现在考虑一种简化的DHT。DHT是为了在N个节点上存储好多Key -&gt; Value的数据。假如你的节点编号为 1 2 3 4 5 ，那么 hash(Key) 为 1 的那就存到节点1，依次类推。假如你其实只有2 4两个节点在工作。你要把1 2 3 4 5看成一个环，也就是5的下一个节点是1。此时，把hash(Key)为5 1 2的数据存在节点2，把hash(Key)为3 4的数据存在节点4。<br><br>不过怎么存数据和你没什么关系。把这种思路用于路由协议的时候，现在假设有7个节点1 2 3 4 5 6 7。比如节点3要记住一条到节点2的路径和一条到节点4的路径。这样，比如节点1要找到节点4的路径，因为节点1知道一条到节点2的路径，所以节点1可以问节点2，节点2可以问节点3，节点3知道一条到节点4的路径，把这几条路径串起来，就是一条从节点1到节点4的路径，当然了，你得去掉这中间出现的环，不然就是在兜圈子嘛。假如只剩下1 3 5 7，那么1要记住到3和7的路径，也就是要记住按逻辑编号排成一圈之后你的neighbour的编号。<br><br>一个个节点问过去是很慢的，所以你还需要从真正的DHT，比如Chord, Kademlia里借鉴点东西来加快找路径的速度。这样就能避免flooding了。当然了这样做经常不能返回当前的延时最短路径。<br><br>据说这里也有个三角关系，(图片来自 <a href=\"https://link.zhihu.com/?target=http%3A//www.net.t-labs.tu-berlin.de/talks/2010-01-13-fuhrmann.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">net.t-labs.tu-berlin.de</span><span class=\"invisible\">/talks/2010-01-13-fuhrmann.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>)<br><br><noscript><img data-rawheight=\"634\" data-rawwidth=\"933\" src=\"https://pic4.zhimg.com/2b477edc4e9a3c9aeec2aab1b2c0c83b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"933\" data-original=\"https://pic4.zhimg.com/2b477edc4e9a3c9aeec2aab1b2c0c83b_r.jpg\"></noscript><img data-rawheight=\"634\" data-rawwidth=\"933\" src=\"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"933\" data-original=\"https://pic4.zhimg.com/2b477edc4e9a3c9aeec2aab1b2c0c83b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/2b477edc4e9a3c9aeec2aab1b2c0c83b_b.jpg\">",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么我的笔记本上跑lisp的程序风扇转的很厉害？",
            "updated_time": 1417323173,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26851384",
            "created": 1417323173,
            "id": 26851384
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/34295000",
        "thumbnail": "",
        "created_time": 1417352418,
        "excerpt": "Because LISP is powerful. see Lisp语言真的像Paul Graham在《黑客与画家》里面说的一样强大吗？ ",
        "updated_time": 1417352418,
        "id": 34295000,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Because LISP is powerful. see <a href=\"http://www.zhihu.com/question/26828946\" class=\"internal\">Lisp语言真的像Paul Graham在《黑客与画家》里面说的一样强大吗？</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "Lisp 语言真的像保罗·葛兰姆（Paul Graham）在《黑客与画家》里面说的一样强大吗？",
            "updated_time": 1422434854,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26828946",
            "created": 1417175852,
            "id": 26828946
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/34294980",
        "thumbnail": "",
        "created_time": 1417352386,
        "excerpt": "Yes, LISP is very very powerful. see 为什么我的笔记本上跑lisp的程序风扇转的很厉害？ ",
        "updated_time": 1417352398,
        "id": 34294980,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Yes, LISP is very very powerful. see <a href=\"http://www.zhihu.com/question/26851384\" class=\"internal\">为什么我的笔记本上跑lisp的程序风扇转的很厉害？</a>",
        "extras": ""
    },
    {
        "question": {
            "title": "在未来，Go语言能否撼动Java在Android、Hadoop大数据、云计算领域的地位？",
            "updated_time": 1418778879,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26667707",
            "created": 1416287108,
            "id": 26667707
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/34120250",
        "thumbnail": "",
        "created_time": 1417089109,
        "excerpt": "不要小看Java啊。感觉好像Java自从诞生以来就没错过任何一个热点。",
        "updated_time": 1417089408,
        "id": 34120250,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不要小看Java啊。感觉好像Java自从诞生以来就没错过任何一个热点。",
        "extras": ""
    },
    {
        "question": {
            "title": "世界十大算法是哪些？内容分别是什么？",
            "updated_time": 1416018604,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26623860",
            "created": 1416018604,
            "id": 26623860
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33532110",
        "thumbnail": "",
        "created_time": 1416197263,
        "excerpt": "没有世界十大算法的说法，只能找到20世纪十大算法 http://www.computer.org/csdl/mags/cs/2000/01/c1022.pdf 真要有十大算法，那辗转相除法肯定排第一位了。",
        "updated_time": 1416197367,
        "id": 33532110,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没有世界十大算法的说法，只能找到20世纪十大算法<br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.computer.org/csdl/mags/cs/2000/01/c1022.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">computer.org/csdl/mags/</span><span class=\"invisible\">cs/2000/01/c1022.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br><br>真要有十大算法，那辗转相除法肯定排第一位了。",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样设计一个binary file的parser generator？",
            "updated_time": 1416111126,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26637938",
            "created": 1416111126,
            "id": 26637938
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33491679",
        "thumbnail": "",
        "created_time": 1416119993,
        "excerpt": "可以参考 ASN.1 不过这个问题太难了。举个例子，比如PDF，是要先读最后面的。 PDF文件结尾大概长这样 startxref\n12345\n%%EOF\nstartxref后面一行是xref table的offset。xref table里是object id到offset的对应关系。另外还有trailer。你从trailer信息里能拿到Root的object id。接着你就可以顺着Root一层层解析下去了。当然了，解析的过程中，要一会儿seek到这里，一会儿seek到那里。要写个parser generator来生成PDF parser，我觉…",
        "updated_time": 1446281868,
        "id": 33491679,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "可以参考<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Abstract_Syntax_Notation_One\" target=\"_blank\" rel=\"nofollow noreferrer\"> ASN.1<i class=\"icon-external\"></i></a><br><br>不过这个问题太难了。举个例子，比如PDF，是要先读最后面的。<br><br>PDF文件结尾大概长这样<br><div class=\"highlight\"><pre><code class=\"language-text\">startxref\n12345\n%%EOF\n</code></pre></div>startxref后面一行是xref table的offset。xref table里是object id到offset的对应关系。另外还有trailer。你从trailer信息里能拿到Root的object id。接着你就可以顺着Root一层层解析下去了。当然了，解析的过程中，要一会儿seek到这里，一会儿seek到那里。要写个parser generator来生成PDF parser，我觉得这挺难的。PDF还不算是什么二进制文件呢。<br><br>建议一开始可以从简单一点的轮子开始造起。比如IETF的RFC里定义了ABNF，很多网络协议都是用ABNF描述的。我觉得你写一个parser generator，来生成这些网络协议的parser就挺好的。接着再尝试二进制的网络协议。最后再去挑战二进制文件吧。<br><br>--------------------------------------------------------<br><br>Update:<br><br>我上面的说法有问题。不一定非要造个支持所有格式的才是有用的。哪怕能支持80%的格式，那也是不错的。比如某字体格式中有一个奇葩的定义方式，我们就不管他了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">off_t offset[n];\n</code></pre></div><br>这个地方的offset并不是从header的第一个字节算起，也不是从body的第一字节算起，甚至还不是从offset这个数组的第一个字节算起，而是从每一个offset自己的第一个字节算起 ...<br><br>正如我一直强调的，parser是一种特殊的interpreter。而对理解parser来说，最重要的notation就是Prolog了。<br><br>假如我们能机智的使用Prolog，那么我们只要一份代码，不仅能从二进制格式解析出数据，也能把数据转换成二进制格式。<br><br>比如题主的第一个问题，简化一下，用Prolog可以这么写<br><br><div class=\"highlight\"><pre><code class=\"language-text\">n_int(0, [], []).\n\nn_int(N, List, Out) :-\n  List = [H|Rest],\n  n_int(N1, Rest, Out1),\n  N is N1 + 1,\n  Out = [H|Out1].\n\nsize_and_n_int(In, Out) :-\n  In = [Size|Rest],\n  n_int(Size, Rest, Out).\n</code></pre></div><br>来看一下运行结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">?- size_and_n_int(X, [1,2,3,4]).\nX = [4, 1, 2, 3, 4] .\n\n?- size_and_n_int([5,1,2,3,4,5], X).\nX = [1, 2, 3, 4, 5] ;\nfalse.\n\n?- \n% halt\n</code></pre></div><br>太棒了<br><br>所以，果断轮子造起来。目前的想法大致如下<br><br><div class=\"highlight\"><pre><code class=\"language-text\">struct frame {\n  version : uint(8) = 1,\n  switch(version) {\n  case 0:\n      length : uint(16),\n  case 1:\n      length : uint(32),\n  },\n  size(length) {\n      text : char[_]\n  },\n}\n</code></pre></div><br>stay tuned",
        "extras": ""
    },
    {
        "question": {
            "title": "你是如何深入理解 Python 的 list comprehension 就是 generator 这一点的？",
            "updated_time": 1416217997,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26627609",
            "created": 1416038906,
            "id": 26627609
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33459110",
        "thumbnail": "",
        "created_time": 1416050559,
        "excerpt": "首先，Python 2里map和filter得到的是list。Python 3改成iterator是主要是为了省内存吧。 第二，只有一部分generator是iterator。以Python 3为例，generator的接口是send, throw这两个函数。iterator的接口是 __next__。generator里的__next__相当于是 send(None) >>> def a():\n... x = yield 1\n... print(x)\n... \n>>> g = a()\n>>> g.send(None)\n1\n>>> g.send(2)\n2\nTraceback (most recent call last):\n File \"<stdin>\", line 1,…",
        "updated_time": 1416050559,
        "id": 33459110,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "首先，Python 2里map和filter得到的是list。Python 3改成iterator是主要是为了省内存吧。<br><br>第二，只有一部分generator是iterator。以Python 3为例，generator的接口是send, throw这两个函数。iterator的接口是 __next__。generator里的__next__相当于是 send(None)<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; def a():\n...     x = yield 1\n...     print(x)\n... \n&gt;&gt;&gt; g = a()\n&gt;&gt;&gt; g.send(None)\n1\n&gt;&gt;&gt; g.send(2)\n2\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n&gt;&gt;&gt; g = a()\n&gt;&gt;&gt; g.__next__()\n1\n&gt;&gt;&gt; g.__next__()\nNone\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nStopIteration\n&gt;&gt;&gt; \n</code></pre></div><br>list compresion会被编译成一个generator，是因为generator已经能表示iterator了，没必要在bytecode里特别为iterator定义一个magic number。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何脱离辗转相除法证明对于素数p,q，mp+nq=1整数解（m,n）的存在性和唯一性？",
            "updated_time": 1415788798,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26586592",
            "created": 1415784484,
            "id": 26586592
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33309196",
        "thumbnail": "",
        "created_time": 1415787577,
        "excerpt": "考虑到p, q都是素数，这个也可以看成是费马小定理 找到了，看 Fermat's Little Theorem ",
        "updated_time": 1415787985,
        "id": 33309196,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "考虑到p, q都是素数，这个也可以看成是费马小定理<br><br>找到了，看<a href=\"https://link.zhihu.com/?target=http%3A//www.artofproblemsolving.com/Wiki/index.php/Fermat%2527s_Little_Theorem%23Proof_4_.28Geometry.29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Fermat's Little Theorem<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "只是为了建立一点编程的思想思维，学哪个语言最好？",
            "updated_time": 1415548001,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26549593",
            "created": 1415548001,
            "id": 26549593
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33188067",
        "thumbnail": "",
        "created_time": 1415591035,
        "excerpt": "别再打开知乎了。专心准备高考吧。假如到时候连个985都考不上，在知乎上会被一大帮人认为是弱智的。反正你已经比很多人起步晚了，再晚个两三年也没什么。只要学得快，一样赶得上。",
        "updated_time": 1415596098,
        "id": 33188067,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "别再打开知乎了。专心准备高考吧。假如到时候连个985都考不上，在知乎上会被一大帮人认为是弱智的。反正你已经比很多人起步晚了，再晚个两三年也没什么。只要学得快，一样赶得上。",
        "extras": ""
    },
    {
        "question": {
            "title": "各位前辈，有没有学习WebGL方面的经验愿意分享？",
            "updated_time": 1415358363,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26521256",
            "created": 1415358297,
            "id": 26521256
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/33076352",
        "thumbnail": "",
        "created_time": 1415358709,
        "excerpt": "简单的说就是数三角形。我记得有一篇中文的写得还可以的。我找找。 使用原生WebGL实现的一个太阳系模型 ",
        "updated_time": 1415358709,
        "id": 33076352,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "简单的说就是数三角形。我记得有一篇中文的写得还可以的。我找找。<br><br><a href=\"https://link.zhihu.com/?target=http%3A//iriska.diandian.com/post/2013-07-04/solarSystem\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">使用原生WebGL实现的一个太阳系模型<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "关于24点去重的算法?",
            "updated_time": 1415080526,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26474181",
            "created": 1415080526,
            "id": 26474181
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32916112",
        "thumbnail": "",
        "created_time": 1415091981,
        "excerpt": "感觉套一下公式就可以吧，毕竟数据量小。 -module(game24).\n-compile(export_all).\n\npermutation(0,_) ->[[]];\npermutation(_,[])->[];\npermutation(N,L) ->[[E|T]||E<-L,T<-permutation(N-1,L--[E])].\n\ngcd(A,0)-> A;\ngcd(A,B)-> gcd(B, A rem B).\n\nfrac(X) when is_integer(X) -> {frac, X, 1};\nfrac({frac, X, Y}) -> G = gcd(X,Y), {frac, X div G, Y div G}.\n\ncalc('+',{frac,A1,A2},{frac,B1,B2}) -> {frac, A1*B2+B1*A2, …",
        "updated_time": 1415100010,
        "id": 32916112,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "感觉套一下公式就可以吧，毕竟数据量小。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">game24</span><span class=\"p\">).</span>\n<span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">(</span><span class=\"n\">export_all</span><span class=\"p\">).</span>\n\n<span class=\"nf\">permutation</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,_)</span> <span class=\"o\">-&gt;</span><span class=\"p\">[[]];</span>\n<span class=\"nf\">permutation</span><span class=\"p\">(_,[])</span><span class=\"o\">-&gt;</span><span class=\"p\">[];</span>\n<span class=\"nf\">permutation</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span><span class=\"p\">[[</span><span class=\"nv\">E</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">]||</span><span class=\"nv\">E</span><span class=\"o\">&lt;-</span><span class=\"nv\">L</span><span class=\"p\">,</span><span class=\"nv\">T</span><span class=\"o\">&lt;-</span><span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"nv\">L</span><span class=\"o\">--</span><span class=\"p\">[</span><span class=\"nv\">E</span><span class=\"p\">])].</span>\n\n<span class=\"nf\">gcd</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span> <span class=\"nv\">A</span><span class=\"p\">;</span>\n<span class=\"nf\">gcd</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">A</span> <span class=\"ow\">rem</span> <span class=\"nv\">B</span><span class=\"p\">).</span>\n\n<span class=\"nf\">frac</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_integer</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n<span class=\"nf\">frac</span><span class=\"p\">({</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">Y</span><span class=\"p\">})</span>         <span class=\"o\">-&gt;</span> <span class=\"nv\">G</span> <span class=\"o\">=</span> <span class=\"n\">gcd</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span><span class=\"nv\">Y</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">X</span> <span class=\"ow\">div</span> <span class=\"nv\">G</span><span class=\"p\">,</span> <span class=\"nv\">Y</span> <span class=\"ow\">div</span> <span class=\"nv\">G</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">A1</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">},{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">B1</span><span class=\"p\">,</span><span class=\"nv\">B2</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">A1</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"o\">+</span><span class=\"nv\">B1</span><span class=\"o\">*</span><span class=\"nv\">A2</span><span class=\"p\">,</span> <span class=\"nv\">A2</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"p\">};</span>\n<span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">A1</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">},{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">B1</span><span class=\"p\">,</span><span class=\"nv\">B2</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">A1</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"o\">-</span><span class=\"nv\">B1</span><span class=\"o\">*</span><span class=\"nv\">A2</span><span class=\"p\">,</span> <span class=\"nv\">A2</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"p\">};</span>\n<span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">A1</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">},{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">B1</span><span class=\"p\">,</span><span class=\"nv\">B2</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">A1</span><span class=\"o\">*</span><span class=\"nv\">B1</span><span class=\"p\">,</span>       <span class=\"nv\">A2</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"p\">};</span>\n<span class=\"nf\">calc</span><span class=\"p\">(</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">A1</span><span class=\"p\">,</span><span class=\"nv\">A2</span><span class=\"p\">},{</span><span class=\"n\">frac</span><span class=\"p\">,</span><span class=\"nv\">B1</span><span class=\"p\">,</span><span class=\"nv\">B2</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"nv\">A1</span><span class=\"o\">*</span><span class=\"nv\">B2</span><span class=\"p\">,</span>       <span class=\"nv\">A2</span><span class=\"o\">*</span><span class=\"nv\">B1</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">rpn</span><span class=\"p\">([],</span> <span class=\"p\">[],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"nv\">N</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">);</span>\n<span class=\"nf\">rpn</span><span class=\"p\">([</span><span class=\"n\">push</span><span class=\"p\">|</span><span class=\"nv\">AT</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nv\">NH</span><span class=\"p\">|</span><span class=\"nv\">NT</span><span class=\"p\">],</span> <span class=\"nv\">Ops</span><span class=\"p\">,</span> <span class=\"nv\">Stack</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">rpn</span><span class=\"p\">(</span><span class=\"nv\">AT</span><span class=\"p\">,</span> <span class=\"nv\">NT</span><span class=\"p\">,</span> <span class=\"nv\">Ops</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">NH</span><span class=\"p\">|</span><span class=\"nv\">Stack</span><span class=\"p\">]);</span>\n<span class=\"nf\">rpn</span><span class=\"p\">([</span><span class=\"n\">calc</span><span class=\"p\">|</span><span class=\"nv\">AT</span><span class=\"p\">],</span> <span class=\"nv\">Nums</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">OH</span><span class=\"p\">|</span><span class=\"nv\">OT</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">Stack</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">rpn</span><span class=\"p\">(</span><span class=\"nv\">AT</span><span class=\"p\">,</span> <span class=\"nv\">Nums</span><span class=\"p\">,</span> <span class=\"nv\">OT</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">calc</span><span class=\"p\">(</span><span class=\"nv\">OH</span><span class=\"p\">,</span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">),</span><span class=\"n\">frac</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">))|</span><span class=\"nv\">Stack</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">rpn2tree</span><span class=\"p\">([],</span> <span class=\"p\">[],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"nv\">N</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">N</span><span class=\"p\">;</span>\n<span class=\"nf\">rpn2tree</span><span class=\"p\">([</span><span class=\"n\">push</span><span class=\"p\">|</span><span class=\"nv\">AT</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nv\">NH</span><span class=\"p\">|</span><span class=\"nv\">NT</span><span class=\"p\">],</span> <span class=\"nv\">Ops</span><span class=\"p\">,</span> <span class=\"nv\">Stack</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">rpn2tree</span><span class=\"p\">(</span><span class=\"nv\">AT</span><span class=\"p\">,</span> <span class=\"nv\">NT</span><span class=\"p\">,</span> <span class=\"nv\">Ops</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">NH</span><span class=\"p\">|</span><span class=\"nv\">Stack</span><span class=\"p\">]);</span>\n<span class=\"nf\">rpn2tree</span><span class=\"p\">([</span><span class=\"n\">calc</span><span class=\"p\">|</span><span class=\"nv\">AT</span><span class=\"p\">],</span> <span class=\"nv\">Nums</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">OH</span><span class=\"p\">|</span><span class=\"nv\">OT</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">|</span><span class=\"nv\">Stack</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">rpn2tree</span><span class=\"p\">(</span><span class=\"nv\">AT</span><span class=\"p\">,</span> <span class=\"nv\">Nums</span><span class=\"p\">,</span> <span class=\"nv\">OT</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">OH</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">}|</span><span class=\"nv\">Stack</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">n1</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">O</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">O</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}||</span><span class=\"nv\">N</span><span class=\"o\">&lt;-</span><span class=\"n\">neighbours</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">)]</span> <span class=\"o\">++</span> <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">O</span><span class=\"p\">,</span><span class=\"nv\">N</span><span class=\"p\">}||</span><span class=\"nv\">N</span><span class=\"o\">&lt;-</span><span class=\"n\">neighbours</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">)];</span>\n<span class=\"nf\">n1</span><span class=\"p\">(_)</span>      <span class=\"o\">-&gt;</span><span class=\"p\">[].</span>\n\n<span class=\"c\">%% A+B = B+A</span>\n<span class=\"c\">%% A*B = B*A</span>\n\n<span class=\"nf\">n2</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">}];</span>\n<span class=\"nf\">n2</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">A</span><span class=\"p\">}];</span>\n<span class=\"nf\">n2</span><span class=\"p\">(_)</span>        <span class=\"o\">-&gt;</span><span class=\"p\">[].</span>\n\n<span class=\"c\">%% (A+B)+C = A+(B+C)</span>\n<span class=\"c\">%% (A*B)*C = A*(B*C)</span>\n\n<span class=\"nf\">n3</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n3</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}];</span>\n<span class=\"nf\">n3</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n3</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}];</span>\n<span class=\"nf\">n3</span><span class=\"p\">(_)</span>                <span class=\"o\">-&gt;</span><span class=\"p\">[].</span>\n\n<span class=\"c\">%% (A-B)+C = A+(C-B) = (A+C)-B = A-(B-C)</span>\n<span class=\"c\">%% (A/B)*C = A*(C/B) = (A*C)/B = A/(B/C)</span>\n\n<span class=\"nf\">n4</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,{</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n4</span><span class=\"p\">(_)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[].</span>\n\n<span class=\"c\">%% (A-B)-C = A-(B+C) = (A-C)-B</span>\n<span class=\"c\">%% (A/B)/C = A/(B*C) = (A/C)/B</span>\n\n<span class=\"nf\">n5</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'-'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'-'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'+'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">({{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">})</span><span class=\"o\">-&gt;</span><span class=\"p\">[{{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"n\">'/'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"n\">'/'</span><span class=\"p\">,{</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"n\">'*'</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">}}];</span>\n<span class=\"nf\">n5</span><span class=\"p\">(_)</span>                <span class=\"o\">-&gt;</span><span class=\"p\">[].</span>\n\n<span class=\"nf\">neighbours</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n1</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span><span class=\"o\">++</span><span class=\"n\">n2</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span><span class=\"o\">++</span><span class=\"n\">n3</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span><span class=\"o\">++</span><span class=\"n\">n4</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">)</span><span class=\"o\">++</span><span class=\"n\">n5</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">).</span>\n\n<span class=\"nf\">indexof</span><span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">indexof</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">E</span><span class=\"p\">,</span> <span class=\"nv\">L</span><span class=\"p\">).</span>\n\n<span class=\"nf\">indexof</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">E</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">E</span><span class=\"p\">|_])</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">N</span><span class=\"p\">;</span>\n<span class=\"nf\">indexof</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">E</span><span class=\"p\">,</span> <span class=\"p\">[_|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">indexof</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">E</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">).</span>\n\n<span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">H</span><span class=\"p\">|_])</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">H</span><span class=\"p\">;</span>\n<span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">[_|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">unify</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"nv\">A</span> <span class=\"o\">-&gt;</span>\n            <span class=\"k\">case</span> <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n                <span class=\"nv\">B</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"k\">case</span> <span class=\"nv\">B</span> <span class=\"k\">of</span>\n                        <span class=\"nv\">A</span> <span class=\"o\">-&gt;</span>\n                            <span class=\"nv\">D</span><span class=\"p\">;</span>\n                        <span class=\"p\">_</span> <span class=\"o\">-&gt;</span>\n                            <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">D</span><span class=\"p\">)</span>\n                    <span class=\"k\">end</span><span class=\"p\">;</span>\n                <span class=\"nv\">M</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">M</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span><span class=\"p\">;</span>\n        <span class=\"nv\">N</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">unify</span><span class=\"p\">({</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">},</span><span class=\"nv\">D</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">unify</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"nv\">Nums</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Actions</span> <span class=\"o\">=</span>\n        <span class=\"p\">[</span>\n         <span class=\"p\">[</span><span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">],</span>\n         <span class=\"p\">[</span><span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">,</span> <span class=\"n\">push</span><span class=\"p\">,</span> <span class=\"n\">calc</span><span class=\"p\">]</span>\n        <span class=\"p\">],</span>\n\n    <span class=\"nv\">Results</span> <span class=\"o\">=</span>\n        <span class=\"p\">[</span><span class=\"n\">rpn2tree</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">N</span><span class=\"p\">,[</span><span class=\"nv\">O1</span><span class=\"p\">,</span><span class=\"nv\">O2</span><span class=\"p\">,</span><span class=\"nv\">O3</span><span class=\"p\">],[])</span>\n         <span class=\"p\">||</span> <span class=\"nv\">A</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Actions</span><span class=\"p\">,</span> <span class=\"nv\">N</span> <span class=\"o\">&lt;-</span> <span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nv\">Nums</span><span class=\"p\">),</span>\n            <span class=\"nv\">O1</span> <span class=\"o\">&lt;-</span><span class=\"p\">[</span><span class=\"n\">'+'</span><span class=\"p\">,</span> <span class=\"n\">'-'</span><span class=\"p\">,</span> <span class=\"n\">'*'</span><span class=\"p\">,</span> <span class=\"n\">'/'</span><span class=\"p\">],</span>\n            <span class=\"nv\">O2</span> <span class=\"o\">&lt;-</span><span class=\"p\">[</span><span class=\"n\">'+'</span><span class=\"p\">,</span> <span class=\"n\">'-'</span><span class=\"p\">,</span> <span class=\"n\">'*'</span><span class=\"p\">,</span> <span class=\"n\">'/'</span><span class=\"p\">],</span>\n            <span class=\"nv\">O3</span> <span class=\"o\">&lt;-</span><span class=\"p\">[</span><span class=\"n\">'+'</span><span class=\"p\">,</span> <span class=\"n\">'-'</span><span class=\"p\">,</span> <span class=\"n\">'*'</span><span class=\"p\">,</span> <span class=\"n\">'/'</span><span class=\"p\">],</span>\n            <span class=\"n\">rpn</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">N</span><span class=\"p\">,[</span><span class=\"nv\">O1</span><span class=\"p\">,</span><span class=\"nv\">O2</span><span class=\"p\">,</span><span class=\"nv\">O3</span><span class=\"p\">],[])</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"n\">frac</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}],</span>\n\n    <span class=\"nv\">Neighbours</span> <span class=\"o\">=</span>\n        <span class=\"p\">[{</span><span class=\"n\">indexof</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">Results</span><span class=\"p\">),</span> <span class=\"n\">indexof</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">Results</span><span class=\"p\">)}</span> <span class=\"p\">||</span> <span class=\"nv\">A</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Results</span><span class=\"p\">,</span> <span class=\"nv\">B</span> <span class=\"o\">&lt;-</span> <span class=\"n\">neighbours</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">)],</span>\n\n    <span class=\"nv\">I</span> <span class=\"o\">=</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">seq</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">length</span><span class=\"p\">(</span><span class=\"nv\">Results</span><span class=\"p\">)),</span>\n    <span class=\"nv\">Map</span> <span class=\"o\">=</span> <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"nf\">to_list</span><span class=\"p\">(</span><span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">foldl</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"n\">unify</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nn\">dict</span><span class=\"p\">:</span><span class=\"nf\">from_list</span><span class=\"p\">(</span><span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">zip</span><span class=\"p\">(</span><span class=\"nv\">I</span><span class=\"p\">,</span> <span class=\"nv\">I</span><span class=\"p\">)),</span> <span class=\"nv\">Neighbours</span><span class=\"p\">)),</span>\n    <span class=\"p\">[</span><span class=\"n\">nth</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span><span class=\"nv\">Results</span><span class=\"p\">)</span> <span class=\"p\">||</span> <span class=\"p\">{</span><span class=\"nv\">X</span><span class=\"p\">,</span><span class=\"nv\">X</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nv\">Map</span><span class=\"p\">].</span>\n</code></pre></div><br>运行结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1&gt; game24:solve([1,3,8,12]).\n[{1,'+',{12,'+',{3,'+',8}}},\n {8,'*',{{12,'/',3},'-',1}},\n {12,'*',{8,'/',{1,'+',3}}}]\n</code></pre></div><br>没检查过，我怀疑代码是有问题的",
        "extras": ""
    },
    {
        "question": {
            "title": "计算第K个能表示(2^i * 3^j * 5^k)的正整数（i,j,k为整数）？其前7个满足此条件的数分别是1,2,3,4,5,6,8",
            "updated_time": 1413650859,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26078610",
            "created": 1413558704,
            "id": 26078610
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32680996",
        "thumbnail": "",
        "created_time": 1414663159,
        "excerpt": "代码渣。C语言不会。用J语言写还是挺简单的。 regular =: 4 : 0\na =. 1\nb =. 0 #~ # x\nfor. i. >./ y do.\n c =. x * b { a\n m =. <./ c\n b =. b + m = c\n a =. a , m\nend.\ny { a\n)\n 10 10 $ 2 3 5 regular i.100\n 1 2 3 4 5 6 8 9 10 12\n 15 16 18 20 24 25 27 30 32 36\n 40 45 48 50 54 60 64 72 75 80\n 81 90 96 100 108 120 125 128 135 144\n 150 160 162 180 192 200 216 225 240 243\n 250 256 270 288 300 320 324 360 375 …",
        "updated_time": 1414723193,
        "id": 32680996,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "代码渣。C语言不会。用J语言写还是挺简单的。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   regular =: 4 : 0\na =. 1\nb =. 0 #~ # x\nfor. i. &gt;./ y do.\n  c =. x * b { a\n  m =. &lt;./ c\n  b =. b + m = c\n  a =. a , m\nend.\ny { a\n)\n   10 10 $ 2 3 5 regular i.100\n   1    2    3    4    5    6    8    9   10   12\n  15   16   18   20   24   25   27   30   32   36\n  40   45   48   50   54   60   64   72   75   80\n  81   90   96  100  108  120  125  128  135  144\n 150  160  162  180  192  200  216  225  240  243\n 250  256  270  288  300  320  324  360  375  384\n 400  405  432  450  480  486  500  512  540  576\n 600  625  640  648  675  720  729  750  768  800\n 810  864  900  960  972 1000 1024 1080 1125 1152\n1200 1215 1250 1280 1296 1350 1440 1458 1500 1536\n   10 10 $ 2 3 5 7 regular i.100\n  1   2   3   4   5   6   7   8   9  10\n 12  14  15  16  18  20  21  24  25  27\n 28  30  32  35  36  40  42  45  48  49\n 50  54  56  60  63  64  70  72  75  80\n 81  84  90  96  98 100 105 108 112 120\n125 126 128 135 140 144 147 150 160 162\n168 175 180 189 192 196 200 210 216 224\n225 240 243 245 250 252 256 270 280 288\n294 300 315 320 324 336 343 350 360 375\n378 384 392 400 405 420 432 441 448 450\n</code></pre></div><br>J语言大法就是好",
        "extras": ""
    },
    {
        "question": {
            "title": "一怪物从出生起第3个月就能繁衍一批后代m个，生存第5个月后毙命。目前只有一个，计算第n个月后怪物的总数？",
            "updated_time": 1414136566,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26165632",
            "created": 1413990306,
            "id": 26165632
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32314348",
        "thumbnail": "",
        "created_time": 1414032622,
        "excerpt": "先列出公式 a(1, 1) = 1\na(N, 1) = m * (a(N-1, 3) + a(N-1, 4))\na(N, 2) = a(N-1, 1)\na(N, 3) = a(N-1, 2)\na(N, 4) = a(N-1, 3)\na(N) = a(N,1) + a(N,2) + a(N,3) + a(N,4)\n 用矩阵表示 \\begin{bmatrix}\n0 & m & m & 0 \\\\\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n\\end{bmatrix}^n \\cdot \\begin{bmatrix}\n1 \\\\ \n0 \\\\ \n0 \\\\ \n0 \\\\\n\\end{bmatrix} 计算出结果后把四个数相加就可以了。",
        "updated_time": 1414032622,
        "id": 32314348,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先列出公式<br><br><div class=\"highlight\"><pre><code class=\"language-text\">a(1, 1) = 1\na(N, 1) = m * (a(N-1, 3) + a(N-1, 4))\na(N, 2) = a(N-1, 1)\na(N, 3) = a(N-1, 2)\na(N, 4) = a(N-1, 3)\na(N) = a(N,1) + a(N,2) + a(N,3) + a(N,4)\n</code></pre></div><br>用矩阵表示<br><br><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D%0A0+%26+m+%26+m+%26+0+%5C%5C%0A1+%26+0+%26+0+%26+0+%5C%5C%0A0+%26+1+%26+0+%26+0+%5C%5C%0A0+%26+0+%26+1+%26+0+%5C%5C%0A%5Cend%7Bbmatrix%7D%5En+%5Ccdot+%5Cbegin%7Bbmatrix%7D%0A1+%5C%5C+%0A0+%5C%5C+%0A0+%5C%5C+%0A0+%5C%5C%0A%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix}\n0 &amp; m &amp; m &amp; 0 \\\\\n1 &amp; 0 &amp; 0 &amp; 0 \\\\\n0 &amp; 1 &amp; 0 &amp; 0 \\\\\n0 &amp; 0 &amp; 1 &amp; 0 \\\\\n\\end{bmatrix}^n \\cdot \\begin{bmatrix}\n1 \\\\ \n0 \\\\ \n0 \\\\ \n0 \\\\\n\\end{bmatrix}\" eeimg=\"1\"><br><br>计算出结果后把四个数相加就可以了。",
        "extras": ""
    },
    {
        "question": {
            "title": "数学概率问题，概率叠加，感觉本科学的就没有用了，得以上学历，求指点？",
            "updated_time": 1413886864,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26132001",
            "created": 1413886864,
            "id": 26132001
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32237243",
        "thumbnail": "",
        "created_time": 1413900625,
        "excerpt": "直接的解法是，写成矩阵形式，接着利用矩阵乘法符合结合律，二分查找就可以了 \\begin{bmatrix}\n0.99 & 0 & 0 & \\cdots & 0 \\\\\n0.01 & 0.98 & 0 & \\cdots & 0 \\\\\n0 & 0.02 & 0.97 & \\cdots & 0 \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & 0 & \\vdots & 1 \\\\\n\\end{bmatrix}^n \\cdot \\begin{bmatrix}\n1 \\\\\n0 \\\\\n0 \\\\\n\\vdots \\\\\n0\n\\end{bmatrix} #!/usr/bin/env python2\n\n\nfrom numpy import matrix, identity\n\nA = …",
        "updated_time": 1413956908,
        "id": 32237243,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "直接的解法是，写成矩阵形式，接着利用矩阵乘法符合结合律，二分查找就可以了<br><br><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bbmatrix%7D%0A0.99+%26+0++++++%26++0+++%26+%5Ccdots+%26+0+%5C%5C%0A0.01+%26+0.98+%26+++0+++%26+%5Ccdots+%26+0+%5C%5C%0A0++++++%26+0.02+%26++0.97+%26+%5Ccdots+%26+0+%5C%5C%0A%5Cvdots+%26+%5Cvdots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%5C%5C%0A0+++++++%26+0+%26+0+%26+%5Cvdots+%26+1+%5C%5C%0A%5Cend%7Bbmatrix%7D%5En+%5Ccdot+%5Cbegin%7Bbmatrix%7D%0A1+%5C%5C%0A0+%5C%5C%0A0+%5C%5C%0A%5Cvdots+%5C%5C%0A0%0A%5Cend%7Bbmatrix%7D\" alt=\"\\begin{bmatrix}\n0.99 &amp; 0      &amp;  0   &amp; \\cdots &amp; 0 \\\\\n0.01 &amp; 0.98 &amp;   0   &amp; \\cdots &amp; 0 \\\\\n0      &amp; 0.02 &amp;  0.97 &amp; \\cdots &amp; 0 \\\\\n\\vdots &amp; \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n0       &amp; 0 &amp; 0 &amp; \\vdots &amp; 1 \\\\\n\\end{bmatrix}^n \\cdot \\begin{bmatrix}\n1 \\\\\n0 \\\\\n0 \\\\\n\\vdots \\\\\n0\n\\end{bmatrix}\" eeimg=\"1\"><br><br><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"c\">#!/usr/bin/env python2</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">numpy</span> <span class=\"kn\">import</span> <span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">identity</span>\n\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">([[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">):</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">100.0</span>\n    <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">100.0</span>\n\n<span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">99</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n\n<span class=\"n\">NUMS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">A</span><span class=\"p\">]</span>\n\n<span class=\"k\">while</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mf\">0.9</span><span class=\"p\">:</span>\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">NUMS</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">LM</span> <span class=\"o\">=</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">LN</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">CM</span> <span class=\"o\">=</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">CN</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">I</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">NUMS</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">3</span>\n\n<span class=\"k\">while</span> <span class=\"n\">I</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">PM</span> <span class=\"o\">=</span> <span class=\"n\">CM</span>\n    <span class=\"n\">PN</span> <span class=\"o\">=</span> <span class=\"n\">CN</span>\n\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">NUMS</span><span class=\"p\">[</span><span class=\"n\">I</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">PM</span><span class=\"p\">)</span>\n        <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">PN</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"n\">I</span><span class=\"p\">)</span>\n        <span class=\"n\">I</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">I</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">M</span><span class=\"p\">[</span><span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.9</span><span class=\"p\">:</span>\n            <span class=\"n\">LM</span> <span class=\"o\">=</span> <span class=\"n\">M</span>\n            <span class=\"n\">LN</span> <span class=\"o\">=</span> <span class=\"n\">N</span>\n            <span class=\"n\">CM</span> <span class=\"o\">=</span> <span class=\"n\">PM</span>\n            <span class=\"n\">CN</span> <span class=\"o\">=</span> <span class=\"n\">PN</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"n\">PM</span> <span class=\"o\">=</span> <span class=\"n\">M</span>\n        <span class=\"n\">PN</span> <span class=\"o\">=</span> <span class=\"n\">N</span>\n\n<span class=\"k\">print</span> <span class=\"n\">LN</span>\n</code></pre></div><br>二分法得到 N = 682",
        "extras": ""
    },
    {
        "question": {
            "title": "从 1 到 1024 排成一个数除以 9，余数是多少？",
            "updated_time": 1421126945,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26033918",
            "created": 1413300574,
            "id": 26033918
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32199124",
        "thumbnail": "",
        "created_time": 1413858848,
        "excerpt": "因为 10 X \\equiv 9X + X \\equiv X \\pmod 9 所以 1234...1024 \\equiv \\sum_{i=1}^{1024}i \\pmod 9 因为 连续9个整数和必然被9整除 又 1024 \\equiv 1+0+2+4 \\equiv 7 \\pmod 9 所以 \\sum_{i=1}^{1024} i \\equiv \\sum_{i=1}^{7} i \\pmod 9 1+2+3+4+5+6+7 \\equiv 1 + (2+7) + (3+6) + (4+5) \\equiv 1 \\pmod 9 证明 连续9个整数和必然被9整除 因为 -4 + -3 + -2 + -1 + 0 + 1 + 2 + 3 + 4 \\equiv 0 \\pmod 9 任意连续9个整数的和，必然…",
        "updated_time": 1413859722,
        "id": 32199124,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "因为 <img src=\"https://www.zhihu.com/equation?tex=10+X+%5Cequiv+9X+%2B+X+%5Cequiv+X+%5Cpmod+9\" alt=\"10 X \\equiv 9X + X \\equiv X \\pmod 9\" eeimg=\"1\"><br>所以 <img src=\"https://www.zhihu.com/equation?tex=1234...1024+%5Cequiv+%5Csum_%7Bi%3D1%7D%5E%7B1024%7Di+%5Cpmod+9\" alt=\"1234...1024 \\equiv \\sum_{i=1}^{1024}i \\pmod 9\" eeimg=\"1\"><br>因为 连续9个整数和必然被9整除<br>又 <img src=\"https://www.zhihu.com/equation?tex=1024+%5Cequiv+1%2B0%2B2%2B4+%5Cequiv+7+%5Cpmod+9\" alt=\"1024 \\equiv 1+0+2+4 \\equiv 7 \\pmod 9\" eeimg=\"1\"><br>所以 <img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5E%7B1024%7D+i+%5Cequiv+%5Csum_%7Bi%3D1%7D%5E%7B7%7D+i+%5Cpmod+9\" alt=\"\\sum_{i=1}^{1024} i \\equiv \\sum_{i=1}^{7} i \\pmod 9\" eeimg=\"1\"><br><img src=\"https://www.zhihu.com/equation?tex=1%2B2%2B3%2B4%2B5%2B6%2B7+%5Cequiv+1+%2B+%282%2B7%29+%2B+%283%2B6%29+%2B+%284%2B5%29+%5Cequiv+1+%5Cpmod+9\" alt=\"1+2+3+4+5+6+7 \\equiv 1 + (2+7) + (3+6) + (4+5) \\equiv 1 \\pmod 9\" eeimg=\"1\"><br><br>证明 连续9个整数和必然被9整除<br>因为 <img src=\"https://www.zhihu.com/equation?tex=-4+%2B+-3+%2B+-2+%2B+-1+%2B+0+%2B+1+%2B+2+%2B+3+%2B+4+%5Cequiv+0+%5Cpmod+9\" alt=\"-4 + -3 + -2 + -1 + 0 + 1 + 2 + 3 + 4 \\equiv 0 \\pmod 9\" eeimg=\"1\"><br>任意连续9个整数的和，必然和这列数差9的倍数",
        "extras": ""
    },
    {
        "question": {
            "title": "grub和grub2冲突怎么办？",
            "updated_time": 1413616722,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/26084550",
            "created": 1413611472,
            "id": 26084550
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/32092354",
        "thumbnail": "",
        "created_time": 1413685923,
        "excerpt": "在Fedora里把grub2那个包erase掉。装grub，注意，最近几个版本得装generic-logos，fedora-logos都不带grub的背景图了。这样就不需要grub2了。",
        "updated_time": 1413685923,
        "id": 32092354,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "在Fedora里把grub2那个包erase掉。装grub，注意，最近几个版本得装generic-logos，fedora-logos都不带grub的背景图了。这样就不需要grub2了。",
        "extras": ""
    },
    {
        "question": {
            "title": "如果拥有梦想成真的超能力，世界会不会变得索然无味毫无意义？",
            "updated_time": 1412830164,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25868840",
            "created": 1412830164,
            "id": 25868840
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/31667327",
        "thumbnail": "",
        "created_time": 1412953507,
        "excerpt": "Alice在海滩上捡到了一个瓶子，想看看里面有啥，但是怎么也打不开瓶盖。Alice找到Bob，他们两个合力把瓶盖大开。结果里面出来了个魔鬼。魔鬼很感动，决定分别满足他们一个愿望。Alice很机智，她的愿望是要魔鬼满足她以后提的所有愿望。魔鬼是很讲信用的，毫不犹豫地答应了。Bob也很机智，他也要求魔鬼满足他以后提的所有愿望。魔鬼也爽快地答应了。这个时候，Alice又提了个愿望，Bob无论提什么愿望，魔鬼都不可以满足他。只见魔…",
        "updated_time": 1412953507,
        "id": 31667327,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "Alice在海滩上捡到了一个瓶子，想看看里面有啥，但是怎么也打不开瓶盖。Alice找到Bob，他们两个合力把瓶盖大开。结果里面出来了个魔鬼。魔鬼很感动，决定分别满足他们一个愿望。Alice很机智，她的愿望是要魔鬼满足她以后提的所有愿望。魔鬼是很讲信用的，毫不犹豫地答应了。Bob也很机智，他也要求魔鬼满足他以后提的所有愿望。魔鬼也爽快地答应了。这个时候，Alice又提了个愿望，Bob无论提什么愿望，魔鬼都不可以满足他。只见魔鬼迅速地溜进瓶子里，还顺便把盖子盖上。无论Alice和Bob怎么用力，都再也打不开瓶子了。",
        "extras": ""
    },
    {
        "question": {
            "title": "yum和rpm递归依赖解析?",
            "updated_time": 1333008773,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/20148443",
            "created": 1333008773,
            "id": 20148443
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/31665193",
        "thumbnail": "",
        "created_time": 1412950491,
        "excerpt": "用repoquery就可以了吧 repoquery -a --tree-requires PACKAGE\n\nrepoquery -a --tree-requires PACKAGE | sed 's/^[ |]*\\\\_\\s*\\(\\S\\+\\)/\\1/' | grep -Eo '^\\S+' | sort | uniq\n",
        "updated_time": 1412950491,
        "id": 31665193,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "用repoquery就可以了吧<br><br><div class=\"highlight\"><pre><code class=\"language-text\">repoquery -a --tree-requires PACKAGE\n\nrepoquery -a --tree-requires PACKAGE | sed 's/^[ |]*\\\\_\\s*\\(\\S\\+\\)/\\1/' | grep -Eo '^\\S+' | sort | uniq\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何入门学习程序语言来制作网站？",
            "updated_time": 1412923847,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25910956",
            "created": 1412923336,
            "id": 25910956
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/31646623",
        "thumbnail": "",
        "created_time": 1412925167,
        "excerpt": "你的想法很好。不过，不建议要从Python开始学，因为Python实在太复杂了，不太适合初学者学习。 比如从Erlang开始就是一个很好的选择。不到50行代码，就已经能运行起第一个Web网站了。 -module(web).\n\n-export([start/0, accept/1, handle_connection/1]).\n\n\nstart() ->\n {ok, Socket} = gen_tcp:listen(8080, [binary, {packet, http}, {active, false}, {reuseaddr, true}]),\n Pid = spawn(web, accept, [Socket]),\n ok = gen_t…",
        "updated_time": 1412925167,
        "id": 31646623,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你的想法很好。不过，不建议要从Python开始学，因为Python实在太复杂了，不太适合初学者学习。<br><br>比如从Erlang开始就是一个很好的选择。不到50行代码，就已经能运行起第一个Web网站了。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Socket</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}]),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Socket</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Conn</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">handle_connection</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_request</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"nv\">Headers</span> <span class=\"o\">=</span> <span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">inet</span><span class=\"p\">:</span><span class=\"nf\">setopts</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">}]),</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_header</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Value</span><span class=\"p\">}}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[{</span><span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"nv\">Value</span><span class=\"p\">}|</span><span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)];</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">http_eoh</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[]</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"s\">\"/\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">_)</span> <span class=\"o\">-&gt;</span> \n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n           <span class=\"nv\">Socket</span><span class=\"p\">,</span>\n           <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: text-plain</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n</code></pre></div><br>将上面的代码保存为 web.erl<br><br>运行<br><br><div class=\"highlight\"><pre><code class=\"language-text\">erl -make\nerl -run web\n</code></pre></div><br>在浏览器里打开 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8080/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> ，你就会看到 OK<br><br>太棒了，还不赶紧开始学Erlang。",
        "extras": ""
    },
    {
        "question": {
            "title": "Mozilla Rhino 中的 Scopes 和 Contexts 如何理解？",
            "updated_time": 1412843531,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25872280",
            "created": 1412843531,
            "id": 25872280
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/31600933",
        "thumbnail": "",
        "created_time": 1412844160,
        "excerpt": "反正具体调用一个JavaScript函数的时候，是要传入 context scope this 以及参数列表的。scope可以近似理解成，调用某个函数的时候，全局变量分别是啥。context只知道是用来建scope的，没用过高级用法，不是很清楚。",
        "updated_time": 1412844310,
        "id": 31600933,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "反正具体调用一个JavaScript函数的时候，是要传入 context scope this 以及参数列表的。scope可以近似理解成，调用某个函数的时候，全局变量分别是啥。context只知道是用来建scope的，没用过高级用法，不是很清楚。",
        "extras": ""
    },
    {
        "question": {
            "title": "寻找梅森质数的新算法：3**x=1mod(Mp)的非零最小解 x？",
            "updated_time": 1420992225,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25493925",
            "created": 1411406403,
            "id": 25493925
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30899079",
        "thumbnail": "",
        "created_time": 1411441896,
        "excerpt": "建议参考 卢卡斯－莱默检验法 改用C写，在这么小的数量级上，对速度提升有限吧。毕竟Python自带的大数乘法已经用上FFT了。 随便找了几个代码拼凑了一下 try:\n import numpy as np\nexcept ImportError:\n np = None\n\nfrom bisect import bisect\n\nif np:\n def primes(n):\n # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n sieve = np.ones(n/3 + (n%6==2), dtype…",
        "updated_time": 1411535928,
        "id": 30899079,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "建议参考<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%258D%25A2%25E5%258D%25A1%25E6%2596%25AF-%25E8%258E%25B1%25E9%25BB%2598%25E6%25A3%2580%25E9%25AA%258C%25E6%25B3%2595\" target=\"_blank\" rel=\"nofollow noreferrer\"> 卢卡斯－莱默检验法<i class=\"icon-external\"></i></a><br><br>改用C写，在这么小的数量级上，对速度提升有限吧。毕竟Python自带的大数乘法已经用上FFT了。<br><br>随便找了几个代码拼凑了一下<br><br><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">bisect</span> <span class=\"kn\">import</span> <span class=\"n\">bisect</span>\n\n<span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"c\"># http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188</span>\n        <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">6</span><span class=\"o\">==</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)</span>\n        <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span>\n                <span class=\"n\">sieve</span><span class=\"p\">[</span>      <span class=\"p\">((</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span>      <span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"n\">sieve</span><span class=\"p\">[(</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,((</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">(</span><span class=\"n\">sieve</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n       <span class=\"c\"># http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188</span>\n       <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n       <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n           <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n               <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n       <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mp</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">%</span> <span class=\"n\">M</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">M</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">PRIMES</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">PRIMES</span><span class=\"p\">[</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">mp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">i</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "对于Linux中的r/w/x权限，如果没有x权限那么就算有r和w权限是不是也不能执行？",
            "updated_time": 1410875703,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25389262",
            "created": 1410874933,
            "id": 25389262
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30622821",
        "thumbnail": "",
        "created_time": 1410876367,
        "excerpt": "if you have the privilege to exec() and can read that file, just try $ /lib64/ld-linux-x86-64.so.2 /path/to/your/elfit will just do what you want. If you don't have the privilege to exec(), you can exec() in user-space, though this could be quite tricky.",
        "updated_time": 1410876578,
        "id": 30622821,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "if you have the privilege to exec() and can read that file, just try<br><div class=\"highlight\"><pre><code class=\"language-text\">$ /lib64/ld-linux-x86-64.so.2 /path/to/your/elf\n</code></pre></div>it will just do what you want.<br><br>If you don't have the privilege to exec(), you can exec() in user-space, though this could be quite tricky.",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么说不是 HR 的从业者不能理解收到 PDF 简历的痛苦？",
            "updated_time": 1407611920,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/19737940",
            "created": 1309226440,
            "id": 19737940
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30493643",
        "thumbnail": "",
        "created_time": 1410603472,
        "excerpt": "以前见识少，也经常被类似的说法误导，实在分不清楚到底怎么才好。不过，最近简历投的比较多。记得好像有一家公司，PDF简历上传之后，会跳转到一个表单页，但是里面姓名，邮箱，联系电话什么的已经自动从简历里提取出来默认填好了，确实都是对的啊 !!! 可见，这种说法完全就是来骗人的。 就是这样",
        "updated_time": 1410603490,
        "id": 30493643,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "以前见识少，也经常被类似的说法误导，实在分不清楚到底怎么才好。不过，最近简历投的比较多。记得好像有一家公司，PDF简历上传之后，会跳转到一个表单页，但是里面姓名，邮箱，联系电话什么的已经自动从简历里提取出来默认填好了，确实都是对的啊 !!! 可见，这种说法完全就是来骗人的。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "你们读大学时，第一门编程课是用什么编程语言？",
            "updated_time": 1409799356,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25113144",
            "created": 1409799356,
            "id": 25113144
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30120375",
        "thumbnail": "",
        "created_time": 1409800845,
        "excerpt": "我觉得很可能是Brainfuck 。 其实这不是编程课。这是数字电路课。但是明显讲课的老师想偷懒，不讲数字电路，就只给讲FPGA。好像是有一次作业，可以几选一，难度大致都和流水灯差不多。但是，老师上课其实讲和没讲也没什么区别，我啥也没学会。虽然我不会用数字电路的方式做，但是这种Hello, world级的程序我还是会写的嘛。于是我就在FPGA上搞了个brainfuck解释器，但是用的FPGA实在太渣了，频率上不去，我又把它强拆成了五级流水…",
        "updated_time": 1467174686,
        "id": 30120375,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我觉得很可能是<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Brainfuck\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Brainfuck<i class=\"icon-external\"></i></a>。<br><br>其实这不是编程课。这是数字电路课。但是明显讲课的老师想偷懒，不讲数字电路，就只给讲FPGA。好像是有一次作业，可以几选一，难度大致都和流水灯差不多。但是，老师上课其实讲和没讲也没什么区别，我啥也没学会。虽然我不会用数字电路的方式做，但是这种Hello, world级的程序我还是会写的嘛。于是我就在FPGA上搞了个brainfuck解释器，但是用的FPGA实在太渣了，频率上不去，我又把它强拆成了五级流水线，这样频率就够了。交作业的时候，老师看到我那带延迟槽的brainfuck，都不知道说什么好了。我就这样把数字电路课生生歪成了编程课。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "垃圾回收机制中，引用计数法是如何维护所有对象引用的？",
            "updated_time": 1378709577,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21539353",
            "created": 1377429341,
            "id": 21539353
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30086323",
        "thumbnail": "",
        "created_time": 1409730278,
        "excerpt": "通常GC就不是基于引用计数的。有循环引用，引用计数就会出问题。这个问题在Java那里是找不到答案的。只有Python奇葩的GC是基于引用计数的。你可以看老版本的Python对于GC的介绍，Garbage Collection for Python 。 就是这样",
        "updated_time": 1409730278,
        "id": 30086323,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "通常GC就不是基于引用计数的。有循环引用，引用计数就会出问题。这个问题在Java那里是找不到答案的。只有Python奇葩的GC是基于引用计数的。你可以看老版本的Python对于GC的介绍，<a href=\"https://link.zhihu.com/?target=http%3A//arctrix.com/nas/python/gc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Garbage Collection for Python<i class=\"icon-external\"></i></a>。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "Linux 3.x 中epoll的惊群问题？",
            "updated_time": 1402911344,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/24169490",
            "created": 1402911344,
            "id": 24169490
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/30052029",
        "thumbnail": "",
        "created_time": 1409662426,
        "excerpt": "thundering herd problem will never go away, unless the kernel changes socket API. if you poll() before accept(), kenrel cannot decide which process will accept the incoming connection, so it has to wake up every one. while poll():\n if listening socket is ready:\n accept()\n get it?",
        "updated_time": 1409662426,
        "id": 30052029,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "thundering herd problem will never go away, unless the kernel changes socket API.<br><br>if you poll() before accept(), kenrel cannot decide which process will accept the incoming connection, so it has to wake up every one.<br><br><div class=\"highlight\"><pre><code class=\"language-text\">while poll():\n  if listening socket is ready:\n      accept()\n</code></pre></div><br>get it?",
        "extras": ""
    },
    {
        "question": {
            "title": "一道逻辑题，2015阿里校招，下面哪个选项是对的？",
            "updated_time": 1409320262,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/25039455",
            "created": 1409320262,
            "id": 25039455
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/29885791",
        "thumbnail": "",
        "created_time": 1409320380,
        "excerpt": "这个用Prolog不就完了 :- use_module(library(clpfd)).\n\npuzzle(Puzzle) :-\n Puzzle = [A,B,C,D,E,F],\n Puzzle ins 0..1,\n A+B+C+D+E+F #= 1,\n A #<==> (A+B+C+D+E+F #= 0),\n B #<==> (A+B+C+D+E+F #> 1),\n C #<==> (D+E #= 0),\n D #<==> (B+C #> 0),\n E #<==> (C #= 0),\n F #<==> (E+F #> 0),\n label(Puzzle).\n 我看这是是错题啊 ?- puzzle(P).\nfalse. 他们是为了交白卷的也能有正的分数么？ 就是这样",
        "updated_time": 1409321734,
        "id": 29885791,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这个用Prolog不就完了<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"p\">:-</span> <span class=\"nf\">use_module</span><span class=\"p\">(</span><span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"s-Atom\">clpfd</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">puzzle</span><span class=\"p\">(</span><span class=\"nv\">Puzzle</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nv\">Puzzle</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">,</span><span class=\"nv\">E</span><span class=\"p\">,</span><span class=\"nv\">F</span><span class=\"p\">],</span>\n  <span class=\"nv\">Puzzle</span> <span class=\"s-Atom\">ins</span> <span class=\"mf\">0..1</span><span class=\"p\">,</span>\n  <span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nv\">A</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">B</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"nv\">C</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">D</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">E</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">C</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">F</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nf\">label</span><span class=\"p\">(</span><span class=\"nv\">Puzzle</span><span class=\"p\">).</span>\n</code></pre></div><br>我看这是是错题啊<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"s-Atom\">?-</span> <span class=\"nf\">puzzle</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"s-Atom\">false</span><span class=\"p\">.</span>\n</code></pre></div><br>他们是为了交白卷的也能有正的分数么？<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么 Python 不是 lexical scoping？",
            "updated_time": 1402991461,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/24179082",
            "created": 1402987403,
            "id": 24179082
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/26929183",
        "thumbnail": "",
        "created_time": 1402988309,
        "excerpt": "你以为Python是 let foo () =\n let x = 1 in\n let inner () = x + 1 in\n let x = 3 in\n print (inner ()) 实际上Python是 let foo () = \n let x = ref 1 in\n let inner () = !x + 1 in\n x := 3;\n print (inner ())\n 这和lexical scoping一点关系都没有啊 这是个mutable vs immutable的问题 python的scope是这样的 +--------------------------+\n| +---------------+ |\n| def foo|(): | |\n| +----+ | |\n| | x = 1 | |\n| | +------…",
        "updated_time": 1402995235,
        "id": 26929183,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你以为Python是<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">()</span> <span class=\"o\">=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"k\">in</span>\n        <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">()</span><span class=\"o\">)</span>\n</code></pre></div><br>实际上Python是<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> \n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ref</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n      <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n      <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">()</span><span class=\"o\">)</span>\n</code></pre></div><br>这和lexical scoping一点关系都没有啊<br><br>这是个mutable vs immutable的问题<br><br>python的scope是这样的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">+--------------------------+\n|        +---------------+ |\n| def foo|():            | |\n|   +----+               | |\n|   | x = 1              | |\n|   |          +-------+ | |\n|   | def inner|():    | | |\n|   |   +------+       | | |\n|   |   | return x + 1 | | |\n|   |   +--------------+ | |\n|   | x = 3              | |\n|   | print inner()      | |\n|   +--------------------+ |\n+--------------------------+\n</code></pre></div><br>你认为的scope是这样的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">let foo () =\n +-------------------------------+\n | let x = 1 in                  |\n |  +--------------------------+ |\n |  | let inner () = x + 1 in  | |\n |  |  +---------------------+ | |\n |  |  | let x = 3 in        | | |\n |  |  |   print (inner ())  | | |\n |  |  +---------------------+ | |\n |  +--------------------------+ |\n +-------------------------------+\n</code></pre></div><br>因为Python的scope是mutable的，所以x = 3只是把x的binding修改成指向3<br><br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "编程求100-900之间各位数字之积大于之和的个数？",
            "updated_time": 1402716071,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/24143675",
            "created": 1402716071,
            "id": 24143675
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/26813399",
        "thumbnail": "",
        "created_time": 1402718492,
        "excerpt": "print 615\n 这道题根本就不用算法吧。随便想想就想出来了啊 100-900，其实只要含0的，那么积肯定小于和，于是只剩下 8 * 9 * 9 = 648 个数字 {1,1,X} 不管什么顺序肯定是积小于和的，这总共有3*8+1 = 25个数字，去掉一个9开头的，还剩24个 {1,2,2} 不管什么顺序是积小于和的，这总共有 3 个数字 {1,2,3} 不管什么顺序是积等于和的，这总共有 6 个数字 接着来看 {1,2,4} {1,3,3} {2,2,3} 它们积都大于和 。所以积小于等于和的就这…",
        "updated_time": 1402720204,
        "id": 26813399,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<div class=\"highlight\"><pre><code class=\"language-text\">print 615\n</code></pre></div><br>这道题根本就不用算法吧。随便想想就想出来了啊<br><br>100-900，其实只要含0的，那么积肯定小于和，于是只剩下 8 * 9 * 9 = 648 个数字<br>{1,1,X} 不管什么顺序肯定是积小于和的，这总共有3*8+1 = 25个数字，去掉一个9开头的，还剩24个<br>{1,2,2} 不管什么顺序是积小于和的，这总共有 3 个数字<br>{1,2,3} 不管什么顺序是积等于和的，这总共有 6 个数字<br>接着来看 {1,2,4} {1,3,3} {2,2,3} 它们积都大于和 。所以积小于等于和的就这些了<br>得出结论 648 - 24 - 3 - 6 = 615<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "觉得 SQL 太难用于是自己编了个类 SQL 语言，不知道有没有人想过类似的事情？",
            "updated_time": 1402455792,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23719632",
            "created": 1399721137,
            "id": 23719632
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/25469590",
        "thumbnail": "",
        "created_time": 1399789564,
        "excerpt": "你这种风格叫List Comprehension，Erlang里常见的写法就是这样的啊。你让那些整天嚷嚷Erlang不符合人类思维的情何以堪啊。 简单的不如直接用MatchSpec解决。 1> Tab = ets:new(student, []).\n16400\n2> ets:insert(Tab, {97, alice, 18, agriculture}).\ntrue\n3> ets:insert(Tab, {98, betty, 20, biology}).\ntrue\n4> ets:select(Tab, [{{98, '_', '_', '_'}, [], ['$_']}]).\n[{98,betty,20,biology}]\n5> ets:select(Tab, [{{98, '…",
        "updated_time": 1399796132,
        "id": 25469590,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这种风格叫List Comprehension，Erlang里常见的写法就是这样的啊。你让那些整天嚷嚷Erlang不符合人类思维的情何以堪啊。<br><br>简单的不如直接用MatchSpec解决。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"nv\">Tab</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"mi\">16400</span>\n<span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"n\">alice</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">agriculture</span><span class=\"p\">}).</span>\n<span class=\"n\">true</span>\n<span class=\"mi\">3</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">betty</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">biology</span><span class=\"p\">}).</span>\n<span class=\"n\">true</span>\n<span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">},</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"n\">'$_'</span><span class=\"p\">]}]).</span>\n<span class=\"p\">[{</span><span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"n\">betty</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"n\">biology</span><span class=\"p\">}]</span>\n<span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'$4'</span><span class=\"p\">},</span> <span class=\"p\">[],</span> <span class=\"p\">[{{</span><span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'$4'</span><span class=\"p\">}}]}]).</span>\n<span class=\"p\">[{</span><span class=\"n\">betty</span><span class=\"p\">,</span><span class=\"n\">biology</span><span class=\"p\">}]</span>\n<span class=\"mi\">6</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'$3'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">},</span> <span class=\"p\">[{</span><span class=\"n\">'&gt;'</span><span class=\"p\">,</span> <span class=\"n\">'$3'</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">}],</span> <span class=\"p\">[</span><span class=\"n\">'$2'</span><span class=\"p\">]}]).</span>\n<span class=\"p\">[</span><span class=\"n\">betty</span><span class=\"p\">]</span>\n<span class=\"mi\">7</span><span class=\"o\">&gt;</span>\n</code></pre></div><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//www.erlang.org/doc/man/ets.html%23select-2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Erlang -- ets<i class=\"icon-external\"></i></a><br><br>用qlc的时候，你会发现用List Comprehension这种风格，最自然的还是写成两个查询<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"err\">#</span><span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">escript</span>\n\n<span class=\"p\">-</span><span class=\"ni\">include_lib</span><span class=\"p\">(</span><span class=\"s\">\"stdlib/include/qlc.hrl\"</span><span class=\"p\">).</span>\n\n<span class=\"nf\">main</span><span class=\"p\">([])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">Student</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">set</span><span class=\"p\">]),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"n\">alice</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">betty</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"n\">carol</span><span class=\"p\">}),</span>\n\n  <span class=\"nv\">Score</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">bag</span><span class=\"p\">]),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">}),</span>\n\n  <span class=\"nv\">L1</span> <span class=\"o\">=</span>\n    <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">e</span><span class=\"p\">(</span>\n      <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">q</span><span class=\"p\">(</span>\n      <span class=\"p\">[</span> <span class=\"nv\">N</span> <span class=\"p\">||</span>\n        <span class=\"p\">{</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">S</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n        <span class=\"nv\">S</span> <span class=\"o\">&lt;</span> <span class=\"mi\">90</span> <span class=\"p\">],</span> <span class=\"p\">[{</span><span class=\"n\">unique</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}])),</span>\n\n  <span class=\"nv\">L2</span> <span class=\"o\">=</span>\n    <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">e</span><span class=\"p\">(</span>\n      <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">q</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span> <span class=\"nv\">N2</span> <span class=\"p\">||</span>\n          <span class=\"p\">{</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">C1</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n          <span class=\"p\">{</span><span class=\"nv\">N2</span><span class=\"p\">,</span> <span class=\"nv\">C2</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n          <span class=\"ow\">not</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">member</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">L1</span><span class=\"p\">),</span>\n          <span class=\"nv\">C1</span> <span class=\"o\">==</span> <span class=\"nv\">C2</span>\n        <span class=\"p\">],</span> <span class=\"p\">[{</span><span class=\"n\">unique</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}])),</span>\n\n  <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">~w~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">L2</span><span class=\"p\">]),</span>\n  <span class=\"n\">ok</span><span class=\"p\">.</span>\n</code></pre></div><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//www.erlang.org/doc/man/qlc.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang -- qlc<i class=\"icon-external\"></i></a><br><br>这个问题，可以用 Datalog 来表示，看得更清楚。<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s-Atom\">alice</span><span class=\"p\">).</span>\n<span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"s-Atom\">betty</span><span class=\"p\">).</span>\n<span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"s-Atom\">carol</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">).</span>\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">q1</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">)</span><span class=\"s-Atom\">:</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">),</span>\n  <span class=\"nv\">S</span> <span class=\"o\">&lt;</span> <span class=\"mf\">90.</span>\n\n<span class=\"nf\">q2</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">)</span><span class=\"s-Atom\">:</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">),</span>\n  <span class=\"o\">not</span> <span class=\"nf\">q1</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">).</span>\n</code></pre></div><br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "初学者该从哪里入门学习写 tokenizer 和 grammar analyzer ?",
            "updated_time": 1398681021,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23564096",
            "created": 1398565158,
            "id": 23564096
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/25035849",
        "thumbnail": "",
        "created_time": 1398740642,
        "excerpt": "正确答案：可以先约架。约完了，你自己就会去找资料看了，不会也得会了。 错误答案： 可以先写一个Datalog解释器。接着由 Earley Deduction 变形成 Earley Parser ，再由 Earley Parser 退化成 LR Parser ，LR Parser 又可以退化成 SLR 和 LALR ，同时还可以退化成 NFA ，NFA 还可以编译成 DFA ，DFA是一种特殊的NFA。 另一方面，Datalog从动态规划改成回溯，就变成了Prolog，Prolog 的 DCG 其实和 PEG 是类似的东西。PEG继续退…",
        "updated_time": 1417493054,
        "id": 25035849,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "正确答案：可以先约架。约完了，你自己就会去找资料看了，不会也得会了。<br><br><br>错误答案：<br><br>可以先写一个Datalog解释器。接着由 Earley Deduction 变形成 Earley Parser ，再由 Earley Parser 退化成 LR Parser ，LR Parser 又可以退化成 SLR 和 LALR ，同时还可以退化成 NFA ，NFA 还可以编译成 DFA ，DFA是一种特殊的NFA。<br><br>另一方面，Datalog从动态规划改成回溯，就变成了Prolog，Prolog 的 DCG 其实和 PEG 是类似的东西。PEG继续退化，就变成PCRE那种回溯风格为主的“正则表达式”。同时，PEG加一点tabling，就变成了 Packrat 。<br><br>学了Datalog，其他部分都是可以很容易自己推导出来的，看那么多厚厚的书才是纯浪费时间。<br><br>详情请看 21天学通Erlang",
        "extras": ""
    },
    {
        "question": {
            "title": "关于函数嵌套定义，在编译时怎么处理外层函数的运行时栈？lambda函数在编译时又是怎么处理？",
            "updated_time": 1398004580,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23486264",
            "created": 1398004580,
            "id": 23486264
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/24821794",
        "thumbnail": "",
        "created_time": 1398229385,
        "excerpt": "比如下面一段代码 map(_, []) ->\n [];\nmap(F, [H|T]) ->\n [F(H)|map(F, T)].\n\n\nf() ->\n X = 2,\n map(fun (E) -> E * X end, [1,2,3]).\n 其中 fun (E) -> E * X end\n 就是一个高阶函数。假如是一个栈机，可能编译成下面这样 {\n args => 1\n closure => [2]\n code =>\n PUSH LOCAL_1\n PUSH CLOSURE_1\n TIMES\n RETURN\n}\n 还有另外一种方式是像MLton。进行简单的控制流分析，之后把所有的高阶函数都转化为一阶函数 lambda_1([X], E) ->…",
        "updated_time": 1398229404,
        "id": 24821794,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "比如下面一段代码<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">map</span><span class=\"p\">(_,</span> <span class=\"p\">[])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[];</span>\n<span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[</span><span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">H</span><span class=\"p\">)|</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">)].</span>\n\n\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">X</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n</code></pre></div><br>其中<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span> <span class=\"k\">end</span>\n</code></pre></div><br>就是一个高阶函数。假如是一个栈机，可能编译成下面这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">{\n  args =&gt; 1\n  closure =&gt; [2]\n  code =&gt;\n    PUSH LOCAL_1\n    PUSH CLOSURE_1\n    TIMES\n    RETURN\n}\n</code></pre></div><br>还有另外一种方式是像MLton。进行简单的控制流分析，之后把所有的高阶函数都转化为一阶函数<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">lambda_1</span><span class=\"p\">([</span><span class=\"nv\">X</span><span class=\"p\">],</span> <span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span><span class=\"p\">.</span>\n\n<span class=\"nf\">map</span><span class=\"p\">(_,</span> <span class=\"p\">[])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[];</span>\n<span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">H1</span> <span class=\"o\">=</span>\n    <span class=\"k\">case</span> <span class=\"nv\">F</span> <span class=\"k\">of</span>\n      <span class=\"p\">{</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n          <span class=\"n\">lambda_1</span><span class=\"p\">(</span><span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">H</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nv\">H1</span><span class=\"p\">|</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">)].</span>\n\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">X</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">map</span><span class=\"p\">({</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">X</span><span class=\"p\">]},</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n</code></pre></div><br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "OCaml 为什么没能流行起来？",
            "updated_time": 1482870524,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/20621491",
            "created": 1353938691,
            "id": 20621491
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/24491366",
        "thumbnail": "",
        "created_time": 1397480225,
        "excerpt": "OCaml主要是module的命名空间设计的很成问题啊。 一般语言里是 x.y.z ，OCaml里是 x.A.y.B.z 类型出个错，他告诉你你这个变量的类型是 .... ，需要的是 A.B.C.D.E.F.G.H.t ，其实往往就是个int，竟然不能在边上提示一下实际类型。 这要能流行，C++都该超过C了。 另外就是模式匹配的检查其实不是很合理，有时候，有些情况根本就不可能出现的，但是OCaml还是要说你的匹配不完全不给编译通过。 其实，我就是来吐个槽的。 就是这样 -…",
        "updated_time": 1399207664,
        "id": 24491366,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "OCaml主要是module的命名空间设计的很成问题啊。<br><br>一般语言里是 x.y.z ，OCaml里是 x.A.y.B.z <br><br>类型出个错，他告诉你你这个变量的类型是 .... ，需要的是 A.B.C.D.E.F.G.H.t ，其实往往就是个int，竟然不能在边上提示一下实际类型。<br><br>这要能流行，C++都该超过C了。<br><br>另外就是模式匹配的检查其实不是很合理，有时候，有些情况根本就不可能出现的，但是OCaml还是要说你的匹配不完全不给编译通过。<br><br>其实，我就是来吐个槽的。 <br><br>就是这样<br><br>--------------------------------<br><br>补充例子<br><br>assert false的问题，以二叉树为例<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Leaf</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Tree</span> <span class=\"k\">of</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span> <span class=\"o\">*</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">max</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">None</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">)</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"n\">max</span> <span class=\"n\">right</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Leaf</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">compare</span> <span class=\"k\">value</span> <span class=\"n\">elem</span> <span class=\"k\">with</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Less</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Greater</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">right</span><span class=\"o\">))</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Equal</span> <span class=\"o\">-&gt;</span>\n          <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n            <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"nc\">Leaf</span><span class=\"o\">,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Leaf</span>\n            <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"nc\">Leaf</span><span class=\"o\">,</span> <span class=\"o\">_)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">right</span>\n            <span class=\"o\">|</span> <span class=\"o\">(_,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">left</span>\n            <span class=\"o\">|</span> <span class=\"o\">(_,</span> <span class=\"o\">_)</span> <span class=\"o\">-&gt;</span>\n              <span class=\"k\">match</span> <span class=\"n\">max</span> <span class=\"n\">left</span> <span class=\"k\">with</span>\n                <span class=\"o\">|</span> <span class=\"nc\">None</span> <span class=\"o\">-&gt;</span> <span class=\"k\">assert</span> <span class=\"bp\">false</span>   <span class=\"c\">(* 我要这行干什么!!! *)</span>\n                <span class=\"o\">|</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n                  <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"n\">m</span> <span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n<span class=\"o\">;;</span>\n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "Y不动点组合子用在哪里？",
            "updated_time": 1380811655,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/21099081",
            "created": 1369306700,
            "id": 21099081
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/23895380",
        "thumbnail": "",
        "created_time": 1396054968,
        "excerpt": "一般来说，当你发现你需要用Y Combinator的时候，一定是哪里出了问题。比如当你不能给函数命名的时候，你就需要Y Combinator了。举个例子，如果你用Erlang的时候，只用Erlang Shell，你就会发现你会不停地写Y Combinator了。当然了，从Erlang R17 开始终于可以不写Y Combinator了。完全无法理解那帮整天吹Y Combinator的。 就是这样",
        "updated_time": 1396054968,
        "id": 23895380,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "一般来说，当你发现你需要用Y Combinator的时候，一定是哪里出了问题。比如当你不能给函数命名的时候，你就需要Y Combinator了。举个例子，如果你用Erlang的时候，只用Erlang Shell，你就会发现你会不停地写Y Combinator了。当然了，从<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//joearms.github.io/2014/02/01/big-changes-to-erlang.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang R17<i class=\"icon-external\"></i></a>开始终于可以不写Y Combinator了。完全无法理解那帮整天吹Y Combinator的。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么多数游戏服务端是用 C++ 来写呢，是历史原因还是性能方面的考虑？",
            "updated_time": 1430014672,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23158109",
            "created": 1395718921,
            "id": 23158109
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/23833591",
        "thumbnail": "",
        "created_time": 1395897097,
        "excerpt": "我会告诉你 百度贴吧是用C开发的吗 ？ 就是这样",
        "updated_time": 1395897097,
        "id": 23833591,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我会告诉你 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.csdn.net/article/2011-12-05/308512\" target=\"_blank\" rel=\"nofollow noreferrer\">百度贴吧是用C开发的吗<i class=\"icon-external\"></i></a> ？<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "我这么做解释器是不是错的离谱?",
            "updated_time": 1395542643,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/23136318",
            "created": 1395542643,
            "id": 23136318
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/23701338",
        "thumbnail": "",
        "created_time": 1395543775,
        "excerpt": "从零开始实现Prolog解释器，最好的办法是看WAMBOOK WAMBOOK里把实现Prolog分成L0/L1/L2/L3四个阶段，你完全可以只看slides，按这四个阶段自己分别实现就可以了，没必要完全按照WAMBOOK来，毕竟WAMBOOK是按C的思路来讲的。 因为是按C的思路来讲的，WAMBOOK讲unification(相当于L0)的时候，废话太多了，不如看miniKanren 论文，这论文就看一开始的unification就行，后面非要用很tricky的宏来实现miniKanren，很蛋疼，就别看了。反正…",
        "updated_time": 1395543775,
        "id": 23701338,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "从零开始实现Prolog解释器，最好的办法是看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//wambook.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noreferrer\">WAMBOOK<i class=\"icon-external\"></i></a><br><br>WAMBOOK里把实现Prolog分成L0/L1/L2/L3四个阶段，你完全可以只看slides，按这四个阶段自己分别实现就可以了，没必要完全按照WAMBOOK来，毕竟WAMBOOK是按C的思路来讲的。<br><br>因为是按C的思路来讲的，WAMBOOK讲unification(相当于L0)的时候，废话太多了，不如看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//gradworks.umi.com/33/80/3380156.html\" target=\"_blank\" rel=\"nofollow noreferrer\">miniKanren<i class=\"icon-external\"></i></a>论文，这论文就看一开始的unification就行，后面非要用很tricky的宏来实现miniKanren，很蛋疼，就别看了。反正你要实现的是Prolog，不是miniKanren。<br><br>没必要一开始就写个parser。语言推荐用Erlang。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "如果静态类型的语言比动态类型的语言更加适合大项目，那么是否在一定规模和复杂度以下动态类型的语言更好？",
            "updated_time": 1389690995,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/22522407",
            "created": 1389681404,
            "id": 22522407
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/21735766",
        "thumbnail": "",
        "created_time": 1389962990,
        "excerpt": "其实静态类型和动态类型的影响不是很大。 要说大项目，比如十多年前Erlang项目，AXD 301有大约200万行Erlang代码。而之前Ericsson妄图用C++开发同样的东西，没开发出来。这能不能说明动态类型比静态类型更适合大项目呢？ 就是这样。",
        "updated_time": 1389962990,
        "id": 21735766,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "其实静态类型和动态类型的影响不是很大。<br><br>要说大项目，比如十多年前Erlang项目，AXD 301有大约200万行Erlang代码。而之前Ericsson妄图用C++开发同样的东西，没开发出来。这能不能说明动态类型比静态类型更适合大项目呢？<br><br>就是这样。",
        "extras": ""
    },
    {
        "question": {
            "title": "高级黑客是如何入侵计算机系统的？",
            "updated_time": 1344920631,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/20419457",
            "created": 1344914365,
            "id": 20419457
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/21278761",
        "thumbnail": "",
        "created_time": 1388502137,
        "excerpt": "我觉得NSA的思路就非常好。 不直接攻击主机，利用漏洞攻击交换机/路由器，把关心的数据转发走。你要是用明文密码，那太棒了。你要是加密了，那也没有关系，NSA都能解出来。有了密码，要不要登录只是是否需要的问题了。还有你的机密文件总得通过网络传吧，其实都白送给NSA了。 NSA文件一被snowden泄露出来。路由器就立刻成了各大互联网公司争夺的目标了。 就是这样",
        "updated_time": 1388502137,
        "id": 21278761,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我觉得NSA的思路就非常好。<br><br>不直接攻击主机，利用漏洞攻击交换机/路由器，把关心的数据转发走。你要是用明文密码，那太棒了。你要是加密了，那也没有关系，NSA都能解出来。有了密码，要不要登录只是是否需要的问题了。还有你的机密文件总得通过网络传吧，其实都白送给NSA了。<br><br>NSA文件一被snowden泄露出来。路由器就立刻成了各大互联网公司争夺的目标了。<br><br>就是这样",
        "extras": ""
    },
    {
        "question": {
            "title": "谭浩强的 C 语言技术真很牛吗？他写过哪些厉害的程序？",
            "updated_time": 1320749618,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/19904116",
            "created": 1320420486,
            "id": 19904116
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/20839442",
        "thumbnail": "",
        "created_time": 1387017957,
        "excerpt": "谭浩强没有编过什么大程序，但这好像并不妨碍他能把计算机语言课讲得很好，能把计算机语言书写得生动活泼、深入浅出。写书和编程序是两码事，C语言发明者亲自操刀写的那本C语言书可能是世界上最难懂的C语言书，这里有一个角度的问题。\n 谭浩强说：“任何人都要有自知之明，任何人都不可能是一个万能科学家，也不可能什么事情都比别人强。我做的只是入门性的工作，我并不是研究计算机系统的专家，也不是计算机软件编程专家，我…",
        "updated_time": 1387018006,
        "id": 20839442,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<blockquote>　　谭浩强没有编过什么大程序，但这好像并不妨碍他能把计算机语言课讲得很好，能把计算机语言书写得生动活泼、深入浅出。写书和编程序是两码事，C语言发明者亲自操刀写的那本C语言书可能是世界上最难懂的C语言书，这里有一个角度的问题。\n    <p>　　谭浩强说：“任何人都要有自知之明，任何人都不可能是一个万能科学家，也不可能什么事情都比别人强。我做的只是入门性的工作，我并不是研究计算机系统的专家，也不是计算机软件编程专家，我只是计算机教育专家。”</p><p>　　谭浩强不愧为一个出色的党政干部，他不遗余力地奔走呼号，宣传计算机普及工作的意义，作为一个深谙宣传之道的政治工作者，谭浩强很清楚只要自己的道理在一个角度上能站住脚，就不怕树个靶子和它争论，理不争不明，最怕的是在寂寞中被遗忘。这和鲁迅当年必须要《呐喊》是一样的道理。</p></blockquote><br>摘自<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.liuren.com/liuren/hero/chenxuyuan/9.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">谭浩强育人<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "erlang怎么读？",
            "updated_time": 1322815227,
            "type": "question",
            "question_type": "normal",
            "url": "https://www.zhihu.com/api/v4/questions/19947262",
            "created": 1322815227,
            "id": 19947262
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/20515460",
        "thumbnail": "",
        "created_time": 1385985977,
        "excerpt": "我以前一直把Erlang读作“二烂”，直到我膝盖上中了一箭，我才发现原来Erlang应该读做“爱浪”。 参考: silly question: erlang pronunciation How to pronounce ErLang? Seriously. 爱尔朗分布 ",
        "updated_time": 1385985977,
        "id": 20515460,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我以前一直把Erlang读作“二烂”，直到我膝盖上中了一箭，我才发现原来Erlang应该读做“<b>爱浪</b>”。<br><br>参考:<br><a href=\"https://link.zhihu.com/?target=http%3A//erlang.org/pipermail/erlang-questions/2001-July/003391.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">silly question: erlang pronunciation<i class=\"icon-external\"></i></a><br><a href=\"https://link.zhihu.com/?target=http%3A//www.rhinocerus.net/forum/lang-functional/96416-how-pronounce-erlang-seriously.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">How to pronounce ErLang? Seriously.<i class=\"icon-external\"></i></a><br><a href=\"https://link.zhihu.com/?target=http%3A//zh.wikipedia.org/wiki/%25E7%2588%25B1%25E5%25B0%2594%25E6%259C%2597%25E5%2588%2586%25E5%25B8%2583\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">爱尔朗分布<i class=\"icon-external\"></i></a>",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 Clean Code 作者对 Swift 与 Kotlin 的看法？",
            "updated_time": 1484313933,
            "question_type": "normal",
            "type": "question",
            "created": 1484313933,
            "url": "https://www.zhihu.com/api/v4/questions/54733478",
            "id": 54733478
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140826369",
        "thumbnail": "",
        "created_time": 1484317085,
        "excerpt": "坚决反对。要是没有这些东西，C++里还怎么搞friend injection。要是没有friend injection，SMP还能玩的这么溜么？ (逃",
        "updated_time": 1484317097,
        "id": 140826369,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "坚决反对。要是没有这些东西，C++里还怎么搞friend injection。要是没有friend injection，SMP还能玩的这么溜么？ (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "知乎上有哪些著名的“计算机科学”领域的“民科”？",
            "updated_time": 1484469274,
            "question_type": "normal",
            "type": "question",
            "created": 1484279120,
            "url": "https://www.zhihu.com/api/v4/questions/54714346",
            "id": 54714346
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140730929",
        "thumbnail": "",
        "created_time": 1484279589,
        "excerpt": "我的关注只有不到你的一半，不知道能不能算著名？",
        "updated_time": 1484279721,
        "id": 140730929,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我的关注只有不到你的一半，不知道能不能算著名？",
        "extras": ""
    },
    {
        "question": {
            "title": "一个人的失败主要是自己的责任吗？",
            "updated_time": 1484717353,
            "question_type": "normal",
            "type": "question",
            "created": 1484198386,
            "url": "https://www.zhihu.com/api/v4/questions/54681637",
            "id": 54681637
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140564471",
        "thumbnail": "",
        "created_time": 1484198621,
        "excerpt": "当然100%是自己的责任。甩锅给别人也不能使你哪怕成功半点啊",
        "updated_time": 1484198631,
        "id": 140564471,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "当然100%是自己的责任。甩锅给别人也不能使你哪怕成功半点啊",
        "extras": ""
    },
    {
        "question": {
            "title": "不撸兔子愿意开知乎live讲授如何搜索吗？",
            "updated_time": 1484106082,
            "question_type": "normal",
            "type": "question",
            "created": 1484105469,
            "url": "https://www.zhihu.com/api/v4/questions/54640728",
            "id": 54640728
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/140345727",
        "thumbnail": "",
        "created_time": 1484106473,
        "excerpt": "这还需要开Live？ 举个例子，这是哪一本神书，其中的比喻讲的是数学中的哪个领域？ - 高等数学 - 知乎 你把“有共同边界的四个两两不相交的平面区域” 输入搜索框 得到第一个结果就是 第十三章 平面点集 这样你的搜索水平就已经超过毒舌婊了 谢谢",
        "updated_time": 1484106474,
        "id": 140345727,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "这还需要开Live？<br><br>举个例子，<a href=\"https://www.zhihu.com/question/52519924\" class=\"internal\">这是哪一本神书，其中的比喻讲的是数学中的哪个领域？ - 高等数学 - 知乎</a><br><br>你把“有共同边界的四个两两不相交的平面区域” 输入搜索框<br><br>得到第一个结果就是<br><br><a href=\"https://link.zhihu.com/?target=http%3A//academic.hep.com.cn/medteach/CN/chapter/978-7-04-038651-6/chapter13\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">第十三章 平面点集<i class=\"icon-external\"></i></a><br><br>这样你的搜索水平就已经超过毒舌婊了<br><br>谢谢",
        "extras": ""
    },
    {
        "question": {
            "title": "为何最近曾博在知乎上的评价如此高？",
            "updated_time": 1484012840,
            "question_type": "normal",
            "type": "question",
            "created": 1483458107,
            "url": "https://www.zhihu.com/api/v4/questions/54369428",
            "id": 54369428
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139817014",
        "thumbnail": "",
        "created_time": 1483858265,
        "excerpt": "你不看看黑曽博的大部分都是什么人？比如，那个毒舌婊连搜索都不会。 还有什么自封勃学家的，搞不好还不如毒舌婊会搜索。 曽博钓鱼从来都是愿者上钩。在知乎上还真有人上钩了。 曽博黑知乎Live，可是他自己就在九言上开过一次啊，然而并没有什么人提。 破乎就这水平，这评价能不高？你见过有几个被收了智商税的会承认自己蠢？",
        "updated_time": 1483859161,
        "id": 139817014,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你不看看黑曽博的大部分都是什么人？比如，那个毒舌婊连搜索都不会。<br><br>还有什么自封勃学家的，搞不好还不如毒舌婊会搜索。<br><br>曽博钓鱼从来都是愿者上钩。在知乎上还真有人上钩了。<br><br>曽博黑知乎Live，可是他自己就在九言上开过一次啊，然而并没有什么人提。<br><br>破乎就这水平，这评价能不高？你见过有几个被收了智商税的会承认自己蠢？",
        "extras": ""
    },
    {
        "question": {
            "title": "C++ 的 stateful meta-programming 这么强大，为什么没见有什么库用？",
            "updated_time": 1483854692,
            "question_type": "normal",
            "type": "question",
            "created": 1483794795,
            "url": "https://www.zhihu.com/api/v4/questions/54518001",
            "id": 54518001
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139800748",
        "thumbnail": "",
        "created_time": 1483851601,
        "excerpt": "轮子哥不会请不要强答。不是什么metaprogramming都是stateful的。显然轮子哥你在看到这个问题之前，并不知道什么是C++里的stateful metaprogramming。 就看一个简单的问题。假如你不知道怎么补充 ... 把下面这个程序编译过去(不允许定义宏)，怎么能说你知道stateful metaprogramming 。 ...\n\nint\nmain() {\n ...\n constexpr auto a = f<S>(0);\n ...\n constexpr auto b = f<S>(0);\n static_assert(a != b);\n}\n 没有stateful progra…",
        "updated_time": 1483852334,
        "id": 139800748,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "轮子哥不会请不要强答。不是什么metaprogramming都是stateful的。显然轮子哥你在看到这个问题之前，并不知道什么是C++里的stateful metaprogramming。<br><br>就看一个简单的问题。假如你不知道怎么补充 ... 把下面这个程序编译过去(不允许定义宏)，怎么能说你知道stateful metaprogramming 。<br><br><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"p\">...</span>\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">constexpr</span> <span class=\"k\">auto</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">constexpr</span> <span class=\"k\">auto</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"k\">static_assert</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">!=</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><br><br><br>没有stateful programming，在C++里要搞个GC，你要记录每个类型里有哪些指针，需要自己额外再把每个成员变量的名字列一遍。有了stateful programming，只要弄个简单的标记，就可以记录了，不需要再列一遍了。也就是stateful metaprogramming使得原来不可能的变成了可能。只要你脑洞够大，肯定还能发现很多有意义的用途。很多库在C++里，原来要么搞不出来，要么需要很多boilerplate，现在都可以搞了。<br><br>可以这么说stateful metaprogramming开启了C++的新时代，自从有人发现C++支持stateful metaprogramming，一年多过去了，却没发现有什么库在用，难道不奇怪么？",
        "extras": ""
    },
    {
        "question": {
            "title": "你们老家的人是怎么看待程序员这个职业的？",
            "updated_time": 1484051709,
            "question_type": "normal",
            "type": "question",
            "created": 1483355755,
            "url": "https://www.zhihu.com/api/v4/questions/54322412",
            "id": 54322412
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139790612",
        "thumbnail": "",
        "created_time": 1483847528,
        "excerpt": "那个谁谁谁去了美国一家叫什么非死不可的公司，去年一年所有收入加起来有40万。 竟然都不以为耻，反以为荣。都不知道说什么好了。",
        "updated_time": 1483847528,
        "id": 139790612,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "那个谁谁谁去了美国一家叫什么非死不可的公司，去年一年所有收入加起来有40万。<br><br>竟然都不以为耻，反以为荣。都不知道说什么好了。",
        "extras": ""
    },
    {
        "question": {
            "title": "知乎响应这么慢是因为使用了 Python 语言吗？",
            "updated_time": 1483970003,
            "question_type": "normal",
            "type": "question",
            "created": 1483803350,
            "url": "https://www.zhihu.com/api/v4/questions/54522524",
            "id": 54522524
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139775142",
        "thumbnail": "",
        "created_time": 1483841477,
        "excerpt": "数据都存不对的网站，能打开就不错了。 都能出现-1条评论了，你还能指望啥？",
        "updated_time": 1483841478,
        "id": 139775142,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "数据都存不对的网站，能打开就不错了。<br><br>都能出现-1条评论了，你还能指望啥？",
        "extras": ""
    },
    {
        "question": {
            "title": "曾老师的 web based latex editor 写得如何了?",
            "updated_time": 1483795112,
            "question_type": "normal",
            "type": "question",
            "created": 1483795069,
            "url": "https://www.zhihu.com/api/v4/questions/54518228",
            "id": 54518228
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139711220",
        "thumbnail": "",
        "created_time": 1483795794,
        "excerpt": "意识到自己的失败是成功的吗？ - 知乎用户的回答 - 知乎 (逃",
        "updated_time": 1484303646,
        "id": 139711220,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "<a href=\"https://www.zhihu.com/question/54150376/answer/138117515\" class=\"internal\">意识到自己的失败是成功的吗？ - 知乎用户的回答 - 知乎</a> (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "c和c++这类没有gc的语言是不是骗自己？",
            "updated_time": 1478116506,
            "question_type": "normal",
            "type": "question",
            "created": 1478116506,
            "url": "https://www.zhihu.com/api/v4/questions/52235332",
            "id": 52235332
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139692875",
        "thumbnail": "",
        "created_time": 1483788679,
        "excerpt": "我想了一想，C++还是可以有GC的。 我就写了个简单的，完全照搬Garbage Collection for Python #include <cstdio>\n#include <cassert>\n#include <algorithm>\n#include \"gc.hpp\"\n\nstruct Counter {\n static ::std::size_t count;\n bool valid;\n\n Counter()\n : valid(true) {\n }\n\n Counter(Counter &&o) noexcept : valid(false) {\n ::std::swap(valid, o.valid);\n }\n\n Counter &\n operator=(Counter &&) = delete;\n\n Counter(Count…",
        "updated_time": 1483794528,
        "id": 139692875,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我想了一想，C++还是可以有GC的。<br><br>我就写了个简单的，完全照搬<a href=\"https://link.zhihu.com/?target=http%3A//arctrix.com/nas/python/gc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Garbage Collection for Python<i class=\"icon-external\"></i></a><br><br><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include &lt;cstdio&gt;</span>\n<span class=\"cp\">#include &lt;cassert&gt;</span>\n<span class=\"cp\">#include &lt;algorithm&gt;</span>\n<span class=\"cp\">#include \"gc.hpp\"</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Counter</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">valid</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">()</span>\n    <span class=\"o\">:</span> <span class=\"n\">valid</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">Counter</span> <span class=\"o\">&amp;&amp;</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">noexcept</span> <span class=\"o\">:</span> <span class=\"n\">valid</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">valid</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Counter</span> <span class=\"o\">&amp;</span>\n  <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Counter</span> <span class=\"o\">&amp;&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">Counter</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n  <span class=\"n\">Counter</span> <span class=\"o\">&amp;</span>\n  <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Counter</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n\n  <span class=\"o\">~</span><span class=\"n\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">)</span>\n      <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nl\">Cycle</span> <span class=\"p\">:</span> <span class=\"k\">public</span> <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">Object</span><span class=\"o\">&lt;</span><span class=\"n\">Cycle</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"n\">Counter</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n  <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Cycle</span><span class=\"o\">&gt;</span> <span class=\"n\">GC_MEMBER</span><span class=\"p\">(</span><span class=\"n\">peer</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"o\">&lt;</span><span class=\"n\">Counter</span><span class=\"o\">&gt;</span><span class=\"p\">({});</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"p\">{</span>\n    <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">{</span>\n      <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">Ptr</span><span class=\"o\">&lt;</span><span class=\"n\">Counter</span><span class=\"o\">&gt;</span> <span class=\"n\">p1</span><span class=\"p\">;</span>\n      <span class=\"p\">{</span>\n        <span class=\"k\">auto</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"o\">&lt;</span><span class=\"n\">Counter</span><span class=\"o\">&gt;</span><span class=\"p\">({});</span>\n        <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n      <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n      <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"p\">{</span>\n    <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">auto</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"o\">&lt;</span><span class=\"n\">Cycle</span><span class=\"o\">&gt;</span><span class=\"p\">({});</span>\n      <span class=\"k\">auto</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">make</span><span class=\"o\">&lt;</span><span class=\"n\">Cycle</span><span class=\"o\">&gt;</span><span class=\"p\">({});</span>\n      <span class=\"n\">p1</span><span class=\"o\">-&gt;</span><span class=\"n\">peer</span> <span class=\"o\">=</span> <span class=\"n\">p2</span><span class=\"p\">;</span>\n      <span class=\"n\">p2</span><span class=\"o\">-&gt;</span><span class=\"n\">peer</span> <span class=\"o\">=</span> <span class=\"n\">p1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"o\">::</span><span class=\"n\">gc</span><span class=\"o\">::</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>C++已经被玩坏了，哈哈哈",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价 DeepLearning.scala？",
            "updated_time": 1483627084,
            "question_type": "normal",
            "type": "question",
            "created": 1483627084,
            "url": "https://www.zhihu.com/api/v4/questions/54447965",
            "id": 54447965
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/139460304",
        "thumbnail": "",
        "created_time": 1483681844,
        "excerpt": "没有rank还怎么表示任意维卷积？ (逃",
        "updated_time": 1483681888,
        "id": 139460304,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "没有rank还怎么表示任意维卷积？ (逃",
        "extras": ""
    },
    {
        "question": {
            "title": "B大的LiFT怎么支持RNN和LSTM？",
            "updated_time": 1482825286,
            "question_type": "normal",
            "type": "question",
            "created": 1482825286,
            "url": "https://www.zhihu.com/api/v4/questions/54102473",
            "id": 54102473
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/138657432",
        "thumbnail": "",
        "created_time": 1483272450,
        "excerpt": "等你想明白卷积为什么要那么搞就知道了啊",
        "updated_time": 1483272451,
        "id": 138657432,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "等你想明白卷积为什么要那么搞就知道了啊",
        "extras": ""
    },
    {
        "question": {
            "title": "怎么通过shell删除文件里的一些迷之字符？",
            "updated_time": 1484915508,
            "question_type": "normal",
            "type": "question",
            "created": 1483271014,
            "url": "https://www.zhihu.com/api/v4/questions/54272191",
            "id": 54272191
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/138656247",
        "thumbnail": "",
        "created_time": 1483271892,
        "excerpt": "先划重点 content-type: application/json; charset=utf8 transfer-encoding: chunked content-encoding: gzip",
        "updated_time": 1483271892,
        "id": 138656247,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "先划重点<br><br>content-type: application/json; charset=utf8<br>transfer-encoding: chunked<br>content-encoding: gzip",
        "extras": ""
    },
    {
        "question": {
            "title": "如何正确翻译\"成功人士\"这一概念？",
            "updated_time": 1482803595,
            "question_type": "normal",
            "type": "question",
            "created": 1482803522,
            "url": "https://www.zhihu.com/api/v4/questions/54088602",
            "id": 54088602
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/138485285",
        "thumbnail": "",
        "created_time": 1483158861,
        "excerpt": "The Establishment Decepticon",
        "updated_time": 1483159365,
        "id": 138485285,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "The Establishment<br>Decepticon",
        "extras": ""
    },
    {
        "question": {
            "title": "意识到自己的失败是成功的吗？",
            "updated_time": 1482931529,
            "question_type": "normal",
            "type": "question",
            "created": 1482931529,
            "url": "https://www.zhihu.com/api/v4/questions/54150376",
            "id": 54150376
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/138117515",
        "thumbnail": "",
        "created_time": 1482932148,
        "excerpt": "曽博用Mathematica写的WYSIWYG LaTeX编辑器没写出来，他却说是个半成品。由此可见，失败是成功的一半。(逃",
        "updated_time": 1482932148,
        "id": 138117515,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曽博用Mathematica写的WYSIWYG LaTeX编辑器没写出来，他却说是个半成品。由此可见，失败是成功的一半。(逃",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么组合子编程的卷积是这样表示的？",
            "updated_time": 1482825454,
            "question_type": "normal",
            "type": "question",
            "created": 1482821826,
            "url": "https://www.zhihu.com/api/v4/questions/54100011",
            "id": 54100011
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/138065407",
        "thumbnail": "",
        "created_time": 1482909948,
        "excerpt": "现代的APL都支持rank啊，这有什么难理解的。broadcast是古代APL的概念。 可以参考 tensor和rank LiFT之oblique 如何理解tensorflow中的dimension？ - 机器学习 - 知乎 必须指出LiFT并不支持组合子方式。 一方面，组合子不用汉字，看起来很可能就是一团表情文字啊 你不妨看看J语言，虽然没有优先级的概念，运算符都是平级的，统一从一边开始算。但是因为组合子有各种组合规则，外加对 . : ; , 这些字符的滥用。稍微复杂一点的程序…",
        "updated_time": 1482911047,
        "id": 138065407,
        "is_copyable": true,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "现代的APL都支持rank啊，这有什么难理解的。broadcast是古代APL的概念。<br><br>可以参考<br><br><a href=\"https://zhuanlan.zhihu.com/p/21523386\" class=\"internal\">tensor和rank</a><br><br><a href=\"https://zhuanlan.zhihu.com/p/22437550\" class=\"internal\">LiFT之oblique</a><br><br><a href=\"https://www.zhihu.com/question/51309337\" class=\"internal\">如何理解tensorflow中的dimension？ - 机器学习 - 知乎</a><br><br>必须指出LiFT并不支持组合子方式。<br><br>一方面，组合子不用汉字，看起来很可能就是一团表情文字啊<br><br>你不妨看看J语言，虽然没有优先级的概念，运算符都是平级的，统一从一边开始算。但是因为组合子有各种组合规则，外加对 . : ; , 这些字符的滥用。稍微复杂一点的程序，你刚看到的时候肯定都不知道从哪里看起好。<br><br>所以LiFT强制要求括号，从根源上拒绝运算符优先顺序的存在。流行的程序语言里，我看只有Pony是这样的。<br><br>另一方面，组合子的形式就往往是为了能针对满足条件的组合做优化。参考<a href=\"https://link.zhihu.com/?target=http%3A//wiki.nars2000.org/index.php/Determinant_Operator\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Determinant Operator<i class=\"icon-external\"></i></a><br><br>这个对LiFT来说是没有意义的。比如卷积，在LiFT里反正加法和乘法是可以分成两步来表达，不会影响编译结果的，要组合子的形式干啥？",
        "extras": ""
    },
    {
        "question": {
            "title": "有没有好用的Erlang paxos库？",
            "updated_time": 1481940723,
            "question_type": "normal",
            "type": "question",
            "created": 1481940723,
            "url": "https://www.zhihu.com/api/v4/questions/53725551",
            "id": 53725551
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137597805",
        "thumbnail": "",
        "created_time": 1482664860,
        "excerpt": "scalaris里就有一个吧。不知道好用不好用。也就没几行。 scalaris-team/scalaris 不过paxos这种东西，没有形式证明，有谁敢用啊，我们又不是____________。",
        "updated_time": 1482664947,
        "id": 137597805,
        "is_copyable": false,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "scalaris里就有一个吧。不知道好用不好用。也就没几行。<br><br><a href=\"https://link.zhihu.com/?target=https%3A//github.com/scalaris-team/scalaris/tree/e4ce0a4cf88def49f3c5c3f884ae6d7f129fac11/src/paxos\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">scalaris-team/scalaris<i class=\"icon-external\"></i></a><br><br>不过paxos这种东西，没有形式证明，有谁敢用啊，我们又不是____________。",
        "extras": ""
    },
    {
        "question": {
            "title": "不懂英文的代价是什么，600元人民币吗？",
            "updated_time": 1482547705,
            "question_type": "normal",
            "type": "question",
            "created": 1482533872,
            "url": "https://www.zhihu.com/api/v4/questions/53986264",
            "id": 53986264
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137401034",
        "thumbnail": "",
        "created_time": 1482549168,
        "excerpt": "那些教授水平我们不知道，不好评价，不一定就高。但是轮子哥的水平，我们已经见识过了。 比如，不可能在 Windows Server 上实现 C100K 吗？ 可疑的是，他天天毫无根据的抹黑微软其他部门的产品，怎么还没被开除。",
        "updated_time": 1482553234,
        "id": 137401034,
        "is_copyable": false,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "那些教授水平我们不知道，不好评价，不一定就高。但是轮子哥的水平，我们已经见识过了。<br><br>比如，<a href=\"https://www.zhihu.com/question/53590913/answer/135710589\" class=\"internal\">不可能在 Windows Server 上实现 C100K 吗？</a><br><br>可疑的是，他天天毫无根据的抹黑微软其他部门的产品，怎么还没被开除。",
        "extras": ""
    },
    {
        "question": {
            "title": "一个成功人士会在知乎开几次网络学习班？",
            "updated_time": 1482463549,
            "question_type": "normal",
            "type": "question",
            "created": 1482440675,
            "url": "https://www.zhihu.com/api/v4/questions/53950005",
            "id": 53950005
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137337936",
        "thumbnail": "",
        "created_time": 1482498869,
        "excerpt": "985年级第一是在影射曾老师么？",
        "updated_time": 1482498870,
        "id": 137337936,
        "is_copyable": false,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "985年级第一是在影射曾老师么？",
        "extras": ""
    },
    {
        "question": {
            "title": "如何看待曾博最近在知乎上黑轮子哥开课一事？",
            "updated_time": 1482724966,
            "question_type": "normal",
            "type": "question",
            "created": 1482456612,
            "url": "https://www.zhihu.com/api/v4/questions/53952525",
            "id": 53952525
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137283479",
        "thumbnail": "",
        "created_time": 1482476366,
        "excerpt": "一个可疑的变化是，曾老师之前都是看不起我们这些查stackoverflow的弱渣的，他信心满满的说，他熟读C++四大名著，碰到C++的问题再也不需要查什么stackoverflow了 ...",
        "updated_time": 1482476401,
        "id": 137283479,
        "is_copyable": false,
        "author": {
            "type": "people",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "is_org": false,
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "一个可疑的变化是，曾老师之前都是看不起我们这些查stackoverflow的弱渣的，他信心满满的说，他熟读C++四大名著，碰到C++的问题再也不需要查什么stackoverflow了 ...",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价轮子哥终于开始利用他的C++知识赚大钱了？",
            "updated_time": 1482405005,
            "question_type": "normal",
            "type": "question",
            "created": 1482403027,
            "url": "https://www.zhihu.com/api/v4/questions/53935399",
            "id": 53935399
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/137241759",
        "thumbnail": "",
        "created_time": 1482460805,
        "excerpt": "赚钱不可耻。可耻的是欺诈。轮子哥根本就不会什么(现代)C++，而C++并不支持什么面向对象。他却敢号称 基于现代的C++构建，教你以面向对象思想编写优雅而健壮的代码 特别是他吐槽的emplace的Bug。正是因为古代C++不好，不容易写出健壮的代码才导致的问题。现代的C++都是直接传一个rvalue reference进去的，哪里会允许在container的代码里调用constructor这种鬼用法。",
        "updated_time": 1482483360,
        "id": 137241759,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价12月22日上线的计蒜客 \"CS 212: 面向对象的程序设计 (C++)\"?",
            "updated_time": 1486537877,
            "question_type": "normal",
            "type": "question",
            "created": 1481980947,
            "url": "https://www.zhihu.com/api/v4/questions/53743730",
            "id": 53743730
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137148737",
        "thumbnail": "",
        "created_time": 1482401154,
        "excerpt": "优惠价都要600。轮子哥是知道怎么交税了么？ ---------------------------- 首先，今年，Alan Kay都出来澄清了，Erlang才是面向对象语言。我不知道用C++能讲什么“面向对象的程序设计” 不是你编译器选项开C++14，你就自动是现代C++了。你不能一边第一个截图里面就写着 #define strcpy_s，一边还要吹嘘自己是现代C++ 比如轮子哥说道 然而并没有什么C++的书真的会完全屏蔽C语言的部分，所以我想了想还是弄了这个东西。还有 致力于…",
        "updated_time": 1482412758,
        "id": 137148737,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "优惠价都要600。轮子哥是知道怎么交税了么？<br><br>----------------------------<br><br>首先，今年，Alan Kay都出来澄清了，Erlang才是面向对象语言。我不知道用C++能讲什么“面向对象的程序设计”<br><br>不是你编译器选项开C++14，你就自动是现代C++了。你不能一边第一个截图里面就写着 #define strcpy_s，一边还要吹嘘自己是现代C++<br><br>比如轮子哥说道<br><blockquote>然而并没有什么C++的书真的会完全屏蔽C语言的部分，所以我想了想还是弄了这个东西。</blockquote>还有<br><blockquote>致力于介绍一个现代C++（C++11和C++14）的子集——可以替代绝大多数常用的C语言feature<br><a href=\"https://zhuanlan.zhihu.com/p/24497791\" class=\"internal\">——知乎专栏</a></blockquote>顺便，那篇专栏里举的<i> 相同功能的现代C++代码</i> ，和现代不现代实在扯不上关系<br><br>到处都写着，using namespace std，一看就不是可以接受的代码风格<br><br>轮子哥断然是讲不好什么现代C++的。你去看看轮子哥的gaylib是不是还在用他自己造的坑爹的单元测试框架。而不是换成某个现代的C++测试框架，比如Catch。<br><br>微软家的编译器满脸都是Bug，比如<a href=\"https://www.zhihu.com/question/52591257\" class=\"internal\">微软究竟遇到了什么问题使得他们到现在都无法在 C1 中实现两步名称查找？</a>，轮子哥却执着于寻找开源实现某个角落里的bug，并拿出来批判一番<a href=\"https://zhuanlan.zhihu.com/p/24365844\" class=\"internal\"> 知乎专栏</a><br><br>而且他吐槽的这个emplace的问题，假如他坚持使用现代的C++风格，尽量只使用move和rvalue reference，他是不可能发现这个Bug的。",
        "extras": ""
    },
    {
        "question": {
            "title": "如何评价扎克伯格自己写的 Jarvis AI？",
            "updated_time": 1482334696,
            "question_type": "normal",
            "type": "question",
            "created": 1482200939,
            "url": "https://www.zhihu.com/api/v4/questions/53832840",
            "id": 53832840
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137098421",
        "thumbnail": "",
        "created_time": 1482383952,
        "excerpt": "很多很多年以前，有一个亿万富豪搞了一个声控开关，最后他的财宝都落入了阿里巴巴的手中。 History repeats itself?",
        "updated_time": 1482384012,
        "id": 137098421,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "很多很多年以前，有一个亿万富豪搞了一个声控开关，最后他的财宝都落入了阿里巴巴的手中。<br><br>History repeats itself?",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么都说富文本编辑器是天坑？",
            "updated_time": 1450666986,
            "question_type": "normal",
            "type": "question",
            "created": 1450584310,
            "url": "https://www.zhihu.com/api/v4/questions/38699645",
            "id": 38699645
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/137000643",
        "thumbnail": "",
        "created_time": 1482324074,
        "excerpt": "很有必要。因为都不好用只能自己造了。 基于contentEditable的来实现的，哪怕只要很少的功能，Bug根本就没希望修到少到可以接受的地步，选这条路可以直接自杀了。 虽然contentEditable有一个好，就是浏览器原生功能配合的好。但是输入中文要啥spell checker提示。反倒是输入法事件是不能cancel的，这个是致命的，直接就否定了你通过只劫持一部分事件就能造个编辑器的可能。 所以，不要contentEditable。设置user-select: none。…",
        "updated_time": 1482325538,
        "id": 137000643,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "很有必要。因为都不好用只能自己造了。<br><br>基于contentEditable的来实现的，哪怕只要很少的功能，Bug根本就没希望修到少到可以接受的地步，选这条路可以直接自杀了。<br><br>虽然contentEditable有一个好，就是浏览器原生功能配合的好。但是输入中文要啥spell checker提示。反倒是输入法事件是不能cancel的，这个是致命的，直接就否定了你通过只劫持一部分事件就能造个编辑器的可能。<br><br>所以，不要contentEditable。设置user-select: none。自己来实现selection，比较老的浏览器就不管了。像ace editor那样，画一个看不出内容，只能看到在哪里闪啊闪的textarea来接收输入。但是，因为ace editor只是代码编辑器，这个textarea比较好画。一般的编辑器还需要根据cursor所在位置设置对应的字体什么的，假如你允许自定义CSS，估计得用getComputedStyle了。<br><br>至少到这一步，我们通过完全禁止浏览器直接操作DOM，于是对DOM的操作都在我们掌控之中了。接下来支持不同的功能又有不同的坑，但是和直接用原生程序写编辑器差距已经不大了。<br><br>因为undo/redo，需要使用immutable的结构，不然直接往会跳个几十步，你一个个apply过来都来不及啊。所以不能浏览器里内容变了，直接去改你自己DOM里的节点。简单一点，浏览器里的DOM和你自己维护的DOM都用二叉树串起来，内容发生变化应该先计算出这是第几个Text，再到自己维护的DOM里去update第N个文本。",
        "extras": ""
    },
    {
        "question": {
            "title": "为什么程序员不去非你莫属求职？",
            "updated_time": 1484717388,
            "question_type": "normal",
            "type": "question",
            "created": 1482311984,
            "url": "https://www.zhihu.com/api/v4/questions/53893060",
            "id": 53893060
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/137000469",
        "thumbnail": "",
        "created_time": 1482323999,
        "excerpt": "不会Java怎么去？急，在线等",
        "updated_time": 1483174472,
        "id": 137000469,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不会Java怎么去？急，在线等",
        "extras": ""
    },
    {
        "question": {
            "title": "程序语言设计界是否开始认为 Subtyping 是 Anti-pattern？",
            "updated_time": 1482262549,
            "question_type": "normal",
            "type": "question",
            "created": 1482262333,
            "url": "https://www.zhihu.com/api/v4/questions/53870767",
            "id": 53870767
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/136897867",
        "thumbnail": "",
        "created_time": 1482287500,
        "excerpt": "然而，无论用哪个，没有大量boilerplate，连二叉树都写不出来",
        "updated_time": 1482417352,
        "id": 136897867,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "然而，无论用哪个，没有大量boilerplate，连二叉树都写不出来",
        "extras": ""
    },
    {
        "question": {
            "title": "陈硕的网络编程实践课程怎么样？",
            "updated_time": 1482032128,
            "question_type": "normal",
            "type": "question",
            "created": 1481986805,
            "url": "https://www.zhihu.com/api/v4/questions/53747085",
            "id": 53747085
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/136627874",
        "thumbnail": "",
        "created_time": 1482144297,
        "excerpt": "我只看了下目录，感觉内容少的可怜，要注意到优惠价都要400，差不多类型的书价格才100左右啊",
        "updated_time": 1482144476,
        "id": 136627874,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我只看了下目录，感觉内容少的可怜，要注意到优惠价都要400，差不多类型的书价格才100左右啊",
        "extras": ""
    },
    {
        "question": {
            "title": "两年前浙大学生自杀事件，他的理论有什么错误？（附有遗书）？",
            "updated_time": 1482201759,
            "question_type": "normal",
            "type": "question",
            "created": 1417870001,
            "url": "https://www.zhihu.com/api/v4/questions/26952301",
            "id": 26952301
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/136620245",
        "thumbnail": "",
        "created_time": 1482141375,
        "excerpt": "惊，竟然不是曾博写的",
        "updated_time": 1482221720,
        "id": 136620245,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "惊，竟然不是曾博写的",
        "extras": ""
    },
    {
        "question": {
            "title": "bhuztez的中文名字叫做不撸兔子吗？",
            "updated_time": 1481426946,
            "question_type": "normal",
            "type": "question",
            "created": 1481066018,
            "url": "https://www.zhihu.com/api/v4/questions/53372759",
            "id": 53372759
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/136401995",
        "thumbnail": "",
        "created_time": 1482032492,
        "excerpt": "曾老师，先把我加到你微信粉丝群，到时候我会告诉你的",
        "updated_time": 1482036524,
        "id": 136401995,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "曾老师，先把我加到你微信粉丝群，到时候我会告诉你的",
        "extras": ""
    },
    {
        "question": {
            "title": "如何用简单的例子讲解 Finger Tree 数据结构算法，还有个别的 monoid 会有什么影响?",
            "updated_time": 1479983228,
            "question_type": "normal",
            "type": "question",
            "created": 1479983228,
            "url": "https://www.zhihu.com/api/v4/questions/52966539",
            "id": 52966539
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/136116117",
        "thumbnail": "",
        "created_time": 1481862291,
        "excerpt": "看不懂论文。写的都是什么鬼。论文里强行扯类型。作者难道认为连Haskell都不会就没必要学finger tree了么 ... 感觉和有一个有红黄绿三种颜色(实际上是五种，有两种颜色有左侧右侧两种情况，还能同时出现)的数据结构原理是差不多的。 还有感觉Haskell社区网上的文章有个通病，张口就是这里有一个Monoid，完全不说，由什么构成了这个Monoid。",
        "updated_time": 1481862461,
        "id": 136116117,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "看不懂论文。写的都是什么鬼。论文里强行扯类型。作者难道认为连Haskell都不会就没必要学finger tree了么 ...<br><br>感觉和有一个有红黄绿三种颜色(实际上是五种，有两种颜色有左侧右侧两种情况，还能同时出现)的数据结构原理是差不多的。<br><br>还有感觉Haskell社区网上的文章有个通病，张口就是这里有一个Monoid，完全不说，由什么构成了这个Monoid。",
        "extras": ""
    },
    {
        "question": {
            "title": "各个编程语言都有哪些「黑点」？",
            "updated_time": 1487647806,
            "question_type": "normal",
            "type": "question",
            "created": 1481603325,
            "url": "https://www.zhihu.com/api/v4/questions/53584423",
            "id": 53584423
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/136111991",
        "thumbnail": "",
        "created_time": 1481860531,
        "excerpt": "APL需要专用键盘",
        "updated_time": 1481860532,
        "id": 136111991,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "APL需要专用键盘",
        "extras": ""
    },
    {
        "question": {
            "title": "基于文本的Linux为什么没有回收站？",
            "updated_time": 1437120925,
            "question_type": "normal",
            "type": "question",
            "created": 1437120925,
            "url": "https://www.zhihu.com/api/v4/questions/32294243",
            "id": 32294243
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/135858069",
        "thumbnail": "",
        "created_time": 1481718386,
        "excerpt": "树形的文件系统和回收站是不搭的。难道十八级目录都删了，从回收站恢复时，再把整个目录结构再恢复吗？ 顺便反对 @肖骐 的观点。日常生活中垃圾桶翻出来的东西多半是没法用了的。正是因为计算机里删除一个文件这个操作本身并不会改变文件内容，所以扔进垃圾桶里的还能拿出来继续用。 现在的问题在于事实上我们只有一种形式的文件系统，也就是树形的。这对于存储个人文件来说，既无必要，也不方便。我们更应该把树形的文件系统去…",
        "updated_time": 1481721833,
        "id": 135858069,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "树形的文件系统和回收站是不搭的。难道十八级目录都删了，从回收站恢复时，再把整个目录结构再恢复吗？<br><br>顺便反对 <a data-hash=\"0e81d3ccaeef0b681974cc94f32813d3\" href=\"https://www.zhihu.com/people/0e81d3ccaeef0b681974cc94f32813d3\" class=\"member_mention\" data-editable=\"true\" data-title=\"@肖骐\" data-hovercard=\"p$b$0e81d3ccaeef0b681974cc94f32813d3\">@肖骐</a>  的观点。日常生活中垃圾桶翻出来的东西多半是没法用了的。正是因为计算机里删除一个文件这个操作本身并不会改变文件内容，所以扔进垃圾桶里的还能拿出来继续用。<br><br>现在的问题在于事实上我们只有一种形式的文件系统，也就是树形的。这对于存储个人文件来说，既无必要，也不方便。我们更应该把树形的文件系统去掉。只保留BeFS里索引的功能。删除文件只是给文件打个标记。等磁盘空间占满了再来提示你删除文件。",
        "extras": ""
    },
    {
        "question": {
            "title": "《你不知道的js》中倡导的编程风格？",
            "updated_time": 1481440057,
            "question_type": "normal",
            "type": "question",
            "created": 1481386832,
            "url": "https://www.zhihu.com/api/v4/questions/53506191",
            "id": 53506191
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/135539374",
        "thumbnail": "",
        "created_time": 1481552682,
        "excerpt": "不得不说this太恶心了。到了ES6，写着写着就成这样了。 get method_foo() {\n return (arg_quux) => {\n return this;\n }\n}\n 无语",
        "updated_time": 1481552682,
        "id": 135539374,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不得不说this太恶心了。到了ES6，写着写着就成这样了。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">get method_foo() {\n  return (arg_quux) =&gt; {\n    return this;\n  }\n}\n</code></pre></div><br>无语",
        "extras": ""
    },
    {
        "question": {
            "title": "Intel Houdini 比 QEMU 快在哪里？",
            "updated_time": 1468571330,
            "question_type": "normal",
            "type": "question",
            "created": 1468570230,
            "url": "https://www.zhihu.com/api/v4/questions/48522805",
            "id": 48522805
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/135438001",
        "thumbnail": "",
        "created_time": 1481512771,
        "excerpt": "我认为houdini比qemu快的主要原因是，houdini只是那几个so是靠他翻译的，其他部分全是原生指令，靠硬件虚拟化跑的。而QEMU则是所有东西都要从ARM翻译过来，这样肯定是慢了的。 问题是，houdini是如何解决32位和64位的差异的，ARM有32位64位，x86也是。",
        "updated_time": 1481512941,
        "id": 135438001,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "我认为houdini比qemu快的主要原因是，houdini只是那几个so是靠他翻译的，其他部分全是原生指令，靠硬件虚拟化跑的。而QEMU则是所有东西都要从ARM翻译过来，这样肯定是慢了的。<br><br>问题是，houdini是如何解决32位和64位的差异的，ARM有32位64位，x86也是。",
        "extras": ""
    },
    {
        "question": {
            "title": "谢尔宾斯基三角形能用编程写出来么？该怎么写？",
            "updated_time": 1481333008,
            "question_type": "normal",
            "type": "question",
            "created": 1481248537,
            "url": "https://www.zhihu.com/api/v4/questions/53448865",
            "id": 53448865
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/135187387",
        "thumbnail": "",
        "created_time": 1481350514,
        "excerpt": "可以从 Studio/FractalsVisualizationJ - J Wiki 里抄 f=: ,~,.~\n f ^:3 ,1\n1 1 1 1 1 1 1 1\n1 0 1 0 1 0 1 0\n1 1 0 0 1 1 0 0\n1 0 0 0 1 0 0 0\n1 1 1 1 0 0 0 0\n1 0 1 0 0 0 0 0\n1 1 0 0 0 0 0 0\n1 0 0 0 0 0 0 0\n ' *' {~ f ^:3 ,1\n********\n* * * * \n** ** \n* * \n**** \n* * \n** \n* \n ' *' {~ f ^:2 ,1\n****\n* * \n** \n* \n ' *' {~ f ^:4 ,1\n****************\n* * * * * * * * \n** ** ** ** \n* * * * \n**** **** \n* * * * \n** *…",
        "updated_time": 1481350547,
        "id": 135187387,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "可以从 <a href=\"https://link.zhihu.com/?target=http%3A//code.jsoftware.com/wiki/Studio/FractalsVisualizationJ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Studio/FractalsVisualizationJ - J Wiki<i class=\"icon-external\"></i></a> 里抄<br><br><div class=\"highlight\"><pre><code class=\"language-text\">   f=: ,~,.~\n   f ^:3 ,1\n1 1 1 1 1 1 1 1\n1 0 1 0 1 0 1 0\n1 1 0 0 1 1 0 0\n1 0 0 0 1 0 0 0\n1 1 1 1 0 0 0 0\n1 0 1 0 0 0 0 0\n1 1 0 0 0 0 0 0\n1 0 0 0 0 0 0 0\n   ' *' {~ f ^:3 ,1\n********\n* * * * \n**  **  \n*   *   \n****    \n* *     \n**      \n*       \n   ' *' {~ f ^:2 ,1\n****\n* * \n**  \n*   \n   ' *' {~ f ^:4 ,1\n****************\n* * * * * * * * \n**  **  **  **  \n*   *   *   *   \n****    ****    \n* *     * *     \n**      **      \n*       *       \n********        \n* * * *         \n**  **          \n*   *           \n****            \n* *             \n**              \n*               \n</code></pre></div>",
        "extras": ""
    },
    {
        "question": {
            "title": "普通英国人的数学怎么样？",
            "updated_time": 1481409662,
            "question_type": "normal",
            "type": "question",
            "created": 1481335634,
            "url": "https://www.zhihu.com/api/v4/questions/53481968",
            "id": 53481968
        },
        "type": "answer",
        "is_collapsed": true,
        "url": "https://www.zhihu.com/api/v4/answers/135181536",
        "thumbnail": "",
        "created_time": 1481347642,
        "excerpt": "可是你怎么解释第一本数学书是英国人写的",
        "updated_time": 1481347667,
        "id": 135181536,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "可是你怎么解释第一本数学书是英国人写的",
        "extras": ""
    },
    {
        "question": {
            "title": "多线程编程的时候，使用无锁结构会不会比有锁结构更加快？",
            "updated_time": 1481685200,
            "question_type": "normal",
            "type": "question",
            "created": 1480902224,
            "url": "https://www.zhihu.com/api/v4/questions/53303879",
            "id": 53303879
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134956415",
        "thumbnail": "",
        "created_time": 1481200327,
        "excerpt": "你这么纠结，还是直接把网卡mmap进用户态进程地址空间自己写网络协议栈吧",
        "updated_time": 1481200415,
        "id": 134956415,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "你这么纠结，还是直接把网卡mmap进用户态进程地址空间自己写网络协议栈吧",
        "extras": ""
    },
    {
        "question": {
            "title": "C++、Haskell、Scala 和 Rust 究竟哪个最复杂？",
            "updated_time": 1481118311,
            "question_type": "normal",
            "type": "question",
            "created": 1481108730,
            "url": "https://www.zhihu.com/api/v4/questions/53395911",
            "id": 53395911
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134864091",
        "thumbnail": "",
        "created_time": 1481163641,
        "excerpt": "谁编译速度慢谁就更复杂，所以",
        "updated_time": 1481163641,
        "id": 134864091,
        "is_copyable": false,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "谁编译速度慢谁就更复杂，所以",
        "extras": ""
    },
    {
        "question": {
            "title": "怎样给想自制编译型程序语言的有志青年推荐后端·runtime？",
            "updated_time": 1481028469,
            "question_type": "normal",
            "type": "question",
            "created": 1481028357,
            "url": "https://www.zhihu.com/api/v4/questions/53362970",
            "id": 53362970
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134645947",
        "thumbnail": "",
        "created_time": 1481029737,
        "excerpt": "有志青年应该前后端一锅端，runtime连libc都不用，谢谢",
        "updated_time": 1481029815,
        "id": 134645947,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "有志青年应该前后端一锅端，runtime连libc都不用，谢谢",
        "extras": ""
    },
    {
        "question": {
            "title": "llvm memcpy的本质？",
            "updated_time": 1480904627,
            "question_type": "normal",
            "type": "question",
            "created": 1480904627,
            "url": "https://www.zhihu.com/api/v4/questions/53305237",
            "id": 53305237
        },
        "type": "answer",
        "is_collapsed": false,
        "url": "https://www.zhihu.com/api/v4/answers/134567056",
        "thumbnail": "",
        "created_time": 1480997370,
        "excerpt": "不妨去实现几个malloc，等到脸被打肿了的时候就明白了 建议参考 Minimum alignment of allocation across platforms ",
        "updated_time": 1480997437,
        "id": 134567056,
        "is_copyable": true,
        "author": {
            "is_org": false,
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "gender": 1,
            "type": "people",
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "headline": "正在找工作 ...",
            "badge": [],
            "is_advertiser": false,
            "name": "bhuztez",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
            "id": "dcddea61834f6b2dcb515f393fe29575"
        },
        "content": "不妨去实现几个malloc，等到脸被打肿了的时候就明白了<br><br>建议参考 <a href=\"https://link.zhihu.com/?target=http%3A//www.erahm.org/2016/03/24/minimum-alignment-of-allocation-across-platforms/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minimum alignment of allocation across platforms<i class=\"icon-external\"></i></a>",
        "extras": ""
    }
]