{
    "paging": {
        "is_end": false,
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=320",
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=360",
        "is_start": false,
        "totals": 442
    },
    "data": [
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/60435514",
            "thumbnail": "",
            "created_time": 1440304223,
            "updated_time": 1440304363,
            "id": 60435514,
            "excerpt": "照你这么说，的确没有必要。但是你要在国内找工作，还是需要学历的 ...。所以还是有必要，最好还是985以上，至少也得211 ...",
            "content": "照你这么说，的确没有必要。但是你要在国内找工作，还是需要学历的 ...。所以还是有必要，最好还是985以上，至少也得211 ...",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "我已经掌握了一个程序员应该掌握的基础知识，怎样读好大学?",
                "updated_time": 1448902763,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/33602894",
                "created": 1438178334,
                "id": 33602894
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/59336777",
            "thumbnail": "",
            "created_time": 1439631036,
            "updated_time": 1440036446,
            "id": 59336777,
            "excerpt": "谢邀。广告时间到了。 当然是extralib了。 change-code/extralib · GitHub extralib的本意是一些质量略低于标准库(kernel和stdlib)，但是从功能上讲是目前标准库所欠缺的功能，展示Erlang的潜力。 很多无脑黑认为Erlang缺乏metaprogramming能力，实际上Erlang是目前metaprogramming能力最强的语言。Erlang提供了parse_transform，还有隐藏的更深的core_transform。 更棒的是，现在在extralib里，我们引入了ext_syntax_trans，你…",
            "content": "谢邀。广告时间到了。 当然是extralib了。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/change-code/extralib\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> change-code/extralib · GitHub<i class=\"icon-external\"></i></a><br><br>extralib的本意是一些质量略低于标准库(kernel和stdlib)，但是从功能上讲是目前标准库所欠缺的功能，展示Erlang的潜力。<br><br>很多无脑黑认为Erlang缺乏metaprogramming能力，实际上Erlang是目前metaprogramming能力最强的语言。Erlang提供了parse_transform，还有隐藏的更深的core_transform。<br><br>更棒的是，现在在extralib里，我们引入了ext_syntax_trans，你可以使用任意语法写Erlang程序了，同时，还复制粘贴了一遍Erlang的parser，这样，就可以有scan_transform了。<br><br>现在就是来看看这个scan_transform有多大的威力了。在你的Erlang代码里加入这么两行，在Erlang里你就可以有和Python一样的Raw String了。 <a data-title=\"@牛耿\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/6a2b0782caf6924f9acfba5c4270bb03\" data-hash=\"6a2b0782caf6924f9acfba5c4270bb03\" data-tip=\"p$b$6a2b0782caf6924f9acfba5c4270bb03\" data-hovercard=\"p$b$6a2b0782caf6924f9acfba5c4270bb03\">@牛耿</a><br><br><div class=\"highlight\"><pre><code class=\"language-text\">-compile({parse_transform, ext_syntax_trans}).\n-compile({parser, {ext_epp, parse_file, [{passes, [ext_tokenline_pp, ext_rawstring_pp]}, {scan_options, [text]}]}}).\n</code></pre></div><br>在有这个之前你是这么写正则表达式的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">\"\\\\r\\\\n\\\"\"\n</code></pre></div><br>现在你可以这么写了<br><br><div class=\"highlight\"><pre><code class=\"language-text\">r\"\\r\\n\\\"\"\n</code></pre></div><br>还不快来用Erlang",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "erlang有哪些好用的库?",
                "updated_time": 1439372119,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/34500981",
                "created": 1439372119,
                "id": 34500981
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/58588651",
            "thumbnail": "",
            "created_time": 1439201177,
            "updated_time": 1439201390,
            "id": 58588651,
            "excerpt": "miniKanren的实现不就是合一和回溯么，这有什么难理解的。而且不知道比Prolog丑到哪里去了 (逃 合一看 Relational programming in miniKanren: Techniques, applications, and implementations 回溯看 Structure and Interpretation \nof Computer Programs 优美的Prolog看 Warren's Abstract Machine: A Tutorial Reconstruction ",
            "content": "miniKanren的实现不就是合一和回溯么，这有什么难理解的。而且不知道比Prolog丑到哪里去了 (逃<br><br>合一看 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//gradworks.umi.com/33/80/3380156.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Relational programming in miniKanren: Techniques, applications, and implementations<i class=\"icon-external\"></i></a><br>回溯看 <a href=\"https://link.zhihu.com/?target=http%3A//mitpress.mit.edu/sicp/full-text/book/book-Z-H-28.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Structure and Interpretation \nof Computer Programs<i class=\"icon-external\"></i></a><br>优美的Prolog看  <a href=\"https://link.zhihu.com/?target=http%3A//wambook.sourceforge.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Warren's Abstract Machine: A Tutorial Reconstruction<i class=\"icon-external\"></i></a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "能不能有人简单的解释下 miniKanren 的实现方式？",
                "updated_time": 1439200426,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/34416029",
                "created": 1439200426,
                "id": 34416029
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/58084475",
            "thumbnail": "",
            "created_time": 1438873291,
            "updated_time": 1444451504,
            "id": 58084475,
            "excerpt": "BBC已完。这就是为什么我只看半岛电视台的节目了 (逃 ------------------------- 看看人家英国的学校，碰到困惑敢于去做实验检验，尽管做实验的条件并不成熟，那也比啥事情拍拍脑袋就做决定，美其名曰顶层设计要好的多。更别说国内的学校热衷于搞什么狗屁实验班，完全没有任何实验的意思。要是你们好好做实验，教学水平至少要比现在好5倍。 If you don't run experiments before you start designing a NEW system, your ENTIRE …",
            "content": "BBC已完。这就是为什么我只看半岛电视台的节目了 (逃<br><br>-------------------------<br><br>看看人家英国的学校，碰到困惑敢于去做实验检验，尽管做实验的条件并不成熟，那也比啥事情拍拍脑袋就做决定，美其名曰顶层设计要好的多。更别说国内的学校热衷于搞什么狗屁实验班，完全没有任何实验的意思。要是你们好好做实验，教学水平至少要比现在好5倍。<br><br><blockquote><p>If you don't run experiments before you start designing a NEW system, your ENTIRE SYSTEM will be an experiment!</p><p>—— Mike Williams</p></blockquote><br>我不知道是不是时代变了。至少据我非常有限的了解，杭外是一所学风奇差的学校，比这所英国学校在节目上的表现还差多啦。上课的时候，哪里是只有自己管自己说话不听老师的，明明是有吃东西的，打瞌睡的，管自己看不知道什么书的，玩不知道什么鸟游戏的，拿手机看个NBA比分还要相互交流比赛进展的，这不算什么，还有在走廊上路上大吼大叫的，也根本就不存在每天上课都要穿校服这种事，好像只存在过周一升旗要穿傻不垃圾的西装这回事。<br><br>所谓的对老师的尊重也完全不存在啊。Dr. Jennifer至少讲了五遍才让下面的学生相信，她说应该用fine, thank you, and you回答how are you时，不是在讲笑话，要是换成节目中的老师岂不是要让所有人都去面壁了。没人觉得嘲讽老师有啥不对啊，甚至曾发生过有学生要求学校换老师的事，后来还真的给换了。高考成绩也奇差无比啊。经常吹牛说自己是杭州前X，结果多少年没有出过高考状元了？高考状元可能偶然因素比较大。可是有很多届高考总分除以占地面积在整个浙江省都是毫无悬念垫底的，这又该怎么解释呢？<br><br>杭外除了整天灌鸡汤也没多大能耐。连英语教学水平也退步得很快吧，只会整天强调再强调背课文多么有用，完全就是传销洗脑的套路么，依我看，传销洗脑的水平还比你们高那么一点。甚至有一段时间，每次课都得浪费20分钟看一篇心灵鸡汤。在很长一段时间内，整天就在为有别的学校没有的比如招生上的特权而沾沾自喜，危机意识则基本只停留在口头上。相比所占有的资源，杭外所取得的成绩根本就不值一提。有特权本来就是一件很恶心的事，当然了站着茅坑不拉屎比这更恶心。实际上所有人都很清楚，假如不发生什么天大的意外，杭外的衰败是不可避免的。<br><br>学校里的老师和学生未必会觉得自己水平比别的学校高多少，但是很多都会很无脑的认为自己在杭州算一所知名的学校，几乎所有在杭州的人都应该知道有这么一所学校，连出租车司机师傅不知道杭外在哪里都要抱怨一下。客观来讲，杭外在杭州完全就是一所毫无存在感的学校，你问我知不知道，我第一反应肯定是不知道。杭外也没出过什么知名校友，同样在杭州，看看人家杭高前段时间还出过最年轻XXX，杭外有么？所以，至少我完全不能理解为啥他们整天会觉得自己知名度很高的样子。不过，这不恰好是没落学校典型的心态嘛。<br><br>别的我不知道，就算BBC要坚持自己对中国学校的看法，把杭外这么一所正在衰落，纪律涣散，不尊重老师，没出过哪怕一个知名校友却要坚持认为自己是名校的学校，放到里面是非常不合适的，完全是在误导观众。我不认为在杭外教书的老师真的能做到BBC所假想的中国式教育。<br><br>当然了，这节目里面所谓的中国教育模式，根本和中国一点关系都没有。我听说过一种说法，这是普鲁士人发明的，我没有查资料，不是很确定到底这是谁发明的，总之肯定不是中国人发明的，这本身就是向西方学习的结果。现在常见的学校，差不多是普鲁士人在大约300年前发明的，在那个时代是有非常积极的意义的。在没东西吃的时候，突然每餐都能吃上垃圾食品快餐，比饿肚子强太多太多了。这也是普鲁士能强大的部分原因。这也是为什么很多国家都逐步实施了类似的教育制度。所以无论BBC要吹还是要黑，其实都和中国没多大关系。毕竟归根结底这些都是西方发明的。<br><br>这种模式最大的好处是在国家层面上能最快的速度让绝大多数人都能掌握一些基本的知识，这对一个国家来说比绝大多数人连一些基本的知识都没有可强太多了。但是，对个体来讲，采用这种方式，学习效率低的可怕。很多人会觉得这样出来会缺乏创造力什么的，恰恰是因为学习效率太低，学不到足够的知识导致的。毕竟创造那也得是站在巨人的肩膀上的，不是么？",
            "is_copyable": false,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何评价 BBC 今年播出的纪录片《Chinese School》？",
                "updated_time": 1438940163,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/34010173",
                "created": 1438665089,
                "id": 34010173
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/57346949",
            "thumbnail": "",
            "created_time": 1438416180,
            "updated_time": 1438425545,
            "id": 57346949,
            "excerpt": "我没看见论战，我只看见左耳朵耗子被玉伯吊打 ... 玉伯避而不谈任何具体问题，却一直在那里谆谆告诫大家要接地气。更为重要的是玉伯根本就不提什么是土方法，也不是没提，讲了半句就不讲了。这也就把土方法的解释权牢牢的控制在自己手里。假如你把一件事情做成了，那么你就是正确使用了土方法。假如没有，那你就是没有领会土方法的精髓。至于土方法到底该怎么定义，你最好还是不知道的好。 所谓“我待过的淘宝和支付宝两家公司，…",
            "content": "我没看见论战，我只看见左耳朵耗子被玉伯吊打 ...<br><br>玉伯避而不谈任何具体问题，却一直在那里谆谆告诫大家要接地气。更为重要的是玉伯根本就不提什么是土方法，也不是没提，讲了半句就不讲了。这也就把土方法的解释权牢牢的控制在自己手里。假如你把一件事情做成了，那么你就是正确使用了土方法。假如没有，那你就是没有领会土方法的精髓。至于土方法到底该怎么定义，你最好还是不知道的好。<br><br>所谓“我待过的淘宝和支付宝两家公司，这么多年，从来没看到小而精的团队能持久存活“，问题并不出在小而精的团队到底有没有用，而是在淘宝和支付宝根本就不可能存在小而精的团队。国内有很多垃圾公司，淘宝和支付宝就是其中的典型。他们理解的管理水平，就是谁能管的人多谁管理水平就高。就算真的存在一个软件研发管理方面的专家，他能每18个月让他管理的业务需要的人手减少一半，而redundancy增加一倍，也断然是不可能升职加薪的，不被降级并入别的团队就该谢天谢地了。既然这是一个资本的时代，一切都应该用钱来衡量。一个人在某个行业的管理水平，当然是看他能管理的业务值多少钱，他能给这项业务增加多少价值，而不是他手下直接或者间接管理多少个人啊。<br><br>不过呢，这恰恰是玉伯值得学习的地方。他可是给广大程序员指了一条明路啊。毕竟软件行业有一点好，越招人就越缺人。假如你对阿里企业文化的三大法宝(化名，倒立，破冰)有着清醒的认识，何不利用垃圾公司的管理问题，升职加薪，直到跳槽能当上至少CTO，走上人生的巅峰。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "怎么看待玉伯和左耳朵耗子之间的论战？",
                "updated_time": 1438519873,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/33406762",
                "created": 1437816116,
                "id": 33406762
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/55205393",
            "thumbnail": "",
            "created_time": 1436969120,
            "updated_time": 1436969120,
            "id": 55205393,
            "excerpt": "这真的没啥。可是很多公司招人就是看本科学历，非XXX直接就刷掉了。所以才会说考研成功无法弥补高考失败。",
            "content": "这真的没啥。可是很多公司招人就是看本科学历，非XXX直接就刷掉了。所以才会说考研成功无法弥补高考失败。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么说考研成功无法弥补高考的失败？",
                "updated_time": 1434025505,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31209907",
                "created": 1434025505,
                "id": 31209907
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/52668366",
            "thumbnail": "",
            "created_time": 1435221610,
            "updated_time": 1455546799,
            "id": 52668366,
            "excerpt": "Making Graphs Reducible with Controlled Node Splitting 这个问题好像根本就没什么人讨论。很多网上的教程在这里直接就糊弄过去了，虽然糊弄过去影响也不大。反过来看，这篇的确是必读的，因为类似的内容别的地方根本就找不到嘛 (逃",
            "content": "Making Graphs Reducible with Controlled Node Splitting<br><br>这个问题好像根本就没什么人讨论。很多网上的教程在这里直接就糊弄过去了，虽然糊弄过去影响也不大。反过来看，这篇的确是必读的，因为类似的内容别的地方根本就找不到嘛 (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "编译器后端优化有哪些经典的必读论文？",
                "updated_time": 1431415898,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30306387",
                "created": 1431415898,
                "id": 30306387
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/52184233",
            "thumbnail": "",
            "created_time": 1434894270,
            "updated_time": 1434894302,
            "id": 52184233,
            "excerpt": "f =: (/:\"1([:|.1&{))@:([:(~.,:<\"0@:#/.~)<\"0)\n f '8K8K6'\n┌─┬─┬─┐\n│8│K│6│\n├─┼─┼─┤\n│2│2│1│\n└─┴─┴─┘\n f 'A9AA4'\n┌─┬─┬─┐\n│A│9│4│\n├─┼─┼─┤\n│3│1│1│\n└─┴─┴─┘\n看这就是代码 (逃",
            "content": "<div class=\"highlight\"><pre><code class=\"language-text\">   f =: (/:\"1([:|.1&amp;{))@:([:(~.,:&lt;\"0@:#/.~)&lt;\"0)\n   f '8K8K6'\n┌─┬─┬─┐\n│8│K│6│\n├─┼─┼─┤\n│2│2│1│\n└─┴─┴─┘\n   f 'A9AA4'\n┌─┬─┬─┐\n│A│9│4│\n├─┼─┼─┤\n│3│1│1│\n└─┴─┴─┘\n</code></pre></div>看这就是代码 (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "跪求这个关于梭哈纸牌游戏的C语言算法？？",
                "updated_time": 1434897026,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31492612",
                "created": 1434882061,
                "id": 31492612
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/52130641",
            "thumbnail": "",
            "created_time": 1434861563,
            "updated_time": 1434865451,
            "id": 52130641,
            "excerpt": "现在你们理解什么叫互联网风口上的猪了吧 现在你们理解为什么要GPL了吧 而且我早就预告过了，你们还非要去买 ... 高级黑客是如何入侵计算机系统的？ - 知乎用户的回答 ",
            "content": "现在你们理解什么叫互联网风口上的猪了吧<br><br>现在你们理解为什么要GPL了吧<br><br>而且我早就预告过了，你们还非要去买 ...<br><br><a href=\"http://www.zhihu.com/question/20419457/answer/21278761\" class=\"internal\">高级黑客是如何入侵计算机系统的？ - 知乎用户的回答</a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何看待小米路由进行 404 网页劫持？",
                "updated_time": 1434893756,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30358197",
                "created": 1431574063,
                "id": 30358197
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/52130406",
            "thumbnail": "",
            "created_time": 1434861426,
            "updated_time": 1434861426,
            "id": 52130406,
            "excerpt": "上面的回答多少都有些问题吧。 CGI是HTTP Server和一个独立的进程之间的协议，把HTTP Request的Header设置成进程的环境变量，HTTP Request的正文设置成进程的标准输入，而进程的标准输出就是HTTP Response包括Header和正文。 FASTCGI是和HTTP协议类似的概念。无非就是规定了在同一个TCP连接里怎么同时传多个HTTP连接。这实际上导致了个问题，有个HTTP连接传个大文件不肯让出FASTCGI连接，在同一个FASTCGI连接里的其他HTTP连接就…",
            "content": "上面的回答多少都有些问题吧。<br><br>CGI是HTTP Server和一个独立的进程之间的协议，把HTTP Request的Header设置成进程的环境变量，HTTP Request的正文设置成进程的标准输入，而进程的标准输出就是HTTP Response包括Header和正文。<br><br>FASTCGI是和HTTP协议类似的概念。无非就是规定了在同一个TCP连接里怎么同时传多个HTTP连接。这实际上导致了个问题，有个HTTP连接传个大文件不肯让出FASTCGI连接，在同一个FASTCGI连接里的其他HTTP连接就傻了。所以Lighttpd? 引入了 X-SENDFILE 。<br><br>php-fpm就相当于是Apache+mod_php。无非php-fpm自带了FASTCGI Server，而Apache是HTTP Server。<br><br>那个WSGI和这个问题没啥关系吧。WSGI这个只是Python内部的一个接口。无论你前面是FASTCGI，HTTP，SCGI，uWSGI等协议，你的FASTCGI/HTTP/SCGI/uWSGI Server都以相同的参数格式去调用一个函数，这样你用Python写的Web应用并不需要修改代码，就可以运行在不同的Server后面了。无非CGI协议是进程间的，而WSGI是进程内的。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何通俗地解释 CGI、FastCGI、php-fpm 之间的关系？",
                "updated_time": 1438192514,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30672017",
                "created": 1432566810,
                "id": 30672017
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/52075822",
            "thumbnail": "",
            "created_time": 1434809679,
            "updated_time": 1434813337,
            "id": 52075822,
            "excerpt": "这个竟然不是Opt-In，而是Opt-Out的，不小心把服务搞挂了，算谁的责任？参考：警惕阿里云的云盾扫描占用大量CPU 竟然还需要有进程在客户虚拟机里面运行，参考 阿里云服务器查杀关闭云盾进程 这个云盾是来搞笑的吧 ... ------------ 竟然还有给这种行为洗地的。毫无疑问题主是中了阿里云全家桶嘛 ...",
            "content": "这个竟然不是Opt-In，而是Opt-Out的，不小心把服务搞挂了，算谁的责任？参考：<a href=\"https://link.zhihu.com/?target=http%3A//www.cmhello.com/aliyun-yundun.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">警惕阿里云的云盾扫描占用大量CPU<i class=\"icon-external\"></i></a><br><br>竟然还需要有进程在客户虚拟机里面运行，参考<a href=\"https://link.zhihu.com/?target=http%3A//www.kejianet.cn/aliyundun/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 阿里云服务器查杀关闭云盾进程<i class=\"icon-external\"></i></a><br><br>这个云盾是来搞笑的吧 ...<br><br>------------<br><br>竟然还有给这种行为洗地的。毫无疑问题主是中了阿里云全家桶嘛 ...",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "阿里云的云盾定期对云主机监听端口做SQL注入攻击，这是业界的通常做法吗，有何风险？",
                "updated_time": 1434167268,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31256812",
                "created": 1434167268,
                "id": 31256812
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/51725555",
            "thumbnail": "",
            "created_time": 1434550805,
            "updated_time": 1434550805,
            "id": 51725555,
            "excerpt": "The fundamental cause of the trouble is that in the modern world the \nstupid are cocksure while the intelligent are full of doubt.—Bertrand Russell",
            "content": "<blockquote><p>The fundamental cause of the trouble is that in the modern world the \nstupid are cocksure while the intelligent are full of doubt.</p><p>—Bertrand Russell</p></blockquote>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "你有什么道理后悔没有早点知道？",
                "updated_time": 1460198068,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23819007",
                "created": 1400413521,
                "id": 23819007
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/51375359",
            "thumbnail": "",
            "created_time": 1434295262,
            "updated_time": 1434295295,
            "id": 51375359,
            "excerpt": "当然是 HitchHiker's Guide to the Galaxy ，因为 里面包括了Answer to the ultimate question of life, the universe and everything。",
            "content": "当然是 HitchHiker's Guide to the Galaxy ，因为 里面包括了Answer to the ultimate question of life, the universe and everything。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "二十岁这个年龄应该读什么书？",
                "updated_time": 1433934728,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31165590",
                "created": 1433934728,
                "id": 31165590
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/51316232",
            "thumbnail": "",
            "created_time": 1434259004,
            "updated_time": 1434266386,
            "id": 51316232,
            "excerpt": "看到蓝色来冒充Python专家了，特来批判一番。这里首先是黑魔法，不然有些问题就解释不清楚啦。 >>> __builtins__\n<module '__builtin__' (built-in)>\n>>> pow(2,2)\n4\n>>> __builtins__ = None\n>>> pow(2,2)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nNameError: name 'pow' is not defined\n>>> __builtins__ = {'pow':1}\n>>> pow\n1\n>>>\n 只是模块载入默认填充的__builtins__刚好是那个__builtin…",
            "content": "看到蓝色来冒充Python专家了，特来批判一番。这里首先是黑魔法，不然有些问题就解释不清楚啦。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; __builtins__\n&lt;module '__builtin__' (built-in)&gt;\n&gt;&gt;&gt; pow(2,2)\n4\n&gt;&gt;&gt; __builtins__ = None\n&gt;&gt;&gt; pow(2,2)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'pow' is not defined\n&gt;&gt;&gt; __builtins__ = {'pow':1}\n&gt;&gt;&gt; pow\n1\n&gt;&gt;&gt;\n</code></pre></div><br>只是模块载入默认填充的__builtins__刚好是那个__builtin__模块。所以，你想不手动导入floor也不是不可行的。<br><br>--------------------------<br><br>非要说编译器会把pow替换掉。来来来，我dump出来给你看<br><br>Python代码<br><br><div class=\"highlight\"><pre><code class=\"language-text\">print pow(2,2)\n</code></pre></div><br>编译结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">000000       03 f3 0d 0a              MAGIC\n000004       b1 22 7d 55              2015-06-14 06:44:01\n000008       63                       CODE\n000009       00 00 00 00                argcount: 0\n00000d       00 00 00 00                nlocals: 0\n000011       03 00 00 00                stacksize: 3\n000015       40 00 00 00                flags: NOFREE\n000019                                  code:\n000019       73 12 00 00 00               STRING&lt;length: 0x12&gt;:\n00001e       65 00 00                       LOAD_NAME                0x0000\n000021       64 00 00                       LOAD_CONST               0x0000\n000024       64 00 00                       LOAD_CONST               0x0000\n000027       83 02 00                       CALL_FUNCTION            0x0002\n00002a       47                             PRINT_ITEM\n00002b       48                             PRINT_NEWLINE\n00002c       64 01 00                       LOAD_CONST               0x0001\n00002f       53                             RETURN_VALUE\n000030                                  consts:\n000030       28 02 00 00 00               TUPLE&lt;n: 2&gt;: \n000035       69 02 00 00 00                 INT 2\n00003a       4e                             NONE\n00003b                                  names:\n00003b       28 01 00 00 00               TUPLE&lt;n: 1&gt;: \n000040       74 03 00 00 00                 INTERNED&lt;length: 0x3&gt;:\n000045       70 6f 77                         pow\n000048                                  varnames:\n000048       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n00004d                                  freevars:\n00004d       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n000052                                  cellvars:\n000052       28 00 00 00 00               TUPLE&lt;n: 0&gt;: \n000057                                  filename:\n000057       73 0a 00 00 00               STRING&lt;length: 0xa&gt;:\n00005c       65 78 61 6d 70 6c 65 2e        example.\n000064       70 79                          py\n000066                                  name:\n000066       74 08 00 00 00               INTERNED&lt;length: 0x8&gt;:\n00006b       3c 6d 6f 64 75 6c 65 3e        &lt;module&gt;\n000073       03 00 00 00                firstlineno: 0x3\n000077                                  lnotab:\n000077       73 00 00 00 00               STRING&lt;length: 0x0&gt;:\n00007c\n</code></pre></div><br>就是这个 LOAD_NAME有黑魔法<br><br>------------------------<br><br>手动eval<br><br><div class=\"highlight\"><pre><code class=\"language-text\">&gt;&gt;&gt; eval(\"pow\")\n&lt;built-in function pow&gt;\n&gt;&gt;&gt; eval(\"pow\", {'__builtins__':{\"pow\":2}})\n2\n&gt;&gt;&gt; __builtins__ = {\"eval\":eval,\"pow\":1}\n&gt;&gt;&gt; pow\n1\n&gt;&gt;&gt; eval(\"pow\")\n1\n&gt;&gt;&gt; eval(\"pow\", {'__builtins__':{\"pow\":2}})\n2\n&gt;&gt;&gt; eval(\"lambda: pow\", {'__builtins__':{\"pow\":2}})()\n2\n&gt;&gt;&gt; eval(\"floor\", {'__builtins__':{\"floor\":3}})\n3\n</code></pre></div><br>这下总该明白了吧 ... 这个__builtins__就是你在eval时，传进去的globals里的__builtins__决定的。你想有floor就能有floor<br><br>编译器才不管你是不是builtin的函数呢。编译器事实上也管不着，只要允许有 import * 存在，鬼知道这个函数是不是builtin",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "在 Python 中，为什么 pow 这样的函数可以直接调用，而 floor 这样的函数得先导入模块？",
                "updated_time": 1434243385,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31259978",
                "created": 1434175505,
                "id": 31259978
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/50935090",
            "thumbnail": "",
            "created_time": 1433990924,
            "updated_time": 1433991209,
            "id": 50935090,
            "excerpt": "不要使用什么堡垒机，那个完全是个伪安全的玩意儿。堡垒机本身就是个SPOF。 不要觉得BAT就一定做的很好，他们只是too big to fail而已 正确的方法是 零绝不允许用密码登陆，必须用公钥登陆 一要建立个人帐号的概念，必须做到一人一个帐号，绝不允许多个人共用一个个人帐号 二是公共帐号(用来部署服务)要和个人帐号分开，公共帐号绝不允许直接登陆 三打开SSH Agent Forwarding的功能，这样无论怎么跳都是没问题的。 四配置sudo规…",
            "content": "不要使用什么堡垒机，那个完全是个伪安全的玩意儿。堡垒机本身就是个SPOF。<br><br>不要觉得BAT就一定做的很好，他们只是too big to fail而已<br><br>正确的方法是<br><br>零绝不允许用密码登陆，必须用公钥登陆<br>一要建立个人帐号的概念，必须做到一人一个帐号，绝不允许多个人共用一个个人帐号<br>二是公共帐号(用来部署服务)要和个人帐号分开，公共帐号绝不允许直接登陆<br>三打开SSH Agent Forwarding的功能，这样无论怎么跳都是没问题的。<br>四配置sudo规则使得个人帐号的用户能进入他有权限的公共帐号用户<br>五把SELinux规则配置起来，不允许的操作直接干掉，允许但是有危险的操作全记录下来<br>六把SSH登陆日志，sudo的日志，SELinux的warning什么的通通都发给实时事件流处理平台去，该咋分析就咋分析<br>七有些不需要完全公共帐号权限的操作，建议以unix domain socket的形式提供给个人帐号用户使用(因为有black magic可以检查权限)。<br><br>等这些都建立起来了，再来考虑什么安全加固。<br><br>同时，要赶紧把内部的PaaS搭起来，从源头上就把需要直接登陆机器的需求给减下来。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "运维人员如何搭建堡垒机（跳板机）？",
                "updated_time": 1433949323,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/31175397",
                "created": 1433949323,
                "id": 31175397
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/49268298",
            "thumbnail": "",
            "created_time": 1432793634,
            "updated_time": 1432803433,
            "id": 49268298,
            "excerpt": "明明是找不到工作的水平 ... ---------------------------------------------------------- 看看Diagram of π-Calculus ，不仅有Tokenizer, Parser，还额外赠送pi-calculus解释器，以及对运行过程逐步画图 ... 你觉得这水平能高到哪里去 ----------------------------------------------------------- Update: 反对 比如nfa->dfa到最小dfa，LL/LR/SLR/LALR，能做到手写标准的正则引擎，山寨yacc的水平的话，不潜下心来钻研个一年…",
            "content": "明明是找不到工作的水平 ...<br><br>----------------------------------------------------------<br><br>看看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//bhuztez.github.io/pi-diagram/\" target=\"_blank\" rel=\"nofollow noreferrer\">Diagram of π-Calculus<i class=\"icon-external\"></i></a>，不仅有Tokenizer, Parser，还额外赠送pi-calculus解释器，以及对运行过程逐步画图 ... 你觉得这水平能高到哪里去<br><br>-----------------------------------------------------------<br><br>Update: <br><br>反对<br><br><blockquote>比如nfa-&gt;dfa到最小dfa，LL/LR/SLR/LALR，能做到手写标准的正则引擎，山寨yacc的水平的话，不潜下心来钻研个一年半载估计是没戏。能做到这个水平，全国任何公司的offer肯定都是任意挑选的。<br></blockquote><br>这个并不难。要花多少时间取决于你想做个凑合能用的，还是Bug-to-Bug Compatible的。前者并不要多久，后者真的需要很长时间。<br><br>你看上面那个链接里的例子，就是自己山寨了个凑合能用的 lex/yacc 。显然我还没找到工作。<br><br><blockquote>而编译器后端的代码生成、数据流分析、寄存器分配这些怎么就没见多少人谈论？还不是因为这部分跟前端相比难得多<br></blockquote><br>数据流分析，实际上和前端是一样的。参考: <a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19945892\">编译原理不就是Datalog嘛 - impress your cat - 知乎专栏</a> 。大部分内容都可以直接从Datalog derive出来。<br><br>至于寄存器分配，已经有人证明了，SSA下的寄存器分配，用graph coloring的话，实际上是在对一个chordal graph着色，也就是比graph coloring问题要简单。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "会写 Parser、Tokenizer 是什么水平？",
                "updated_time": 1432836363,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30746665",
                "created": 1432791984,
                "id": 30746665
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/48501541",
            "thumbnail": "",
            "created_time": 1432186950,
            "updated_time": 1432186950,
            "id": 48501541,
            "excerpt": "参与阿里巴巴集团新员工的破冰是一种什么样的体验？ - X是一种怎样的体验 ",
            "content": "<a href=\"http://www.zhihu.com/question/29759817\" class=\"internal\">参与阿里巴巴集团新员工的破冰是一种什么样的体验？ - X是一种怎样的体验</a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何评价马云在全球女性创业者大会上的演讲？",
                "updated_time": 1432142968,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30541572",
                "created": 1432139161,
                "id": 30541572
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/48151172",
            "thumbnail": "",
            "created_time": 1431916512,
            "updated_time": 1435404824,
            "id": 48151172,
            "excerpt": "主要原因是Ruby on Rails安利水平更高。Django那帮人竟然意识不到自己安利水平不行，还老是用professional来自我安慰也是醉了。 Ruby把monkey patching吹成是metaprogramming。然而吹的再厉害，在日本以外，根本就没有什么人用。原因很简单，没有英文文档是完全没机会火起来的。Ruby的火，很大程度是被Rails带起来的。 Rails为什么要选择Ruby? 相比Node.js说不用callback会带来错觉，Rails里则少了点什么，这也是为啥Rails风头最…",
            "content": "主要原因是Ruby on Rails安利水平更高。Django那帮人竟然意识不到自己安利水平不行，还老是用professional来自我安慰也是醉了。<br><br>Ruby把monkey patching吹成是metaprogramming。然而吹的再厉害，在日本以外，根本就没有什么人用。原因很简单，没有英文文档是完全没机会火起来的。Ruby的火，很大程度是被Rails带起来的。<br><br>Rails为什么要选择Ruby? 相比Node.js说不用callback会带来错觉，Rails里则少了点什么，这也是为啥Rails风头最终会被Node.js抢过去。而Ruby里有类似的东西。Ruby强调编程本身就是快乐的。尽管实际上并没有什么用，你愿意痛苦的写20分钟把问题搞定，还是快乐的写两个小时把问题搞定。可是这种讲感觉的东西是没法反驳的，非常适合用来安利。你也看到了，Rails有非常强大的道路自信，从一开始就认为自己是全宇宙最正确的做法。凡是DHH说的都是对的。其他框架都是有这样那样的毛病的。<br><br>也因为Ruby提倡monkey patching，一不小心就会把自己坑死，以便体现作者能吞下玻璃而不伤身体的魔法。即便用了大量monkey patching，代码依旧太长了，拿来宣传一点用都没有。这也是可以补救的，用scaffolding把要写的代码先生成出来(这和他要喷的Java有啥不同吗？)，代码长步骤多也不要紧，可以录视频嘛，顺便鼓励脑残粉说多录视频可以极大的提高你的编程水平。<br><br>没有爹怎么办？可以让o'reilly把作者评为hacker of the year。把各种不管何种程度，反正只要用过Rails的公司名，都列在首页上。Django在这点上就做的非常不好，一直以professional的原因拒绝把非报业网站列在首页上，直到完全没人用Django了，才想起来还是列的好。也不肯抓住<a href=\"https://link.zhihu.com/?target=http%3A//justin.tv\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">justin.tv</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>从Rails转Django这个大新闻，把Rails批判一番。Rails社区可没少嘲讽过Django。<br><br>Rails版本号更新很勤快，4.0都出来。Django的2.0还遥遥无期呢。而且Rails每次大版本升级，都带来了大量功能更新。尽管Rails 4.0更接近Django 1.0而不是Rails 1.0。可是这样可以多曝光啊。<br><br>Django本身在Python社区就不太受欢迎，一开始认为是黑魔法太多，不够pythonic。Django在这一点上确实做的不够好，尽管是最早支持WSGI的框架之一，却是最晚把这个接口给你暴露出来的。而ORM部分代码乱的完全没法看，Bug多我就不说了，想想Rails 4.0之前有修不完的SQL注入漏洞，Django这已经算不错了。后来很多人认为Django太重量级了。然而在他们眼里轻量级的Flask，内存占用比Django多，跑分比Django慢。<br><br>-------------<br><br>Update: Flask比Django慢？参考<a href=\"https://link.zhihu.com/?target=http%3A//blog.startifact.com/posts/morepath-from-werkzeug-to-webob.html%23\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Morepath: from Werkzeug to WebOb<i class=\"icon-external\"></i></a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么出现了ruby on rails 而没有出现python on pyres?",
                "updated_time": 1431902261,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30455009",
                "created": 1431902261,
                "id": 30455009
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/47692658",
            "thumbnail": "",
            "created_time": 1431521763,
            "updated_time": 1431521763,
            "id": 47692658,
            "excerpt": "I am the loser. I am serious.",
            "content": "I am the loser. I am serious.",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "「我不在乎输赢，我就是认真」用英语怎么翻译？",
                "updated_time": 1401986877,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23924057",
                "created": 1401148835,
                "id": 23924057
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/47231837",
            "thumbnail": "",
            "created_time": 1431154526,
            "updated_time": 1431154701,
            "id": 47231837,
            "excerpt": "很多人在使用Dialyzer时都可能会碰到一点小问题。主要原因是Dialyzer太能吃CPU了，特别是一开始建立plt文件时。 所以，特别建议，一定不要强制把HiPE关掉。按Type Specifications and Erlang 的建议，一个个来，别一次把所有标准库都选上。即便如此，假如你的CPU核数不是超级多，还是很容易开始之后直接卡死。建议比如用 +S 1:1 限制Dialyzer只用一个CPU核心。 不然CPU 100%个大半个小时也是很可能的 ... 以上才是我想答的内容 --…",
            "content": "很多人在使用Dialyzer时都可能会碰到一点小问题。主要原因是Dialyzer太能吃CPU了，特别是一开始建立plt文件时。<br><br>所以，特别建议，一定不要强制把HiPE关掉。按<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//learnyousomeerlang.com/dialyzer\" target=\"_blank\" rel=\"nofollow noreferrer\">Type Specifications and Erlang<i class=\"icon-external\"></i></a>的建议，一个个来，别一次把所有标准库都选上。即便如此，假如你的CPU核数不是超级多，还是很容易开始之后直接卡死。建议比如用 +S 1:1 限制Dialyzer只用一个CPU核心。<br><br>不然CPU 100%个大半个小时也是很可能的 ...<br><br>以上才是我想答的内容<br><br>------------------<br><br>你只是用一下Dialyzer没必要完全理解那些论文的，那是讲怎么自己写一个Dialyzer之类的工具的。<br><br>不只是Dialyzer，还有typer，在不少情形能直接就帮你把类型分析出来。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何理解和使用Erlang的Dialyzer?",
                "updated_time": 1431153618,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30223446",
                "created": 1431153618,
                "id": 30223446
            }
        }
    ]
}