{
    "paging": {
        "is_end": false,
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=340",
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=380",
        "is_start": false,
        "totals": 442
    },
    "data": [
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/47174738",
            "thumbnail": "",
            "created_time": 1431095762,
            "updated_time": 1431095762,
            "id": 47174738,
            "excerpt": "相比之下Erlang的字符串处理就要简单粗暴的多了。 不妨先直接无视各种不常用的情况。 iolist的类型定义可以写成 -type iolist() :: binary() | [iolist()].\n 在拼接字符串的时候完全不Copy。直接构造一个新的list就完了。 IOList3 = [IOList1, IOList2].\n 反正 gen_tcp:send 什么的都能接受，直接就当 iovec 发出去了嘛。 我就是要把两个binary拼起来怎么办？比如 Bin3 = <<Bin1/binary, Bin2/binary>>\n Erlang会机智的计算出Bin…",
            "content": "相比之下Erlang的字符串处理就要简单粗暴的多了。<br><br>不妨先直接无视各种不常用的情况。<br><br>iolist的类型定义可以写成<br><br><div class=\"highlight\"><pre><code class=\"language-text\">-type iolist() :: binary() | [iolist()].\n</code></pre></div><br>在拼接字符串的时候完全不Copy。直接构造一个新的list就完了。<br><br><div class=\"highlight\"><pre><code class=\"language-text\">IOList3 = [IOList1, IOList2].\n</code></pre></div><br>反正 gen_tcp:send 什么的都能接受，直接就当 iovec 发出去了嘛。<br><br>我就是要把两个binary拼起来怎么办？比如<br><br><div class=\"highlight\"><pre><code class=\"language-text\">Bin3 = &lt;&lt;Bin1/binary, Bin2/binary&gt;&gt;\n</code></pre></div><br>Erlang会机智的计算出Bin1, Bin2 长度之和，先占好坑，再把字符串都复制进去。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "字符串在各类语言里是怎么处理的?",
                "updated_time": 1430837312,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30106980",
                "created": 1430792356,
                "id": 30106980
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/46949404",
            "thumbnail": "",
            "created_time": 1430917160,
            "updated_time": 1430917160,
            "id": 46949404,
            "excerpt": "他说的没错。但是话说一半就不好啦。 正是因为硬件太难，所以硬件的路是越来越窄的。硬件难就难在实验成本太高，周期太长。相比之下软件就灵活多了。复杂的东西只要有可能都会放到软件去做。所以，大家都看到了，数字电路把模拟电路边缘化了，FPGA挤占了很多数字电路的空间，Ethernet逼死了ATM，接下来，SDN也很可能让交换机硬件制造变得无利可图。单纯从实验效果看，通用的必然比不过专用的。但是你架不住大路货便宜啊，同样的…",
            "content": "他说的没错。但是话说一半就不好啦。<br><br>正是因为硬件太难，所以硬件的路是越来越窄的。硬件难就难在实验成本太高，周期太长。相比之下软件就灵活多了。复杂的东西只要有可能都会放到软件去做。所以，大家都看到了，数字电路把模拟电路边缘化了，FPGA挤占了很多数字电路的空间，Ethernet逼死了ATM，接下来，SDN也很可能让交换机硬件制造变得无利可图。单纯从实验效果看，通用的必然比不过专用的。但是你架不住大路货便宜啊，同样的价格大路货都能买到比你好几个等级的了，做出的效果自然比你好啦。<br><br>因此按目前的形势，最终剩下的必然是利润率高门槛也非常高的专业设备制造商，靠量大赚钱的通用设备制造商，其他的都是软件的地盘了。前两个市场要想进入首先得很有钱，而且也不需要很多人。从找工作角度讲，越软的岗位越多。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "怎么反驳大学老师说做软件很简单的观点？",
                "updated_time": 1430298987,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/29943074",
                "created": 1430206952,
                "id": 29943074
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/46839467",
            "thumbnail": "",
            "created_time": 1430831789,
            "updated_time": 1430831789,
            "id": 46839467,
            "excerpt": "完全是胡闹的水平。而且已经积重难返了。知乎最大的问题是不按(zun)常(zhong)理(chang)出(shi)牌。一开始选Python肯定不是因为Python有多么好，或者他们Python用的多么熟练。而是因为Quora用的是Python。选Tornado必然是类似的原因。就算你能说出Tornado的无数优点，你肯定也会用Cyclone而不是Tornado的。所以选Tornado肯定是因为Facebook这个大品牌。数据库选MySQL几乎就堵死了做任何LBS尝试的可能。所以，最后的结果是表面上看…",
            "content": "完全是胡闹的水平。而且已经积重难返了。知乎最大的问题是不按(zun)常(zhong)理(chang)出(shi)牌。一开始选Python肯定不是因为Python有多么好，或者他们Python用的多么熟练。而是因为Quora用的是Python。选Tornado必然是类似的原因。就算你能说出Tornado的无数优点，你肯定也会用Cyclone而不是Tornado的。所以选Tornado肯定是因为Facebook这个大品牌。数据库选MySQL几乎就堵死了做任何LBS尝试的可能。所以，最后的结果是表面上看到的是无比高的逼格。实际上是在自我催眠。和那些为了推卸责任的官僚的做法有异曲同工之妙。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "知乎的服务器架构在业界处于什么水平？和同规模的创业公司 (Startup) 相比较如何？",
                "updated_time": 1430879481,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/30109084",
                "created": 1430797907,
                "id": 30109084
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/46791712",
            "thumbnail": "",
            "created_time": 1430796668,
            "updated_time": 1430796668,
            "id": 46791712,
            "excerpt": "鄒忌脩八尺有餘身體昳麗朝服衣冠窺鏡謂其妻曰我孰與城北徐公美其妻曰君美甚徐公何能及公也城北徐公齊國之美麗者也忌不自信而復問其妾曰吾孰與徐公美妾曰徐公何能及君也旦日客從外來與坐談問之客曰吾與徐公孰美客曰徐公不若君之美也明日徐公來孰視之自以為不如窺鏡而自視又弗如遠甚暮寢而思之曰吾妻之美我者私我也妾之美我者畏我也客之美我者欲有求於我也",
            "content": "<blockquote>鄒忌脩八尺有餘身體昳麗朝服衣冠窺鏡謂其妻曰我孰與城北徐公美其妻曰君美甚徐公何能及公也城北徐公齊國之美麗者也忌不自信而復問其妾曰吾孰與徐公美妾曰徐公何能及君也旦日客從外來與坐談問之客曰吾與徐公孰美客曰徐公不若君之美也明日徐公來孰視之自以為不如窺鏡而自視又弗如遠甚暮寢而思之曰吾妻之美我者私我也妾之美我者畏我也客之美我者欲有求於我也</blockquote>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "男朋友什么都懂，完全没办法在智商上压制他，怎么办？",
                "updated_time": 1447739203,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23192719",
                "created": 1395979233,
                "id": 23192719
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/45950234",
            "thumbnail": "",
            "created_time": 1430039958,
            "updated_time": 1430041992,
            "id": 45950234,
            "excerpt": "谢邀。他这个说法是错的，后来已经更正啦 \n\nErlang has got all these things. It's got isolation, it's got \npolymorphism and it's got pure messaging. From that point of view, we \nmight say it's the only object oriented language and perhaps I was a bit\n premature in saying that object oriented languages are about. You can \ntry it and see it for yourself. ——Ralph Johnson, Joe Armstrong on the State … ",
            "content": "谢邀。他这个说法是错的，后来已经更正啦<br><br><blockquote>\n\nErlang has got all these things. It's got isolation, it's got \npolymorphism and it's got pure messaging. From that point of view, we \nmight say it's <i>the only object oriented language</i> and perhaps <u>I was a bit\n premature in saying that object oriented languages are about</u>. You can \ntry it and see it for yourself.<br>——<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.infoq.com/interviews/johnson-armstrong-oop\" target=\"_blank\" rel=\"nofollow noreferrer\">Ralph Johnson, Joe Armstrong on the State of OOP<i class=\"icon-external\"></i></a></blockquote><br>Erlang只适合用来写业务逻辑。因为Erlang是为Control Plane设计的，为低延时牺牲吞吐量。但是大部分语言看上去都是为了提高吞吐量而设计的，结果连吞吐量也拼不过Erlang，竟然还有脸说Erlang不适合写业务逻辑。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何看待Erlang之父Joe Armstrong觉得OO编程很烂？",
                "updated_time": 1430035262,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/29888990",
                "created": 1430029505,
                "id": 29888990
            }
        },
        {
            "type": "answer",
            "is_collapsed": true,
            "url": "https://www.zhihu.com/api/v4/answers/45870798",
            "thumbnail": "",
            "created_time": 1429960473,
            "updated_time": 1429960473,
            "id": 45870798,
            "excerpt": "难道不是互相吐槽对方不懂概率吗？ (逃",
            "content": "难道不是互相吐槽对方不懂概率吗？ (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "机器学习专家与统计学家观点上有哪些不同？",
                "updated_time": 1429419357,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/29687860",
                "created": 1429419357,
                "id": 29687860
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/45289021",
            "thumbnail": "",
            "created_time": 1429452516,
            "updated_time": 1429452672,
            "id": 45289021,
            "excerpt": "有个未经证实的传言。当年Joe Armstrong因为在UNIX上的Smalltalk一GC就是一下午，实在忍不可忍，去订了一台Smalltalk Machine。结果快递公司花了几个月才把货送到，这个时候Joe Armstrong他们已经用Prolog开发出后来成为Erlang的原型了。后来这台机器不知道为啥就转给Ivar Jacobson去玩了。在Smalltalk的基础上，Ivar Jacobson和另外两位老爷爷一起发明了UML。UML大法非常好，后来爱立信在开发新一代产品时，决定主要采用C++和UM…",
            "content": "有个未经证实的传言。当年Joe Armstrong因为在UNIX上的Smalltalk一GC就是一下午，实在忍不可忍，去订了一台Smalltalk Machine。结果快递公司花了几个月才把货送到，这个时候Joe Armstrong他们已经用Prolog开发出后来成为Erlang的原型了。后来这台机器不知道为啥就转给Ivar Jacobson去玩了。在Smalltalk的基础上，Ivar Jacobson和另外两位老爷爷一起发明了UML。UML大法非常好，后来爱立信在开发新一代产品时，决定主要采用C++和UML。结果开发了N年也没开发出来。无奈之下，抱着死马当活马医的心态，决定试试Erlang，竟然顺利完成了，也就有了AXD301，竟然卖出去了，还赚到钱了。<br><br>不过上面内容不是重点，我要提醒你的是Erlang并不是函数式语言。Erlang是OO语言。<br><br>APL家族才能算是函数式语言。显然他们不需要考虑工程问题。因为一切程序用APL都只需要一行就能写完了。反正只有一行，背都把它背下来了。你常用的程序也就不到100个，你趁小时候记忆力好的时候，把这些个程序都背下来，要用的时候随时输一遍就好了，反正就只有一行。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "函数式编程如何工程化？",
                "updated_time": 1382234083,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/21849253",
                "created": 1382234083,
                "id": 21849253
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/45128651",
            "thumbnail": "",
            "created_time": 1429319422,
            "updated_time": 1429319471,
            "id": 45128651,
            "excerpt": "这都是被逼的。Job Description里有哪些buzzword都在简历里抄一遍，上面要求X年以上经验，你就写个X年，你不一定非要写X年工作经验，你可以写有X年使用ZZZ的经验，不然简历根本就没人看，感觉是好像有个正则表达式在过滤一样，就检查一下里面有没有出现各种buzzword以及X年，简历没人看你写的再准确有屁用啊。",
            "content": "这都是被逼的。Job Description里有哪些buzzword都在简历里抄一遍，上面要求X年以上经验，你就写个X年，你不一定非要写X年工作经验，你可以写有X年使用ZZZ的经验，不然简历根本就没人看，感觉是好像有个正则表达式在过滤一样，就检查一下里面有没有出现各种buzzword以及X年，简历没人看你写的再准确有屁用啊。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "程序员简历掺水是否比较普遍?",
                "updated_time": 1430482247,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/29630065",
                "created": 1429233153,
                "id": 29630065
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/45088943",
            "thumbnail": "",
            "created_time": 1429269364,
            "updated_time": 1429269364,
            "id": 45088943,
            "excerpt": "谢邀 代码 #!/usr/bin/env python2\n\nfor n in xrange(10):\n p = 1\n print p,\n\n for k in xrange(1,n+1):\n p = p * (n+1-k) / k\n print p,\n\n print\n 结果 1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1\n1 6 15 20 15 6 1\n1 7 21 35 35 21 7 1\n1 8 28 56 70 56 28 8 1\n1 9 36 84 126 126 84 36 9 1\n (逃",
            "content": "谢邀<br><br>代码<br><div class=\"highlight\"><pre><code class=\"language-text\">#!/usr/bin/env python2\n\nfor n in xrange(10):\n    p = 1\n    print p,\n\n    for k in xrange(1,n+1):\n        p = p * (n+1-k) / k\n        print p,\n\n    print\n</code></pre></div><br>结果<br><br><div class=\"highlight\"><pre><code class=\"language-text\">1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1\n1 6 15 20 15 6 1\n1 7 21 35 35 21 7 1\n1 8 28 56 70 56 28 8 1\n1 9 36 84 126 126 84 36 9 1\n</code></pre></div><br>(逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "杨辉三角如何不用数组在编程中实现？",
                "updated_time": 1426989709,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28948010",
                "created": 1426989709,
                "id": 28948010
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/43791904",
            "thumbnail": "",
            "created_time": 1428068818,
            "updated_time": 1428068818,
            "id": 43791904,
            "excerpt": "https://pythonhosted.org/Whoosh/ ",
            "content": "<a href=\"https://link.zhihu.com/?target=https%3A//pythonhosted.org/Whoosh/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pythonhosted.org/Whoosh</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "做一个简单的搜索引擎，需要哪些知识和技术？",
                "updated_time": 1428048472,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/29271575",
                "created": 1428048472,
                "id": 29271575
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/42743911",
            "thumbnail": "",
            "created_time": 1427078583,
            "updated_time": 1427079253,
            "id": 42743911,
            "excerpt": "你可以在后面几行代码 sumtree2 = sumtree\nsumtree = None\n 再运行一下看看会发生什么 这实际上是一个作用域的问题。数学上的递归其实你一样也不理解。不然你告诉我数学公式里作用域规则是怎么样的？答不出来吧。我也答不出来，没事，很多号称专业研究数学的也不能立即答上来 (逃",
            "content": "你可以在后面几行代码<br><br><div class=\"highlight\"><pre><code class=\"language-text\">sumtree2 = sumtree\nsumtree = None\n</code></pre></div><br>再运行一下看看会发生什么<br><br>这实际上是一个作用域的问题。数学上的递归其实你一样也不理解。不然你告诉我数学公式里作用域规则是怎么样的？答不出来吧。我也答不出来，没事，很多号称专业研究数学的也不能立即答上来 (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "关于python递归的逻辑困惑？",
                "updated_time": 1427039330,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28966774",
                "created": 1427039068,
                "id": 28966774
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/42599775",
            "thumbnail": "",
            "created_time": 1426920544,
            "updated_time": 1426920544,
            "id": 42599775,
            "excerpt": "按计算器 6的阶乘除以自然常数 四舍五入 就得到了答案 当然了这个数字太小了，不能充分体现这种按计算器方法的优势",
            "content": "按计算器 6的阶乘除以自然常数 四舍五入 就得到了答案<br><br>当然了这个数字太小了，不能充分体现这种按计算器方法的优势",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "错排问题求解？",
                "updated_time": 1426941652,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25872094",
                "created": 1412842789,
                "id": 25872094
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/42539018",
            "thumbnail": "",
            "created_time": 1426849049,
            "updated_time": 1426849776,
            "id": 42539018,
            "excerpt": "首先不要认为你真的搞的定时间戳的问题，能不依赖时间戳就尽量不要依赖。都用线程号了，干脆每个线程弄个计数器算了 其次，全局唯一，不可预测，生成效率，只能选2个。我有一个精妙的证明，但是这里写不下 (逃",
            "content": "首先不要认为你真的搞的定时间戳的问题，能不依赖时间戳就尽量不要依赖。都用线程号了，干脆每个线程弄个计数器算了<br><br>其次，全局唯一，不可预测，生成效率，只能选2个。我有一个精妙的证明，但是这里写不下 (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "怎样用96个bit实现一个全局唯一且不可预测的uniqueid？",
                "updated_time": 1426847132,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28911715",
                "created": 1426842760,
                "id": 28911715
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/42353211",
            "thumbnail": "",
            "created_time": 1426675991,
            "updated_time": 1426676152,
            "id": 42353211,
            "excerpt": "没问题的。这个相当于提供了一个默认值。Twisted里常见的风格。没必要大惊小怪 self._buffer 赋值的时候并不会修改类变量的值",
            "content": "没问题的。这个相当于提供了一个默认值。Twisted里常见的风格。没必要大惊小怪<br><br>self._buffer 赋值的时候并不会修改类变量的值",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "python库 twisted 的 LineOnlyReceiver中_buffer是个类变量, 这样不会有问题吗?",
                "updated_time": 1426675930,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28862743",
                "created": 1426675930,
                "id": 28862743
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/42239930",
            "thumbnail": "",
            "created_time": 1426576969,
            "updated_time": 1426649254,
            "id": 42239930,
            "excerpt": "就是和 bezout identity 相关的，其实主要考点是分情况讨论，情况巨多而已 仅仅是求解，因为数字凑巧，可以reduce成Pouring Water - impress your cat - 知乎专栏 无非就是10不停往7倒，直到7满了，7不停往3倒直到3满了，3满了就往10倒，就可以了 放弃了，还是看简化的问题，自己去证明吧 Pouring Water证明 - impress your cat - 知乎专栏 ",
            "content": "就是和 bezout identity 相关的，其实主要考点是分情况讨论，情况巨多而已<br><br>仅仅是求解，因为数字凑巧，可以reduce成<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a><br><br>无非就是10不停往7倒，直到7满了，7不停往3倒直到3满了，3满了就往10倒，就可以了<br><br>放弃了，还是看简化的问题，自己去证明吧<br><br><a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19979754\" class=\"internal\">Pouring Water证明 - impress your cat - 知乎专栏</a>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？",
                "updated_time": 1426604132,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28830426",
                "created": 1426576705,
                "id": 28830426
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/41958668",
            "thumbnail": "",
            "created_time": 1426300677,
            "updated_time": 1426300677,
            "id": 41958668,
            "excerpt": "那都是骗人的，不服来算个逆矩阵试试？",
            "content": "那都是骗人的，不服来算个逆矩阵试试？",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么有人心算比计算机还快？",
                "updated_time": 1426354691,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/21997155",
                "created": 1384011747,
                "id": 21997155
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/41546822",
            "thumbnail": "",
            "created_time": 1425903369,
            "updated_time": 1425903389,
            "id": 41546822,
            "excerpt": "没救的，主要原因不是Symbian本身又啥问题，而是诺基亚董事会表现出来的判断力还不如键盘侠 ...",
            "content": "没救的，主要原因不是Symbian本身又啥问题，而是诺基亚董事会表现出来的判断力还不如键盘侠 ...",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如果有另一个平行宇宙，塞班要怎么样才能反制刚刚蹿红的 iOS？",
                "updated_time": 1425982148,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/27828667",
                "created": 1422387874,
                "id": 27828667
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/41381668",
            "thumbnail": "",
            "created_time": 1425732488,
            "updated_time": 1425732488,
            "id": 41381668,
            "excerpt": "据我所知，作为buzzword的REST的意思是正确使用HTTP的语义 ...",
            "content": "据我所知，作为buzzword的REST的意思是正确使用HTTP的语义 ...",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "怎样用通俗的语言解释什么叫 REST，以及什么是 RESTful？",
                "updated_time": 1446036675,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28557115",
                "created": 1425612583,
                "id": 28557115
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/41204895",
            "thumbnail": "",
            "created_time": 1425551698,
            "updated_time": 1425617081,
            "id": 41204895,
            "excerpt": "既然有人邀请我了，我就来了，解法参考 如何简化求解八妃问题的代码？ - 知乎用户的回答 #include <iostream>\n#include <algorithm>\n#include <bitset>\n#include <numeric>\n#include <utility>\nint main() {\n for (int queens[] = {0,1,2,3,4,5,6,7}; ::std::next_permutation(queens,queens+8); )\n if ((::std::bitset<15>(::std::accumulate(queens,queens+8, ::std::make_pair(0, 0), [](::std::pair<int, int> a, int b){ret…",
            "content": "既然有人邀请我了，我就来了，解法参考 <a class=\"internal\" href=\"http://www.zhihu.com/question/27710152/answer/37758735\">如何简化求解八妃问题的代码？ - 知乎用户的回答</a><br><br><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include &lt;iostream&gt;</span>\n<span class=\"cp\">#include &lt;algorithm&gt;</span>\n<span class=\"cp\">#include &lt;bitset&gt;</span>\n<span class=\"cp\">#include &lt;numeric&gt;</span>\n<span class=\"cp\">#include &lt;utility&gt;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">queens</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">};</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">next_permutation</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span><span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">);</span> <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bitset</span><span class=\"o\">&lt;</span><span class=\"mi\">15</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span><span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">[](</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">){</span><span class=\"k\">return</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);}).</span><span class=\"n\">first</span><span class=\"p\">).</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">bitset</span><span class=\"o\">&lt;</span><span class=\"mi\">15</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">accumulate</span><span class=\"p\">(</span><span class=\"n\">queens</span><span class=\"p\">,</span> <span class=\"n\">queens</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">[](</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">pair</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">){</span><span class=\"k\">return</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_pair</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"o\">&lt;&lt;</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"p\">))</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">second</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">);}).</span><span class=\"n\">first</span><span class=\"p\">).</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n      <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">queens</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>算上include，刚好十行，<u>充分运用了C++标准库<br></u><br>你们这些连include都没的，也好意思贴上来么？<br><br>现在问题来了，<b>15K 的工作在哪里？</b><br><br>----------------------------------------------------------------------------<br>更新<br><br>J语言 49字符<div class=\"highlight\"><pre><code class=\"language-text\">(i.(([:*./\"1[:(#=+/@:~:)\"1(+,:-)\"1)#])i.@:!A.i.)8\n</code></pre></div>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何用 C++ 在 10 行内写出八皇后？",
                "updated_time": 1425645422,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28543312",
                "created": 1425550024,
                "id": 28543312
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/41007629",
            "thumbnail": "",
            "created_time": 1425363192,
            "updated_time": 1425366786,
            "id": 41007629,
            "excerpt": "主要就是类型检查时很容易在closure这里没法检查只能做成例外，即便你类型检查能做对，去掉的好处是你后面的pass就不需要能处理高阶函数了嘛，省点事有啥不好的。 比如，有 f: X -> Y -> Z g: (Y->Z) -> ??? 我们只关心 X Y Z 无视 ??? 就是了 检查 g (f x) 时，我们检查 x 类型是否为X，是的话，f x类型就是 Y -> Z，符合 g 的要求。 这样看似就没有问题了。但是你继续往下编译 假如用一种naive的实现，(f x)的类型就变成了类似…",
            "content": "主要就是类型检查时很容易在closure这里没法检查只能做成例外，即便你类型检查能做对，去掉的好处是你后面的pass就不需要能处理高阶函数了嘛，省点事有啥不好的。<br><br>比如，有<br><br>f: X -&gt; Y -&gt; Z<br>g: (Y-&gt;Z) -&gt; ???<br><br>我们只关心 X Y Z 无视 ??? 就是了<br><br>检查 g (f x) 时，我们检查 x 类型是否为X，是的话，f x类型就是 Y -&gt; Z，符合 g 的要求。<br><br>这样看似就没有问题了。但是你继续往下编译<br><br>假如用一种naive的实现，(f x)的类型就变成了类似<br><br><div class=\"highlight\"><pre><code class=\"language-text\">struct {\n    function *f\n    X *var_1\n}\n</code></pre></div>而 g 里要调用 (f x) ，假设第一个参数名是 arg1<br><div class=\"highlight\"><pre><code class=\"language-text\"> ((function *)arg1)(arg1, y)\n</code></pre></div>实际上，就是在类型上开了个后门，我们不管closure里面装的是啥，只要用起来是一样的，我们就认为他们都是一样的。<br><br>比如又有 h: X -&gt; Y - &gt; Y -&gt; Z  <br>(h x y) 就变成<br><div class=\"highlight\"><pre><code class=\"language-text\">struct {\n    function *f\n    X *var_1\n    Y *var_2\n}\n</code></pre></div><br><br>这么做的问题是后面的优化就约等于没法做了。无论如何要分析这里面的类型，一定是要找出所有可能传入这里的closure的。所以，我认为MLton的做法很好，也不用什么高难度的技巧，到这一步就是直接做一次whole-program分析把他们都找出来。<br><br>我是mlton脑残粉 (逃",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "user_type": "people",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "在编译器原理中的defunctionalization的概念、为什么引入，有什么用途与意义？",
                "updated_time": 1425362260,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/28489379",
                "created": 1425362260,
                "id": 28489379
            }
        }
    ]
}