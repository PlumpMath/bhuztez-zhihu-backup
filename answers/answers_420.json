{
    "paging": {
        "is_end": false,
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=400",
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/answers?include=data%5B%2A%5D.content&limit=20&offset=440",
        "is_start": false,
        "totals": 442
    },
    "data": [
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/31646623",
            "thumbnail": "",
            "created_time": 1412925167,
            "updated_time": 1412925167,
            "id": 31646623,
            "excerpt": "你的想法很好。不过，不建议要从Python开始学，因为Python实在太复杂了，不太适合初学者学习。 比如从Erlang开始就是一个很好的选择。不到50行代码，就已经能运行起第一个Web网站了。 -module(web).\n\n-export([start/0, accept/1, handle_connection/1]).\n\n\nstart() ->\n {ok, Socket} = gen_tcp:listen(8080, [binary, {packet, http}, {active, false}, {reuseaddr, true}]),\n Pid = spawn(web, accept, [Socket]),\n ok = gen_t…",
            "content": "你的想法很好。不过，不建议要从Python开始学，因为Python实在太复杂了，不太适合初学者学习。<br><br>比如从Erlang开始就是一个很好的选择。不到50行代码，就已经能运行起第一个Web网站了。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Socket</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}]),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">accept</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Socket</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">handle_connection</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Conn</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"n\">accept</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">handle_connection</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_request</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"nv\">Headers</span> <span class=\"o\">=</span> <span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">inet</span><span class=\"p\">:</span><span class=\"nf\">setopts</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">}]),</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_header</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Value</span><span class=\"p\">}}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[{</span><span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"nv\">Value</span><span class=\"p\">}|</span><span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">)];</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">http_eoh</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[]</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">,</span> <span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"s\">\"/\"</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">_)</span> <span class=\"o\">-&gt;</span> \n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n           <span class=\"nv\">Socket</span><span class=\"p\">,</span>\n           <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: text-plain</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n            <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">Socket</span><span class=\"p\">).</span>\n</code></pre></div><br>将上面的代码保存为 web.erl<br><br>运行<br><br><div class=\"highlight\"><pre><code class=\"language-text\">erl -make\nerl -run web\n</code></pre></div><br>在浏览器里打开 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8080/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> ，你就会看到 OK<br><br>太棒了，还不赶紧开始学Erlang。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如何入门学习程序语言来制作网站？",
                "updated_time": 1412923847,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25910956",
                "created": 1412923336,
                "id": 25910956
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/31600933",
            "thumbnail": "",
            "created_time": 1412844160,
            "updated_time": 1412844310,
            "id": 31600933,
            "excerpt": "反正具体调用一个JavaScript函数的时候，是要传入 context scope this 以及参数列表的。scope可以近似理解成，调用某个函数的时候，全局变量分别是啥。context只知道是用来建scope的，没用过高级用法，不是很清楚。",
            "content": "反正具体调用一个JavaScript函数的时候，是要传入 context scope this 以及参数列表的。scope可以近似理解成，调用某个函数的时候，全局变量分别是啥。context只知道是用来建scope的，没用过高级用法，不是很清楚。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "Mozilla Rhino 中的 Scopes 和 Contexts 如何理解？",
                "updated_time": 1412843531,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25872280",
                "created": 1412843531,
                "id": 25872280
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30899079",
            "thumbnail": "",
            "created_time": 1411441896,
            "updated_time": 1411535928,
            "id": 30899079,
            "excerpt": "建议参考 卢卡斯－莱默检验法 改用C写，在这么小的数量级上，对速度提升有限吧。毕竟Python自带的大数乘法已经用上FFT了。 随便找了几个代码拼凑了一下 try:\n import numpy as np\nexcept ImportError:\n np = None\n\nfrom bisect import bisect\n\nif np:\n def primes(n):\n # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n sieve = np.ones(n/3 + (n%6==2), dtype…",
            "content": "建议参考<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%258D%25A2%25E5%258D%25A1%25E6%2596%25AF-%25E8%258E%25B1%25E9%25BB%2598%25E6%25A3%2580%25E9%25AA%258C%25E6%25B3%2595\" target=\"_blank\" rel=\"nofollow noreferrer\"> 卢卡斯－莱默检验法<i class=\"icon-external\"></i></a><br><br>改用C写，在这么小的数量级上，对速度提升有限吧。毕竟Python自带的大数乘法已经用上FFT了。<br><br>随便找了几个代码拼凑了一下<br><br><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">bisect</span> <span class=\"kn\">import</span> <span class=\"n\">bisect</span>\n\n<span class=\"k\">if</span> <span class=\"n\">np</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"c\"># http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188</span>\n        <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">3</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">%</span><span class=\"mi\">6</span><span class=\"o\">==</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">bool</span><span class=\"p\">)</span>\n        <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n                <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">|</span><span class=\"mi\">1</span>\n                <span class=\"n\">sieve</span><span class=\"p\">[</span>      <span class=\"p\">((</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span>      <span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n                <span class=\"n\">sieve</span><span class=\"p\">[(</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">r_</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,((</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nonzero</span><span class=\"p\">(</span><span class=\"n\">sieve</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n       <span class=\"c\"># http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188</span>\n       <span class=\"n\">sieve</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n       <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">**</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n           <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">]:</span>\n               <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">::</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">False</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n       <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">sieve</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mp</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"n\">p</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">%</span> <span class=\"n\">M</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">M</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"n\">PRIMES</span> <span class=\"o\">=</span> <span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">PRIMES</span><span class=\"p\">[</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"n\">PRIMES</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">i</span><span class=\"p\">:</span>\n            <span class=\"k\">continue</span>\n        <span class=\"k\">if</span> <span class=\"n\">mp</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">i</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n    <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)))</span>\n</code></pre></div>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "寻找梅森质数的新算法：3**x=1mod(Mp)的非零最小解 x？",
                "updated_time": 1420992225,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25493925",
                "created": 1411406403,
                "id": 25493925
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30622821",
            "thumbnail": "",
            "created_time": 1410876367,
            "updated_time": 1410876578,
            "id": 30622821,
            "excerpt": "if you have the privilege to exec() and can read that file, just try $ /lib64/ld-linux-x86-64.so.2 /path/to/your/elfit will just do what you want. If you don't have the privilege to exec(), you can exec() in user-space, though this could be quite tricky.",
            "content": "if you have the privilege to exec() and can read that file, just try<br><div class=\"highlight\"><pre><code class=\"language-text\">$ /lib64/ld-linux-x86-64.so.2 /path/to/your/elf\n</code></pre></div>it will just do what you want.<br><br>If you don't have the privilege to exec(), you can exec() in user-space, though this could be quite tricky.",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "对于Linux中的r/w/x权限，如果没有x权限那么就算有r和w权限是不是也不能执行？",
                "updated_time": 1410875703,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25389262",
                "created": 1410874933,
                "id": 25389262
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30493643",
            "thumbnail": "",
            "created_time": 1410603472,
            "updated_time": 1410603490,
            "id": 30493643,
            "excerpt": "以前见识少，也经常被类似的说法误导，实在分不清楚到底怎么才好。不过，最近简历投的比较多。记得好像有一家公司，PDF简历上传之后，会跳转到一个表单页，但是里面姓名，邮箱，联系电话什么的已经自动从简历里提取出来默认填好了，确实都是对的啊 !!! 可见，这种说法完全就是来骗人的。 就是这样",
            "content": "以前见识少，也经常被类似的说法误导，实在分不清楚到底怎么才好。不过，最近简历投的比较多。记得好像有一家公司，PDF简历上传之后，会跳转到一个表单页，但是里面姓名，邮箱，联系电话什么的已经自动从简历里提取出来默认填好了，确实都是对的啊 !!! 可见，这种说法完全就是来骗人的。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么说不是 HR 的从业者不能理解收到 PDF 简历的痛苦？",
                "updated_time": 1407611920,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/19737940",
                "created": 1309226440,
                "id": 19737940
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30120375",
            "thumbnail": "",
            "created_time": 1409800845,
            "updated_time": 1467174686,
            "id": 30120375,
            "excerpt": "我觉得很可能是Brainfuck 。 其实这不是编程课。这是数字电路课。但是明显讲课的老师想偷懒，不讲数字电路，就只给讲FPGA。好像是有一次作业，可以几选一，难度大致都和流水灯差不多。但是，老师上课其实讲和没讲也没什么区别，我啥也没学会。虽然我不会用数字电路的方式做，但是这种Hello, world级的程序我还是会写的嘛。于是我就在FPGA上搞了个brainfuck解释器，但是用的FPGA实在太渣了，频率上不去，我又把它强拆成了五级流水…",
            "content": "我觉得很可能是<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Brainfuck\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Brainfuck<i class=\"icon-external\"></i></a>。<br><br>其实这不是编程课。这是数字电路课。但是明显讲课的老师想偷懒，不讲数字电路，就只给讲FPGA。好像是有一次作业，可以几选一，难度大致都和流水灯差不多。但是，老师上课其实讲和没讲也没什么区别，我啥也没学会。虽然我不会用数字电路的方式做，但是这种Hello, world级的程序我还是会写的嘛。于是我就在FPGA上搞了个brainfuck解释器，但是用的FPGA实在太渣了，频率上不去，我又把它强拆成了五级流水线，这样频率就够了。交作业的时候，老师看到我那带延迟槽的brainfuck，都不知道说什么好了。我就这样把数字电路课生生歪成了编程课。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "你们读大学时，第一门编程课是用什么编程语言？",
                "updated_time": 1409799356,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25113144",
                "created": 1409799356,
                "id": 25113144
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30086323",
            "thumbnail": "",
            "created_time": 1409730278,
            "updated_time": 1409730278,
            "id": 30086323,
            "excerpt": "通常GC就不是基于引用计数的。有循环引用，引用计数就会出问题。这个问题在Java那里是找不到答案的。只有Python奇葩的GC是基于引用计数的。你可以看老版本的Python对于GC的介绍，Garbage Collection for Python 。 就是这样",
            "content": "通常GC就不是基于引用计数的。有循环引用，引用计数就会出问题。这个问题在Java那里是找不到答案的。只有Python奇葩的GC是基于引用计数的。你可以看老版本的Python对于GC的介绍，<a href=\"https://link.zhihu.com/?target=http%3A//arctrix.com/nas/python/gc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Garbage Collection for Python<i class=\"icon-external\"></i></a>。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "垃圾回收机制中，引用计数法是如何维护所有对象引用的？",
                "updated_time": 1378709577,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/21539353",
                "created": 1377429341,
                "id": 21539353
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/30052029",
            "thumbnail": "",
            "created_time": 1409662426,
            "updated_time": 1409662426,
            "id": 30052029,
            "excerpt": "thundering herd problem will never go away, unless the kernel changes socket API. if you poll() before accept(), kenrel cannot decide which process will accept the incoming connection, so it has to wake up every one. while poll():\n if listening socket is ready:\n accept()\n get it?",
            "content": "thundering herd problem will never go away, unless the kernel changes socket API.<br><br>if you poll() before accept(), kenrel cannot decide which process will accept the incoming connection, so it has to wake up every one.<br><br><div class=\"highlight\"><pre><code class=\"language-text\">while poll():\n  if listening socket is ready:\n      accept()\n</code></pre></div><br>get it?",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "Linux 3.x 中epoll的惊群问题？",
                "updated_time": 1402911344,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/24169490",
                "created": 1402911344,
                "id": 24169490
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/29885791",
            "thumbnail": "",
            "created_time": 1409320380,
            "updated_time": 1409321734,
            "id": 29885791,
            "excerpt": "这个用Prolog不就完了 :- use_module(library(clpfd)).\n\npuzzle(Puzzle) :-\n Puzzle = [A,B,C,D,E,F],\n Puzzle ins 0..1,\n A+B+C+D+E+F #= 1,\n A #<==> (A+B+C+D+E+F #= 0),\n B #<==> (A+B+C+D+E+F #> 1),\n C #<==> (D+E #= 0),\n D #<==> (B+C #> 0),\n E #<==> (C #= 0),\n F #<==> (E+F #> 0),\n label(Puzzle).\n 我看这是是错题啊 ?- puzzle(P).\nfalse. 他们是为了交白卷的也能有正的分数么？ 就是这样",
            "content": "这个用Prolog不就完了<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"p\">:-</span> <span class=\"nf\">use_module</span><span class=\"p\">(</span><span class=\"nf\">library</span><span class=\"p\">(</span><span class=\"s-Atom\">clpfd</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">puzzle</span><span class=\"p\">(</span><span class=\"nv\">Puzzle</span><span class=\"p\">)</span> <span class=\"p\">:-</span>\n  <span class=\"nv\">Puzzle</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">,</span><span class=\"nv\">C</span><span class=\"p\">,</span><span class=\"nv\">D</span><span class=\"p\">,</span><span class=\"nv\">E</span><span class=\"p\">,</span><span class=\"nv\">F</span><span class=\"p\">],</span>\n  <span class=\"nv\">Puzzle</span> <span class=\"s-Atom\">ins</span> <span class=\"mf\">0..1</span><span class=\"p\">,</span>\n  <span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nv\">A</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">B</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"o\">+</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span><span class=\"o\">+</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"nv\">C</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">D</span><span class=\"o\">+</span><span class=\"nv\">E</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">D</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"o\">+</span><span class=\"nv\">C</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">E</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">C</span> <span class=\"s-Atom\">#=</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nv\">F</span> <span class=\"s-Atom\">#&lt;==&gt;</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"o\">+</span><span class=\"nv\">F</span> <span class=\"s-Atom\">#&gt;</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n  <span class=\"nf\">label</span><span class=\"p\">(</span><span class=\"nv\">Puzzle</span><span class=\"p\">).</span>\n</code></pre></div><br>我看这是是错题啊<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"s-Atom\">?-</span> <span class=\"nf\">puzzle</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">).</span>\n<span class=\"s-Atom\">false</span><span class=\"p\">.</span>\n</code></pre></div><br>他们是为了交白卷的也能有正的分数么？<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "一道逻辑题，2015阿里校招，下面哪个选项是对的？",
                "updated_time": 1409320262,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/25039455",
                "created": 1409320262,
                "id": 25039455
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/26929183",
            "thumbnail": "",
            "created_time": 1402988309,
            "updated_time": 1402995235,
            "id": 26929183,
            "excerpt": "你以为Python是 let foo () =\n let x = 1 in\n let inner () = x + 1 in\n let x = 3 in\n print (inner ()) 实际上Python是 let foo () = \n let x = ref 1 in\n let inner () = !x + 1 in\n x := 3;\n print (inner ())\n 这和lexical scoping一点关系都没有啊 这是个mutable vs immutable的问题 python的scope是这样的 +--------------------------+\n| +---------------+ |\n| def foo|(): | |\n| +----+ | |\n| | x = 1 | |\n| | +------…",
            "content": "你以为Python是<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">()</span> <span class=\"o\">=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"k\">in</span>\n        <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">()</span><span class=\"o\">)</span>\n</code></pre></div><br>实际上Python是<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> \n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">ref</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">in</span>\n      <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n      <span class=\"n\">print</span> <span class=\"o\">(</span><span class=\"n\">inner</span> <span class=\"bp\">()</span><span class=\"o\">)</span>\n</code></pre></div><br>这和lexical scoping一点关系都没有啊<br><br>这是个mutable vs immutable的问题<br><br>python的scope是这样的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">+--------------------------+\n|        +---------------+ |\n| def foo|():            | |\n|   +----+               | |\n|   | x = 1              | |\n|   |          +-------+ | |\n|   | def inner|():    | | |\n|   |   +------+       | | |\n|   |   | return x + 1 | | |\n|   |   +--------------+ | |\n|   | x = 3              | |\n|   | print inner()      | |\n|   +--------------------+ |\n+--------------------------+\n</code></pre></div><br>你认为的scope是这样的<br><br><div class=\"highlight\"><pre><code class=\"language-text\">let foo () =\n +-------------------------------+\n | let x = 1 in                  |\n |  +--------------------------+ |\n |  | let inner () = x + 1 in  | |\n |  |  +---------------------+ | |\n |  |  | let x = 3 in        | | |\n |  |  |   print (inner ())  | | |\n |  |  +---------------------+ | |\n |  +--------------------------+ |\n +-------------------------------+\n</code></pre></div><br>因为Python的scope是mutable的，所以x = 3只是把x的binding修改成指向3<br><br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么 Python 不是 lexical scoping？",
                "updated_time": 1402991461,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/24179082",
                "created": 1402987403,
                "id": 24179082
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/26813399",
            "thumbnail": "",
            "created_time": 1402718492,
            "updated_time": 1402720204,
            "id": 26813399,
            "excerpt": "print 615\n 这道题根本就不用算法吧。随便想想就想出来了啊 100-900，其实只要含0的，那么积肯定小于和，于是只剩下 8 * 9 * 9 = 648 个数字 {1,1,X} 不管什么顺序肯定是积小于和的，这总共有3*8+1 = 25个数字，去掉一个9开头的，还剩24个 {1,2,2} 不管什么顺序是积小于和的，这总共有 3 个数字 {1,2,3} 不管什么顺序是积等于和的，这总共有 6 个数字 接着来看 {1,2,4} {1,3,3} {2,2,3} 它们积都大于和 。所以积小于等于和的就这…",
            "content": "<div class=\"highlight\"><pre><code class=\"language-text\">print 615\n</code></pre></div><br>这道题根本就不用算法吧。随便想想就想出来了啊<br><br>100-900，其实只要含0的，那么积肯定小于和，于是只剩下 8 * 9 * 9 = 648 个数字<br>{1,1,X} 不管什么顺序肯定是积小于和的，这总共有3*8+1 = 25个数字，去掉一个9开头的，还剩24个<br>{1,2,2} 不管什么顺序是积小于和的，这总共有 3 个数字<br>{1,2,3} 不管什么顺序是积等于和的，这总共有 6 个数字<br>接着来看 {1,2,4} {1,3,3} {2,2,3} 它们积都大于和 。所以积小于等于和的就这些了<br>得出结论 648 - 24 - 3 - 6 = 615<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "编程求100-900之间各位数字之积大于之和的个数？",
                "updated_time": 1402716071,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/24143675",
                "created": 1402716071,
                "id": 24143675
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/25469590",
            "thumbnail": "",
            "created_time": 1399789564,
            "updated_time": 1399796132,
            "id": 25469590,
            "excerpt": "你这种风格叫List Comprehension，Erlang里常见的写法就是这样的啊。你让那些整天嚷嚷Erlang不符合人类思维的情何以堪啊。 简单的不如直接用MatchSpec解决。 1> Tab = ets:new(student, []).\n16400\n2> ets:insert(Tab, {97, alice, 18, agriculture}).\ntrue\n3> ets:insert(Tab, {98, betty, 20, biology}).\ntrue\n4> ets:select(Tab, [{{98, '_', '_', '_'}, [], ['$_']}]).\n[{98,betty,20,biology}]\n5> ets:select(Tab, [{{98, '…",
            "content": "你这种风格叫List Comprehension，Erlang里常见的写法就是这样的啊。你让那些整天嚷嚷Erlang不符合人类思维的情何以堪啊。<br><br>简单的不如直接用MatchSpec解决。<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"mi\">1</span><span class=\"o\">&gt;</span> <span class=\"nv\">Tab</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"p\">[]).</span>\n<span class=\"mi\">16400</span>\n<span class=\"mi\">2</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"n\">alice</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">agriculture</span><span class=\"p\">}).</span>\n<span class=\"n\">true</span>\n<span class=\"mi\">3</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">betty</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">biology</span><span class=\"p\">}).</span>\n<span class=\"n\">true</span>\n<span class=\"mi\">4</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">},</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"n\">'$_'</span><span class=\"p\">]}]).</span>\n<span class=\"p\">[{</span><span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"n\">betty</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"n\">biology</span><span class=\"p\">}]</span>\n<span class=\"mi\">5</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">,</span> <span class=\"n\">'$4'</span><span class=\"p\">},</span> <span class=\"p\">[],</span> <span class=\"p\">[{{</span><span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'$4'</span><span class=\"p\">}}]}]).</span>\n<span class=\"p\">[{</span><span class=\"n\">betty</span><span class=\"p\">,</span><span class=\"n\">biology</span><span class=\"p\">}]</span>\n<span class=\"mi\">6</span><span class=\"o\">&gt;</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"nv\">Tab</span><span class=\"p\">,</span> <span class=\"p\">[{{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">'$2'</span><span class=\"p\">,</span> <span class=\"n\">'$3'</span><span class=\"p\">,</span> <span class=\"n\">'_'</span><span class=\"p\">},</span> <span class=\"p\">[{</span><span class=\"n\">'&gt;'</span><span class=\"p\">,</span> <span class=\"n\">'$3'</span><span class=\"p\">,</span> <span class=\"mi\">19</span><span class=\"p\">}],</span> <span class=\"p\">[</span><span class=\"n\">'$2'</span><span class=\"p\">]}]).</span>\n<span class=\"p\">[</span><span class=\"n\">betty</span><span class=\"p\">]</span>\n<span class=\"mi\">7</span><span class=\"o\">&gt;</span>\n</code></pre></div><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//www.erlang.org/doc/man/ets.html%23select-2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Erlang -- ets<i class=\"icon-external\"></i></a><br><br>用qlc的时候，你会发现用List Comprehension这种风格，最自然的还是写成两个查询<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"err\">#</span><span class=\"o\">!/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">env</span> <span class=\"n\">escript</span>\n\n<span class=\"p\">-</span><span class=\"ni\">include_lib</span><span class=\"p\">(</span><span class=\"s\">\"stdlib/include/qlc.hrl\"</span><span class=\"p\">).</span>\n\n<span class=\"nf\">main</span><span class=\"p\">([])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">Student</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">student</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">set</span><span class=\"p\">]),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"n\">alice</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">betty</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Student</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"n\">carol</span><span class=\"p\">}),</span>\n\n  <span class=\"nv\">Score</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">bag</span><span class=\"p\">]),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">}),</span>\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">}),</span>\n\n  <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">}),</span>\n\n  <span class=\"nv\">L1</span> <span class=\"o\">=</span>\n    <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">e</span><span class=\"p\">(</span>\n      <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">q</span><span class=\"p\">(</span>\n      <span class=\"p\">[</span> <span class=\"nv\">N</span> <span class=\"p\">||</span>\n        <span class=\"p\">{</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">S</span><span class=\"p\">}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n        <span class=\"nv\">S</span> <span class=\"o\">&lt;</span> <span class=\"mi\">90</span> <span class=\"p\">],</span> <span class=\"p\">[{</span><span class=\"n\">unique</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}])),</span>\n\n  <span class=\"nv\">L2</span> <span class=\"o\">=</span>\n    <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">e</span><span class=\"p\">(</span>\n      <span class=\"nn\">qlc</span><span class=\"p\">:</span><span class=\"nf\">q</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span> <span class=\"nv\">N2</span> <span class=\"p\">||</span>\n          <span class=\"p\">{</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">C1</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n          <span class=\"p\">{</span><span class=\"nv\">N2</span><span class=\"p\">,</span> <span class=\"nv\">C2</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"nv\">Score</span><span class=\"p\">),</span>\n          <span class=\"ow\">not</span> <span class=\"nn\">lists</span><span class=\"p\">:</span><span class=\"nf\">member</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">L1</span><span class=\"p\">),</span>\n          <span class=\"nv\">C1</span> <span class=\"o\">==</span> <span class=\"nv\">C2</span>\n        <span class=\"p\">],</span> <span class=\"p\">[{</span><span class=\"n\">unique</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}])),</span>\n\n  <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"si\">~w~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">L2</span><span class=\"p\">]),</span>\n  <span class=\"n\">ok</span><span class=\"p\">.</span>\n</code></pre></div><br>参考<a href=\"https://link.zhihu.com/?target=http%3A//www.erlang.org/doc/man/qlc.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang -- qlc<i class=\"icon-external\"></i></a><br><br>这个问题，可以用 Datalog 来表示，看得更清楚。<br><br><div class=\"highlight\"><pre><code class=\"language-prolog\"><span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"s-Atom\">alice</span><span class=\"p\">).</span>\n<span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"s-Atom\">betty</span><span class=\"p\">).</span>\n<span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"s-Atom\">carol</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">).</span>\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">).</span>\n\n<span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">q1</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">)</span><span class=\"s-Atom\">:</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">),</span>\n  <span class=\"nv\">S</span> <span class=\"o\">&lt;</span> <span class=\"mf\">90.</span>\n\n<span class=\"nf\">q2</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">)</span><span class=\"s-Atom\">:</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">),</span>\n  <span class=\"o\">not</span> <span class=\"nf\">q1</span><span class=\"p\">(</span><span class=\"nv\">N1</span><span class=\"p\">),</span>\n  <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"nv\">N2</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">).</span>\n</code></pre></div><br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "觉得 SQL 太难用于是自己编了个类 SQL 语言，不知道有没有人想过类似的事情？",
                "updated_time": 1402455792,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23719632",
                "created": 1399721137,
                "id": 23719632
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/25035849",
            "thumbnail": "",
            "created_time": 1398740642,
            "updated_time": 1417493054,
            "id": 25035849,
            "excerpt": "正确答案：可以先约架。约完了，你自己就会去找资料看了，不会也得会了。 错误答案： 可以先写一个Datalog解释器。接着由 Earley Deduction 变形成 Earley Parser ，再由 Earley Parser 退化成 LR Parser ，LR Parser 又可以退化成 SLR 和 LALR ，同时还可以退化成 NFA ，NFA 还可以编译成 DFA ，DFA是一种特殊的NFA。 另一方面，Datalog从动态规划改成回溯，就变成了Prolog，Prolog 的 DCG 其实和 PEG 是类似的东西。PEG继续退…",
            "content": "正确答案：可以先约架。约完了，你自己就会去找资料看了，不会也得会了。<br><br><br>错误答案：<br><br>可以先写一个Datalog解释器。接着由 Earley Deduction 变形成 Earley Parser ，再由 Earley Parser 退化成 LR Parser ，LR Parser 又可以退化成 SLR 和 LALR ，同时还可以退化成 NFA ，NFA 还可以编译成 DFA ，DFA是一种特殊的NFA。<br><br>另一方面，Datalog从动态规划改成回溯，就变成了Prolog，Prolog 的 DCG 其实和 PEG 是类似的东西。PEG继续退化，就变成PCRE那种回溯风格为主的“正则表达式”。同时，PEG加一点tabling，就变成了 Packrat 。<br><br>学了Datalog，其他部分都是可以很容易自己推导出来的，看那么多厚厚的书才是纯浪费时间。<br><br>详情请看 21天学通Erlang",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "初学者该从哪里入门学习写 tokenizer 和 grammar analyzer ?",
                "updated_time": 1398681021,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23564096",
                "created": 1398565158,
                "id": 23564096
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/24821794",
            "thumbnail": "",
            "created_time": 1398229385,
            "updated_time": 1398229404,
            "id": 24821794,
            "excerpt": "比如下面一段代码 map(_, []) ->\n [];\nmap(F, [H|T]) ->\n [F(H)|map(F, T)].\n\n\nf() ->\n X = 2,\n map(fun (E) -> E * X end, [1,2,3]).\n 其中 fun (E) -> E * X end\n 就是一个高阶函数。假如是一个栈机，可能编译成下面这样 {\n args => 1\n closure => [2]\n code =>\n PUSH LOCAL_1\n PUSH CLOSURE_1\n TIMES\n RETURN\n}\n 还有另外一种方式是像MLton。进行简单的控制流分析，之后把所有的高阶函数都转化为一阶函数 lambda_1([X], E) ->…",
            "content": "比如下面一段代码<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">map</span><span class=\"p\">(_,</span> <span class=\"p\">[])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[];</span>\n<span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[</span><span class=\"nv\">F</span><span class=\"p\">(</span><span class=\"nv\">H</span><span class=\"p\">)|</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">)].</span>\n\n\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">X</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span> <span class=\"k\">end</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n</code></pre></div><br>其中<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span> <span class=\"k\">end</span>\n</code></pre></div><br>就是一个高阶函数。假如是一个栈机，可能编译成下面这样<br><br><div class=\"highlight\"><pre><code class=\"language-text\">{\n  args =&gt; 1\n  closure =&gt; [2]\n  code =&gt;\n    PUSH LOCAL_1\n    PUSH CLOSURE_1\n    TIMES\n    RETURN\n}\n</code></pre></div><br>还有另外一种方式是像MLton。进行简单的控制流分析，之后把所有的高阶函数都转化为一阶函数<br><br><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">lambda_1</span><span class=\"p\">([</span><span class=\"nv\">X</span><span class=\"p\">],</span> <span class=\"nv\">E</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">E</span> <span class=\"o\">*</span> <span class=\"nv\">X</span><span class=\"p\">.</span>\n\n<span class=\"nf\">map</span><span class=\"p\">(_,</span> <span class=\"p\">[])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"p\">[];</span>\n<span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nv\">H1</span> <span class=\"o\">=</span>\n    <span class=\"k\">case</span> <span class=\"nv\">F</span> <span class=\"k\">of</span>\n      <span class=\"p\">{</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"nv\">C</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n          <span class=\"n\">lambda_1</span><span class=\"p\">(</span><span class=\"nv\">C</span><span class=\"p\">,</span> <span class=\"nv\">H</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nv\">H1</span><span class=\"p\">|</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">)].</span>\n\n<span class=\"nf\">f</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">X</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">map</span><span class=\"p\">({</span><span class=\"n\">c1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">X</span><span class=\"p\">]},</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n</code></pre></div><br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "关于函数嵌套定义，在编译时怎么处理外层函数的运行时栈？lambda函数在编译时又是怎么处理？",
                "updated_time": 1398004580,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23486264",
                "created": 1398004580,
                "id": 23486264
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/24491366",
            "thumbnail": "",
            "created_time": 1397480225,
            "updated_time": 1399207664,
            "id": 24491366,
            "excerpt": "OCaml主要是module的命名空间设计的很成问题啊。 一般语言里是 x.y.z ，OCaml里是 x.A.y.B.z 类型出个错，他告诉你你这个变量的类型是 .... ，需要的是 A.B.C.D.E.F.G.H.t ，其实往往就是个int，竟然不能在边上提示一下实际类型。 这要能流行，C++都该超过C了。 另外就是模式匹配的检查其实不是很合理，有时候，有些情况根本就不可能出现的，但是OCaml还是要说你的匹配不完全不给编译通过。 其实，我就是来吐个槽的。 就是这样 -…",
            "content": "OCaml主要是module的命名空间设计的很成问题啊。<br><br>一般语言里是 x.y.z ，OCaml里是 x.A.y.B.z <br><br>类型出个错，他告诉你你这个变量的类型是 .... ，需要的是 A.B.C.D.E.F.G.H.t ，其实往往就是个int，竟然不能在边上提示一下实际类型。<br><br>这要能流行，C++都该超过C了。<br><br>另外就是模式匹配的检查其实不是很合理，有时候，有些情况根本就不可能出现的，但是OCaml还是要说你的匹配不完全不给编译通过。<br><br>其实，我就是来吐个槽的。 <br><br>就是这样<br><br>--------------------------------<br><br>补充例子<br><br>assert false的问题，以二叉树为例<br><br><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Leaf</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Tree</span> <span class=\"k\">of</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span> <span class=\"o\">*</span> <span class=\"k\">'</span><span class=\"n\">a</span> <span class=\"n\">tree</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">max</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">None</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">)</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"n\">max</span> <span class=\"n\">right</span>\n<span class=\"o\">;;</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Leaf</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">compare</span> <span class=\"k\">value</span> <span class=\"n\">elem</span> <span class=\"k\">with</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Less</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Greater</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">elem</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"k\">value</span> <span class=\"n\">right</span><span class=\"o\">))</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Equal</span> <span class=\"o\">-&gt;</span>\n          <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n            <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"nc\">Leaf</span><span class=\"o\">,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nc\">Leaf</span>\n            <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"nc\">Leaf</span><span class=\"o\">,</span> <span class=\"o\">_)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">right</span>\n            <span class=\"o\">|</span> <span class=\"o\">(_,</span> <span class=\"nc\">Leaf</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">left</span>\n            <span class=\"o\">|</span> <span class=\"o\">(_,</span> <span class=\"o\">_)</span> <span class=\"o\">-&gt;</span>\n              <span class=\"k\">match</span> <span class=\"n\">max</span> <span class=\"n\">left</span> <span class=\"k\">with</span>\n                <span class=\"o\">|</span> <span class=\"nc\">None</span> <span class=\"o\">-&gt;</span> <span class=\"k\">assert</span> <span class=\"bp\">false</span>   <span class=\"c\">(* 我要这行干什么!!! *)</span>\n                <span class=\"o\">|</span> <span class=\"nc\">Some</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">-&gt;</span>\n                  <span class=\"nc\">Tree</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">remove</span> <span class=\"n\">m</span> <span class=\"n\">left</span><span class=\"o\">),</span> <span class=\"n\">right</span><span class=\"o\">)</span>\n<span class=\"o\">;;</span>\n</code></pre></div>",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "OCaml 为什么没能流行起来？",
                "updated_time": 1482870524,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/20621491",
                "created": 1353938691,
                "id": 20621491
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/23895380",
            "thumbnail": "",
            "created_time": 1396054968,
            "updated_time": 1396054968,
            "id": 23895380,
            "excerpt": "一般来说，当你发现你需要用Y Combinator的时候，一定是哪里出了问题。比如当你不能给函数命名的时候，你就需要Y Combinator了。举个例子，如果你用Erlang的时候，只用Erlang Shell，你就会发现你会不停地写Y Combinator了。当然了，从Erlang R17 开始终于可以不写Y Combinator了。完全无法理解那帮整天吹Y Combinator的。 就是这样",
            "content": "一般来说，当你发现你需要用Y Combinator的时候，一定是哪里出了问题。比如当你不能给函数命名的时候，你就需要Y Combinator了。举个例子，如果你用Erlang的时候，只用Erlang Shell，你就会发现你会不停地写Y Combinator了。当然了，从<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//joearms.github.io/2014/02/01/big-changes-to-erlang.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang R17<i class=\"icon-external\"></i></a>开始终于可以不写Y Combinator了。完全无法理解那帮整天吹Y Combinator的。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "Y不动点组合子用在哪里？",
                "updated_time": 1380811655,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/21099081",
                "created": 1369306700,
                "id": 21099081
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/23833591",
            "thumbnail": "",
            "created_time": 1395897097,
            "updated_time": 1395897097,
            "id": 23833591,
            "excerpt": "我会告诉你 百度贴吧是用C开发的吗 ？ 就是这样",
            "content": "我会告诉你 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.csdn.net/article/2011-12-05/308512\" target=\"_blank\" rel=\"nofollow noreferrer\">百度贴吧是用C开发的吗<i class=\"icon-external\"></i></a> ？<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "为什么多数游戏服务端是用 C++ 来写呢，是历史原因还是性能方面的考虑？",
                "updated_time": 1430014672,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23158109",
                "created": 1395718921,
                "id": 23158109
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/23701338",
            "thumbnail": "",
            "created_time": 1395543775,
            "updated_time": 1395543775,
            "id": 23701338,
            "excerpt": "从零开始实现Prolog解释器，最好的办法是看WAMBOOK WAMBOOK里把实现Prolog分成L0/L1/L2/L3四个阶段，你完全可以只看slides，按这四个阶段自己分别实现就可以了，没必要完全按照WAMBOOK来，毕竟WAMBOOK是按C的思路来讲的。 因为是按C的思路来讲的，WAMBOOK讲unification(相当于L0)的时候，废话太多了，不如看miniKanren 论文，这论文就看一开始的unification就行，后面非要用很tricky的宏来实现miniKanren，很蛋疼，就别看了。反正…",
            "content": "从零开始实现Prolog解释器，最好的办法是看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//wambook.sourceforge.net/\" target=\"_blank\" rel=\"nofollow noreferrer\">WAMBOOK<i class=\"icon-external\"></i></a><br><br>WAMBOOK里把实现Prolog分成L0/L1/L2/L3四个阶段，你完全可以只看slides，按这四个阶段自己分别实现就可以了，没必要完全按照WAMBOOK来，毕竟WAMBOOK是按C的思路来讲的。<br><br>因为是按C的思路来讲的，WAMBOOK讲unification(相当于L0)的时候，废话太多了，不如看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//gradworks.umi.com/33/80/3380156.html\" target=\"_blank\" rel=\"nofollow noreferrer\">miniKanren<i class=\"icon-external\"></i></a>论文，这论文就看一开始的unification就行，后面非要用很tricky的宏来实现miniKanren，很蛋疼，就别看了。反正你要实现的是Prolog，不是miniKanren。<br><br>没必要一开始就写个parser。语言推荐用Erlang。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "我这么做解释器是不是错的离谱?",
                "updated_time": 1395542643,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/23136318",
                "created": 1395542643,
                "id": 23136318
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/21735766",
            "thumbnail": "",
            "created_time": 1389962990,
            "updated_time": 1389962990,
            "id": 21735766,
            "excerpt": "其实静态类型和动态类型的影响不是很大。 要说大项目，比如十多年前Erlang项目，AXD 301有大约200万行Erlang代码。而之前Ericsson妄图用C++开发同样的东西，没开发出来。这能不能说明动态类型比静态类型更适合大项目呢？ 就是这样。",
            "content": "其实静态类型和动态类型的影响不是很大。<br><br>要说大项目，比如十多年前Erlang项目，AXD 301有大约200万行Erlang代码。而之前Ericsson妄图用C++开发同样的东西，没开发出来。这能不能说明动态类型比静态类型更适合大项目呢？<br><br>就是这样。",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "如果静态类型的语言比动态类型的语言更加适合大项目，那么是否在一定规模和复杂度以下动态类型的语言更好？",
                "updated_time": 1389690995,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/22522407",
                "created": 1389681404,
                "id": 22522407
            }
        },
        {
            "type": "answer",
            "is_collapsed": false,
            "url": "https://www.zhihu.com/api/v4/answers/21278761",
            "thumbnail": "",
            "created_time": 1388502137,
            "updated_time": 1388502137,
            "id": 21278761,
            "excerpt": "我觉得NSA的思路就非常好。 不直接攻击主机，利用漏洞攻击交换机/路由器，把关心的数据转发走。你要是用明文密码，那太棒了。你要是加密了，那也没有关系，NSA都能解出来。有了密码，要不要登录只是是否需要的问题了。还有你的机密文件总得通过网络传吧，其实都白送给NSA了。 NSA文件一被snowden泄露出来。路由器就立刻成了各大互联网公司争夺的目标了。 就是这样",
            "content": "我觉得NSA的思路就非常好。<br><br>不直接攻击主机，利用漏洞攻击交换机/路由器，把关心的数据转发走。你要是用明文密码，那太棒了。你要是加密了，那也没有关系，NSA都能解出来。有了密码，要不要登录只是是否需要的问题了。还有你的机密文件总得通过网络传吧，其实都白送给NSA了。<br><br>NSA文件一被snowden泄露出来。路由器就立刻成了各大互联网公司争夺的目标了。<br><br>就是这样",
            "is_copyable": true,
            "author": {
                "is_org": false,
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "gender": 1,
                "type": "people",
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "headline": "正在找工作 ...",
                "badge": [],
                "is_advertiser": false,
                "name": "bhuztez",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg",
                "id": "dcddea61834f6b2dcb515f393fe29575"
            },
            "extras": "",
            "question": {
                "title": "高级黑客是如何入侵计算机系统的？",
                "updated_time": 1344920631,
                "type": "question",
                "question_type": "normal",
                "url": "https://www.zhihu.com/api/v4/questions/20419457",
                "created": 1344914365,
                "id": 20419457
            }
        }
    ]
}