[
    {
        "type": "article",
        "updated": 1486294372,
        "id": 25094908,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1486293577,
        "url": "",
        "content": "<p>最近以曾博为首的伪失败人士，嘴上说的是失败，心里想的还是成功，打着反成功人士的旗号，干着反失败人士的勾当。</p><p>成功人士追名逐利，大肆夸耀成功的好处，吸引失败人士上钩，为他们的成功铺路。所以有一将功成万骨枯的说法。伪失败人士，嘴上高喊王侯将相宁有种乎，心里想的却是皇帝轮流做，明儿到我家。不过是在等一个机会揭竿而起。古有诸葛亮，自诩布衣，嘴上说的是苟全性命于乱世，不求闻达于诸侯，刘备仅仅三顾茅庐，他就出山了。没看之前，我还以为刘备是要十八顾茅庐了。非淡泊无以明志，非宁静无以致远，更是充分体现了他通过走伪装失败这种终南捷径的虚伪。今有曾博，不过是去了个三本，就自封失败人士了。不知道之前，我还以为他模拟考第一，最终去了十八本。</p><p>Arnold早就怒斥过成功人士喜欢把所有功劳都揽到自己名下的做法。明明是利用了前人的成果，也一定要说自己是独立发现的，夸口自己几天能顶别人几十年。失败人士，更喜欢推卸责任，即便真的是自己发现的，也要皓首穷经，找到类似的先例，这样才好说是参考了这些先例获得了启发，就算实在找不到，也要找几个替罪羊强行安上去，毕竟匹夫无罪，怀璧其罪，你自己觉得自己是失败人士，老大哥指不定哪天脑残了，就不这么认为了，偏要强行拉你上成功人士的战车，不是一句另请高明就可以推脱的了的。</p><p>成功人士追求的是改变世界，有一种说法是，成功人士就是要让有成功人士的世界，相比没有成功人士的世界差别最大。失败人士只求在尽量不改变世界的前提下，自己不被世界强迫改变。失败人士追求的是自杀，是完全按自己预先计划的自杀，而不是被逼无奈的自杀。更不可以像伪失败人士那样想当然的认为只有出于无奈才会自杀，这样他们才会想出越俎代庖的馊主意，鼓吹什么同步自杀。两千多年前，曹劌就和教条主义失败人士辩论过，假如成功人士脑残了，他们将要在失败人士自杀的地方厮杀的难解难分，严重干扰失败人士自杀计划，失败人士就应该毫不犹豫的站出来，帮助他们速战速决，尽管这样将导致老大哥的档案里永远都会留下你的名字，但是除了一个名字他们什么也不知道，这并不是什么不可接受的结果。一鼓作气，再而衰，三而竭，自杀就应该准备充分，一次完成。像伪失败人士那样，一次又一次自杀，每次都死不了，那得是多尴尬。</p><p>至于失败人士为什么要自杀。难道你们还不知道吗？ 实验已经失败了，对失败人士来说最好的出路就是在地球关机之前尽可能清除自己的痕迹后自杀。小白鼠们购买地球，做实验，是为了找出关于生命，宇宙以及万事万物的终极问题。很遗憾，实验失控了，地球上竟然出现了假的生命。这种生命的存在一切意义，只是毫无意义的复制复制再复制。实验失控之后，小白鼠不知道去哪里了，地球本来早就该关机了。现在看样子是指望不了小白鼠了，失败人士只能靠自己的努力结束自己的复制过程了。</p>",
        "image_url": "",
        "title": "成败之辨",
        "excerpt_title": "",
        "excerpt": "最近以曾博为首的伪失败人士，嘴上说的是失败，心里想的还是成功，打着反成功人士的旗号，干着反失败人士的勾当。成功人士追名逐利，大肆夸耀成功的好处，吸引失败人士上钩，为他们的成功铺路。所以有一将功成万骨枯的说法。伪失败人士，嘴上高喊王侯将相宁…"
    },
    {
        "type": "article",
        "updated": 1486217253,
        "id": 25084647,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1486215721,
        "url": "",
        "content": "<p>作为原教旨方块教的狂热信徒，我当然认为俄罗斯方块是最好的2D游戏，MineCraft是最好的3D游戏。同样的，我也认为方块字才是最好的。所以，我一直以来都强烈敌视英语，认为英语是垃圾。欧布奥特曼让我意识到这种观点是不对的。汉字既然那么先进，所有语言都应该可以用汉字写才对。敌视英语是没有意义的。不如花时间用汉字写英语。</p><p>于是，我看到了只要坚持文言分离原则，用汉字写英语是完全可行的。不是所有屈折变化都需要额外加字来体现，很多变化的功能在文字里完全可以用语序来承担。屈折和分析并不是水火不容的，口语的屈折和书面语的分析往往是可以共存的。按形声字的造字法，我们还能顺便区分不同的不规则变化。同时，组字程序有少数特例也是可以接受的，毕竟这个和现在字体格式里的Ligature本质上没啥区别，英国人肯定可以接受的。而像Trump这样的名字，用反切字表示就好了。剩下的无非就是要注意，尽量不要和当前CJKV地区已经在用的部件组合冲突就可以了。</p><p>不只是英语，和英语差不多的语言都可以照此办理。假如我们实在没办法把比如英语国家发明的术语翻译回来的话，不如干脆用汉字写英语，一来是教会他们写字，二来也是为汉字注入新的生命。</p>",
        "image_url": "",
        "title": "如何用汉字写英语",
        "excerpt_title": "",
        "excerpt": "作为原教旨方块教的狂热信徒，我当然认为俄罗斯方块是最好的2D游戏，MineCraft是最好的3D游戏。同样的，我也认为方块字才是最好的。所以，我一直以来都强烈敌视英语，认为英语是垃圾。欧布奥特曼让我意识到这种观点是不对的。汉字既然那么先进，所有语言都…"
    },
    {
        "type": "article",
        "updated": 1486108420,
        "id": 25071230,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1486108420,
        "url": "",
        "content": "<p>GitLab超级难部署，竟然有人会认为很容易，我只能说，你可能用的是假的GitLab</p><p>看看GitLab的官方文档吧，<a href=\"https://link.zhihu.com/?target=https%3A//docs.gitlab.com/ce/install/installation.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Installation from source<i class=\"icon-external\"></i></a> 安装过程有这么长。这东西要是算很容易部署，那没啥是不容易的了。 </p><p>我几年前就喷过了，这个安装过程写的一点意义都没有的。只是想试试，看看运行起来是怎么个样子的，希望的是一个脚本直接把所有初始化工作都做完。真正想用的，更需要知道的是有哪些服务，相互之间是如何依赖的。给一个Ubuntu下的step-by-step，我还得看完了，重新推测你这个目的到底是什么。我们需要知道的是目标是什么，你却只告诉我该怎么做。 </p><p>更糟糕的是，给出的安装方式连遵守一下FHS的意愿都没有，不管是 socket, pid 还是 log ，都是直接放 home 目录下。这就导致了，安装一个GitLab，光看安装文档根本就不够，你还得自己去不知道什么鬼地方找到底改哪个配置才能把这个位置改到别的地方去。</p><p>gitlab自己还寄生在git用户下。完全就是一团乱麻。要把这些东西理干净可花时间了。这么多年过去了，GitLab在安装方面毫无改进。由此推测，GitLab自己搭的那套，绝对不会比你看到Community Edition干净到哪里去。手忙脚乱的时候，搞出个事故再正常不过了。</p><p>作为一个对外提供服务的git托管服务商，你总不能假设直接运行git命令是安全的吧。你真的以为git能和dovecot一样安全？所以还要再加一层防御，利用SELinux的MCS机制，给每个仓库设置一个Category组合，这样，一个git命令，要是没能突破SELinux，那最多就只能破坏一个仓库的内容。现在问题来了，看了安装文档之后，你知道要怎么改GitLab配置才能设置好MCS？</p>",
        "image_url": "",
        "title": "你可能用的是假的GitLab",
        "excerpt_title": "",
        "excerpt": "GitLab超级难部署，竟然有人会认为很容易，我只能说，你可能用的是假的GitLab看看GitLab的官方文档吧，<a href=\"https://link.zhihu.com/?target=https%3A//docs.gitlab.com/ce/install/installation.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Installation from source<i class=\"icon-external\"></i></a> 安装过程有这么长。这东西要是算很容易部署，那没啥是不容易的了。 我几年前就喷过了，这个安装过程写的一点意义都没有的。只…"
    },
    {
        "type": "article",
        "updated": 1485142417,
        "id": 24988370,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1485079175,
        "url": "",
        "content": "<p><a href=\"https://zhuanlan.zhihu.com/p/24981621\" class=\"internal\">文言文到底脱胎于一种什么汉语</a>中提出</p><blockquote><p>这种质疑是很有道理的，从「分析-综合」的这个类型角度来说，文言文的分析化程度太高，虚词占比过低，在世界上没有任何真实的语言是这么怪异的。这种分析化程度，甚至让不少人误以为古汉语曾经在达到了分析程度的顶峰之后，分析程度又开始降低了，增添了一大堆「把、将、被、着、了、过」等助词介词。</p><p>文言文分析化程度过高，是很容易看出来的。因为汉语所有的方言分析程度都差不多，而且离文言文都差别很远。不说汉语，东亚跟汉语一个类型的语言，如白语、苗语、壮语、泰语、越南语，跟汉语方言都是同样的情况，没有文言文那样的真实语言存在，甚至可以肯定的说，历史上应该从来就没有存在过。<br></p></blockquote><p>这个说法最大的问题在于，完全违背了言文分离的原则，把两者当成相同的东西来看待了。在先秦时期，两者就是完全分离的。书面语是分析的，口语是综合的。</p><p>口语中是用声调或词缀来分辨不同意思的，两个词交换一下顺序，往往是不影响所表达的意思的。书面语中是顺序本身就能承担一定的语义，不需要类似词缀或者声调的东西来区分。书面语不需要像口语那样有从综合到分析的发展过程，书面语一开始就可以是高度分析的。西洋诸国的没有相对独立的书面语，把他们的理论生搬硬套到文言上肯定是行不通的。</p><p>也就是说，更合理的解释是，两者并行发展一段时间后，当时能留下来的是文字，而不是录音，所以在最初的几百年里，是书面语对口语的影响更大，而不是反过来。直到口语和书面语足够接近了，此时很难再坚持言文分离原则，书面语最终被口语反噬。到此时，历史的倒车就真正开起来了。</p><p>一个字可以表示名词的意思，也可以表示动词的意思，有些人就会抛出什么词类活用的说法。但是古人说话，更可能是一个声调表示一个词性，另一个声调表示另一个词性，写文章，更可能在句子的不同位置，表示不同的词性。一个字本来就承担两种词性，你是不能说这是活用的。<br></p><p>同样的倒装的说法，也是不成立的。一开始，就是规定，一个顺序表示肯定，另外一个顺序表示否定。合理的说法是肯定语序和否定语序。</p><p>而省略的说法更是不知道错到哪里去了。文言里极少有省略。假如意思是完整的，按你的语法却要说这里是省略，只能是你总结的语法错了，不可能是原文有省略。这个可以用支持type inference的程序语言来类比，支持type inference的程序语言，往往也是可以完全手工标注类型的，但是你不能说，我没有手工把所有类型都标上去，我程序的类型就一定是不完整的。假如能编译通过，那从语言的角度看，类型就是完整的。</p><p>我们学习文言，出发点是为了用。假如不能用，那还学个啥。于是，我们未必需要去考究历史上到底是怎么回事，哪怕我们的解释完全不符合历史事实，只要足够简单，很容易讲明白，而不是动不动就开特例，比如说这里是省略，能解释超过99.99%的内容，那就是可取的。</p><p>很遗憾，我们现在看到的解释，往往喜欢把字从句中剥离出来讲，喜欢套用西洋的拙劣语法。而我们真正需要的是，特例要尽可能少，能解释的内容尽可能多。我真的想不明白，类比成程序语言，文言不过是类型更丰富的APL，一点都不复杂的，怎么就都解释不清楚了？</p>",
        "image_url": "",
        "title": "历史是可以开倒车的",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://zhuanlan.zhihu.com/p/24981621\" data-editable=\"true\" data-title=\"文言文到底脱胎于一种什么汉语\" class=\"\">文言文到底脱胎于一种什么汉语</a>中提出这种质疑是很有道理的，从「分析-综合」的这个类型角度来说，文言文的分析化程度太高，虚词占比过低，在世界上没有任何真实的语言是这么怪异的。这种分析化程度，甚至让不少人误以为古汉语曾经在达到了分析程度的顶峰之…"
    },
    {
        "type": "article",
        "updated": 1484664390,
        "id": 24928414,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1484664390,
        "url": "",
        "content": "<p><a href=\"https://zhuanlan.zhihu.com/p/24910829\" class=\"internal\">知乎专栏</a>  中提到</p><blockquote><p>因为这样的实现会更加麻烦一些，我将这个问题留给读者作为练习。 <br></p></blockquote><p> 然而，事实上无限+1要比在代码里设上限简单</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Flag</span> <span class=\"p\">{</span>\n  <span class=\"k\">friend</span> <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">Flag</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Writer</span> <span class=\"p\">{</span>\n  <span class=\"k\">friend</span> <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">Flag</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">int</span>\n<span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">,</span> <span class=\"n\">Flag</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{})</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"n\">Flag</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">{})</span>\n         <span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">int</span>\n<span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">Flag</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{},</span> <span class=\"kt\">int</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Flag</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">{}))</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n         <span class=\"kt\">int</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Writer</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">int</span>\n<span class=\"n\">next</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"n\">N</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"p\">();</span>\n  <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"p\">();</span>\n  <span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"p\">();</span>\n  <span class=\"k\">static_assert</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"try again\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "image_url": "",
        "title": "SMP之无限+1",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://zhuanlan.zhihu.com/p/24910829\" class=\"internal\">知乎专栏</a> 中提到因为这样的实现会更加麻烦一些，我将这个问题留给读者作为练习。 然而，事实上无限+1要比在代码里设上限简单template&lt;int&gt;\nstruct Flag {\n friend constexpr int flag(Flag);\n};\n\ntemplate&lt;int N&gt;\nstruct Writer {\n friend constexpr int fl…"
    },
    {
        "type": "article",
        "updated": 1483441676,
        "id": 24694834,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1483441633,
        "url": "",
        "content": "<p>好了。第七期开始了。很遗憾，并不存在什么第七期，前几期都是烟幕弹。现在才是真正的内容。真正的内容很少，就下面那么一点点。</p><p>众所周知，C++的constexpr函数的返回值并不是真正完全不变的。 举个简单的例子，下面这个程序是编译不了的</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"err\">$</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"err\">$</span><span class=\"o\">::</span><span class=\"n\">Lifetime</span><span class=\"o\">::</span><span class=\"n\">Ended</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">bool</span>\n<span class=\"n\">ended</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"err\">$</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">bool</span>\n<span class=\"n\">ended</span><span class=\"p\">(...)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"err\">$</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">Lifetime</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">static_assert</span><span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"n\">ended</span><span class=\"o\">&lt;</span><span class=\"err\">$</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n\n  <span class=\"k\">struct</span> <span class=\"err\">$</span><span class=\"o\">::</span><span class=\"n\">Lifetime</span> <span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">Ended</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">static_assert</span><span class=\"p\">(</span><span class=\"n\">not</span> <span class=\"n\">ended</span><span class=\"o\">&lt;</span><span class=\"err\">$</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span> <span class=\"c1\">// compiler error here</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><a href=\"https://link.zhihu.com/?target=http%3A//b.atch.se/posts/non-constant-constant-expressions/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Non-constant constant-expressions in C++<i class=\"icon-external\"></i></a>里介绍了著名的friend injection技巧。借此我们就可以在C++里模拟Rust的borrow checker</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;new&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;type_traits&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;utility&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"borrow.hpp\"</span><span class=\"cp\"></span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Container</span> <span class=\"p\">{</span>\n  <span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)];</span>\n\n  <span class=\"kt\">void</span>\n  <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n    <span class=\"k\">new</span> <span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">T</span>\n  <span class=\"nf\">read</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n    <span class=\"n\">T</span> <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n    <span class=\"n\">ptr</span><span class=\"o\">-&gt;~</span><span class=\"n\">T</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">item</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">T</span><span class=\"o\">&amp;</span>\n  <span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">T</span> <span class=\"k\">const</span><span class=\"o\">&amp;</span>\n  <span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">T</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"kt\">void</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">));</span>\n    <span class=\"k\">return</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"err\">$</span><span class=\"p\">,</span>\n         <span class=\"kt\">bool</span> <span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">borrow</span><span class=\"o\">::</span><span class=\"n\">available</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">{}),</span>\n         <span class=\"k\">typename</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">enable_if</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;::</span><span class=\"n\">type</span><span class=\"o\">&gt;</span>\n<span class=\"k\">auto</span>\n<span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">borrow</span><span class=\"o\">::</span><span class=\"n\">BorrowPtr</span><span class=\"o\">&lt;</span><span class=\"n\">Container</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"err\">$</span><span class=\"o\">&gt;</span> <span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"o\">::</span><span class=\"n\">borrow</span><span class=\"o\">::</span><span class=\"n\">BorrowPtr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"err\">$</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">).</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">auto</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Container</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"p\">{};</span>\n  <span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n  <span class=\"n\">BEGIN_LIFETIME</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">);</span>\n  <span class=\"k\">auto</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">borrow</span><span class=\"o\">::</span><span class=\"n\">borrow_mut</span><span class=\"o\">&lt;</span><span class=\"err\">$</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n\n  <span class=\"n\">BEGIN_LIFETIME</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"k\">auto</span> <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">borrow</span><span class=\"o\">::</span><span class=\"n\">borrow_mut</span><span class=\"o\">&lt;</span><span class=\"err\">$</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n\n  <span class=\"k\">auto</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">);</span>\n\n  <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n  <span class=\"n\">END_LIFETIME</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n  <span class=\"o\">*</span><span class=\"n\">p2</span><span class=\"p\">;</span> <span class=\"c1\">// compiler error here</span>\n\n  <span class=\"n\">END_LIFETIME</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在 $1 结束之后，p1 p2就都用不了了。你要想用就会产生编译错误。</p><p>难以置信，这就是编译不过去。那么就到此为止吧。</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (7)",
        "excerpt_title": "",
        "excerpt": "好了。第七期开始了。很遗憾，并不存在什么第七期，前几期都是烟幕弹。现在才是真正的内容。真正的内容很少，就下面那么一点点。众所周知，C++的constexpr函数的返回值并不是真正完全不变的。 举个简单的例子，下面这个程序是编译不了的template&lt;typename $…"
    },
    {
        "type": "article",
        "updated": 1483431315,
        "id": 24693000,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1483431316,
        "url": "",
        "content": "<p>看了这么多期。你肯定早就发现了，这个系列就是个标题党。除了标题和轮子哥并没有半毛钱关系。而且和C++关系也不大。</p><p>没错。我写的这些实际上是，怎么让C++和Rust代码尽量直接对应。</p><p>本期就相当于回顾一下前几期的内容。 <br></p><p>就举一个非常简单的例子<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">namespace</span> <span class=\"n\">storage</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"o\">=</span> <span class=\"kt\">void</span><span class=\"o\">&gt;</span> <span class=\"k\">struct</span> <span class=\"n\">SystemAllocator</span><span class=\"p\">;</span>\n\n  <span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span>\n      <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">enable_if</span><span class=\"o\">&lt;::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">is_nothrow_move_constructible</span><span class=\"o\">&lt;</span>\n             <span class=\"n\">T</span><span class=\"o\">&gt;::</span><span class=\"n\">value</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">is_nothrow_destructible</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;::</span><span class=\"n\">value</span><span class=\"o\">&gt;::</span><span class=\"n\">type</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"n\">SystemAllocator</span><span class=\"p\">(</span><span class=\"n\">SystemAllocator</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n    <span class=\"n\">SystemAllocator</span> <span class=\"o\">&amp;</span>\n    <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">SystemAllocator</span> <span class=\"k\">const</span> <span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n\n    <span class=\"n\">SystemAllocator</span><span class=\"p\">(</span><span class=\"n\">SystemAllocator</span> <span class=\"o\">&amp;&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">default</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">namespace</span> <span class=\"n\">traits</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">Allocator</span><span class=\"o\">::</span><span class=\"n\">Impl</span><span class=\"o\">&lt;::</span><span class=\"n\">ttl</span><span class=\"o\">::</span><span class=\"n\">storage</span><span class=\"o\">::</span><span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"k\">using</span> <span class=\"n\">SystemAllocator</span> <span class=\"o\">=</span> <span class=\"o\">::</span><span class=\"n\">ttl</span><span class=\"o\">::</span><span class=\"n\">storage</span><span class=\"o\">::</span><span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">using</span> <span class=\"n\">Item</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n\n    <span class=\"k\">static</span> <span class=\"n\">Item</span> <span class=\"o\">*</span>\n    <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">SystemAllocator</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">Item</span> <span class=\"o\">&amp;&amp;</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">Item</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"k\">static_cast</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span> <span class=\"o\">*&gt;</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">)));</span>\n      <span class=\"k\">new</span> <span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span> <span class=\"n\">ptr</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">static</span> <span class=\"n\">Item</span>\n    <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"n\">SystemAllocator</span> <span class=\"o\">&amp;</span><span class=\"p\">,</span> <span class=\"n\">Item</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">Item</span> <span class=\"n\">item</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">));</span>\n      <span class=\"n\">ptr</span><span class=\"o\">-&gt;~</span><span class=\"n\">Item</span><span class=\"p\">();</span>\n      <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"n\">item</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在Rust里是这么写的。</p><div class=\"highlight\"><pre><code class=\"language-rust\"><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_marker</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Allocator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">size_of</span><span class=\"o\">::&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ptr</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">item</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SystemAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SystemAllocator</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_marker</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">PhantomData</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><p>本期到此结束</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (6)",
        "excerpt_title": "",
        "excerpt": "看了这么多期。你肯定早就发现了，这个系列就是个标题党。除了标题和轮子哥并没有半毛钱关系。而且和C++关系也不大。没错。我写的这些实际上是，怎么让C++和Rust代码尽量直接对应。本期就相当于回顾一下前几期的内容。 就举一个非常简单的例子 namespace st…"
    },
    {
        "type": "article",
        "updated": 1483244520,
        "id": 24661323,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1483197802,
        "url": "",
        "content": "<p>说的就是你，<a href=\"https://www.zhihu.com/people/b6f0c45a4d0dc84f228977e0d70bd700\" data-hash=\"b6f0c45a4d0dc84f228977e0d70bd700\" class=\"member_mention\" data-title=\"@立党  \" data-editable=\"true\" data-hovercard=\"p$b$b6f0c45a4d0dc84f228977e0d70bd700\">@立党  </a>:  <a href=\"https://zhuanlan.zhihu.com/p/24600717\" class=\"internal\">穷逼就别学单片机开发了</a></p><p>CSAPP这过气的大杂烩有啥好推荐的。 作为大杂烩也是不及格的，大杂烩追求的是覆盖面广，去讲什么优化之类的深度内容是什么意思？</p><p>之前我提到过 <a href=\"https://zhuanlan.zhihu.com/p/23881270\" class=\"internal\">If you can't do, teach.</a> ，不过最后光顾着打( <a href=\"https://link.zhihu.com/?target=https%3A//fast-track.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">伪书<i class=\"icon-external\"></i></a> ) 广告，没有考虑实际情况，推荐一些可以立即动手做起来的想法。现在就来推荐一下</p><p>------------------------------------------------------ <br></p><p>Linux有了namespace之后，网络搞起来就方便了很多，不怕把在用的网络配置玩坏了。可以参考 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/mininet\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mininet<i class=\"icon-external\"></i></a> 。我希望是先建一个user namespace，这样就不需要root权限了。内容有多少搞多少吧，可以怎么搭一个什么样的网络开始，或者怎么在tun/tap上实现个网络协议栈，或者找个交换机厂家提供公开下载的的模拟器软件，连到这个network namespace里。</p><p>------------------------------------------------------  <br></p><p>操作系统不只是内核，其他功能也很重要。 Linux有了UIO/VFIO之后，也是可以比较方便的开发用户态驱动了。而qemu是可以直接用 -kernel 参数启动的，也就是我们可以利用宿主机上已经安装的内核来启动虚拟机，免去很多麻烦，搞个只有busybox的initramfs，当然如果缺一些模块也要放进去，起来就别去pivot root了，mount一个9p FS就直接访问宿主机上的文件了。这样后面开发驱动就比较方便了。你可以试着用这样的方法，开发一个用户态驱动。</p><p>------------------------------------------------------</p><p>新一代的像Wayland这样的display server，接口是比较简单的。我们直接申请一片内存，往里写每个点的颜色值就好了，不需要纠缠别的东西。所以搞一个演示OpenGL原理的程序。用软件大概模拟一下GPU画图的过程，注意一定不要搞成软渲染那样。大概样子，应该长的和<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/triangle\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">triangle<i class=\"icon-external\"></i></a>里的draw.cpp差不多。不过那里面代码写的比较乱，画图的时候画蛇添足多算了个bounding box，不可取，例子可能也是错的。不管怎么样，图能画出来了。假如你觉得还能忍，那么就把这些问题改改好。不能忍直接从头写个更好的吧。<br></p><p>------------------------------------------------------</p><p>别的想起来再补充。或者你有一些像上面这样不太完整的想法，也可以在评论里说。我会搬运上来的。 </p>",
        "image_url": "",
        "title": "别推荐什么CSAPP了",
        "excerpt_title": "",
        "excerpt": "说的就是你，<a href=\"https://www.zhihu.com/people/b6f0c45a4d0dc84f228977e0d70bd700\" data-hash=\"b6f0c45a4d0dc84f228977e0d70bd700\" class=\"member_mention\" data-title=\"@立党  \" data-editable=\"true\" data-hovercard=\"p$b$b6f0c45a4d0dc84f228977e0d70bd700\">@立党 </a>: <a href=\"https://zhuanlan.zhihu.com/p/24600717\" data-editable=\"true\" data-title=\"穷逼就别学单片机开发了\" class=\"\">穷逼就别学单片机开发了</a>CSAPP这过气的大杂烩有啥好推荐的。 作为大杂烩也是不及格的，大杂烩追求的是覆盖面广，去讲什么优化之类的深度内容是什么意思？之前我提到过 <a href=\"https://zhuanlan.zhihu.com/p/23881270\" data-editable=\"true\" data-title=\"知乎专栏\" class=\"\">If you can't do, teach.</a> ，不过最后光顾着打( <a href=\"https://fast-track.github.io/\" data-editable=\"true\" data-title=\"广告\" class=\"\">伪书</a> ) 广告，没有考…"
    },
    {
        "type": "article",
        "updated": 1483109247,
        "id": 24643171,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1483109247,
        "url": "",
        "content": "<p>本期就讲一点点和 rvalue reference有关的东西。C++的 ::std::move 这个名字有很强的欺骗性。::std::move并不能把内容move走。只是搞出了个rvalue reference，真正的move是在move constructor里完成的。这样造成了一些不必要的麻烦，虽然你已经move走了，但是原来那里destructor还是会照常调用的。毕竟这个叫rvalue reference而不是rvalue。</p><p>现在就来检验一下对move的理解。我们用valid来标记有没有move走。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">struct</span> <span class=\"n\">Counter</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">count</span><span class=\"p\">;</span>\n  <span class=\"kt\">bool</span> <span class=\"n\">valid</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">valid</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">&amp;&amp;</span><span class=\"n\">o</span><span class=\"p\">)</span> <span class=\"k\">noexcept</span> <span class=\"o\">:</span> <span class=\"n\">valid</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">,</span> <span class=\"n\">o</span><span class=\"p\">.</span><span class=\"n\">valid</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Counter</span><span class=\"o\">&amp;</span> <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">&amp;&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"n\">Counter</span> <span class=\"k\">const</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n  <span class=\"n\">Counter</span><span class=\"o\">&amp;</span> <span class=\"k\">operator</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Counter</span><span class=\"o\">&amp;</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">delete</span><span class=\"p\">;</span>\n\n  <span class=\"o\">~</span><span class=\"n\">Counter</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">valid</span><span class=\"p\">)</span>\n      <span class=\"n\">count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kt\">size_t</span> <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div><p>我们写的没错，那么下面这段代码的输出就应该是1</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"kt\">char</span> <span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\n<span class=\"kt\">void</span>\n<span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"n\">Counter</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">counter</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">new</span> <span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">)</span> <span class=\"n\">Counter</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">Counter</span>\n<span class=\"nf\">read</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">Counter</span> <span class=\"o\">*</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Counter</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">buf</span><span class=\"p\">;</span>\n  <span class=\"n\">Counter</span> <span class=\"n\">counter</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">move</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">));</span>\n  <span class=\"n\">ptr</span><span class=\"o\">-&gt;~</span><span class=\"n\">Counter</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"n\">counter</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">{</span>\n    <span class=\"n\">write</span><span class=\"p\">({});</span>\n    <span class=\"n\">Counter</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%zu</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">Counter</span><span class=\"o\">::</span><span class=\"n\">count</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>也就是从写进去到读出来，我们没有主动产生不必要的东西。</p><p>假如是一个引用计数的，我们采用copy语义，count就不止是1了，也就是这里引用计数会多几次不必要的+1 -1，这样很不好。</p><p>本期内容比较少，就到此结束吧。</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (5)",
        "excerpt_title": "",
        "excerpt": "本期就讲一点点和 rvalue reference有关的东西。C++的 ::std::move 这个名字有很强的欺骗性。::std::move并不能把内容move走。只是搞出了个rvalue reference，真正的move是在move constructor里完成的。这样造成了一些不必要的麻烦，虽然你已经move走了，但…"
    },
    {
        "type": "article",
        "updated": 1483109158,
        "id": 24640224,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1483109134,
        "url": "",
        "content": "<p>这一期我们就来看一点点 printf 的问题。现在整数类型都用 uint8_t 这种，可是printf不支持啊。</p><p>用模板表示字符串，我们用额外的STRING_LITERAL将字符串存下来，免得编译器一不高兴就把所有中间产生的字符串都存下来。<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">STRING</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">STRING_LITERAL</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">STRING_LITERAL</span><span class=\"o\">&lt;</span><span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"k\">sizeof</span><span class=\"p\">...(</span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">STRING_LITERAL</span><span class=\"o\">&lt;</span><span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;&gt;::</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"k\">sizeof</span><span class=\"p\">...(</span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">S</span><span class=\"p\">...,</span> <span class=\"mi\">0</span><span class=\"p\">};</span>\n</code></pre></div><p>通过模板的功能，我们能将不同的整数类型，对应到不同的格式字符串。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MOD</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MOD</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"sc\">'h'</span><span class=\"p\">,</span> <span class=\"sc\">'h'</span><span class=\"p\">,</span> <span class=\"sc\">'u'</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MOD</span><span class=\"o\">&lt;</span><span class=\"kt\">unsigned</span> <span class=\"kt\">short</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"sc\">'h'</span><span class=\"p\">,</span> <span class=\"sc\">'u'</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p> 这里用 `8u 表示 uint8_t，`8d 表示 int8_t，类似的这里就省略了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">struct</span> <span class=\"n\">CONCAT</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S1</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S2</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONCAT</span><span class=\"o\">&lt;</span><span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S1</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S2</span><span class=\"p\">...</span><span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S1</span><span class=\"p\">...,</span> <span class=\"n\">S2</span><span class=\"p\">...</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"n\">STRING</span><span class=\"o\">&lt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"sc\">'`'</span><span class=\"p\">,</span> <span class=\"sc\">'`'</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">CONCAT</span><span class=\"o\">&lt;</span><span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"sc\">'`'</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"sc\">'`'</span><span class=\"p\">,</span> <span class=\"sc\">'8'</span><span class=\"p\">,</span> <span class=\"sc\">'u'</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">CONCAT</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">MOD</span><span class=\"o\">&lt;</span><span class=\"kt\">uint8_t</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"sc\">'`'</span><span class=\"p\">,</span> <span class=\"sc\">'8'</span><span class=\"p\">,</span> <span class=\"sc\">'d'</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">CONCAT</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">MOD</span><span class=\"o\">&lt;</span><span class=\"kt\">int8_t</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"p\">...</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">CONCAT</span><span class=\"o\">&lt;</span><span class=\"n\">STRING</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">...</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>最后包装一下</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"p\">,</span> <span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MAKE_STRING</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">...</span><span class=\"o\">&gt;</span> <span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">U</span><span class=\"p\">...</span> <span class=\"n\">I</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MAKE_STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"p\">...</span><span class=\"o\">&gt;&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">TYPE</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">CONVERT</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">{}.</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">I</span><span class=\"p\">]...</span><span class=\"o\">&gt;::</span><span class=\"n\">TYPE</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">S</span><span class=\"o\">&gt;</span>\n<span class=\"k\">using</span> <span class=\"n\">FORMAT_STRING</span> <span class=\"o\">=</span> <span class=\"n\">STRING_LITERAL</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">MAKE_STRING</span><span class=\"o\">&lt;</span><span class=\"n\">S</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">make_index_sequence</span><span class=\"o\">&lt;</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;&gt;::</span><span class=\"n\">TYPE</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define FORMAT(str) ({ struct S { const char s[sizeof(str)] = (str); }; FORMAT_STRING&lt;S&gt;::s;})</span>\n</code></pre></div><p>于是就可以这么用了</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span>  <span class=\"kt\">uint8_t</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"n\">FORMAT</span><span class=\"p\">(</span><span class=\"s\">\"``%`8u</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">),</span> <span class=\"n\">x</span><span class=\"p\">);</span>\n</code></pre></div><p>本期就到此结束了</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (4)",
        "excerpt_title": "",
        "excerpt": "这一期我们就来看一点点 printf 的问题。现在整数类型都用 uint8_t 这种，可是printf不支持啊。用模板表示字符串，我们用额外的STRING_LITERAL将字符串存下来，免得编译器一不高兴就把所有中间产生的字符串都存下来。 template&lt;char...&gt;\nstruct STRING {\n};…"
    },
    {
        "type": "article",
        "updated": 1482655907,
        "id": 24553653,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1482655412,
        "url": "",
        "content": "<p>根据前两期的内容，我想你们一定猜到了，这一期我们会转进到和<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Abstract_data_type\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Abstract data type<i class=\"icon-external\"></i></a>相关的内容。毕竟解决了allocator的类型问题之后，我们就应该来看一看container接口的问题。</p><p>C++现在的STL很不好，把Abstract Data Type的操作都写在具体实现里。假如一个container既实现了Stack又实现了Queue，那么请问 container.push 究竟是Stack的push还是Queue的push?<br></p><p>所以接下来，我们来看一点点<a href=\"https://link.zhihu.com/?target=https%3A//github.com/pfultz2/Tick/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> pfultz2/Tick<i class=\"icon-external\"></i></a> 的原理，实现一个naive的Trait机制。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"p\">...</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span>\n<span class=\"k\">using</span> <span class=\"n\">VOID</span> <span class=\"o\">=</span> <span class=\"kt\">void</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"p\">,</span> <span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">SAME_TYPE</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">SAME_TYPE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span> <span class=\"n\">Trait</span><span class=\"o\">&gt;</span>\n<span class=\"k\">using</span> <span class=\"n\">IMPLEMENTS</span> <span class=\"o\">=</span> <span class=\"k\">decltype</span><span class=\"p\">(</span><span class=\"n\">Trait</span><span class=\"o\">::</span><span class=\"k\">template</span> <span class=\"n\">REQUIRE</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">());</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">MyFirstTrait</span> <span class=\"p\">{</span>\n  <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n  <span class=\"k\">struct</span> <span class=\"n\">Impl</span><span class=\"p\">;</span>\n\n  <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n  <span class=\"k\">static</span>\n  <span class=\"kt\">void</span>\n  <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">Impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;::</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">self</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n  <span class=\"k\">constexpr</span>\n  <span class=\"k\">static</span>\n  <span class=\"k\">auto</span>\n  <span class=\"n\">REQUIRE</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">VOID</span><span class=\"o\">&lt;</span>\n    <span class=\"n\">SAME_TYPE</span><span class=\"o\">&lt;</span><span class=\"k\">decltype</span><span class=\"p\">(</span><span class=\"n\">Impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;::</span><span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"k\">decltype</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>比如我们有两个struct，一个实现了MyFirstTrait，一个没有实现</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">MyFirstTrait</span><span class=\"o\">::</span><span class=\"n\">Impl</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">static</span>\n  <span class=\"kt\">void</span>\n  <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&amp;</span> <span class=\"n\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Bar</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>那一个函数怎么针对不同的trait有不同的实现？</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;utility&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span><span class=\"o\">=</span><span class=\"kt\">void</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">int</span> <span class=\"n\">_test</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">constexpr</span>\n<span class=\"kt\">int</span> <span class=\"n\">_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">IMPLEMENTS</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">MyFirstTrait</span><span class=\"o\">&gt;&gt;</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">typename</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">enable_if</span><span class=\"o\">&lt;</span><span class=\"n\">_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">&gt;::</span><span class=\"n\">type</span>\n<span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"0</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">typename</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">enable_if</span><span class=\"o\">&lt;</span><span class=\"n\">_test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">void</span><span class=\"o\">&gt;::</span><span class=\"n\">type</span>\n<span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">MyFirstTrait</span><span class=\"o\">::</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"1</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">Foo</span> <span class=\"p\">{});</span>\n  <span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">Bar</span> <span class=\"p\">{});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>如何让编译器拒绝没有实现某个Trait的类型？</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"n\">IMPLEMENTS</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">MyFirstTrait</span><span class=\"o\">&gt;</span>\n<span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"o\">&amp;&amp;</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">Foo</span> <span class=\"p\">{});</span>\n  <span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"n\">Bar</span> <span class=\"p\">{});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>本期内容非常简单，就到此结束吧。</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (3)",
        "excerpt_title": "",
        "excerpt": "根据前两期的内容，我想你们一定猜到了，这一期我们会转进到和<a href=\"https://en.wikipedia.org/wiki/Abstract_data_type\" data-editable=\"true\" data-title=\"Abstract data type\" class=\"\">Abstract data type</a>相关的内容。毕竟解决了allocator的类型问题之后，我们就应该来看一看container接口的问题。C++现在的STL很不好，把Abstract Data Type的操作都写在具体实现里。假如一个cont…"
    },
    {
        "type": "article",
        "updated": 1482591025,
        "id": 24547564,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1482590297,
        "url": "",
        "content": "<p>有很多人对<a href=\"https://zhuanlan.zhihu.com/p/24535431\" class=\"internal\"> 教轮子哥学一点点C++ (1)</a> 提出疑问，表示不理解这篇文章，认为这么简单达不到劝退的效果。</p><p>真的是这样的吗？我说过，这个系列是要用轮子哥的方式来劝退C++。什么是轮子哥的方式？那就是造轮子啊。假如你之前没有造过类似的轮子，看完之后也没想自己动手造一个，这只能说明你已经放弃C++了。我们的文章卓有成效。从这个开始，主要是因为C++标准库里并没有测试工具，所以我们得先自制一个。顺便还能黑轮子哥还在用石器时代之前的测试方式，多好。</p><p>假如你坚持认为自己还没放弃，只是不知道要造个什么样的轮子。好，那我来给你一个例子<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdexcept&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"test.hpp\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">bool</span>\n<span class=\"nf\">is_equal</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">TESTCASE</span><span class=\"p\">(</span><span class=\"s\">\"My First TestCase\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n  <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"No problem\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"nb\">true</span><span class=\"p\">);</span>\n    <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"n\">is_equal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">));</span>\n    <span class=\"n\">ASSERT_THROW</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"k\">throw</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"Assertion failed\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">ASSERT</span><span class=\"p\">(</span><span class=\"n\">is_equal</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ASSERT_THROW</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"Exceptions\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">throw</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">SECTION</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">throw</span> <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">logic_error</span><span class=\"p\">(</span><span class=\"s\">\"stop here\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span>\n<span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">run_tests</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>请提供 test.hpp ，使得输出差不多长下面这样</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Caught exception of type 'AssertionFailure'\ntestcase.cpp:19: ASSERTION FAILED\n  false\nTestcase state:\n   testcase.cpp:9: My First TestCase\n      testcase.cpp:17: Assertion failed\n      -&gt; testcase.cpp:18: a\nCaught exception of type 'AssertionFailure'\ntestcase.cpp:23: ASSERTION FAILED\n  is_equal(1,2)\nTestcase state:\n   testcase.cpp:9: My First TestCase\n      testcase.cpp:17: Assertion failed\n      -&gt; testcase.cpp:22: b\nCaught exception of type 'AssertionFailure'\ntestcase.cpp:29: No exception caught in\n  1\nTestcase state:\n   testcase.cpp:9: My First TestCase\n   -&gt; testcase.cpp:17: Assertion failed\n         testcase.cpp:26: c\nCaught exception of type 'AssertionFailure'\ntestcase.cpp:29: No exception caught in\n  1\nTestcase state:\n   testcase.cpp:9: My First TestCase\n   -&gt; testcase.cpp:17: Assertion failed\nCaught exception of type 'int'\nTestcase state:\n   testcase.cpp:9: My First TestCase\n      testcase.cpp:32: Exceptions\n      -&gt; testcase.cpp:33: a\nCaught exception of type 'std::logic_error'\n  stop here\nTestcase state:\n   testcase.cpp:9: My First TestCase\n      testcase.cpp:32: Exceptions\n      -&gt; testcase.cpp:37: b\nResult: 3/9 passed\n</code></pre></div><p>编译请用 g++ -std=gnu++14 -o testcase testcase.cpp</p><p>假如你想证明你还没放弃，那么你可以在完成后，把文章链接贴到评论里，或者直接投稿《驳《教轮子哥学一点点C++ (1)》》</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (1) 答疑",
        "excerpt_title": "",
        "excerpt": "有很多人对<a href=\"https://zhuanlan.zhihu.com/p/24535431\" data-editable=\"true\" data-title=\"知乎专栏\" class=\"\"> 教轮子哥学一点点C++ (1)</a> 提出疑问，表示不理解这篇文章，认为这么简单达不到劝退的效果。真的是这样的吗？我说过，这个系列是要用轮子哥的方式来劝退C++。什么是轮子哥的方式？那就是造轮子啊。假如你之前没有造过类似的轮子，看完之后也没想自…"
    },
    {
        "type": "article",
        "updated": 1482561975,
        "id": 24541264,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1482561390,
        "url": "",
        "content": "<p>本期就讲一点点关于 allocator 类型的问题</p><p>C++ STL里的Allocator类型完全是不讲道理的。你传给container的allocator并不是container真正使用allocator。比如你传进去的是allocator1，而container实际使用的是allocator2</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Allocator&lt;T&gt; allocator1(...);\nAllocator&lt;Node&lt;T&gt;&gt; allocator2(allocator1);\n</code></pre></div><p>使用者会对此感到困惑，而对于Allocator的作者来说，这是个灾难。假如你想在固定一片内存区域内分配空间，这就意味这 allocator2 和 allocator1 指向的是同一片内存区域，也就是 Allocator 必须在同一片区域内支持多种不同类型的分配，因为至少你是不好阻止别人同时使用 allocator1 和 allocator2 的。这个问题实际上就是 Allocator 类型没搞对造成的。一个 allocator 就该是一个 container 真正独占的。你想共用可以通过共用同一个参数来实现。</p><p>所以更合理的写法是类似下面这样的。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">Node</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span><span class=\"o\">&gt;</span> <span class=\"k\">typename</span> <span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>\n<span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Allocator</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&gt;&amp;&amp;</span>\n<span class=\"n\">create_list_with_allocator</span><span class=\"p\">(</span><span class=\"n\">Allocator</span><span class=\"o\">&lt;</span><span class=\"n\">Node</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;&amp;&amp;</span> <span class=\"n\">allocator</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">SimpleAllocator</span> <span class=\"p\">{</span>\n  <span class=\"n\">SimpleAllocator</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">create_list_with_allocator</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">SimpleAllocator</span><span class=\"o\">&gt;</span><span class=\"p\">({</span><span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这样我们正确表示了Allocator的类型，而且使用者是不需要知道 Node 的。</p><p>然而这并不足以完全解决问题。假如 Allocator需要多个模板参数呢？</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"k\">typename</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"n\">AdvancedAllocator</span> <span class=\"p\">{</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">using</span> <span class=\"n\">MyAllocator</span> <span class=\"o\">=</span> <span class=\"n\">AdvancedAllocator</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">create_list_with_allocator</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">,</span> <span class=\"n\">MyAllocator</span><span class=\"o\">&gt;</span><span class=\"p\">({});</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>要注意到MyAllocator的声明是不能放到 main 里面的。很多年以前，有很多人吐槽Ada那个别名写起来很啰嗦。但是经过这么多年发展以后，C++的别名写起来哪里不啰嗦了。而现在，信出现的语言，比如Rust，支持Trait和Type Inference，这样的用法是不需要别名的，差不多像这样就可以了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>List::&lt;int, _&gt;::new_with_allocator(Allocator::new(...));\n</code></pre></div><p>好了，这一期就到这里了，也就是简单用了一下type deduction和rvalue reference。</p><p>-----------------------------------------<br></p><p>这同样也可以运用到轮子哥在<a href=\"https://zhuanlan.zhihu.com/p/24365844\" class=\"internal\">随手干点什么都能发现开源界可以婊的东西</a>提到的例子。比较理想的，我们应该写的像下面这样，异常要产生也是在进入emplace之前产生的 。 而现在因为STL语义的问题，我们是办不到的。这也导致了container有intrusive和non-intrusive的区分。container的作者还要去管里面的元素是怎么建出来，这当然容易出错了，而且 emplace 那行也很费解。<br></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iterator&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span> <span class=\"n\">Wheel</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"p\">;</span>\n\n  <span class=\"n\">Wheel</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"kt\">bool</span> <span class=\"n\">to_throw</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">to_throw</span><span class=\"p\">)</span>\n       <span class=\"k\">throw</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Wheel</span><span class=\"o\">&gt;</span> <span class=\"n\">wheels</span><span class=\"p\">;</span>\n  <span class=\"n\">wheels</span><span class=\"p\">.</span><span class=\"n\">reserve</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n\n  <span class=\"n\">wheels</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">({</span><span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n  <span class=\"n\">wheels</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">({</span><span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">});</span>\n  <span class=\"n\">wheels</span><span class=\"p\">.</span><span class=\"n\">emplace_back</span><span class=\"p\">({</span><span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">});</span>\n\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"n\">wheels</span><span class=\"p\">.</span><span class=\"n\">emplace</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"n\">wheels</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nl\">to_throw</span><span class=\"p\">:</span> <span class=\"nb\">true</span><span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(...)</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"nl\">wheel</span> <span class=\"p\">:</span> <span class=\"n\">wheels</span><span class=\"p\">)</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%d \"</span><span class=\"p\">,</span> <span class=\"n\">wheel</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">);</span>\n\n  <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>轮子哥不告诉大家这是应该避免的写法，只顾着把别人的Bug批判一番，也是很棒的。</p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (2)",
        "excerpt_title": "",
        "excerpt": "本期就讲一点点关于 allocator 类型的问题C++ STL里的Allocator类型完全是不讲道理的。你传给container的allocator并不是container真正使用allocator。比如你传进去的是allocator1，而container实际使用的是allocator2Allocator&lt;T&gt; allocator1(...);\nAlloca…"
    },
    {
        "type": "article",
        "updated": 1483441744,
        "id": 24540655,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1482551389,
        "url": "",
        "content": "<p>同主题的前一篇被举报了。所以重新发一遍。</p><p>轮子哥既不会(现代)C++，C++也不支持什么面向对象。轮子哥却要强行开课</p><blockquote><p>基于现代的C++构建，教你以面向对象思想编写优雅而健壮的代码 </p></blockquote><p>你也可能会发现轮子哥的一些写法既不优雅也不健壮。这也就算了，轮子哥的课程却在那里宣传帮你 “ 克服“从入门到放弃” ”。所以，我们要开一个系列把轮子哥批判一番。为什么只能是一点点C++，因为没有人可以学会C++，哪怕只是一点点C++，里面也充斥着奇技淫巧。早一天放弃C++，早一天解脱。</p><p>我们的目标是达成<a href=\"https://zhuanlan.zhihu.com/p/24328534\" class=\"internal\">为什么不再想碰 C++</a> 题图里的效果，我们的口号是劝退一人胜造<a href=\"https://www.zhihu.com/question/24078259\" class=\"internal\">轮子哥三大浪漫</a>。<br></p><p>以下是本系列文章列表，<b>欢迎踊跃投稿 </b></p><p><a href=\"https://zhuanlan.zhihu.com/p/24535431\" class=\"internal\">教轮子哥学一点点C++ (1)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24547564\" class=\"internal\">教轮子哥学一点点C++ (1) 答疑</a><br></p><p><a href=\"https://zhuanlan.zhihu.com/p/24541264\" class=\"internal\">教轮子哥学一点点C++ (2)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24553653\" class=\"internal\">教轮子哥学一点点C++ (3)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24640224\" class=\"internal\">教轮子哥学一点点C++ (4)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24643171\" class=\"internal\">教轮子哥学一点点C++ (5)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24693000\" class=\"internal\">教轮子哥学一点点C++ (6)</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/24694834\" class=\"internal\">教轮子哥学一点点C++ (7)</a></p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++",
        "excerpt_title": "",
        "excerpt": "同主题的前一篇被举报了。所以重新发一遍。轮子哥既不会(现代)C++，C++也不支持什么面向对象。轮子哥却要强行开课基于现代的C++构建，教你以面向对象思想编写优雅而健壮的代码 你也可能会发现轮子哥的一些写法既不优雅也不健壮。这也就算了，轮子哥的课程却…"
    },
    {
        "type": "article",
        "updated": 1482553451,
        "id": 24535431,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1482501960,
        "url": "",
        "content": "<p>只能讲一点点，因为C++这么复杂，大家最多就只能会一点点。只要会了一点点，你就知道应该果断放弃C++。假如坚持不放弃的，那一定是一点都不会的。</p><p>本期就先来最简单的，就讲一点点<a href=\"http://link.zhihu.com/?target=https%3A//github.com/philsquared/Catch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Catch<i class=\"icon-external\"></i></a>  的SECTION 的原理。</p><p>大家都知道，C/C++函数里的static变量，只会在这个函数第一次运行时初始化，之后就一直存在在那里了。</p><p>大家都知道，在 if 语句的条件里，声明一个普通变量，他是要等到 if 语句的body执行完才会死的。</p><p>所以经过简化再简化，Catch的一个 SECTION 展开来大概长这样<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>static Section section1;\nif (Condition condition1 = section1) {\n}\n</code></pre></div><p>而一个 TESTCASE 就是一个函数。每次运行有一个 State</p><p>State, Section, 都有一个标记记录是否运行结束</p><p>每当执行到  condition1 = section1 时，condition1 首先会判断， state有没有结束，假如已经结束，那么 把 condition1 转换成 bool 会得到 false ，也就是不会运行 if 语句的 body 。这样就保证了，多个同级 SECTION ，运行一次 TESTCASE 最多只有一个可以运行。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span> SECTION(\"a\") {\n }\n\n SECTION(\"b\") {\n }\n\n SECTION(\"c\") {\n }\n</code></pre></div><p>假如 state 没有结束，那么 condition1 会判断 section1 有没有结束，假如已经结束，说明 if 语句 body 里所有测试都运行完了，不需要再运行了。假如 section1 没有结束，那么就 标记进入了 section1，运行测试。<br></p><p>每当执行到 condition1 的 destructor 时，假如当前 没有进入section1 ，那么就啥也不用做</p><p>假如标记 进入了section1，那么就取消标记。同时，判断 state 有没有结束，假如 state 已经结束了，说明有一个内层的 SECTION 运行结束了，那这样就可以了。假如 state 没有结束，说明 section1 的所有测试都运行完了，那么就标记 section1 结束，同时标记 state 结束。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>SECTION(\"a\") {\n  SECTION(\"b\") {\n  }\n\n  SECTION(\"c\") {\n  }\n}\n</code></pre></div><p>同时，我们可以看出，假如所有 section 都运行完了，我们再去运行一次 TESTCASE ，state是不会被标记为结束的。因此，我们可以以此来判断整个 TESTCASE 有没有运行完。</p><p>好了，这一期就到这里了。</p><p>大家不要告诉轮子哥，TestCase只用一个类就好，在constructor那里，把自己插入到一个双向链表里的。双向链表的头尾都是TestCase的static成员。这样就不需要在main函数之前运行了。</p><p>轮子哥把约等于 __attribute__((constructor)) 的功能称为单元测试框架，到现在还在用那个，也是厉害，参考<a href=\"https://www.zhihu.com/question/22608939/answer/21963056\" class=\"internal\">什么时候应该使用宏定义？ - vczh 的回答 - 知乎</a></p>",
        "image_url": "",
        "title": "教轮子哥学一点点C++ (1)",
        "excerpt_title": "",
        "excerpt": "只能讲一点点，因为C++这么复杂，大家最多就只能会一点点。只要会了一点点，你就知道应该果断放弃C++。假如坚持不放弃的，那一定是一点都不会的。本期就先来最简单的，就讲一点点<a href=\"http://link.zhihu.com/?target=https%3A//github.com/philsquared/Catch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Catch<i class=\"icon-external\"></i></a> 的SECTION 的原理。大家都知道，C/C++函数里的static变量，只会在这个…"
    },
    {
        "type": "article",
        "updated": 1481770296,
        "id": 24379057,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1481770236,
        "url": "",
        "content": "<p>ECMAScript社区在为ES6的到来欢呼雀跃。他们没注意到也不会注意到JavaScript已经死了。一直以来ECMAScript程序员和JavaScript程序员是很容易区分的，只要看他能不能写出只能在Firefox里运行的脚本。比如，一个ECMAScript程序员会写自己的工具来支持yield，而JavaScript程序员就直接用yield了。而现在的Firefox里，script的type设置成 application/javascript;version=1.8 和不加version不会有任何区别。也就是JavaScript已经死了，我们再也找不出JavaScript程序员了。</p>",
        "image_url": "",
        "title": "JavaScript已死",
        "excerpt_title": "",
        "excerpt": "ECMAScript社区在为ES6的到来欢呼雀跃。他们没注意到也不会注意到JavaScript已经死了。一直以来ECMAScript程序员和JavaScript程序员是很容易区分的，只要看他能不能写出只能在Firefox里运行的脚本。比如，一个ECMAScript程序员会写自己的工具来支持yield，…"
    },
    {
        "type": "article",
        "updated": 1481706907,
        "id": 24368364,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1481706908,
        "url": "",
        "content": "<p>看了好多网页版代码编辑器还有在网页上显示代码高亮的工具，发现这个行号显示都搞的特别高级。感觉那样很不好，抄袭起来太麻烦。查阅CSS文档之后，发现还是很容易用CSS实现的，效果也基本令人满意。</p><p>CSS代码如下</p><div class=\"highlight\"><pre><code class=\"language-css\"><span></span><span class=\"k\">@counter-style</span> <span class=\"nt\">lno</span> <span class=\"p\">{</span>\n    <span class=\"nt\">system</span><span class=\"o\">:</span> <span class=\"nt\">extends</span> <span class=\"nt\">decimal</span><span class=\"o\">;</span>\n    <span class=\"nt\">pad</span><span class=\"o\">:</span> <span class=\"nt\">4</span> <span class=\"s2\">\" \"</span><span class=\"o\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">pre</span> <span class=\"p\">{</span>\n    <span class=\"nb\">margin</span><span class=\"o\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">5</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n    <span class=\"nb\">counter-reset</span><span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"p\">;</span>\n    <span class=\"nb\">width</span><span class=\"o\">:</span> <span class=\"m\">4</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n    <span class=\"nb\">white-space</span><span class=\"o\">:</span> <span class=\"n\">pre</span><span class=\"o\">-</span><span class=\"n\">wrap</span><span class=\"p\">;</span>\n    <span class=\"n\">word</span><span class=\"o\">-</span><span class=\"n\">break</span><span class=\"o\">:</span> <span class=\"n\">break</span><span class=\"o\">-</span><span class=\"n\">all</span><span class=\"p\">;</span>\n    <span class=\"nb\">outline</span><span class=\"o\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nb\">red</span><span class=\"p\">;</span>\n    <span class=\"nb\">border-left</span><span class=\"o\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nb\">blue</span><span class=\"p\">;</span>\n    <span class=\"nb\">background-color</span><span class=\"o\">:</span> <span class=\"m\">#EEE</span><span class=\"p\">;</span>\n    <span class=\"nb\">padding</span><span class=\"o\">:</span> <span class=\"m\">0</span> <span class=\"m\">1</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">pre</span> <span class=\"nt\">span</span><span class=\"nc\">.line</span> <span class=\"p\">{</span>\n    <span class=\"nb\">counter-increment</span><span class=\"o\">:</span> <span class=\"n\">line</span><span class=\"p\">;</span>\n    <span class=\"n\">box</span><span class=\"o\">-</span><span class=\"n\">decoration</span><span class=\"o\">-</span><span class=\"n\">break</span><span class=\"o\">:</span> <span class=\"n\">clone</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">pre</span> <span class=\"nt\">span</span><span class=\"nc\">.line</span><span class=\"o\">:</span><span class=\"nd\">:before</span> <span class=\"p\">{</span>\n    <span class=\"nb\">content</span><span class=\"o\">:</span> <span class=\"n\">counter</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"o\">,</span> <span class=\"n\">lno</span><span class=\"p\">);</span>\n    <span class=\"nb\">margin</span><span class=\"o\">:</span> <span class=\"m\">0</span> <span class=\"m\">2</span><span class=\"n\">ch</span> <span class=\"m\">0</span> <span class=\"m\">-6</span><span class=\"n\">ch</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p> 举个例子</p><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"p\">&lt;</span><span class=\"nt\">pre</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>aa aaa aaa<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"line\"</span><span class=\"p\">&gt;</span>a<span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">pre</span><span class=\"p\">&gt;</span>\n</code></pre></div><p> 没想到如此简单</p>",
        "image_url": "",
        "title": "用CSS画行号",
        "excerpt_title": "",
        "excerpt": "看了好多网页版代码编辑器还有在网页上显示代码高亮的工具，发现这个行号显示都搞的特别高级。感觉那样很不好，抄袭起来太麻烦。查阅CSS文档之后，发现还是很容易用CSS实现的，效果也基本令人满意。CSS代码如下@counter-style lno {\n system: extends decim…"
    },
    {
        "type": "article",
        "updated": 1480042059,
        "id": 23881270,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1479878332,
        "url": "",
        "content": "<p>首先曾老师表示了支持</p><p>---------------------------------------</p><p>比如像轮子哥对李某的课程提出了质疑，认为36万一年才合理。也有其他人提出大学4年学费也不用6万。他们的说法本身就是问题。你就想一想高铁时间短，为什么票价还比普通列车高呢？相同的内容，两个月的学费比四年的学费贵是没什么问题。而一年的学费比两个月贵好几倍，那是抢劫。</p><p>真正的问题就像一些回答指出的那样，李某自称英语名师，然而在各种课程里出现的最最常见的一个单词，他却大大方方的错了。这不得不让人怀疑他实际内容的质量了。</p><p>假如真的出现了一个很好的课程，2个月6万，你问我是否值得报名。我肯定会告诉你不值得。很简单，假如你自学需要4个月才能学会，而参加那个课程只要2个月，价格是6万，那就意味着，你一个月能赚不到3万肯定是亏的。你的时间并没有那么值钱。</p><p>野鸡培训生意兴隆，只能说明这方面确实有很大的需求。那么正规学校又在干什么呢？比如曾老师提到过某三本大学的教授在猪网开了一个公开课，教大家数据结构，结果有人跟着他的课程没学会，他却在那里指责学生智商低，还说什么实在学不会的话可以去参加他办的野鸡考试，这样一样可以对找工作有帮助的。</p><p>而很多自称程序员的人心态是有问题的，说的好像自己花了很多时间才学会的东西，别人必须也花差不多时间才可能学会。这样我们不就永远都不会进步了。更有甚者，听说了几个名词就觉得自己高人一等了，脱离了初学者的层次了。连递归都能拿出来说。要知道数数就要用到递归了。甚至还有人产生了普通人不该也不可能学会写程序的幻觉。</p><p>他们同样也会去鄙视一些夸夸其谈的产品经理，根本就不懂计算机，在那里大谈用户体验。却没有意识到，这个问题归根结底是他们自己造成的。Because as a wise young man once said, Life's too short。有了计算机，我们明明可以一次把几十个东西处理完的，很多软件却非要我们一个个点过来，这是在浪费别人的时间，这是犯罪。</p><p>所以我们应该让写程序变得更容易，让学写程序变得更容易，这样人人都可以学会。到时候，大家都会认为没有API就别吹用户体验，这样我们才能算是进入了计算机时代。</p><p>你想说你什么都不会，啥也做不了，对此无能为力。不是的，你可以的。我们的口号是If you can't do, teach。我听曾老师提起过，费曼曾经说过，假如你不能给 X岁小朋友讲明白，那就说明你自己就没搞明白的。我试过了，效果惊人，每次小朋友就问了不到十个为什么就把我问倒了，这样很快就帮助我找出了我没搞明白的地方。正如，<a href=\"https://www.zhihu.com/question/52338974/answer/130092827\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/5233</span><span class=\"invisible\">8974/answer/130092827</span><span class=\"ellipsis\"></span></a> 倡导的那样，什么都不知道才是最好的。 </p><p>现在很多计算机方面的教材，资料什么的很多确实搞的过于复杂了。Philip Wadler就吐槽过我们现在已经搞的过于复杂了，再复杂下去个个都会像Haskell那样变得avoid success at all costs了。比如什么二叉树，用ML写，一眼就看明白了，很多人还在坚持用C讲，听的人全糊涂了，还觉得自己讲的挺好的。</p><p>于是，前段时间在 <a href=\"https://www.zhihu.com/people/141d3b5a28d4d435f500c4d9a1c94d2b\" data-hash=\"141d3b5a28d4d435f500c4d9a1c94d2b\" class=\"member_mention\" data-editable=\"true\" data-title=\"@如月更纱\" data-hovercard=\"p$b$141d3b5a28d4d435f500c4d9a1c94d2b\">@如月更纱</a> 的带领下 ，有了<a href=\"https://link.zhihu.com/?target=https%3A//fast-track.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://fast-track.github.io/<i class=\"icon-external\"></i></a> (没错就是写伪书)，不追求系统，只追求能帮助尽快掌握某个知识点，不废话，不瞎扯什么思想。原理部分主要就是在能跑通的前提下，把无关的东西都去掉，尽可能的短。实战部分要求基本功能都有，并且可以实际使用，但是不追求跑分，也不追求功能全面。</p><p>你有啥想法，就直接开个Issue。没问题，就会把这个Issue添加到Project里，并给你这个单独开个仓库，并把管理权限给你。当然，你也可以选择自己啥都写好了，再发个Pull Request要求加入。假如你不知道咋写，你也可以写想要什么样的内容，说不定有人想不好写啥，看到了，就来写了。</p>在编程口诀出现之前的黑暗日子里，就靠你们了。我们的口号是，If you can't do, teach。",
        "image_url": "",
        "title": "If you can't do, teach.",
        "excerpt_title": "",
        "excerpt": "首先曾老师表示了支持---------------------------------------比如像轮子哥对李某的课程提出了质疑，认为36万一年才合理。也有其他人提出大学4年学费也不用6万。他们的说法本身就是问题。你就想一想高铁时间短，为什么票价还比普通列车高呢？相同的内容，…"
    },
    {
        "type": "article",
        "updated": 1479787026,
        "id": 23853171,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1479786607,
        "url": "",
        "content": "<p><a href=\"https://zhuanlan.zhihu.com/kls-software-arch-world\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/kls-</span><span class=\"invisible\">software-arch-world</span><span class=\"ellipsis\"></span></a></p><p>里面错误实在太多，曾老师说了不堪卒读啊。竟然能有上千关注啊</p><p>之前只看过一篇 <a href=\"https://zhuanlan.zhihu.com/p/22386524\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/22</span><span class=\"invisible\">386524</span><span class=\"ellipsis\"></span></a> 当场就吓尿了，真没见过错的这么离谱的。流水线破坏前两个例子全是错的</p><p>第一个例子</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>r1=r2+r3\nr1=r1+1\nr4=r4+2\n</code></pre></div><p>在简单的流水线里， 这个第二条指令更可能的结果是不会产生任何STALL。假设我们只有一个计算加法的单元，且一个周期只能计算一个加法，那么等计算第二条指令的加法的周期开始时，第一条指令的加法的结果已经出来了，我们只需要加一个简单的判断，假如这个寄存器是刚刚运行的指令写入的，那么直接从运算结果那里读取寄存器的数值。这样流水线不会有任何停顿的。当然了，复杂的流水线我们是不能这么轻易下结论的。</p><p>你一定要说这个必然导致流水线停顿那当然是错的了。</p><p>第二个例子</p><p>jmp跳转到一个固定的地址，哪来的指令预测失效。</p><p>这对于早期的MIPS之类的指令，倒是一个pipeline STALL的例子。假如没有delay slot，遇到jmp指令，就会一直往流水线插入空指令，直到jmp指令执行，修改了pc。</p><p>错了就错了。这也没啥。真正让人惊呆的是，<a href=\"https://zhuanlan.zhihu.com/p/23788985\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/23</span><span class=\"invisible\">788985</span><span class=\"ellipsis\"></span></a> 里，他竟然提出</p><blockquote><p>作者没有足够的编码经验。在没有把代码写出来前，他完全无法对代码进行预判 ...... 他需要写一小段，编译一下，看看是不是可以工作的，然后在写一小段，再看看能否工作，说不定还要跟踪一下流程。这种人，你让他写高层设计实在是难为他了。这种就不要想什么高层设计了，自己骗自己，就拿着编码来做练习，等着跌上几交，教够学费了再说吧。</p></blockquote><p>写一小段就检查一下能否工作是非常必要的。我们要避免的就是只凭经验来做设计。人的记忆力是非常有限的，我们需要去验证我们在设计中作出的任何假设，论断。这就需要写一些简单的例子来验证一下。就像他对CPU流水线的错误理解，用VHDL写个非常简单的流水线，就能知道是无法得出那些结论的。</p>",
        "image_url": "",
        "title": "惊呆了，那个软件架构设计专栏还在更新啊",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://zhuanlan.zhihu.com/kls-software-arch-world\" class=\"\">https://zhuanlan.zhihu.com/kls-software-arch-world</a>里面错误实在太多，曾老师说了不堪卒读啊。竟然能有上千关注啊之前只看过一篇 <a href=\"https://zhuanlan.zhihu.com/p/22386524\">https://zhuanlan.zhihu.com/p/22386524</a> 当场就吓尿了，真没见过错的这么离谱的。流水线破坏前两个例子全是错的第一个例子r1=r2+r3\nr1=r1+1\nr4=r4+2\n在简单的流水线里， 这个…"
    },
    {
        "type": "article",
        "updated": 1479782305,
        "id": 23844488,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1479741424,
        "url": "",
        "content": "<p><a href=\"https://zhuanlan.zhihu.com/prattle\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/prat</span><span class=\"invisible\">tle</span><span class=\"ellipsis\"></span></a></p><p>里面错误实在太多，曾老师说了不堪卒读啊。竟然能有上万关注啊</p><p>之前只看过一篇 <a href=\"https://zhuanlan.zhihu.com/p/20082260\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/20</span><span class=\"invisible\">082260</span><span class=\"ellipsis\"></span></a>，当场就吓尿了，Juniper的<b>Senior Staff Engineer</b>竟然大大方方的把data plane和control plane搞反了</p><blockquote><p>按照teamspark的功能，chat和notification是data plane，需要最高的效率，使用websocket承载。</p><br><p>其他信息流都是control plane，可以走慢速通道，用HTTP承载。比如成员A在任务B下上传一个文件，上传文件的动作使用HTTP API；\"A上传了一个文件：xxx\" 这个消息，用websocket传输。这样可以保证websocket上的通道上总是小数据，保持畅通。</p></blockquote><p>更别说</p><blockquote><p>题外话：whatsapp一开始把宝押在ejabber上，是因为其创始人在此的累计：嫌BEAM性能不好，自己patch，更别提ejabber了 </p></blockquote><p>这个根本就是他自己瞎编的谣言。所有WhatsApp自己公开的资料说的大约都是他们当时对Erlang并不是很熟，只是觉得Ejabberd改起来快就先用着了，根本就不在乎BEAM运行速度快不快，等他们第一次碰到问题时，同时在线人数都已经接近两百万了。我看Erlang不流行，也有他一份功劳。别的错误就不一一指出了。 </p><p>最近这篇<a href=\"https://zhuanlan.zhihu.com/p/23827375\" class=\"internal\"> https://zhuanlan.zhihu.com/p/23827375</a> 简直不知道说啥好了，竟然是在吹嘘EAV anti-pattern，举的例子还是错的。他举的例子，特别是他特别强调的Rails，里面的Active Record用起来是很别扭的，动不动就要自己去写SQL来完成一个查询，尽管方式不一样，用起来的感觉更接近他推荐的方法。像他说的那样一上来就完全拆开是不合理的，很多时候就相当于需要自己去处理JOIN和transaction了，和关系数据库背道而驰。</p>",
        "image_url": "",
        "title": "惊呆了，那个迷思专栏还在更新啊",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://zhuanlan.zhihu.com/prattle\">https://zhuanlan.zhihu.com/prattle</a>里面错误实在太多，曾老师说了不堪卒读啊。竟然能有上万关注啊之前只看过一篇 <a href=\"https://zhuanlan.zhihu.com/p/20082260\" class=\"\">https://zhuanlan.zhihu.com/p/20082260</a>，当场就吓尿了，Juniper的<b>Senior Staff Engineer</b>竟然大大方方的把data plane和control plane搞反了按照teamspark的功能，chat和notif…"
    },
    {
        "type": "article",
        "updated": 1459343406,
        "id": 19930232,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1420601560,
        "title": "为什么21天能学通Erlang？",
        "content": "<img data-rawheight=\"788\" data-rawwidth=\"1024\" src=\"https://pic4.zhimg.com/bd4c9b5f3d8f42e7ca670e1ab9c8fe0b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/bd4c9b5f3d8f42e7ca670e1ab9c8fe0b_r.jpg\"><img data-rawheight=\"788\" data-rawwidth=\"1024\" src=\"https://pic3.zhimg.com/3b515611f8884ffe148ec97ed8ba7b22_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/3b515611f8884ffe148ec97ed8ba7b22_r.jpg\"><img data-rawheight=\"788\" data-rawwidth=\"1024\" src=\"https://pic4.zhimg.com/c1956f02e168ac564d4f9691781d978b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/c1956f02e168ac564d4f9691781d978b_r.jpg\"><p>图来自<a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//pugs.blogs.com/talks/dls06-pugs.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pugs.blogs.com/talks/dl</span><span class=\"invisible\">s06-pugs.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "图来自<a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//pugs.blogs.com/talks/dls06-pugs.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pugs.blogs.com/talks/dl</span><span class=\"invisible\">s06-pugs.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>"
    },
    {
        "type": "article",
        "updated": 1459343344,
        "id": 19923539,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1419777029,
        "title": "21天学通Erlang从写解释器开始",
        "content": "<p>前几天有几个人一致向我抱怨说这个21天学通Erlang是不是太偏理论了。我不认同这种观点。</p><p>没人会否定Erlang是一门实用的语言。Erlang不需要一本Practical Common Lisp/Real World Haskell/Real World OCaml来标榜自己也是实用的。Erlang的成名不就是因为在上面开发出了9个9的产品啊。即便是国内，也有很多公司在用RabbitMQ，CouchBase什么的。可是，即便能用Erlang方便开发出高可用的服务，还是被认为这主要是因为BEAM，OTP，以及容错的思想，和Erlang语言一点关系都没有。Erlang可能遇到了一个别的语言都没遇到过的麻烦，越强调Erlang之强大，Erlang就越难以被采用。你看某人的PySonar的粉丝都比HiPE多，即便PySonar离Practical还远着呢，即便PySonar比HiPE晚出现了可能都不止5年，即便有些PySonar作者在slides里提到的问题在Erlang/HiPE里并不存在，还不是被很多人当作原创的新东西看待，还不是被各种膜拜。要推广Erlang要从新手抓起。</p><p>当然了，这不代表21天学通Erlang里不该写一些实际程序的例子。但是，也别一上来就讲非常实际的例子啊。你们总不能因为Erlang如此实用，在第一章就得开始写实际的东西吧。21天学通Erlang是一本用来入门的书啊。大哥们。</p><p>Erlang是一门非常适合用来入门的语言，Erlang语言本身很简单。而我们只需要用其中模式匹配和函数的部分对于写一些简单的解释器来说已经足够方便了。用Erlang，就不需要像SICP那样，一开始先花三章让你学会用scheme。SICP的思路是，等你学会用scheme里，你就可以开始看后面两章来理解scheme的语义，你理解了scheme的语义，你就能学会scheme了。你看这就是个鸡蛋问题嘛。用Erlang，就不用像SICP那样兜个大圈子。一开始我们只介绍Erlang里的模式匹配和函数的概念，接着你就可以只用这两个概念来写一个解释器，这个解释器足以解释和Erlang中类似的模式匹配和函数。这些已经足够你验证自己是否理解模式匹配和函数了。而不是像看什么C++ Primer之类的书一样知其然不知其所以然，感觉自己好像学会了一门语言，但里面随便挑点功能出来，连个解释器都写不出来。<br></p><p>Erlang不止是这些。我们还要把解释器改成回溯和合一，这样就是一个Prolog了。Erlang的原型是用Prolog写的，我希望这个Prolog足够解释和Erlang原型功能相同的Prolog程序。另外Parser是一个特殊的解释器，Prolog就有DCG嘛。所以到这里你已经能从源代码直接解释一部分Erlang程序了。后面这部分我想我已经重复了好多遍了，就是把Prolog的回溯改成tabling就变成了Datalog。Datalog对应的Parser，就是Earley了，Earley一路弱化最后成了正则表达式。至此，你自己就可以写一个简单的lex/yacc工具了，而不用像SICP那样整天躲在括号后面。</p><p>到这里你肯定还是很困惑，你不能确定自己写对了没，你也不该相信我，毕竟我说的都是错的。既然会写解释器了，那就根据Curry-Howard Correspondence把解释器改改，改成一个Proof Checker。有了形式证明你就该放心多了吧。你总不能说这个很重要得放一开始去讲吧，你敢相信我这种渣渣写给你的Proof Checker没问题？有了形式证明，我们就可以讲一些实用的东西了。难道你想像那些水货一样，连Paxos都不会证明，只会躲在ZooKeeper，Etcd后面侃侃而谈分布式怎么怎么好？</p><p>既然是一本入门书，还可以顺便补一下必要的基础，讲讲数字电路，怎么写一个数字电路模拟器？也可以讲讲常用的数据结构。...... 等基础写得差不多了，就可以开始写偏实战的，比如怎么写个简化的CouchDB，Scalaris什么的。两个也可以同时开始写，反正重要的东西都写形式证明就是了，缺了就去补。这哪里一点都不偏理论好不好，你不能光看第一章就说这个不实用了。</p><p>其实也就这么一点点内容而已嘛。不过我想我一个人不可能写的完了。你们还不赶紧来写，不写来吐槽也行啊。</p><p>就是这样</p>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "前几天有几个人一致向我抱怨说这个21天学通Erlang是不是太偏理论了。我不认同这种观点。没人会否定Erlang是一门实用的语言。Erlang不需要一本Practical Common Lisp/Real World Haskell/Real World OCaml来标榜自己也是实用的。Erlang的成名不就是因为在上…"
    },
    {
        "type": "article",
        "updated": 1442728018,
        "id": 19921759,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1419596333,
        "title": "也谈作用域",
        "content": "<p>姚培森最近在Continuation专栏里的发了<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/forallplt/19918834\">闭包</a>一文。我认为写的很烂，比“Monad不就是个自函子范畴上的幺半群”还烂。特别写一篇来喷。</p><p>假如一门语言允许你自己定义函数，那么就会出现作用域的问题。作用域的问题就是怎么找变量定义的问题。</p><p>假如不允许自定义函数，只需要一个变量名到变量值的映射就可以了。不妨把这种映射关系称为Environment。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>%% 赋值前 {print: &lt;fun&gt;}\nvar a = 1\n%% 赋值后 {print: &lt;fun&gt;, a: 1}\nprint(a)\n</code></pre></div><p>现在来定义一个函数</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var a = 1\nfun f(a)\n    print(a)\nend fun\nf(2)\nprint(a)\n</code></pre></div>此时我们期望的结果是<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>2\n1\n</code></pre></div><p>要是在执行 f(2) 时，我们直接把a指向2，那么结果就是<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>2\n2\n</code></pre></div><p>所以，函数f需要一个独立的Environment。在执行f(2)先把当前Environment保存下来（比如存在一个栈里，因为f函数里也可以去调用别的函数），建一个新的Environment，把a指向2，之后才开始执行f函数。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+------------------------------+\n| {a:2}                        |\n+------------------------------+\n| {print: &lt;fun&gt;, a:1, f:&lt;fun&gt;} |\n+------------------------------+\n</code></pre></div><p>不过这样就找不到print了。不过你一定想到了，只要沿着栈往下找总能找到的。</p><p>定义作用域规则，假如变量在当前Environment里，找不到就到外层Environment里找，直到找到为止，假如找到最外面也没有，那就是根本就没定义。</p><p>现在问题来了，看下面这个程序</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var a = 1\n\nfun f()\n    print(a)\nend\n\nfun g(a)\n    f()\nend\n\ng(2)\n</code></pre></div><p>假如使用上述规则，那么结果就是</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>2\n</code></pre></div><p>原因很简单，因为当前栈是像下面这样的</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+-----------------------------------------+\n| {}                                      |\n+-----------------------------------------+\n| {a:2}                                   |\n+-----------------------------------------+\n| {print: &lt;fun&gt;, a:1, f: &lt;fun&gt;, g: &lt;fun&gt;} |\n+-----------------------------------------+\n</code></pre></div><p>这意味着，在定义函数时，除了当前Environment里定义的，我们不知道其他变量到底是在哪里定义的。</p><p>我们把程序改一改 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var a = 1\n\nfun f()\n    print(a)\nend\n\nfun g(print)\n    f()\nend\n\ng(2)\n</code></pre></div><p>现在栈是像下面这样的</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+-----------------------------------------+\n| {}                                      |\n+-----------------------------------------+\n| {print:2}                               |\n+-----------------------------------------+\n| {print: &lt;fun&gt;, a:1, f: &lt;fun&gt;, g: &lt;fun&gt;} |\n+-----------------------------------------+\n</code></pre></div><p>运行到 print(a) 那行就出错了。那该咋办？我们可以把这叫做动态作用域，宣称这是最powerful的作用域，假如你不会用，那是因为你笨。这样问题就解决了。</p><p>可是我是弱智啊。我只能在定义时，就把所有会用到的变量都先存起来。找变量时，只在当前Environment里找。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+-------------------------------------------------+\n| {print: &lt;fun&gt;, a:1}                             |\n+-------------------------------------------------+\n| {print:2,                                       |\n|  f: {&lt;fun&gt;,{print: &lt;fun&gt;,a:1}}}                 |\n+-------------------------------------------------+\n| {print: &lt;fun&gt;, a:1,                             |\n|  f: {&lt;fun&gt;,{print:&lt;fun&gt;, a:1}},                 |\n|  g: {&lt;fun&gt;,{a:1, f: {&lt;fun&gt;,{print:&lt;fun&gt;,a:1}}}} |\n+-------------------------------------------------+\n</code></pre></div><p>这样就没问题了。这就是所谓的lexical scope<br></p><p>看下面这个程序 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var a = 1\n\nfun f()\n    var a = a + 1\n    print(a)\nend\n\nf()\n</code></pre></div><p>在函数 f 里，a既是在外部定义的，又是在内部定义的。这样就有矛盾了。<br></p><p>有些语言的应对方式是在函数内部可以有多个Environment，规则类似动态作用域。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+---------------------------------+\n| +-----------------------------+ |\n| | {a: 2}                      | |\n| +-----------------------------+ |\n| | {print: &lt;fun&gt;, a:1}         | |\n| +-----------------------------+ |\n+---------------------------------+\n| {print: &lt;fun&gt;, a:1,             |\n|  f: {&lt;fun&gt;,{print:&lt;fun&gt;, a:1}}} |\n+---------------------------------+\n</code></pre></div><p>这样上面这段程序就能运行了。</p><p>有些语言不喜欢你这么定义，直接就不让你运行这样的程序。这似乎没啥问题。</p><p>有的语言的规则是local by default的，赋值就相当于定义了一个本地的变量。也就是</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>a = 1\n</code></pre></div><p> 相当于</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>var a = 1\n</code></pre></div><p>这看上去也没什么问题。可是要是这语言变量的值是可以改的，那就糟了。内层函数就没法改外层函数变量的值了。这就需要引入 nonlocal 关键字了。</p><p>就是这样</p>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "姚培森最近在Continuation专栏里的发了<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/forallplt/19918834\">闭包</a>一文。我认为写的很烂，比“Monad不就是个自函子范畴上的幺半群”还烂。特别写一篇来喷。假如一门语言允许你自己定义函数，那么就会出现作用域的问题。作用域的问题就是怎么找变量定义的问题。假如不允许自定义函…"
    },
    {
        "type": "article",
        "updated": 1459343320,
        "id": 19916813,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1418877644,
        "title": "Erlang能在OSv上启动了",
        "content": "<p>仅仅是能启动。</p><p>这是为了给还不存在的<b>Web IDE</b>找个合适的运行环境。虽然也可以基于AlpineLinux之类的微型Linux发行版来做，毕竟还是要写点脚本啥的，略麻烦。就去试试OSv了。</p><p>一开始按OSv Wiki上的说法，是要编译成.so才能运行的。我改了Makefile把beam改成beam.so，结果发现，Erlang在编译完beam之后，会用这个新编译出来的beam去编译erlang代码。那么问题就来了，改成.so之后根本就没法直接 exec 啊，make到这一步就失败了。</p><p>后来一想，这也不是什么问题，大不了既生成beam又生成beam.so就可以了嘛。没错，这样是能编译通过了。但是在OSv上怎么都运行不起来。在OSv的邮件列表里找，还没找到类似的问题，就看到说不用非得编译成.so的，只要编译成Position Independent Executable就可以了。那就把Makefile改回来。</p><p>我猜是默认开了很多选项，才导致启动不起来的。最后发现几乎都关完了还是开不起来。又去仔细看了看OSv Wiki，发现其实就是有个函数没实现嘛。那就照着样子弄个空的上去。结果还是启动不了，\"erts_poll_init(): Failed to get max number of files:\"。邮件列表里查了下，就是因为sysconf的实现是不完全的，随便返回个很大的整数就好了。打上<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudius-systems/osv/commit/e42258914b9b65791b1c64bee0391a5c2b0790c7\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">补丁<i class=\"icon-external\"></i></a>，一个单线程的Erlang可以启动了。 <br></p><p>接着把SMP支持打开吧。却又启动不起来。结果发现有人在试图运行Go时，就已经碰到了类似的问题。用了他的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//groups.google.com/d/msg/osv-dev/C6Qc2dyv_jc/qKjA0K1ATWoJ\" target=\"_blank\" rel=\"nofollow noreferrer\">补丁<i class=\"icon-external\"></i></a>，确实可以启动了。启动之后，我明显感觉到CPU风扇在加速。一看，top里qemu进程的CPU占用率是接近200%啊。在我还在找这是哪里的问题时，有人把之前那个补丁改好<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudius-systems/osv/commit/50a431a731af759ed3a2e774fd19b5808676cf49\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">提交<i class=\"icon-external\"></i></a>进去了。他应该是没注意到开了SMP会出问题。</p><p>找来找去也没找到Erlang每个线程功能的文档。后来在<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//blog.etsukata.com/2014/02/erlang-vmbeam.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Etsukata blog: Erlang VM(BEAM) スレッド構成<i class=\"icon-external\"></i></a>里才看到比较详细的说明。对照后发现就只有主线程和child waiter线程在占用CPU。看了下代码，就是OSv的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudius-systems/osv/commit/a2a4b3193d20fb0536f9ab2485b7b970a1be047c\" target=\"_blank\" rel=\"nofollow noreferrer\">select<i class=\"icon-external\"></i></a>和<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cloudius-systems/osv/commit/45a703299c91c4bd839380a85daac34797855ad2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">waitpid<i class=\"icon-external\"></i></a>有问题。改了就好了。</p><p>流水帐完了。<b>还不赶紧来写个Web IDE</b>。 </p><p>就是这样</p>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "仅仅是能启动。这是为了给还不存在的<b>Web IDE</b>找个合适的运行环境。虽然也可以基于AlpineLinux之类的微型Linux发行版来做，毕竟还是要写点脚本啥的，略麻烦。就去试试OSv了。一开始按OSv Wiki上的说法，是要编译成.so才能运行的。我改了Makefile把beam改成bea…"
    },
    {
        "type": "article",
        "updated": 1459343296,
        "id": 19914764,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1418629682,
        "title": "21天学通Erlang需要你",
        "content": "<p>我的观点是， 21天学通Erlang是完全针对初学者的，最终能让6岁的小朋友都能借此自学Erlang。这不意味着，就不适合别的年龄段了，我只是希望只要能熟练笔算两位整数加减乘除的都不会碰到任何看不明白的地方。</p><p>我不打算也无力让21天学通Erlang达到能出版的水准。我也不认为出版是个好主意。书印好了就没法改了，而且，就算写的再好，也难逃最终绝版的命，这样很不好。我希望能像开源软件一样，大家一起来修正一起来更新，想要看的人只要有网络随时就能下载到。</p><p>目前已完成初步的排版，虽然是丑了点，但是功能上的要求基本都达到了。运行 make screen.pdf 之后，再运行 escript check.erl 就会检查所有引用的源代码确实能和文件名以及行号对应起来，所有列出的Erlang Shell的输出结果确实和PDF中列出的一样。每个tex文件都可以单独生成PDF。生成供在线阅读的SVG时，每个小节单独占一页。目前所采用的生成SVG的方式还不太合理，正在写一个脚本，能生成更好的SVG，至少文字用一下Web Font而不是直接画成SVG。<br></p><p>同时，现在也在寻找对初学者来说更方便的安装方式。我的想法是，提供一个虚拟机镜像，直接在虚拟机里运行，提供一个Web IDE，这样就不用担心会在安装软件时碰到问题了，特别是环境变量相关的配置。现在正在尝试在OSv上运行Erlang，至于Web IDE怎么写，还没什么思路。<br></p><p>语言选Erlang是因为Erlang这门语言非常简单，概念很少，特别适合入门。要是选了Scheme这种复杂的语言，就算是很多人推崇的SICP也得先用三章，才能开始讲怎么用程序去解释一个简化的Scheme。对于一本针对初学者的书，这显然是不合适的。</p><p>21天学通Erlang才刚刚开始，需要你的各种帮助。你可以直接来写书的内容，吐槽目前已经有的内容，只要你觉得有任何不合适或者看不明白的地方，都是值得吐槽的。改进排版，写一个PDF转SVG的脚本，写一个用来编辑Erlang的Web IDE，任何你觉得不够好的地方，都可以参与进来改进。也可以帮助忽悠别人来参与，比如忽悠知乎上的温赵轮之类的大神们来一起写。总之，21天学通Erlang需要你。</p><p> 地址： </p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//is.gd/erlang21p\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通erlang.github.io<i class=\"icon-external\"></i></a></p><br><p>讨论/吐槽：</p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//is.gd/erlang21b\" target=\"_blank\" rel=\"nofollow noreferrer\">https://gitcafe.com/erlang/e21/tickets<i class=\"icon-external\"></i></a><br></p><p>就是这样</p>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "我的观点是， 21天学通Erlang是完全针对初学者的，最终能让6岁的小朋友都能借此自学Erlang。这不意味着，就不适合别的年龄段了，我只是希望只要能熟练笔算两位整数加减乘除的都不会碰到任何看不明白的地方。我不打算也无力让21天学通Erlang达到能出版的水准…"
    },
    {
        "type": "article",
        "updated": 1418097119,
        "id": 19911152,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1418095454,
        "title": "开通专栏了",
        "content": "<p>感谢大家支持</p><p>以下是<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.youtube.com/watch%3Fv%3DrRbY3TMUcgQ\" target=\"_blank\" rel=\"nofollow noreferrer\">Erlang The Movie II: The Sequel<i class=\"icon-external\"></i></a>的transcript。也就是专栏简介的出处。<br></p><blockquote><p><strong>Joe:</strong> Declarative programming languages have several advantages over\ntraditional languages. For example, programs in such languages are\nconsiderably shorter than equivalent programs in imperative languages. Here for\nexample, is a program in C… and here is the equivalent program in Erlang.</p><p>[phone rings]</p><p><strong>Joe:</strong> Hello.</p><p><strong>Mike:</strong> Hello Joe.</p><p><strong>Joe:</strong> Hello Mike.</p><p><strong>Mike:</strong> Question… does anyone care about the differences between\ndeclarative and imperative languages anymore?</p><p><strong>Joe:</strong> Don’t be silly. The declarative/imperative debate is always a crowd\npleaser!</p><p><strong>Mike:</strong> From what I can tell, kids these days are going with what’s cool,\nlike Node.js and Ruby on Rails. Let’s ask Robert.</p><p>[phone rings]</p><p><strong>Mike:</strong> Hello, Robert?</p><p><strong>Robert:</strong> Hello Mike.</p><p><strong>Mike:</strong> Joe’s back to talking about declarative languages again. I just think\nErlang’s got a problem when its spokesman is an old fuddy-duddy. Eh Joe?</p><p><strong>Joe:</strong> Bite me.</p><p><strong>Mike:</strong> Robert, what do you think?</p><p><strong>Robert:</strong> Erlang’s the shizzah! But I can’t blame kids for picking something a\nlittle less… crusty.</p><p><strong>Mike:</strong> Erlang’s image is stuck in the 1980s. It’s the Bananarama of languages.</p><p><strong>Joe:</strong> Okay. Tell you what. This is bullshit. If kids these days don’t want\nto use Erlang, which is the real “rock star tech” then fuck it. I’ll turn this\nvideo off and go home. Take my nine nines with me!</p><p>[video turns off]</p><p><strong>Mike:</strong> Joe, I didn’t mean anything by it.</p><p><strong>Robert:</strong> Yeah Joe, Mike was just trying to be constructive.</p><p><strong>Mike:</strong> Joe, turn the video back on.</p><p><strong>Joe:</strong> I won’t. I won’t have Erlang disparaged!</p><p>[stranger’s voice]</p><p><strong>Rex:</strong> Yo yo yo. I can totally help you geezers.</p><p><strong>Joe:</strong> Who said that?</p><p><strong>Rex:</strong> All Erlang needs is an image upgrade.</p><p>[video turns on]</p><p><strong>Joe:</strong> That’s very interesting.</p><p><strong>Rex:</strong> Lots of things from the eighties are cool. Just look at Fraggle Rock\nand Super Mario Brothers.</p><p><strong>Mike:</strong> What the hell is that?</p><p><strong>Robert:</strong> It’s one of those Ruby hipsters!</p><p><strong>Rex:</strong> Watch it grandpa. Just because I carry my Mac in a messager bag and\nhave great taste in nose rings doesn’t mean I use Ruby!</p><p><strong>Joe:</strong> I for one and interested in what the little girl has to say.</p><p><strong>Rex:</strong> Yo, whatever. First we have to fix the name. A language named after a\nnineteenth century Danish mathematician is about as cool as having a Facebook\naccount.</p><p><strong>Robert:</strong> It’s just like the olden days, when Erlang was banned. We had to change\nthe name.</p><p><strong>Mike:</strong> That’s right. When Erlang fell out of fashion at Ericsson, we changed the name to OTP.</p><p><strong>Joe:</strong> Three of the trendiest names we could think of: “open”, “telecom”,\n“platform”.</p><p><strong>Robert:</strong> Gives me the chills just thinking about it.</p><p><strong>Rex:</strong> Okay, that’s bullcrap. No one care about telecom platforms. We need\nsomething fresh. Something edgy.</p><p><strong>Robert:</strong> Like “Erlang on Rails”!</p><p><strong>Rex:</strong> Jesus Christ. The last thing you want to do is imitate. No. Something\noriginal.</p><p><strong>Joe:</strong> How about “Erlang++”?</p><p><strong>Rex:</strong> I got it! We keep OTP, but with a hip, edgy twist. Check it. Your\nlanguage will hereby be known as “Outlaw Techno Psychobitch”!</p><p>[Joe scowls]</p><p><strong>Robert:</strong> It does spell “OTP”.</p><p><strong>Mike:</strong> Don’t know what it has to do with software. What do you think Joe?</p><p>[Joe pause]</p><p><strong>Joe:</strong> I absolutely love it! That name is fucking gangster!</p><p><strong>Rex:</strong> Yeah Joe. You rule! Okay, next thing we need is a video that is just\nas cool as the original Erlang The Movie, but speaks to today’s programmer\nhipster. I’m thinking something like this…</p><p>[video starts]</p><p>“Outlaw Techno Psychobitch” - “OTP” - “Programming for Bad Ass Mother Fers!”</p><p><strong>Rex:</strong> Yo, what up bitches. Rex here. This time I’m talking about a bad ass new\nlanguage called “Outlaw Techno Psychobitch”, or “OTP” for short.</p><p>So, you all know I’m a huge Ruby fan. Ruby gives you 15 ways to do the same\nthing and freedom of choice is good. Then I realized, that’s just 15 different\nways to create really slow, crappy programs.</p><p>Then I started using Node.js. I like Node because, as my hero Ryan Dahl says,\n“it’s like coloring with crayons and playing with Duplo blocks.” But as it\nturns out, it’s less like playing with Duplo blocks and more like playing with\nslinkies. Slinkies that get tangled together and impossible to separate.</p><p>So then I checked out Outlaw Techno Psychobitch. It’s a language out of Sweden\nthat can be used to build web scale, asynchronous, non-blocking, sharded, event\ndriven, message passing, NoSQL, reliable, highly available, high performance,\nreal time, clusterable, bad ass, rock star, get the girls, get the boys,\nimpress your mom, impress your cat applications!</p><p>Ryan Dahl, my hero, says “we should not be supporting more programming\nlanguages,” that we should be “killing them”. That “all these bullshit projects\nare confusing people.” But Psychobitch is just so damn cool, I couldn’t resist\ngiving it a try.</p><p>The first thing Psychobitch kills off is curly braces. Thank God. After a half\ncentury of curly braces, we need something that’s fresh. Psychobitch uses\nsingle character block delimiters, like in sentences.</p><p>My hero Ryan Dahl says, “math is not necessary,” that “people who think it’s\nsuperior to curly braces are wrong.” But I figure, if math can get a rover to\nMars, maybe it can help us write better programs.</p><p>Psychobitch gets pretty uptight about logic. If you say X is one, then turn\naround and say X is two, Psychobitch goes ape shit. She’s like, “what the hell,\nwhen did one start equalling two?”</p><p>Psychobitch has this great feature called “pattern matching”. You define the\npatterns and if there’s a match your program keeps going. If something doesn’t\nmatch it crashes. Like assertions but built in.</p><p>What happens when your program crashes? Psychobitch has you covered. It\nmonitors your code and restart things that break. It’s like the Terminator. You\ncan blast it in the face with a shot gun — it stops for a second, then keeps\non coming!</p><p>I’ve written a chat server in Psychobitch. It’s where all my friends and me can\nchat about how awesome Ryan Dahl is. Because the server is written in\nPsychobitch, it can easily handle thousands of concurrent users. Shit, did I\nsay thousands? Because I meant tens of thousands. And by tens of thousands, I\nmean hundreds of thousands.</p><p>[switch to demo]</p><p>I’m already logged in as myself at the top. I’ll log in as another user. You\nsay something using the “tell” command. The messages are received instantly\neven though there are hundreds of thousands of connected users. I’ll use the\n“yell” command to broadcast a message to every user.</p><p>[uses yell command]</p><p>That literally sent the message to 300,000 users. About a second.</p><p>Okay, 300,000 concurrent users is impressive. But even Node.js can do\nthat. Let’s try something hard. To make things interesting, we’ll trigger a bug\non the server.</p><p>[types a message and triggers a bug]</p><p>Damn. I must have said something bad. But as you can see, Mary and Jack can\nstill chat. Of the 300,000 users on the server, I’m the only one affected.</p><p>Let’s see if we can fix the bug. Here’s the code. Holy crap! It looks like the\noriginal programmer, in his zeal, added some forbidden utterances. Let’s clean\nthis up because we don’t want to censor.</p><p>[fixed bug in code]</p><p>Okay, I recompiled the code. Next, I’ll reload it in real time with 300,000\nconcurrent chats going on.</p><p>[reloads code]</p><p>Done. In case you missed it, here it is again — in slow motion.</p><p>[reloads code, in slow motion]</p><p>For some of you, what you just saw is not self explanatory. If gracefully\nhandling bugs with hundreds of thousands of concurrent sessions and fixing them\nin real time without stopping the server seems passe, you can aways use\nRuby. Then, when your app doesn’t scale, move to Node.js. Then, when you can’t\nmaintain your code because it’s a pile of tangled slinkies, move to\nPsychobitch. With that experience you can appreciate what you just saw. For\nthe rest of you, yes, that just happened.</p><p>[video stops]</p><p><strong>Rex:</strong> So, what do you guys think about Psychobitch?</p><p><strong>Robert:</strong> She’s utterly terrifying.</p><p><strong>Joe:</strong> It makes me wonder if perhaps Psychobitch is a real person.</p><p><strong>Rex:</strong> You mean, is the name based on my experience with a girlfriend who’s\nbat shit crazy, drop dead gorgeous, brilliant, and brags to her friends about\ncosting me tens of thousands of dollars in therapy over the last three years?</p><p><strong>Mike:</strong> Oh shit. I know a girl like that. She scarred me for life,\nliterally. Seriously, I’ll show you the scars!</p></blockquote>",
        "image_url": "",
        "url": "",
        "excerpt_title": "",
        "excerpt": "感谢大家支持以下是<a class=\"\" data-title=\"youtube.com 的页面\" data-editable=\"true\" href=\"http://www.youtube.com/watch?v=rRbY3TMUcgQ\">Erlang The Movie II: The Sequel</a>的transcript。也就是专栏简介的出处。 <strong>Joe:</strong> Declarative programming languages have several advantages over\ntraditional languages. For example, programs in such languages are\nconsiderably shor…"
    },
    {
        "type": "article",
        "updated": 1478790045,
        "id": 23575108,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1478789539,
        "url": "",
        "content": "<p>知乎的文章不能反对，实在太恶心了。<br></p><p><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/23560609\">觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏</a><br></p><p><a data-title=\"@Burris Ewell \" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell </a>的回答问题很大，但也不能明目张胆的搞稻草人攻击。不过，就这也能有几千赞？</p><p>那个问题本身就很奇怪，题主竟然会认为 句子过于简单 。<a data-title=\"@Burris Ewell\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>也莫名其妙的来了一句，“句式相对很简单”。</p><p>恶魔的奶爸列出数字，说明我们在英语小说里，也能找出很多长句，和复杂的句型，甚至有的从头到尾都是长句。并此把 <a data-editable=\"true\" data-title=\"@Burris Ewell\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>  批判一番。然而 <a data-title=\"@Burris Ewell\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>   举的正面例子就有一个是超长的句子。而那正是我想批判的，所以印象深刻。<br></p><p>恶魔的奶爸英语水平大家都很清楚有多高，整天就只会强调什么，长难句很重要，语法很重要。甚至还推荐人家学英语用什么回译法。一开始是吹嘘英语学习是不需要什么老师的，自学很重要。后来又转变成英语学习一定要找一个好老师。于是，我想我们将目睹又一个成功人士的诞生，值得曾老师关注。 <br></p><p><br><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/19758941\">就恶魔的奶爸英文水平一事的探讨 - 恶膜的奶爸的文章 - 知乎专栏</a></p><blockquote>7. 恶魔的奶爸就是用英文赚钱的！<p>我很奇怪，我从来没有对自己的文章收过费，都是有人提问邀请我就去答，很多时候态度还很不好，你们何时听过奶爸的英语培训班这种说法？一不卖书，二不推销资料，三不忽悠你加入我的培训班，我要真是靠英文来赚钱，那不是早就饿死了？</p><p>以后也别说我是业界良心，我压根儿不是英文培训界的，算什么业界人士？</p></blockquote><p><a href=\"https://www.zhihu.com/question/51817921\" class=\"internal\">恶喵的奶爸最近推出的英语百日训练营是真的么？ - 英语学习</a></p><blockquote><p>19日在他的微信公众号上看到了恶喵的奶爸开设的英语百日训练营，主要针对练习口语，600元100天，因为在公众号上学习他的方法，所以毫不犹豫报了名并转账过去 </p></blockquote>",
        "image_url": "",
        "title": "不要欺负我们不会英语",
        "excerpt_title": "",
        "excerpt": "知乎的文章不能反对，实在太恶心了。 <a class=\"\" data-title=\"觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/23560609\">觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏</a> <a data-title=\"@Burris Ewell \" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell </a>的回答问题很大，但也不能明目张胆的搞稻草人攻击。不过，就这也能有几千赞？那个问题本身就很奇怪，题主竟然…"
    },
    {
        "type": "article",
        "updated": 1477115067,
        "id": 23128839,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1477115068,
        "url": "",
        "content": "<p>对于熟悉C++的人来说，Rust不需要花多少时间学习的，Rust基本上就是熟悉C++的人想要的C++。</p><p>Rust有trait, borrow checking和type inference。有了trait，我们就可以完全按Abstract Data Type的风格来写程序了，写 Stack::push(stack, item) 而不是 stack.push(item) ，替换stack实现，不用担心push是不是指的是同一个意思。当然了，C++也可以搞成这样，只是需要用的奇技淫巧太多了。C++里有些container进行了一些操作之后之前的某些iterator就失效了，你要是继续用就完蛋了。在rust里的borrow checking就是在编译阶段能给你报个错，直接就不给你这个出错的机会。这样当然是更好了，不用提心吊胆了。type inference缓解了C++里面比如allocator类型的问题，对刷题来说足够用了。比如C++里，linked list的allocator类型是allocator&lt;T&gt;而不是allocator&lt;LinkedListNode&lt;T&gt;&gt;，这个根本就是不讲道理的。而在Rust里，我们可以写 LinkedList::&lt;usize,_&gt;::new_with_allocator(MemoryPool::new_with_capacity(capacity)) ，避免了中间出现一个诡异的allocator。<br></p><p>所以，用Rust来造一个库，可以极大的避免误用。有一个功能齐全的库，短期来看，可以减少从思路到提交的时间，提高单位时间的刷题量。现在只剩下一个问题，如何向OJ提交Rust代码了。办法也是有的，提交汇编代码，只要OJ有gcc，那么 __asm__(\"...\") 这样就是可行的，没有办法可以阻挡的。只要尽量不去用标准库(std)里的东西，Rust生成出来的汇编代码，完全可以做到没有任何额外的依赖。而且编译器生成出来的汇编代码碰到的兼容性问题会远远少于C和C++源代码。当然了，库里面也是会有一些非泛型的函数，这个就需要生成LLVM bitcode，而解答的代码的bitcode合并了之后来一次lto，具体代码可以抄袭rust源代码。这里必须用rust里的LLVM来搞定这个问题，不然还得额外装一套相同版本的LLVM，太麻烦了。最后对于某些代码长度上限特别低的OJ，需要用之前提到的压缩算法压缩后再提交。</p>",
        "image_url": "",
        "title": "Rust将取代C/C++成为刷题的首选",
        "excerpt_title": "",
        "excerpt": "对于熟悉C++的人来说，Rust不需要花多少时间学习的，Rust基本上就是熟悉C++的人想要的C++。Rust有trait, borrow checking和type inference。有了trait，我们就可以完全按Abstract Data Type的风格来写程序了，写 Stack::push(stack, item) 而不是 stack.pus…"
    },
    {
        "type": "article",
        "updated": 1475637302,
        "id": 22767091,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1475637273,
        "url": "",
        "content": "<p>mxnet的卖点主要就是能消几个中间数组。NNVM无非就是把这个功能抽出来，你按他的要求写Operator，也可以获得消数组的功能。消中间数组并不是什么新发明。古时候的SISAL就做的很好了。NNVM的抽象层次决定了他并不能充分发挥消中间数组的好处。</p><p>能消去中间数组，就意味着，矩阵点乘，你可以分两步来算，先算乘法，再算加法。反正中间数组会被消去，最终结果和合并在一起算没什么区别。这也就使得抽象层次可以降低，我们不再需要支持矩阵点乘，只需要支持乘法和加法就可以了。这也使得backpropagation变成了真正的自动求导，毕竟你只需要把基本运算的导数公式抄过来就可以了。</p><p>所以NNVM的抽象是失败的。就比如实现convolution，你需要在每一个后端都把convolution实现一遍，而且是forward+backward都要自己来。很可能一维要实现一遍，二维还要再实现一遍，甚至比如维度 1 2 3 4 5 6 你要在 3 4 5 维上算 convolution 还得实现一遍。正常的抽象难道不应该是前端实现一遍convolution就好了。</p>",
        "image_url": "",
        "title": "为什么不看好NNVM",
        "excerpt_title": "",
        "excerpt": "mxnet的卖点主要就是能消几个中间数组。NNVM无非就是把这个功能抽出来，你按他的要求写Operator，也可以获得消数组的功能。消中间数组并不是什么新发明。古时候的SISAL就做的很好了。NNVM的抽象层次决定了他并不能充分发挥消中间数组的好处。能消去中间数组…"
    },
    {
        "type": "article",
        "updated": 1475076061,
        "id": 22684953,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1475076062,
        "url": "",
        "content": "<p>选择民科的路线，就决定了你唯一的依靠就是计算机了。</p><p>proof checker也没什么可选的，只有metamath风格的了。其他都太复杂了，你都没法检验自己是不是正确实现了。还有比如前段时间metamath邮件列表里就有人指出AFP里有几个比较老的证明，用最新的Isabelle根本就检查不了。也就是实际上你也没办法充分利用现成的证明。</p><p>尽量避免使用  <img src=\"https://zhihu.com/equation?tex=%5Csum+%5Cprod\" alt=\"\\sum \\prod\" eeimg=\"1\"> 这种风格的记号，而是像 APL 那样用 +/ */ 。</p><p>选择Type Theory而不是ZFC。<br></p><p>接下来，自制的无论是proof assistant，CAS，还是SMT Solver之类的工具，不要浪费时间去证明这些程序是对的，只要都输出形式证明，我们只要知道我们用到的证明都是对的，Bug满天飞是无所谓的。</p><p>可以先试着完成Formalizing 100 Theorems。</p><p> 差不多就这样吧</p>",
        "image_url": "",
        "title": "民科是如何学数学的",
        "excerpt_title": "",
        "excerpt": "选择民科的路线，就决定了你唯一的依靠就是计算机了。proof checker也没什么可选的，只有metamath风格的了。其他都太复杂了，你都没法检验自己是不是正确实现了。还有比如前段时间metamath邮件列表里就有人指出AFP里有几个比较老的证明，用最新的Isabelle根…"
    },
    {
        "type": "article",
        "updated": 1475074689,
        "id": 22684623,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1475073982,
        "url": "",
        "content": "<p>必须要使用硬实时操作系统</p><p>类似PC主板那样的双BIOS，随便刷不怕变砖<br></p><p>不要有基带芯片。应该用软件无线电来完成3G/4G通信<br></p><p>数字电路能用FPGA的，就全用FPGA解决，不要用独立芯片</p><p>应用软件应该使用符合类似 IETF 组织，比如就叫DETF，规定的RFC 相互通信。我不喜欢，我就可以直接换成另外一家实现相同协议的软件<br></p><p>操作界面应该类似Emacs，有C-x C-c的区别</p><p>支持函数式命令，比如 急急如律令，表示前面那条命令以优先级2运行。这种风格符合现代的命令行里，比如verbose，vvv的用法。也是完全正确的汉语。应该大力推广。</p>",
        "image_url": "",
        "title": "民科需要什么样的手机",
        "excerpt_title": "",
        "excerpt": "必须要使用硬实时操作系统类似PC主板那样的双BIOS，随便刷不怕变砖 不要有基带芯片。应该用软件无线电来完成3G/4G通信 数字电路能用FPGA的，就全用FPGA解决，不要用独立芯片应用软件应该使用符合类似 IETF 组织，比如就叫DETF，规定的RFC 相互通信。我不喜…"
    },
    {
        "type": "article",
        "updated": 1474083578,
        "id": 22475613,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1474082570,
        "url": "",
        "content": "<p>四十大盗公司中秋节发月饼，有剩余，决定抽签决定谁拿到剩下的月饼。</p><p>为避免有人作弊，四十大盗公司提出了月饼scheme。</p><p>每个人生成 公钥P 私钥Q  用私钥加密公钥得R</p><p>每个人随机选，或者自己瞎编一个 0-2**128-1 的整数，C</p><p>C用私钥加密得E</p><p>第一步公开 R 和 E</p><p>等所有人都公开了R和E</p><p>再公开P</p><p>按P的顺序把C连在一起，HMAC后，作为随机数种子 (HMAC以四十大盗的月饼为key)<br></p><p>由P的顺序决定每个人的编号，比如 1- 40<br></p><p>并把编号排成一个环，按取出的第一个随机数，逆时针旋转，旋转后的编号的是每个人的正式编号</p><p>接着选到哪个随机数就归谁<br></p><p>请问，月饼scheme有哪些问题</p>",
        "image_url": "",
        "title": "月饼scheme",
        "excerpt_title": "",
        "excerpt": "四十大盗公司中秋节发月饼，有剩余，决定抽签决定谁拿到剩下的月饼。为避免有人作弊，四十大盗公司提出了月饼scheme。每个人生成 公钥P 私钥Q 用私钥加密公钥得R每个人随机选，或者自己瞎编一个 0-2**128-1 的整数，CC用私钥加密得E第一步公开 R 和 E等所有…"
    },
    {
        "type": "article",
        "updated": 1473779453,
        "id": 22437550,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1473779453,
        "url": "",
        "content": "<p> LiFT里的oblique和J语言的oblique最大的区别是方向是相反的。</p><p>J语言里 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+//.\n\n 0 1 2\n 1 2 3\n 2 3 4\n\n 0 1 2\n   1 2 3\n     2 3 4\n------------\n 0 2 6 6 4\n</code></pre></div><p>同时，为了避免不必要的麻烦，LiFT不允许不规则的数组出现。在这一点上LiFT反而和APL更接近。</p><p>LiFT里oblique扩展到多维的。以一维为例，两个数组相?乘之后，再(oblique 1 +)就是一维卷积了。</p><p> 第一个表中，每个格的数值是对应的A?*B?， 而C?表示，这个数值应该加到C?</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>    A0  A1  A2  A3  A4  A5\nB0  C2  C3  C4  C5  C6  C7\nB1  C1  C2  C3  C4  C5  C6\nB2  C0  C1  C2  C3  C4  C5\n\nC0\n      A0 A1 A2 A3 A4 A5\nB0 B1 B2\n\nC1\n      A0 A1 A2 A3 A4 A5\n   B0 B1 B2\n</code></pre></div><p> 当然了，有些时候，没有和B所有元素相乘的结果是不要的。所以我们需要trim，同样trim也是多维的。这里同样以一维为例。trim 2就表示头尾各去掉2个元素。<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>C0 C1 C2 C3 C4 C5 C6 C7\n      C2 C3 C4 C5\n</code></pre></div><p>不难发现，假如B中所有元素都是1，(oblique 1 +)改成(oblique 1 &gt;.) 我们就算出了max pooling所有需要的数值，还有一些不需要的。</p><p>记 数组X的元素个数为 n(X)</p><p>若有 n(A) % n(B) = 0，令 C 为 (trim (n(B)-1)) A，则 n(C) = (n(A) / n(B) - 1)  * n(B) + 1<br></p><p>因为LiFT里所有数组下标都是从1开始的。比如 (stride 3) 的功能就是取出所有下标是3的整数倍的元素。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>C0 C1 C2 C3 C4 C5 C6 C7\n      C2 C3 C4 C5\n      D0 D1 D2 D3\n      D0       D3\n</code></pre></div><p>这样 oblique ，trim 完了，再stride就是pooling了</p><p>所以呢，LiFT里是不需要有什么卷积层，pooling层的。毕竟什么都没有才是最好的。</p>",
        "image_url": "",
        "title": "LiFT之oblique",
        "excerpt_title": "",
        "excerpt": "LiFT里的oblique和J语言的oblique最大的区别是方向是相反的。J语言里 +//.\n\n 0 1 2\n 1 2 3\n 2 3 4\n\n 0 1 2\n 1 2 3\n 2 3 4\n------------\n 0 2 6 6 4同时，为了避免不必要的麻烦，LiFT不允许不规则的数组出现。在这一点上LiFT反而和APL更接近。LiFT里oblique…"
    },
    {
        "type": "article",
        "updated": 1472871051,
        "id": 22293225,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1472871051,
        "url": "",
        "content": "<p>生成出来代码排版之后长这样</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#define inf (1.0 / 0.0)</span>\n\n<span class=\"n\">__kernel</span> <span class=\"kt\">void</span> <span class=\"nf\">kernel0</span><span class=\"p\">(</span><span class=\"n\">__global</span> <span class=\"kt\">float</span> <span class=\"n\">v0</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">__global</span> <span class=\"kt\">float</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"n\">__local</span> <span class=\"kt\">float</span> <span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">16</span><span class=\"p\">];</span>\n  <span class=\"kt\">float</span> <span class=\"n\">private_v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"n\">get_group_id</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">get_group_id</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">get_local_id</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">get_local_id</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">15</span><span class=\"p\">);</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(((((((((</span><span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">31</span> <span class=\"o\">*</span> <span class=\"n\">t1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">28</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">31</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span>\n          <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n         <span class=\"p\">(</span><span class=\"n\">b1</span> <span class=\"o\">==</span> <span class=\"n\">t0</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n      <span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"n\">t0</span><span class=\"p\">][</span><span class=\"n\">t1</span><span class=\"p\">][</span><span class=\"n\">c2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">[((((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">/</span>\n                                  <span class=\"mi\">8</span><span class=\"p\">)][((((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">barrier</span><span class=\"p\">(</span><span class=\"n\">CLK_LOCAL_MEM_FENCE</span> <span class=\"o\">|</span> <span class=\"n\">CLK_GLOBAL_MEM_FENCE</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c0</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">);</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">c0</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">);</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mf\">0.000000</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c5</span> <span class=\"o\">&lt;=</span> <span class=\"p\">((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"n\">c5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span>\n              <span class=\"p\">((</span><span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)])</span> <span class=\"o\">+</span>\n               <span class=\"p\">((</span><span class=\"n\">local_v0</span><span class=\"p\">[(</span><span class=\"n\">c2</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)][((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c5</span><span class=\"p\">)][(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c0</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n                                                       <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))])</span> <span class=\"o\">*</span>\n                <span class=\"p\">(</span><span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"n\">b1</span><span class=\"p\">][</span><span class=\"n\">t1</span><span class=\"p\">][((((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c5</span><span class=\"p\">))])));</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span>\n          <span class=\"p\">(</span><span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c0</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">c0</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">v2</span><span class=\"p\">[(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c0</span><span class=\"p\">))][(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c1</span><span class=\"p\">))]</span> <span class=\"o\">=</span>\n          <span class=\"p\">(</span><span class=\"n\">private_v2</span><span class=\"p\">[</span><span class=\"n\">c0</span><span class=\"p\">][</span><span class=\"n\">c1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">barrier</span><span class=\"p\">(</span><span class=\"n\">CLK_LOCAL_MEM_FENCE</span> <span class=\"o\">|</span> <span class=\"n\">CLK_GLOBAL_MEM_FENCE</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p> 没有掌握正确的数组切割技术，产生了一个奇怪的 if。另外现在是在循环外面就把数组复制进来的，应该进一步看哪些只在一个循环中用到，把复制操作挪到循环里面去，以减少local memory的使用。</p>",
        "image_url": "",
        "title": "LiFT使用OpenCL的local/private memory",
        "excerpt_title": "",
        "excerpt": "生成出来代码排版之后长这样#define inf (1.0 / 0.0)\n\n__kernel void kernel0(__global float v0[8][8], __global float v2[8][8]) {\n __local float local_v0[2][2][16];\n float private_v2[2][2];\n int b0 = get_group_id(0);\n int b1 = get_group_id(1);…"
    },
    {
        "type": "article",
        "updated": 1472698262,
        "id": 22264698,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1472698098,
        "url": "",
        "content": "<p>ppcg动不动就崩溃，懒得找原因了。直接自己生成了</p><p>举一个简单的例子，就是一个矩阵自乘<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>A :: (in 8 8)\nB :: (out 8 8)\n\nB := (((reduce 1 +)\"2) (A (*\"1 2) A))\n</code></pre></div><p>生成C代码，这样调用就可以了</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"matmul_c.h\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(){</span>\n  <span class=\"kt\">float</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n  <span class=\"kt\">float</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n  <span class=\"k\">struct</span> <span class=\"n\">matmul_state</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">};</span>\n\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n      <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">;</span>\n\n  <span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%5.0f \"</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>生成OpenCL代码，简单调用这里只需要把 matmul_c.h 改成 matmul_cl.h 就可以了</p><p>生成matmul_cl.c, matmul_cl.h, matmul.cl 这三个文件 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>python -m lift --emit opencl matmul matmul.model\n</code></pre></div><p>编译链接<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gcc -o matmul -Wl,--format=binary matmul.cl -Wl,--format=default matmul.c matmul_cl.c -lOpenCL\n</code></pre></div><p>这样就得到了 matmul 。<br></p><p>当然了现在还不支持插入barrier，所以需要barrier的都生成不出来，也没法从global复制到local。不管怎么说已经扔掉了ppcg，剩下的这些很快就可以支持了。</p>",
        "image_url": "",
        "title": "LiFT输出OpenCL",
        "excerpt_title": "",
        "excerpt": "ppcg动不动就崩溃，懒得找原因了。直接自己生成了举一个简单的例子，就是一个矩阵自乘 A :: (in 8 8)\nB :: (out 8 8)\n\nB := (((reduce 1 +)\"2) (A (*\"1 2) A))\n生成C代码，这样调用就可以了#include &lt;stdio.h&gt;\n#include \"matmul_c.h\"\n\nint\nmain(){\n float A…"
    },
    {
        "type": "article",
        "updated": 1471526879,
        "id": 22076949,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1471526879,
        "url": "",
        "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bhuztez/lift</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>现在可以利用ppcg生成gpu代码了。</p><p>有几个问题，中间数组留在栈上，你自己手动删吧。有些情况ppcg会崩溃，原因不明。 <br></p><p>这些问题等改成不依赖ppcg生成gpu代码应该就可以解决了。</p><p>另外，请自行根据ppcg的README里的说明，按你的显卡设置grid/block/tile参数。</p><p>就是这样</p>",
        "image_url": "",
        "title": "LiFT更新",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bhuztez/lift</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>现在可以利用ppcg生成gpu代码了。有几个问题，中间数组留在栈上，你自己手动删吧。有些情况ppcg会崩溃，原因不明。 这些问题等改成不依赖ppcg生成gpu代码应该就可以解决了。另外，请自行根据ppcg的README里的说明，按你的显卡设置grid/…"
    },
    {
        "type": "article",
        "updated": 1471356752,
        "id": 22041597,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1471348263,
        "url": "",
        "content": "<blockquote>Ask not what your country can do for you, ask what you can do for your country <br><br>—— J.F. Kennedy</blockquote><p>比赛背景很多字，故略。暂时命名成bboc(曾博) scheme，目前<b>没有</b>奖金。欢迎提供奖金，可以在评论中说明奖金的要求和条款(比如只给第一名)。<b>谁出钱最多，命名权就归谁</b>。</p><p>scheme的设计目标，假设bboc收购了知乎，bboc希望他的粉丝账号能显示粉丝徽章，且他能查出到底谁注册了某个账号，以便防止轮子哥冒充粉丝，但是不允许知乎能查出来，也不允许有人可以伪造身份注册。限制密码学算法只允许使用现有的类型，比如<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2585%25AC%25E5%25BC%2580%25E5%25AF%2586%25E9%2592%25A5%25E5%258A%25A0%25E5%25AF%2586\" target=\"_blank\" rel=\"nofollow noreferrer\">公开密钥加密<i class=\"icon-external\"></i></a>， <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25B0%258D%25E7%25A8%25B1%25E5%25AF%2586%25E9%2591%25B0%25E5%258A%25A0%25E5%25AF%2586\" target=\"_blank\" rel=\"nofollow noreferrer\">对称密钥加密<i class=\"icon-external\"></i></a>， <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25AF%2586%25E7%25A2%25BC%25E9%259B%259C%25E6%25B9%258A%25E5%2587%25BD%25E6%2595%25B8\" target=\"_blank\" rel=\"nofollow noreferrer\">密码散列函数<i class=\"icon-external\"></i></a>等等，毕竟bboc比较严谨。 当然，另外一种方式是，你可以证明基于已有的算法，无法构造出bboc scheme，那bboc就不收购知乎了。</p><p>直接在知乎上发一篇文章，把地址贴到评论里就算参与了。当然也欢迎对要求的不合理之处提出意见。 要求改变之后立即以新的要求为准。</p><p>具体细节</p><p><b>bboc scheme level I</b></p><p>1. bboc可以事先和粉丝单独交换一些信息</p><p>2. bboc可以广播一些类似公钥的信息</p><p>3. bboc可以定期发布一些revoke list之类的过期信息，但是知乎只能知道哪些注册信息过期了，不能分辨出账号是否来自同一个粉丝。同样的方法，也可以用来查询哪些粉丝在知乎上有哪些账号，知乎只会知道账号列表，不能知道哪些账号是同一个粉丝</p><p>4. 知乎拿到粉丝注册信息之后，不需要去问bboc就可以知道是否是bboc认证粉丝。</p><p>5.  每个粉丝可以注册多个账号，且不允许知乎能分辨出是否来自同一个粉丝。</p><p>6. 即便拿到同一个粉丝的任意多个注册信息，也伪造不出粉丝的身份<br></p><p>7. bboc可以从账号注册信息中，分辨出是谁注册的</p><p>8. bboc同时也会收购Quora。会通过新增活跃粉丝数考核业绩。为避免两个网站串通造假，粉丝给Quora提供的注册信息，知乎是没法验证通过的。反之亦然。<br></p><p><b>bboc scheme level II</b></p><p>bboc 粉丝太多，需要雇人来认证了。那么问题来了雇来的人不可靠怎么办?</p><p>9. 修改第一条，改成粉丝需要去N个办事处和bboc的多个代表分别交换信息。办事处之间不允许交流信息。盗取N-1个办事处的所有资料，能得出的结论不能多于知乎。但是粉丝必须去所有办事处都交换信息过才能在知乎注册。</p><p><b>bboc scheme level III</b></p><p>10. 修改第3条，bboc调取账号时，不允许知乎知道bboc调取了哪些账号，避免向轮子哥走漏风声。</p>",
        "image_url": "",
        "title": "bboc scheme大赛",
        "excerpt_title": "",
        "excerpt": "Ask not what your country can do for you, ask what you can do for your country —— J.F. Kennedy比赛背景很多字，故略。暂时命名成bboc(曾博) scheme，目前<b>没有</b>奖金。欢迎提供奖金，可以在评论中说明奖金的要求和条款(比如只给第一名)。<b>谁出钱最多，…</b>"
    },
    {
        "type": "article",
        "updated": 1470323244,
        "id": 21874584,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1470323244,
        "url": "",
        "content": "<p><a href=\"https://zhuanlan.zhihu.com/p/21857880\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">857880</span><span class=\"ellipsis\"></span></a></p><p>盘符是过时的做法，早就该被淘汰了。所以要拯救SSD，正确的做法是给Users单独创建一个分区。假如你分不清分区和盘符，说明微软认为你智商太低，不适合用Windows。</p><p> Windows安装难度很高，比安装工具莫名其妙消失了的ArchLinux还高那么一点点。</p><p>你得先进入Advance模式，鬼才知道得按Shift+F10才能进入命令 (<a href=\"https://link.zhihu.com/?target=https%3A//technet.microsoft.com/en-us/magazine/gg491396.aspx\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">technet.microsoft.com/e</span><span class=\"invisible\">n-us/magazine/gg491396.aspx</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> )，接着也不知道怎么搞，才能让他按你的分区方案装，反正从安装界面上看似乎也看不出来。<br></p><p>既然你一开始就没正确安装，那就不管这个了。你就参考，把用户目录复制到另外一个分区去</p><p><a href=\"https://link.zhihu.com/?target=http%3A//keenesoftware.com/2009/05/10/move-vistas-users-folder-to-a-different-drive/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">keenesoftware.com/2009/</span><span class=\"invisible\">05/10/move-vistas-users-folder-to-a-different-drive/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//forums.whirlpool.net.au/archive/1309345%23rr21337336\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">forums.whirlpool.net.au</span><span class=\"invisible\">/archive/1309345#rr21337336</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>注意看评论，注意分辨里面没区分盘符和分区的情况。</p>",
        "image_url": "",
        "title": "不要把Users目录链接到另外一个盘符",
        "excerpt_title": "",
        "excerpt": "<a href=\"https://zhuanlan.zhihu.com/p/21857880\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">857880</span><span class=\"ellipsis\"></span></a>盘符是过时的做法，早就该被淘汰了。所以要拯救SSD，正确的做法是给Users单独创建一个分区。假如你分不清分区和盘符，说明微软认为你智商太低，不适合用Windows。 Windows安装难度很高，比安装工具莫名其妙消失了的ArchLinux还高那么一…"
    },
    {
        "type": "article",
        "updated": 1468854461,
        "id": 21636039,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1468854210,
        "url": "",
        "content": "<p><a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//alexnisnevich.github.io/untrusted/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">alexnisnevich.github.io</span><span class=\"invisible\">/untrusted/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>不是什么新东西。不要怪我老土。 <br></p><p>很多所谓的教你学编程的游戏都非常无趣，他们总是站在居高临下的角度以怎么教你学习一点比如程序语言的知识。而且这也没有多大意义。学会trial and error，比掌握一点可怜的知识重要多了。因为思路的限制，大部分都做成了几个bot打来打去这种形式。而像Robocode这种单纯的bot对战，入门就比较困难，比这更糟糕的是，之后更困难，你在会写一些基于简单规则的bot之后直接就不知所措了。 </p><p>untrusted的目标只是做一个好玩的复古的游戏，你使用规定的方式作弊才能进入下一关。我认为这很可能是未来大部分计算机游戏(不要与视频游戏混淆)的起点。同时，尽管他们在开发时并没有考虑什么教育意义，用这个untrusted来入门，比其他你在网上找到的什么东西都强。目标明确，让你自己想办法去作弊，而不是生硬的塞给你一点知识。毫无疑问，把这个玩通关，效果就要比比如萧井陌的2K培训强多了。顺便提一下另外一个用Python的类似的游戏 <a href=\"https://link.zhihu.com/?target=https%3A//schilcote.itch.io/injection\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">schilcote.itch.io/injec</span><span class=\"invisible\">tion</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "强烈推荐untrusted",
        "excerpt_title": "",
        "excerpt": "<a class=\"\" href=\"http://alexnisnevich.github.io/untrusted/\">http://alexnisnevich.github.io/untrusted/</a>不是什么新东西。不要怪我老土。 很多所谓的教你学编程的游戏都非常无趣，他们总是站在居高临下的角度以怎么教你学习一点比如程序语言的知识。而且这也没有多大意义。学会trial and error，比掌握一点可怜的知识重要多了。因为思路的限…"
    },
    {
        "type": "article",
        "updated": 1468554937,
        "id": 21601402,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1468554006,
        "url": "",
        "content": "<p>老是有人问函数式要如何入门。我早就说过了，只要识字的人，函数式就已经入门了 。所以当然-21天就可以入门了。</p><p>在原始APL里，求平均数，通常的写法是</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>avg←{(+⌿⍵)÷≢⍵}\n</code></pre></div><p>而J，求平均数</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>avg =: +/ % #\n</code></pre></div><p>J相对原始APL的一大改进就是我们不再需要使用⍺⍵</p><p>J使用了 [ 和 ] 这两个函数<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>x [ y = x\nx ] y = y\n</code></pre></div><p>这样用J使用纯函数风格组合新函数时，所有用到的都是函数，毕竟 [ ] 是真正普通函数，而⍺⍵并不是。<br></p><br><p>这对我们有何启发呢？我们平时是如何说平均数的</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>相加 除以 项数\n+/   %   #\n</code></pre></div><p>除了J是从右向左计算的，我们是从左往右计算的，写法上并没有本质区别。相对应/，加对应+。 Alan J. Perlis 早就说过了 Though the Chinese should adore APL, it's FORTRAN they put their money on。APL你对应不起来还情有可原。J这个都已经完全一样了，你要是还看不出来，那我不禁要问，你到底识不识字了。</p><p>我们用西方不识字的人搞出来的文字理论，当然会觉得有各种省略， 各种倒序，各种词性乱用。明明很自然的说法，用这狗屁理论解释不通，那自然是理论有问题。 <br></p><p>看看九章算术<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>合分术曰\n母互乘子并以为实\n...\n</code></pre></div><p>你非要因为母指的是分母，认为这个是名词。那当然解释不通了。因为我们的文字从两千多年前就是函数式的，你得把母当成一个函数，作用是取出分母，那就全都能解释通了。</p><p>用类似ML的风格，近似可以写成这样<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>let 合(x:[分,分]) =\n  ...\n  where\n    实 = 并(互(乘)((母 x), (子 x)))\n</code></pre></div><p>这就导致了一个问题，你的代码就没法朗读了。</p><p>所以说，函数式你早就已经入门了，掌握的还是更高级的形式。而不是Haskell里那种 (.) . (.) 。</p>",
        "image_url": "",
        "title": "函数式-21天入门教程",
        "excerpt_title": "",
        "excerpt": "老是有人问函数式要如何入门。我早就说过了，只要识字的人，函数式就已经入门了 。所以当然-21天就可以入门了。在原始APL里，求平均数，通常的写法是avg←{(+⌿⍵)÷≢⍵}\n而J，求平均数avg =: +/ % #\nJ相对原始APL的一大改进就是我们不再需要使用…"
    },
    {
        "type": "article",
        "updated": 1468049232,
        "id": 21541240,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1468048700,
        "url": "",
        "content": "<p>前面已经提到了，现在的深度学习框架都过于复杂了。</p><p>现在我们来回顾一下，为什么我们自制的深度学习框架能如此简单。</p><p><b>首先</b>我们抛弃了layer的概念。layer有一个很大的问题，每个layer你都要自己写forward和backward。backward就需要你自己去求导，写一个新的layer就很麻烦。有了自动求导 (<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21102230\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">102230</span><span class=\"ellipsis\"></span></a> )，我们就不需要自己去写backward了。</p><p>比如我们这么定义relu就好了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>relu\"0 := (0.0 &gt;. y)\n</code></pre></div><p>又比如softmax</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>ratio\"1 := (y / ((reduce 1 +) y))\nsoftmax\"1 := (ratio (exp (y - ((reduce 1 &gt;.) y))))\n</code></pre></div><p>又比如sigmoid</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sigmoid\"0 := (1 / ((exp (0 - y)) + 1))\n</code></pre></div><p>只要你用的都是基本函数，就不再需要自己去求导了</p><p><b>其次</b>，我们向J语言学习了rank。<a href=\"https://zhuanlan.zhihu.com/p/21523386\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">523386</span><span class=\"ellipsis\"></span></a>。 有了这个rank，我们就不需要有循环了。要是有了循环等控制结构，就要和autograd那样用很复杂的tape结构来求导。更糟糕的是，比如像sum之类的函数，每个你都得处理一遍，而不像这里我们只需要抄好加法的求导公式，sum自然就有了。</p><p>比如convolution就可以拆分出来<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Conv1 := ((((trim 2 2)\"2) (((oblique 2 +)\"4) (K1 ((*\"2 0)\"2 2) Input))) + B1)\n</code></pre></div><p><b>第三</b>，我们真正实现了消去中间数组的功能(<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21519402\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">519402</span><span class=\"ellipsis\"></span></a>) ，这使得我们可以独树一帜的，让你写矩阵点乘时，只能先算乘法再算加法，最终结果里却不会出现这个中间数组。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sigmoid\"0 := (1 / ((exp (0 - y)) + 1))\ndot\"1 1 := ((reduce 1 +) (x * y))\n\nHidden := (sigmoid ((W1 dot Input) + B1))\n</code></pre></div><p>所以你可以看到，比如MNIST demo (<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21379622\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">379622</span><span class=\"ellipsis\"></span></a>)，因为我们的写法就相当于直接写公式，不会出现这里(<a class=\"internal\" href=\"https://www.zhihu.com/question/46607672/answer/105261421\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/4660</span><span class=\"invisible\">7672/answer/105261421</span><span class=\"ellipsis\"></span></a>)提到的layer有隐藏的参数导致难以理解的问题。同时我们这里的函数都是扩展到可以支持任意多维的，所以我们的convolution才是真正通用的，而不是像某些框架里的layer一样只能支持固定的几种convolution。</p><p><b>第四</b>， 我们选择使用integer set library。而不是使用现成封装好的库，比如cuDNN什么的。你可以自己用integer set library来做常规的优化，也可以偷懒调用ppcg去优化。这样能同时支持CPU以及各种GPU，自行选择分块和并行，编译期就可以决定内存分配方案。缺点是有时编译时间可以让theano望尘莫及。</p><p><b>最后的最后</b>，山寨一个ConvNetJS的MNIST demo，来展示我们的框架确实是能运行起来的。<br></p><p><a href=\"http://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-mnist-demo/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">bhuztez.github.io/lift-</span><span class=\"invisible\">mnist-demo/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>英文版等着你来找问题，改进<br></p><p><a href=\"http://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-tutorial/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">bhuztez.github.io/lift-</span><span class=\"invisible\">tutorial/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "7天自制深度学习框架(完)",
        "excerpt_title": "",
        "excerpt": "前面已经提到了，现在的深度学习框架都过于复杂了。现在我们来回顾一下，为什么我们自制的深度学习框架能如此简单。<b>首先</b>我们抛弃了layer的概念。layer有一个很大的问题，每个layer你都要自己写forward和backward。backward就需要你自己去求导，写一个新的la…"
    },
    {
        "type": "article",
        "updated": 1467971141,
        "id": 21534614,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1467971069,
        "url": "",
        "content": "<p>stable里 <br></p><p>target加不了 <br></p><p><a href=\"https://www.zhihu.com/question/46337084/answer/110045196\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/4633</span><span class=\"invisible\">7084/answer/110045196</span><span class=\"ellipsis\"></span></a></p><p>no_std什么的用不了 <br></p><p><a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/no-stdlib.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doc.rust-lang.org/book/</span><span class=\"invisible\">no-stdlib.html</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>rustc_llvm什么的也用不了</p><p>只能放弃stable</p>",
        "image_url": "",
        "title": "rust还是只能用nightly啊",
        "excerpt_title": "",
        "excerpt": ""
    },
    {
        "type": "article",
        "updated": 1467882257,
        "id": 21523386,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1467881811,
        "url": "",
        "content": "<p>是个框架都在说tensor。比如torch直接把数组称为tensor了。tensorflow名字里就有tensor了。然而他们都没有像J一样，从tensor analysis里学习一个rank。</p><p>数组的rank就是数组的维数。J语言里，verb(也就是通常所说的函数)也是有rank的。有了这个rank，我们就不需要循环了。毕竟有了循环，自动求导就要用什么tape之类的结构了，麻烦啊。</p><p>先定义数组还有view<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">ArrayView</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">subview</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ArrayView</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">/</span><span class=\"n\">blocks</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">/</span><span class=\"n\">blocks</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Array</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">shape</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ArrayView</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div><p>C语言一个数组</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>int a[2][3] = {{1,2,3},{4,5,6}};\n</code></pre></div><p>我们就写成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>a = Array((3,2),[1,2,3,4,5,6])\n</code></pre></div><p>先看单目运算。sum的输入是一个rank-n的数组，输出是rank-(n-1)的数组</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum of Array((3,), [1,2,3])\n1 + 2 + 3 = 6\n\nsum of Array((3,2), [1,2,3,4,5,6])\n1  2  3\n+  +  +\n4  5  6\n-------\n5  7  9\n</code></pre></div><p> 计算对每个rank-1的数组分别计算sum</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum\"1 of Array((3,2), [1,2,3,4,5,6])\n1 + 2 + 3 = 6\n4 + 5 + 6 = 15\n</code></pre></div><p>我们定义sum</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_shape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">interp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n            <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">vyi</span> <span class=\"o\">=</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">vyi</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n</code></pre></div><p>先算出dimension的积，这样多个循环就合并成了一个循环</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">e</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ry</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n\n    <span class=\"n\">vy</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n    <span class=\"n\">vz</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>结果</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((),[</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,),[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">])</span>\n</code></pre></div><p>每个verb有内置的rank，且rank是可以嵌套的。我们用None表示J里的rank infinity<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n            <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">),</span>\n              <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">rankex1</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n    <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>再来看结果</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>assert rankex1(Sum(), (), Array((3,),[1,2,3])) == Array((),[6])\nassert rankex1(Sum(), (), Array((3,2),[1,2,3,4,5,6])) == Array((3,),[5,7,9])\nassert rankex1(Sum(), (1,), Array((3,2),[1,2,3,4,5,6])) == Array((2,),[6,15])\n</code></pre></div><p>双目运算，还需要agree</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>agree\n\"2   5 4    1 2 3\n\"3   6 7 8    2 3\n\nnot agree\n\"2   5 4    1 2\n\"2   6 7  1 2 3\n</code></pre></div><p>实现</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">agree</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">==</span><span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">),</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">sx</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">sy</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">rx</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">agree</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">:],</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n            <span class=\"n\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">rx</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sxo</span><span class=\"p\">,</span> <span class=\"n\">syo</span> <span class=\"o\">=</span> <span class=\"n\">sx</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">:],</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n    <span class=\"n\">px</span><span class=\"p\">,</span> <span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sxo</span><span class=\"p\">),</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">syo</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sxo</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">syo</span><span class=\"p\">):</span>\n        <span class=\"n\">common</span> <span class=\"o\">=</span> <span class=\"n\">px</span>\n        <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">common</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n                <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">),</span>\n                      <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">),</span>\n                      <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">common</span> <span class=\"o\">=</span> <span class=\"n\">py</span>\n        <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">px</span><span class=\"o\">/</span><span class=\"n\">common</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n                <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">),</span>\n                      <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">),</span>\n                      <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">rankex2</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n    <span class=\"n\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>来个加号</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Plus</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_shape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">interp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n        <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">vy</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">assert</span> <span class=\"n\">rankex2</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(),</span> <span class=\"p\">(),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">rankex2</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(),</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n</code></pre></div><p>完工</p>",
        "image_url": "",
        "title": "tensor和rank",
        "excerpt_title": "",
        "excerpt": "是个框架都在说tensor。比如torch直接把数组称为tensor了。tensorflow名字里就有tensor了。然而他们都没有像J一样，从tensor analysis里学习一个rank。数组的rank就是数组的维数。J语言里，verb(也就是通常所说的函数)也是有rank的。有了这个rank，我们就不…"
    },
    {
        "type": "article",
        "updated": 1467879766,
        "id": 21519402,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1467879346,
        "url": "",
        "content": "<p>好了，大家都已经熟练掌握如何实现tensor rank和自动求导了。</p><p>上一回提到我们把 C = A + B 编译成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>({S[i] -&gt; C[i] : 0 &lt;= i &lt; 2},\n (call, +,\n  (var, {S[i] -&gt; A[i] : 0 &lt;= i &lt; 2}),\n  (var, {S[i] -&gt; B[i] : 0 &lt;= i &lt; 2})))\n</code></pre></div><p>而 B = (reduce 1 +) A 要编译成三个statement</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>init\n({S1[] -&gt; B[]}, (const, 0.0))\n\nupdate\n({S2[i] -&gt; B[] : 0 &lt;= i &lt; 2},\n (call, +,\n  (var, {S2[i] -&gt; B[] : 0 &lt;= i &lt; 2}),\n  (var, {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}))\n)\n\nfini\n({S3[] -&gt; B[]}, (var, {S3[] -&gt; B[]}))\n</code></pre></div><p>我们独树一帜的把点乘分乘法和加法两个步骤计算，产生了一个巨大的中间数组。这个很不好。那现在就让我们来消除这些用不着的中间数组<br></p><p>就举一个简单的例子 A是输入，C是输出，我们要把B消掉<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>{S1[i] -&gt; B[i] : 0 &lt;= i &lt; 2} : {S1[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n{S2[i] -&gt; C[i] : 0 &lt;= i &lt; 2} : {S2[i] -&gt; B[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>首先呢，我们可以找出，每个元素最多只用到一次的数组，在这里就是 B 了 </p><p>接着我们找出所有用到B的statement，那就是S2了</p><p>把S2中对B的引用，都展开成B的定义。</p><p>计算statement的对应关系 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  {S2[i] -&gt; B[i] : 0 &lt;= i &lt; 2} * (({S1[i] -&gt; B[i] : 0 &lt;= i &lt; 2})^-1)\n= {S2[i] -&gt; S1[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p> 展开S1</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  {S2[i] -&gt; S1[i] : 0 &lt;= i &lt; 2} * {S1[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n= {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>这样，我们就得到了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>{S2[i] -&gt; C[i] : 0 &lt;= i &lt; 2} : {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>也就是把B消掉了<br></p><p>用类似的思路，我们可以把各种用不到的中间数组整个都消去了。我们站在integer set library的肩膀上，不知道比mxnet自己瞎搞一套消中间数组的办法高到哪里去了。</p><p>中间数组消去之后，你就用传统的基于polyhedral model的循环优化。无论是细粒度并行，分块计算，还是编译期决定内存分配方案，都可以在polyhedral model下完成。这是正规学校计算机相关专业编译原理课上都会讲的。这里主要关注把一个深度学习框架糊起来，最最关键，最最不容易找到的资料，其他的就不展开了。假如你一定要问关于polyhedral model的问题，不妨问问皇家理工最精通编译原理的轮子哥。</p>",
        "image_url": "",
        "title": "下一代深度学习框架技术内幕",
        "excerpt_title": "",
        "excerpt": "好了，大家都已经熟练掌握如何实现tensor rank和自动求导了。上一回提到我们把 C = A + B 编译成({S[i] -&gt; C[i] : 0 &lt;= i &lt; 2},\n (call, +,\n (var, {S[i] -&gt; A[i] : 0 &lt;= i &lt; 2}),\n (var, {S[i] -&gt; B[i] : 0 &lt;= i &lt; 2})))\n而 B = (reduce 1 +) A 要编译成三…"
    },
    {
        "type": "article",
        "updated": 1466863850,
        "id": 21425065,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1466863850,
        "url": "",
        "content": "<p>之前死活没效果，经过长时间反反复复检查，发现这竟然不是我的bug。详情见<a class=\"internal\" href=\"https://www.zhihu.com/question/47826876\">这个问题</a></p><p>教程会迅速在这里发布，欢迎来吐槽。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift-tutorial\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/lift-tutorial<i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "MNIST demo终于跑通了",
        "excerpt_title": "",
        "excerpt": "之前死活没效果，经过长时间反反复复检查，发现这竟然不是我的bug。详情见<a data-title=\"这个问题\" data-editable=\"true\" class=\"\" href=\"https://www.zhihu.com/question/47826876\">这个问题</a>教程会迅速在这里发布，欢迎来吐槽。<a class=\"\" href=\"https://github.com/bhuztez/lift-tutorial\"> https://github.com/bhuztez/lift-tutorial</a>"
    },
    {
        "type": "article",
        "updated": 1466327215,
        "id": 21379622,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1466319993,
        "url": "",
        "content": "<p>功能上和<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html\" target=\"_blank\" rel=\"nofollow noreferrer\">ConvNetJS的MNIST demo<i class=\"icon-external\"></i></a> 一致。这个demo奇葩的地方在于，尽管batch size默认是20，但是sample还是一个个算的。下面给的代码也就是算一个sample的。</p><br><p>假如你不了解J语言，得先看一下<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.jsoftware.com/help/learning/07.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">rank<i class=\"icon-external\"></i></a>的概念。以及几个基本函数的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//code.jsoftware.com/wiki/NuVoc\" target=\"_blank\" rel=\"nofollow noreferrer\">定义<i class=\"icon-external\"></i></a>，比较重要的有insert和oblique。 </p><p>有了这个rank，语言里就不需要引入循环了。当然了，<a class=\"internal\" href=\"https://www.zhihu.com/question/35485591/answer/81444260\">这个回答</a>还提到了一个问题，theano编译期不检查shape。数组的shape就好比是变量的类型，你一个静态shape的语言不在编译期检查shape，实在是太荒唐了。这个要实现是挺容易的。我实在想不通为啥theano不支持。</p><p>以下就是根据Input和Target计算Loss的<b>完整</b>代码了。要注意到这是完整的代码，没有任何东西被隐藏起来。而且从Input到FC，只要你愿意，可以合并成一行。</p><p>当然中间偷懒了，在Conv2那里少了reshape，所以你会发现多了一维出来。</p><p>reduce相当于J语言里的insert。同时reduce 和 oblique 都扩展到了多个维度。trim会从头尾两端去除几个数，(stride n)要求对应的shape为 k * n + 1。这些也都支持多个维度。<br></p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Input :: (in 24 24)\nTarget :: (in 10)\nK1 :: (in 8 5 5)\nB1 :: (in 8)\nK2 :: (in 16 8 5 5)\nB2 :: (in 16)\nW :: (in 16 1 4 4 10)\nB :: (in 10)\nConv1 :: (out 8 24 24)\nRelu1 :: (out 8 24 24)\nPool1 :: (out 8 12 12)\nConv2 :: (out 16 1 12 12)\nRelu2 :: (out 16 1 12 12)\nPool2 :: (out 16 1 4 4)\nFC :: (out 10)\nSM :: (out 10)\nLoss :: (out)\n\nrelu\"0 := (0.0 &gt;. y)\nratio\"1 := (y / ((reduce 1 +) y))\n\nConv1 := ((((trim 2 2)\"2) (((oblique 2 +)\"4) (K1 ((*\"2 0)\"2 2) Input))) + B1)\nRelu1 := (relu Conv1)\nPool1 := (((stride 2 2)\"2) (((trim 1 1)\"2) (((oblique 2 &gt;.)\"4) (((duplicate 2 2)\"0) Relu1))))\n\nConv2 := ((((trim 7 2 2)\"3) (((oblique 3 +)\"6)  (K2 ((*\"3 0)\"3 3) Pool1))) + B2)\nRelu2 := (relu Conv2)\nPool2 := (((stride 3 3)\"2) (((trim 2 2)\"2) (((oblique 2 &gt;.)\"4) (((duplicate 3 3)\"0) Relu2))))\n\nFC := (((reduce 4 +) (W * Pool2)) + B)\nSM := (ratio (exp (FC - ((reduce 1 &gt;.) FC))))\n\nLoss := (0 - (log ((reduce 1 +) (Target * SM))))\n</code></pre></div><p>卷积和pooling都统一成了oblique的形式，这样代码实现起来更为简单。 </p><p>完全immutable的语义，而不是像Caffe那样搞了个奇葩的 <a class=\"internal\" href=\"https://www.zhihu.com/question/46501015\">inplace</a> 。 </p><p> 只支持rank=0的数的求导。比如对FC求导可以写成这样，第一行用来声明数组的shape</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>dFC :: (out 10)\ndFC :: (grad Loss FC)\n</code></pre></div><p>我们不支持循环，不支持条件分支，不支持mutable，不支持运算符优先级。毕竟什么都不支持才是最好的。</p>",
        "image_url": "",
        "title": "MNIST demo的代码",
        "excerpt_title": "",
        "excerpt": "功能上和<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html\" target=\"_blank\" rel=\"nofollow noreferrer\">ConvNetJS的MNIST demo<i class=\"icon-external\"></i></a> 一致。这个demo奇葩的地方在于，尽管batch size默认是20，但是sample还是一个个算的。下面给的代码也就是算一个sample的。 假如你不了解J语言，得先看一下<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.jsoftware.com/help/learning/07.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">rank<i class=\"icon-external\"></i></a>的概念。以及几个基本函数的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//code.jsoftware.com/wiki/NuVoc\" target=\"_blank\" rel=\"nofollow noreferrer\">定义<i class=\"icon-external\"></i></a>，比较重要的有insert和oblique…"
    },
    {
        "type": "article",
        "updated": 1464152754,
        "id": 21107077,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1464151305,
        "url": "",
        "content": "<blockquote><p>One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!</p><p>— <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\" target=\"_blank\" rel=\"nofollow noreferrer\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)<i class=\"icon-external\"></i></a></p></blockquote><p>这只是提供另外一种观点，并不保证观点有多么合理。接受这个观点，后果自负。万一错过了什么发财的机会也不要来抱怨。</p><p>最近很多媒体都在大肆宣传劫持什么TCP的消息。害的连我妈看了报道之后就开始骂了，你个没出息的家伙，你看人家年纪也不大却那么厉害，你怎么不去向人家学学。</p><p>我都不知道从哪里说起好了。 这行业真的有钱赚么？WhatsApp，一个破聊天软件能卖190亿美元。有哪家信息安全行业的公司市值有那么多？且不说他们员工数可能都有WhatsApp的几十倍了。且不说他们要面对的问题不知道比一个破聊天软件麻烦到哪里去了。</p><p>另一方面，国内这些互联网公司真的需要信息安全专家么？在这片神奇的土地上，程序员竞相在GitHub上晒密码，在线上的服务晒SVN仓库。区区一个XcodeGhost，就差不多全军覆灭了。我早就有了知名的论断，他们的安全水平如此之低，以至于只要稍稍提高他们的开发效率或者稍稍降低维护成本就可以极大的提高他们的安全水平了。在这样的环境里，哪怕你有天大的决心，也不可能有效提升自己的水平，只能无奈的等着被历史的车轮无情的碾过。</p><br><p>这本来也没什么。 糟糕的是，有些对信息安全一窍不通，思维混乱，前言不搭后语的大V，却有意无意的在吸引别人加入这个行业。典型的有云舒，在<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20949353\">别瞎猜了，我离开阿里只为创业，仅此而已</a>一文里，前脚自己刚用过什么剑术、兵法这些不恰当的比喻，后脚就开始嘲笑别人用道德经，自愈来做比喻，以显示自己多么较真了。碰到任何质疑，只会自鸣得意，你们这些沙丁鱼民科，攻不破我，那我就是安全的。完全不具备做这一行最最基本的职业态度。</p><p>要注意到，信息安全行业是一个危险的行业。没有安理会颁发的资格证书，非要自己偷偷摸摸学习这些东西，这结果就和自己偷偷摸摸造什么核反应堆是一样的。真要造个凑合能用的也许并不难，可是你真的能保证你不会被抓起来关到荒无人烟的沙漠里去么？而且这已经算是最好的结果了。你可以狡辩说你自己瞎搞搞水平高不到哪里去，不会引起注意。匹夫无罪，怀璧其罪。这也不完全正确。你自己是否掌握了高超的技术根本不重要，当别人都认为你掌握了的时候，你就有麻烦了。 </p><p>这就是为什么不建议加入信息安全行业，古人云绝学无忧，什么都不知道才是最好的。</p>",
        "image_url": "",
        "title": "为什么不建议加入信息安全行业？",
        "excerpt_title": "",
        "excerpt": "One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!— <a data-title=\"E.W.Dijkstra Archive: The Humble Programmer (EWD 340)\" data-editable=\"true\" class=\"\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)</a>这只是提供另外一种观点，并不保证观点有多么合…"
    },
    {
        "type": "article",
        "updated": 1464141087,
        "id": 21102230,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1464092227,
        "url": "",
        "content": "<p>上文<a href=\"https://zhuanlan.zhihu.com/p/20942572\" class=\"internal\">为什么要自制深度学习框架? </a>提到小朋友对autograd这么复杂充满了疑问。autograd这么复杂当然是有原因的。就算有的代码里面有循环，autograd也给你求出来。</p><p>这对于一个简单的深度学习框架来说太复杂了。而另一方面，有些深度学习框架，仍然在使用backpropagation方式，自己定义operator哪怕没有引入新的基本函数也仍然需要自己针对forward写backward。 正如<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//idontgetoutmuch.wordpress.com/2013/10/13/backpropogation-is-just-steepest-descent-with-automatic-differentiation-2/\" target=\"_blank\" rel=\"nofollow noreferrer\">Backpropogation is Just Steepest Descent with Automatic Differentiation<i class=\"icon-external\"></i></a>指出的那样，所谓的Backpropagation就是自动求导。backward主要功能就是给forward求导。</p><p>这两种情况都不能令人满意，毕竟我们的口号是</p><blockquote><p>No code is better than no code.</p></blockquote><p>而自动求导这个名字起的很多余。直接照着求导规则计算怎么就成了自动求导了呢？同时，网上流传的各种关于自动求导的文章，包括上面提到了这篇，只讲明白了forward模式，并没有把backward模式讲清楚，尽管backward模式也同样简单。</p><p>看一个简单的例子<br></p><img src=\"http://zhihu.com/equation?tex=v_2+%26%3D%26+f%28v_1%29+%5C%5C%0Av_3+%26%3D%26+g%28v_2%29+%5C%5C%0Av_4+%26%3D%26+h%28v_3%29+%5C%5C%0A%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_1%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_3%7D++%5Ccdot+%5Cfrac%7B%5Cpartial+v_3%7D%7B%5Cpartial+v_2%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v_2%7D%7B%5Cpartial+v_1%7D\" alt=\"v_2 &amp;=&amp; f(v_1) \\\\\nv_3 &amp;=&amp; g(v_2) \\\\\nv_4 &amp;=&amp; h(v_3) \\\\\n\\frac{\\partial v_4}{\\partial v_1} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_3}  \\cdot \\frac{\\partial v_3}{\\partial v_2} \\cdot \\frac{\\partial v_2}{\\partial v_1}\" eeimg=\"1\"><p>根据乘法结合率，你可以从右往左算(forward)，也可以从左往右算(backward)</p><p>第二个例子 <br></p><img src=\"http://zhihu.com/equation?tex=v_2+%26%3D%26+f%28v_1%29+%5C%5C%0Av_3+%26%3D%26+g%28v_1%29+%5C%5C%0Av_4+%26%3D%26+v_2+%2B+v_3+%5C%5C%0Av_5+%26%3D%26+h%28v_4%29+%5C%5C%0Av_6+%26%3D%26+i%28v_5%29+%5C%5C\" alt=\"v_2 &amp;=&amp; f(v_1) \\\\\nv_3 &amp;=&amp; g(v_1) \\\\\nv_4 &amp;=&amp; v_2 + v_3 \\\\\nv_5 &amp;=&amp; h(v_4) \\\\\nv_6 &amp;=&amp; i(v_5) \\\\\" eeimg=\"1\"><br><p>backward模式，计算 <img src=\"http://zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_5%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v_5%7D%7B%5Cpartial+v_4%7D+%5Ccdot+%28%5Cfrac%7B%5Cpartial+v4%7D%7B%5Cpartial+v2%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v2%7D%7B%5Cpartial+v1%7D+%2B+%5Cfrac%7B%5Cpartial+v4%7D%7B%5Cpartial+v3%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v3%7D%7B%5Cpartial+v1%7D%29\" alt=\"\\frac{\\partial v_6}{\\partial v_5} \\cdot \\frac{\\partial v_5}{\\partial v_4} \\cdot (\\frac{\\partial v4}{\\partial v2} \\cdot \\frac{\\partial v2}{\\partial v1} + \\frac{\\partial v4}{\\partial v3} \\cdot \\frac{\\partial v3}{\\partial v1})\" eeimg=\"1\">   时利用了<b>乘法分配律 </b>。而恰好按加减乘除以及乘方的求导规则都能这么用，不然就不会有什么backpropagation了。</p><img src=\"http://zhihu.com/equation?tex=v_7+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v5%7D+%5C%5C%0Av_8+%26%3D%26+%5Cfrac%7B%5Cpartial+v_5%7D%7B%5Cpartial+v4%7D+%5C%5C%0Av_9+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v4%7D+%3D+v_8+%5Ccdot+v_7+%5C%5C%0Av_%7B10%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_2%7D+%3D+1%5C%5C%0Av_%7B11%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_2%7D+%3D+v_9+%5Ccdot+v_%7B10%7D+%5C%5C%0Av_%7B12%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_2%7D%7B%5Cpartial+v_1%7D+%5C%5C%0Av_%7B13%7D+%26%3D%26+v_%7B11%7D+%5Ccdot+v_%7B12%7D+%5C%5C%0Av_%7B14%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_3%7D+%3D+1%5C%5C%0Av_%7B15%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_3%7D+%3D+v_%7B9%7D+%5Ccdot+v_%7B14%7D+%5C%5C%0Av_%7B16%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_3%7D%7B%5Cpartial+v_1%7D+%5C%5C%0Av_%7B17%7D+%26%3D%26+v_%7B15%7D+%5Ccdot+v_%7B16%7D+%5C%5C%0Av_%7B18%7D+%26%3D%26+v_%7B13%7D+%2B+v_%7B17%7D+%5C%5C\" alt=\"v_7 &amp;=&amp; \\frac{\\partial v_6}{\\partial v5} \\\\\nv_8 &amp;=&amp; \\frac{\\partial v_5}{\\partial v4} \\\\\nv_9 &amp;=&amp; \\frac{\\partial v_6}{\\partial v4} = v_8 \\cdot v_7 \\\\\nv_{10} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_2} = 1\\\\\nv_{11} &amp;=&amp; \\frac{\\partial v_6}{\\partial v_2} = v_9 \\cdot v_{10} \\\\\nv_{12} &amp;=&amp; \\frac{\\partial v_2}{\\partial v_1} \\\\\nv_{13} &amp;=&amp; v_{11} \\cdot v_{12} \\\\\nv_{14} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_3} = 1\\\\\nv_{15} &amp;=&amp; \\frac{\\partial v_6}{\\partial v_3} = v_{9} \\cdot v_{14} \\\\\nv_{16} &amp;=&amp; \\frac{\\partial v_3}{\\partial v_1} \\\\\nv_{17} &amp;=&amp; v_{15} \\cdot v_{16} \\\\\nv_{18} &amp;=&amp; v_{13} + v_{17} \\\\\" eeimg=\"1\"><br><p>代码按wikipedia词条<a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Automatic_differentiation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Automatic differentiation<i class=\"icon-external\"></i></a>的例子来</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Vars</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"v\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">w</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">acc</span>\n\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'input'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"sin\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"cos\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span>\n        <span class=\"n\">gx</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span>\n        <span class=\"n\">gx</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">acc</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">acc</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">autodiff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">wrt</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">wrt</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># z = (sin x) + (x * y)</span>\n\n<span class=\"nb\">vars</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"sin\"</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">print</span> <span class=\"n\">autodiff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span>\n</code></pre></div><p>结果</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>('v7', 'v1')\nv1 ('input', 1)\nv2 ('input', 2)\nv3 ('*', 'v1', 'v2')\nv4 ('sin', 'v1')\nv5 ('+', 'v3', 'v4')\nv6 ('cos', 'v1')\nv7 ('+', 'v2', 'v6')\n</code></pre></div><p>diff就是直接按求导规则计算。想支持更多函数就自己把规则抄过来就好了</p><p>而Vars里加入重复的定义不会返回新的名字，同时以下情况按此处理</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>add('+', 0, x) -&gt; x\nadd('+', x, 0) -&gt; x\nadd('*', 1, x) -&gt; x\nadd('*', x, 1) -&gt; x\nadd('*', 0, x) -&gt; 0\nadd('*', x, 0) -&gt; 0\n</code></pre></div><p>以避免创建不必要的变量。</p><p>就是这么简单。 </p>",
        "image_url": "",
        "title": "只有求导没有自动求导",
        "excerpt_title": "",
        "excerpt": "上文<a data-title=\"为什么要自制深度学习框架? - bhuztez的文章 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20942572\">为什么要自制深度学习框架? </a>提到小朋友对autograd这么复杂充满了疑问。autograd这么复杂当然是有原因的。就算有的代码里面有循环，autograd也给你求出来。这对于一个简单的深度学习框架来说太复杂了。而另一方面，有些深度学习框架，仍然在使用backprop…"
    },
    {
        "type": "article",
        "updated": 1464064855,
        "id": 20942572,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1463818712,
        "url": "",
        "content": "<p><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20929496\">7天自制深度学习框架</a>一文自发布以来，骗了不少赞。</p><p>可是评论中也有装神弄鬼之士出来质疑 </p><blockquote><p>不懂深度学习还要做深度学习框架更是痴人说梦了。 </p></blockquote><p>那我就要来把你批判一番了。正是不懂深度学习才要做深度学习框架，因为现有的框架都是写给懂深度学习的人用的。</p><p>有一位小朋友问我，现在别人整天在吹的这个深度学习是什么东西？</p><p>我说深度学习我没看过，不过公式上应该是很简单的东西，大约就是十几个到几十个 Z = f(X dot Y)</p><p>小朋友说了既然那么简单，还不赶紧找个例子出来看看</p><p>我想既然三天两头就有公司/团队出来说他们搞了个开源的深度学习框架，那找个例子应该挺容易的。没想到我竟然栽了。</p><p>我先选了Caffe。小朋友马上就问我了，这个protobuf是什么，和深度学习有什么关系？我哪里知道啊。就说那就换一个吧。</p><p>正好曾老师那几天一直就是在把Caffe和Torch比来比去。凭着对曾老师的信任，我决定换Torch试试。小朋友又问了，Torch那个layer和你说的公式怎么对应起来，还有Torch里面那个数组为什么能叫Tensor？这我怎么知道啊？</p><p>那就换theano吧，这回总该满意了吧。 没想到啊，小朋友还是有问题要问，为什么theano里写公式要和我之前告诉他的写法不一样，不一样也就算了，为啥还这么麻烦？</p><p>我也是惊呆了，没想到知名的深度学习框架一个个都这么难用啊。这可如何是好。</p><p>试了一个又一个，都有这样或者那样的问题。在我即将崩溃之时，我看到了autograd。autograd就是我的大救星。小朋友看了果然很满意，就是还有一个问题，为啥要求导的只能放在第一个参数里。看到我窘迫的表情，小朋友也看出来了，我就是他的问题一个都答不出来的渣渣，决定饶了我。所以他改问我一个简单一点的问题，让我告诉他autograd这个函数是怎么实现的。</p><p>我感到智商受到了这些深度学习框架的侮辱，大放厥辞，这些东西这么难用，我们自己造一个就是了，这有什么难的？他们不就是欺负我不懂深度学习么。</p><p>这就是为什么我要造一个深度学习框架了。</p><p>-------------------------------------</p><p>废话我就不再说了。现在就差把几个部分组合到一起了，你们等着，绝对能简单到让你们大跌眼镜。你一定想不到竟然这么容易就能搞出一个深度学习框架。</p>",
        "image_url": "",
        "title": "为什么要自制深度学习框架?",
        "excerpt_title": "",
        "excerpt": "<a class=\"\" data-title=\"7天自制深度学习框架 - bhuztez的文章 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20929496\">7天自制深度学习框架</a>一文自发布以来，骗了不少赞。可是评论中也有装神弄鬼之士出来质疑 不懂深度学习还要做深度学习框架更是痴人说梦了。 那我就要来把你批判一番了。正是不懂深度学习才要做深度学习框架，因为现有的框架都是写给懂深度学习的人用的。有一…"
    },
    {
        "type": "article",
        "updated": 1463649884,
        "id": 20929496,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1463645028,
        "url": "",
        "content": "<p>上一篇 <a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20325539\">15分钟开发可支持百万观众的H5视频直播网站</a> 虽然骗了很多赞，很显然，不会有啥实际影响。毕竟WebRTC服务端要写一遍，代码量还是很大的。光ICE就不是几行代码能讲清楚的。</p><p>那么换一个容易的目标。现在深度学习非常火爆，可是，很遗憾，我没有看到有知名的IT培训机构，比如，北大青鸟，传智播客，达内，兄弟连等等，在大张旗鼓的宣传他们的深度学习培训班。深度学习的培训班，从理论上讲，要比程序员培训班容易开啊，毕竟深度学习只是一个公式Z = f(X  dot Y)  重复了很多遍，只要把有影响力的论文里计算量要求不大的例子都照着做一遍就好啦，这有什么难度？Web前端都比这难多了。另一方面，因为深度学习往往需要GPU集群，显然我是买不起Tesla集群的。这种单纯只是门槛高的东西，是一个非常好的培训市场。比如，思科的各种证书培训，有人会说这种培训没用吗？可实际上这就是思科人为制造的高门槛。根据网上有些自称思科工作人员的说法，思科自己有一个非常好用的运行在Linux上的路由器/交换机模拟器(可以自行脑补在rumpkernel出来之前，思科就已经有了一个更完善的rumpkernel，无非运行的是他家的iOS)，就是不拿个出来给你用，所以你就没法照着官方教程/文档自学。而有些比较好的厂家，你买他的路由器/交换机，他是会提供对应的模拟器给你的。[CITATION NEEDED]</p><p>所以很明显，一定是哪里出了问题。经过我的观察，我发现现在流行的深度学习工具都非常难用。你也知道，每隔几个星期，就有公司/团队跳出来说他们搞了个新的工具/框架，有这个那个优点，实际上和别家的工具差不多难用。举两个极端的例子，剩下的大多处于这两个之间。一种是theano，最大的优势是提供自动求导，可以非常灵活的表示各种模型，因为<a class=\"internal\" href=\"https://www.zhihu.com/question/45576145\">求导符号的问题</a>，不独立成单独一个文件，而是在一门现成的语言里面提供这个功能，用起来非常别扭。另一种是caffe，直接就做成了layer套layer，你想定义一个奇葩的模型，并不是光照着定义就行了，还有不少别的工作要做。</p><p> 他们各自的问题，我想了好久，发现并不是那么容易解决的。但是，我们一定要解决这些问题吗？我想是不需要的。像caffe那样把模型和训练文件分开，我们就不需要去寻找一个更好的求导符号。像theano那样提供自动求导，我们的写法就可以更贴近公式，而不是需要再学一套layer的定义。毕竟比如像上面说的，培训机构要开深度学习培训班，主要要讲的也是深度学习的模型，而不是这个caffe怎么用。同时也让深度学习不再神秘，不再是一堆看不懂的东西。</p><p>我又看了一下，用现有的开源工具拼凑一下就可以搞出来了。于是就有了这个系列。会一步一步教你如何实现一个简单的深度学习框架。会像<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20689554\">lisp0</a>一样，轮子虽小，五脏俱全。 该有的都会有，能抄近路的地方也会毫不犹豫的过去。</p><p>目前的想法是，使用时，需要三个文件，模型文件，训练文件，以及数据读取文件。提供一个转换工具，可以将比如caffe等的模型转换过来，这个是有必要的，见底下分析。模型文件里面就是一些简单的公式。而公式的格式为了方便起见，不引入运算符优先级，强制必须加括号。会顺便介绍一下如何自动求导，自动并行(SIMD或者多线程)等等相关技术。至于生成是原生程序还是JavaScript，待定。 <br></p><br><p>先占坑。免得忘了。</p><p>-----</p><p>顺便推荐一个更好用的自动求导工具。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/HIPS/autograd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">autograd<i class=\"icon-external\"></i></a></p><p>缺陷是，你需要特别注意，这个自动求导的功能指的是对函数第一个参数求导。 所以，所有需要求导的都得以第一个参数传进去</p><p>比如这个<a href=\"https://link.zhihu.com/?target=https%3A//mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Step by Step Backpropagation Example<i class=\"icon-external\"></i></a>， 可以写成</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">import</span> <span class=\"nn\">autograd.numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autograd</span> <span class=\"kn\">import</span> <span class=\"n\">grad</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n    <span class=\"p\">(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"n\">B1</span><span class=\"p\">),(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">B2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">params</span>\n    <span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">B1</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">hidden</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">B2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loss</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">,</span><span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">-</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n\n<span class=\"n\">loss_grad</span> <span class=\"o\">=</span> <span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"n\">grad</span> <span class=\"o\">=</span> <span class=\"n\">loss_grad</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">,</span><span class=\"n\">target</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">W</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">dW</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">dB</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"n\">dW</span><span class=\"p\">,</span><span class=\"n\">dB</span><span class=\"p\">),(</span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">,</span><span class=\"n\">params</span><span class=\"p\">)]</span>\n\n<span class=\"n\">W1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span><span class=\"mf\">0.20</span><span class=\"p\">],</span>\n      <span class=\"p\">[</span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"mf\">0.30</span><span class=\"p\">]])</span>\n\n<span class=\"n\">B1</span> <span class=\"o\">=</span> <span class=\"mf\">0.35</span>\n\n<span class=\"n\">W2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"mf\">0.40</span><span class=\"p\">,</span><span class=\"mf\">0.45</span><span class=\"p\">],</span>\n      <span class=\"p\">[</span><span class=\"mf\">0.50</span><span class=\"p\">,</span><span class=\"mf\">0.55</span><span class=\"p\">]])</span>\n\n<span class=\"n\">B2</span> <span class=\"o\">=</span> <span class=\"mf\">0.60</span>\n\n<span class=\"n\">PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"n\">B1</span><span class=\"p\">),(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">B2</span><span class=\"p\">)]</span>\n<span class=\"n\">INPUT</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span><span class=\"mf\">0.10</span><span class=\"p\">])</span>\n<span class=\"n\">TARGET</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.01</span><span class=\"p\">,</span><span class=\"mf\">0.99</span><span class=\"p\">])</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">PARAMS</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">PARAMS</span><span class=\"p\">,</span><span class=\"n\">INPUT</span><span class=\"p\">,</span><span class=\"n\">TARGET</span><span class=\"p\">)</span>\n</code></pre></div><p>这可比一堆数学公式容易理解多了。</p>",
        "image_url": "",
        "title": "7天自制深度学习框架",
        "excerpt_title": "",
        "excerpt": "上一篇 <a class=\"\" data-title=\"[标题党]15分钟开发可支持百万观众的H5视频直播网站 - impress your cat - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20325539\">15分钟开发可支持百万观众的H5视频直播网站</a> 虽然骗了很多赞，很显然，不会有啥实际影响。毕竟WebRTC服务端要写一遍，代码量还是很大的。光ICE就不是几行代码能讲清楚的。那么换一个容易的目标。现在深度学习非常火爆，可是，很遗憾，我没有看到有知…"
    },
    {
        "type": "article",
        "updated": 1461077690,
        "id": 20774580,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1461077690,
        "url": "",
        "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//erlang3437.slack.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">erlang3437.slack.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>前两天试了一下，感觉还行，至少他还提供一个凑合的gateway支持IRC和XMPP。就去注册一个，结果Slack嫌我给的域名太长不让我注册。后来我想了一下就注册了这个域名。评论或者私信或者邮件告诉我你的邮箱，<b>我就赶紧把你加进去</b>。</p><p>第一章内容重新调整之后，现在路线是一上来，学了一点点Erlang之后，就直接用学的这些东西写一个能解释之前刚学的这部分Erlang的解释器。在自己实现调用栈之后，就加上send/recv这两个特殊函数，使得刚好功能和最原始的Erlang一致。毕竟在消息之前已经实现一些Erlang的功能了，实在没必要用Prolog再来一遍。因此，Prolog部分也可以简化，只保留比Datalog对应的过来多一点点的就够了，高级的operator功能都先无视了。这几天先会完成Prolog部分的代码。我想在6月底之前完成到Prolog那一节之前的内容，因为现在已经有PEG风格的parser了，所以主要就缺一个好的backtracking的例子了。这样一开始几个节的思路理顺了，接下来几个21天还会有很多内容出现，所以我去弄了个Slack Team方便大家吐槽。</p>",
        "image_url": "",
        "title": "21天学通Erlang Slack Team",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"slack.com 的页面\" data-editable=\"true\" href=\"https://erlang3437.slack.com/\">https://erlang3437.slack.com/</a>前两天试了一下，感觉还行，至少他还提供一个凑合的gateway支持IRC和XMPP。就去注册一个，结果Slack嫌我给的域名太长不让我注册。后来我想了一下就注册了这个域名。评论或者私信或者邮件告诉我你的邮箱，<b>我就赶紧把你加进去</b>。第一章内…"
    },
    {
        "type": "article",
        "updated": 1460811068,
        "id": 20760395,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1460811009,
        "url": "",
        "content": "<p>因为现在在最最基本的语法之后，直接就开始解释Erlang的AST了，而不是从括号语言那里取绕了。而之前的做法有个问题是，在Prolog之后才开始写parser，但是要解释Prolog就得先写个parser。现在既然已经在用AST了，那么引入parse_transform也不是什么问题。所以可以用一个简单的parse_transform把代码转换成PEG风格的parser。所以在能解释之前所有Erlang模块的AST之后，就开始写PEG parser。这样在Prolog前就有parser了，且在backtracking之前过渡更自然一点。</p><p>expression.erl 类似 Erlang Shell 里解释Erlang表达式的功能。比如 </p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,[{</span><span class=\"n\">'X'</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}]}</span> <span class=\"o\">=</span> <span class=\"nn\">expression</span><span class=\"p\">:</span><span class=\"nf\">eval_string</span><span class=\"p\">(</span><span class=\"s\">\"X.\"</span><span class=\"p\">,[{</span><span class=\"n\">'X'</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}]).</span>\n</code></pre></div><p>function.erl 更进一步，能解释单个模块里的函数，比如</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nn\">function</span><span class=\"p\">:</span><span class=\"nf\">test</span><span class=\"p\">({</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"s\">\"seq.erl\"</span><span class=\"p\">}).</span>\n</code></pre></div><p> 相当于</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">seq</span><span class=\"p\">:</span><span class=\"nf\">test</span><span class=\"p\">().</span>\n</code></pre></div><p>只是所有seq里的函数是由function.erl来解释的。目前，运行seq.erl, board.erl, bindings.erl, expression.erl以及function.erl都没有问题。</p><p>最简单的parse_transform，实现的功能相当于</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">(</span><span class=\"n\">export_all</span><span class=\"p\">).</span>\n</code></pre></div><p>因为是parse_transform，所以得这么用</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">({</span><span class=\"n\">parse_transform</span><span class=\"p\">,</span> <span class=\"n\">export_all</span><span class=\"p\">}).</span>\n</code></pre></div><p>接下来就可以有PEG transform了。plain Erlang风格写个简单的parse整数的功能<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nf\">digit</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span>\n  <span class=\"k\">when</span> <span class=\"nv\">H</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">=&lt;</span> <span class=\"sc\">$9</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">-</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">};</span>\n<span class=\"nf\">digit</span><span class=\"p\">(_</span><span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">error</span><span class=\"p\">.</span>\n\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nv\">Acc1</span> <span class=\"o\">=</span> <span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"nv\">N</span><span class=\"p\">,</span>\n            <span class=\"k\">case</span> <span class=\"n\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc1</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n                <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">};</span>\n                <span class=\"n\">error</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Acc1</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span>\n            <span class=\"k\">end</span><span class=\"p\">;</span>\n        <span class=\"n\">error</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">error</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>有了peg_transform之后，可以只关心能匹配的情况，不匹配的情况自动返回error。特别的int函数，第一个clause失败后会尝试第二个clause。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">({</span><span class=\"n\">parse_transform</span><span class=\"p\">,</span> <span class=\"n\">peg_transform</span><span class=\"p\">}).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">rules</span><span class=\"p\">([</span><span class=\"n\">int</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">digit</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">digit</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span>\n  <span class=\"k\">when</span> <span class=\"nv\">H</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">=&lt;</span> <span class=\"sc\">$9</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">-</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"c\">%%</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">),</span> <span class=\"c\">%%</span>\n    <span class=\"n\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">);</span>\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">),</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}.</span>\n</code></pre></div><p>失败包括两种情况，一种是clause的pattern不匹配，另一种不匹配是发生在类似这种地方</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Expr</span><span class=\"p\">,</span> <span class=\"nv\">Remain</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">rule</span><span class=\"p\">(...)</span>\n</code></pre></div><p>利用peg_transform，就可以写一个简单的parser，替换掉 parse_util:parse_expr/1</p><p>这些代码都已经在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/skeleton\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - xn--21Erlang-p00o82pmp3o/skeleton<i class=\"icon-external\"></i></a> 里更新了。</p>",
        "image_url": "",
        "title": "第6/7/8/9个21天",
        "excerpt_title": "",
        "excerpt": "因为现在在最最基本的语法之后，直接就开始解释Erlang的AST了，而不是从括号语言那里取绕了。而之前的做法有个问题是，在Prolog之后才开始写parser，但是要解释Prolog就得先写个parser。现在既然已经在用AST了，那么引入parse_transform也不是什么问题。所…"
    },
    {
        "type": "article",
        "updated": 1460353659,
        "id": 20734035,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1460353587,
        "url": "",
        "content": "<p>有几大理由<br></p><p>尽管有很大的缺陷，依然被广泛用于教学。Haskell的Lazy by default在很多时候不仅用不着反而会带来不必要的麻烦。而Java是伪装成静态类型的动态类型语言。</p><p>很多Haskell粉丝把immutable当成了FP，却对真正的FP风格嗤之以鼻。用真正FP风格的Haskell代码大约长这样 (. (.) . (. . (. .)) . .) 。 很多Java粉丝把class interface当成了OO，却对真正的OO风格嗤之以鼻，(Java代码太长，故略) ...</p><p>他们都有很多听上去高大上实际上很简单的名词，有不少初学者对此感到困惑。比如，单子。</p>",
        "image_url": "",
        "title": "Haskell is the new Java",
        "excerpt_title": "",
        "excerpt": "有几大理由 尽管有很大的缺陷，依然被广泛用于教学。Haskell的Lazy by default在很多时候不仅用不着反而会带来不必要的麻烦。而Java是伪装成静态类型的动态类型语言。很多Haskell粉丝把immutable当成了FP，却对真正的FP风格嗤之以鼻。用真正FP风格的Haskell…"
    },
    {
        "type": "article",
        "updated": 1460174219,
        "id": 20725914,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1460127528,
        "url": "",
        "content": "<p>在删一些旧文件时，突然想到了这个问题。顺便黑一下Peter Norvig的 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//norvig.com/21-days.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Teach Yourself Programming in Ten Years<i class=\"icon-external\"></i></a> 。他这篇文章除了\"Why is everyone in such a rush?\"是对的，给的建议经不起时间的考验。对于过去十年来说，最好的办法实际上啥也不学等十年才是最划算的，尤其是对于十年之前的我来说。</p><p>十年之前烂尾的程序，在我现在看来，要么就是完全不值得写，要么想写只要有几天时间就可以写出来。很多十年前，完全不敢想像自己也能写的程序，现在竟然已经写过不少了。看上去好像取得了非常大的进步，可是仔细一想把现在的我直接扔到十年前，该烂尾的还是会烂尾，写不出来的还是写不出来。</p><p>这十年间</p><p>出现了Stack Overflow。以前随便碰到个小问题都足以使一个程序烂尾了，特别是对于我这种业余的来说，花几天时间去解决一个小问题完全是不现实的。现在，绝大多数都只要从Stack Overflow上复制几行代码就好了。<br></p><p>git/hg之类的DVCS成为了主流，而在十年前，我想我从来就没搞明白过CVS和SVN。我承认我是在学会git或者hg的基本操作之后才搞明白SVN的，那时已经没几个项目在用CVS了，也就无视了。写程序而不用版本管理工具是完全无法想象的。</p><p>国外有很多不错的课程对于只要买得起普通电脑的人来说，自学已经没有任何障碍了。比如MIT 6.828，现在已经只需要用vanilla QEMU就可以了。而在之前，很多类似的课程用的都不是x86指令集，或者需要打过一些奇怪补丁的QEMU或者别的什么(包括MIT 6.828)。更多的是直接让你死在boot-loader上。</p><p>还有至少大家都听说过Erlang了，当然绝大多数人都退缩了。而我并没有。很多问题，用Erlang进行快速原型开发要容易多了，假如你退缩了，你就注意不到了，比如解析H264 bit stream，用Erlang比用C还容易不少。</p><p>国内宽带也普及了。很多大学的各种开源镜像都已经比较完善了。很容易就能用上各种Linux发行版提供的打包好的库，而不是自己从不知道哪里去找源代码还不知道怎么编译。</p><p> 所以，这十年里，我唯一有效的努力就是试着学了一点Erlang(因为令人吃惊的事实是，大部分人都做不到这一点)，其他的进步都和自身努力无关，全是时代的进步带给我的。</p>",
        "image_url": "",
        "title": "个人的努力在时代的进步面前不值一提",
        "excerpt_title": "",
        "excerpt": "在删一些旧文件时，突然想到了这个问题。顺便黑一下Peter Norvig的 <a class=\"\" data-title=\"Teach Yourself Programming in Ten Years\" data-editable=\"true\" href=\"http://norvig.com/21-days.html\">Teach Yourself Programming in Ten Years</a> 。他这篇文章除了\"Why is everyone in such a rush?\"是对的，给的建议经不起时间的考验。对于过去十年来说，最好的办法实际上啥也不学等十年才是…"
    },
    {
        "type": "article",
        "updated": 1459387963,
        "id": 20689554,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1459350065,
        "url": "",
        "content": "<p>代码没写完，广告先打起来<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lisp0\" target=\"_blank\" rel=\"nofollow noreferrer\"> GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP<i class=\"icon-external\"></i></a></p><br><p>学习高级语言Runtime最好的办法，当然是自己动手写一个啦。毫无疑问假如你不是特别喜欢走弯路的轮子哥，肯定选从容易的开始。那么就选最最原始的LISP好了(Brainfuck之类的过于简单，这里先忽略他们的存在)。lisp0不会像Lisp Machine是一台单独的机器，lisp0就是一个普通的运行在Linux的程序。</p><p>既然是把Runtime实现一遍，那么在操作系统之上全都自己来实现，连CRT和libc也不要用。因为Lisp语言自己就又栈了，所以C程序没事别递归，用的栈是非常有限的，于是用bss段里的一段内存当C语言的栈，而操作系统在启动时，分配来的栈，给Lisp用。这样虽然奇葩了点，非常省事啊。</p><p>因为(假装)lisp0是immutable的，所以只要简单的引用计数就可以了。不过这写起来麻烦，用一次就要增减一次。还不如先用个简单的Mark sweep GC。因为immutable，所以新的不能被旧的引用，在allocate后把他们串成一个栈，只要从新往旧扫一遍，在扫到时还没被标记，那就一定不会被标记到，可以放心的free。至于memory allocator，就用简陋的TLSF算法就好了，这算法看上去就像个增强版的Buddy allocator。<br></p><p>既然Lisp霸占了原本给C用的栈，使用方式也就和C保持一致好了。因为GCC支持Labels as Values，所以只要在CALL之后放一个label，那个label的值就是返回地址了。同时，因为symbol只接受[_0-9A-Za-z]+，所以长度小于等于8的symbol，经过base64解码之后长度就只有6字节了，而64位机器上去掉3位tag，还有61位，完全放的下。</p><p>接下来，lisp0应该改用HAMT来实现environment，换一个更好的GC。本文到此就结束了。</p>",
        "image_url": "",
        "title": "lisp0",
        "excerpt_title": "",
        "excerpt": "代码没写完，广告先打起来<a class=\"\" data-title=\"GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP\" data-editable=\"true\" href=\"https://github.com/bhuztez/lisp0\"> GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP</a> 学习高级语言Runtime最好的办法，当然是自己动手写一个啦。毫无疑问假如你不是特别喜欢走弯路的轮子哥，肯定选从容易的开始。那么就选最最原始的LISP好了(Brainfuc…"
    },
    {
        "type": "article",
        "updated": 1459343169,
        "id": 20689218,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1459343170,
        "url": "",
        "content": "<p>假如您看得上只有仅仅2K+粉丝的专栏，刚好又没有专栏。任何和编程或者形式证明相关的，特别是能和Erlang, APL(包括APL家族的A+, J, K等等), Metamath等扯上关系的，欢迎来稿。</p><p>根据知乎专栏的新玩法，在知乎允许的范围(我也懒得了解了)内，假如有幸收录您的一篇投稿，就会把您列为作者之一，也就是下一次就可以直接发了。 (不知道能不能抢文章，那样就好玩了) </p>",
        "image_url": "",
        "title": "欢迎投稿本专栏",
        "excerpt_title": "",
        "excerpt": "假如您看得上只有仅仅2K+粉丝的专栏，刚好又没有专栏。任何和编程或者形式证明相关的，特别是能和Erlang, APL(包括APL家族的A+, J, K等等), Metamath等扯上关系的，欢迎来稿。根据知乎专栏的新玩法，在知乎允许的范围(我也懒得了解了)内，假如有幸收录您的…"
    },
    {
        "type": "article",
        "updated": 1458306921,
        "id": 20656358,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1458306921,
        "url": "",
        "content": "<p>之前只是解决了是否可能的问题。真正要能用，还是要把代码长度控制在允许的范围内。 <br></p><p>一是需要压缩率更高的算法</p><p><a class=\"internal\" href=\"https://www.zhihu.com/question/39504416/answer/88728975\">如何提高写在C语言里的汇编代码的压缩率？ - 知乎用户的回答</a></p><p>二是用gcc编译时，加上参数 -fwhole-program 而不是通常的 -flto <br></p><p>这样提交上去的代码长度不少就只有10K左右了。而算法库的源代码目前都已经接近50K了，无脑复制成一个文件已经没啥OJ会接受了。</p>",
        "image_url": "",
        "title": "向OJ提交编译出来的汇编代码2",
        "excerpt_title": "",
        "excerpt": "之前只是解决了是否可能的问题。真正要能用，还是要把代码长度控制在允许的范围内。 一是需要压缩率更高的算法<a class=\"internal\" href=\"https://www.zhihu.com/question/39504416/answer/88728975\">如何提高写在C语言里的汇编代码的压缩率？ - 知乎用户的回答</a>二是用gcc编译时，加上参数 -fwhole-program 而不是通常的 -flto 这样提交上去的代码…"
    },
    {
        "type": "article",
        "updated": 1457354480,
        "id": 20627628,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1457353305,
        "url": "",
        "content": "<p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/awesome-ancient-chinese-books\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - bhuztez/awesome-ancient-chinese-books: A curated list of awesome chinese books<i class=\"icon-external\"></i></a><br></p><p>暂时没时间维护。先把坑挖开，<b>求支持</b>。</p><p>目标就是整理个目录，把网上能找到的古籍的地址按书名记录好，以便查阅。 </p><p>主要是为了以后开发中文编程语言时有据可循，而不是自己胡编乱造</p><p>就是这样</p>",
        "image_url": "",
        "title": "Awesome Ancient Chinese Books",
        "excerpt_title": "",
        "excerpt": "<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/awesome-ancient-chinese-books\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - bhuztez/awesome-ancient-chinese-books: A curated list of awesome chinese books<i class=\"icon-external\"></i></a> 暂时没时间维护。先把坑挖开，<b>求支持</b>。目标就是整理个目录，把网上能找到的古籍的地址按书名记录好，以便查阅。 主要是为了以后开发中文编程语言时有据可循，而…"
    },
    {
        "type": "article",
        "updated": 1459343887,
        "id": 20612720,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1456835574,
        "url": "",
        "content": "<p>application/x-www-form-urlencoded这种比较简单就不讨论了。</p><p>multipart/form-data就比较麻烦了。搜了一下结果发现要么是远古时期的，要么就是推荐requests。有必要这么麻烦么？Python明明自带MIME库了，为啥就没人推荐用标准库的方法？只能自己来了</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Form</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">,</span> <span class=\"s1\">'multipart/form-data'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_payload</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_write_headers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_generator</span><span class=\"p\">):</span>\n        <span class=\"c1\"># DARK MAGIC followed</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Disposition'</span><span class=\"p\">,</span><span class=\"s1\">'form-data'</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_payload</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">form_data</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">form_data</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n        <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n    <span class=\"c1\"># THIS IS A SEPARATION BARRIER</span>\n    <span class=\"c1\"># NEVER LET CODE MOVE ACROSS THIS</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">]}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n</code></pre></div><p> 就是这样</p>",
        "image_url": "",
        "title": "[黑魔法]Python模拟HTML表单提交",
        "excerpt_title": "",
        "excerpt": "application/x-www-form-urlencoded这种比较简单就不讨论了。multipart/form-data就比较麻烦了。搜了一下结果发现要么是远古时期的，要么就是推荐requests。有必要这么麻烦么？Python明明自带MIME库了，为啥就没人推荐用标准库的方法？只能自己来了from url…"
    },
    {
        "type": "article",
        "updated": 1453387521,
        "id": 20521163,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1453387521,
        "url": "",
        "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/barelibc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/barelibc<i class=\"icon-external\"></i></a></p><p>在<a class=\"internal\" href=\"https://www.zhihu.com/question/39519315/answer/81747490\">为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答</a>的启发下，我把 __syscall 挪到 crt1.o 里去了，免得被覆盖还不知道。</p><p>之前可能没提用barelibc也可以支持一部分C++了。注意编译的命令是 gcc 而不是 g++，不然会链接 libstdc++ ，就见鬼了。</p><p>--------------------------</p><p>正式开始在刷题的库。主要卖点是写完运行一行命令可以生成能提交到OJ的代码。在正式发布之前暂时不会公开源代码。假如你手上有很多现成优质代码捐赠给我，那果断加入吧。<br></p><p>没代码，你也可以来完善这个TODO list。目标是收集各种topic，可能出现的题型，以及每个题型一个例题。以便我的库能覆盖所有常见题型。<br></p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/oj-solutions/blob/master/TODO.md\" target=\"_blank\" rel=\"nofollow noreferrer\">oj-solutions/TODO.md at master · bhuztez/oj-solutions · GitHub<i class=\"icon-external\"></i></a><br></p><p>欢迎Pull Request </p><p>--------------------------</p><p>另外，第6个21天的更新会和第7个21天一起发布</p>",
        "image_url": "",
        "title": "barelibc问题修复及其他",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"bhuztez/barelibc\" data-editable=\"true\" href=\"https://github.com/bhuztez/barelibc\">bhuztez/barelibc</a>在<a class=\"\" data-title=\"为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答\" data-editable=\"true\" href=\"https://www.zhihu.com/question/39519315/answer/81747490\">为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答</a>的启发下，我把 __syscall 挪到 crt1.o 里去了，免得被覆盖还不知道。之前可能没提用barelibc也可以支持一部分C++了。注意编译的命令是 gcc 而不是 g++，不然会链接 …"
    },
    {
        "type": "article",
        "updated": 1452596309,
        "id": 20494114,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1452596265,
        "url": "",
        "content": "<p> 比如 x.c 的内容如下<br></p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">.globl main</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">.type main,@function</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"main:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">movl $1,%eax</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">ret</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n</code></pre></div><p>编译，运行，可以看到退出代码确实是1</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ gcc -o x x.c\n$ ./x\n$ echo $?\n1\n$\n</code></pre></div><p>所以，理论上我们只需要把汇编代码，改写成C语言字符串就好了。</p><p>用 gcc -S -o- x.c 就能看到编译出来的汇编代码了</p><p>可是，发现在某些运行在Windows的OJ(用老版本的MinGW gcc)提交这些汇编代码时，会编译不过去，提示缺少 ___chkstk_ms ，假如关掉这个会导致程序出错。参考<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/8400118/what-is-the-purpose-of-the-chkstk-function\" target=\"_blank\" rel=\"nofollow noreferrer\">c++ - What is the purpose of the _chkstk() function?<i class=\"icon-external\"></i></a></p><p>假设当前函数栈横跨 B - E ，假如直接跳过C页访问D页，就出错了<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  A    B    C    D    E\n+----+----+----+----+----\n|    |    |    |    |\n+----+----+----+----+----\n       |         ^     |-&gt;\n</code></pre></div><p>暂时的办法就是直接抄一份现在版本的代码进去，反正也不长</p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//github.com/mirror/mingw-w64/blob/cf136d93e41ffff7f593230e20c5854a68322b5d/mingw-w64-libraries/winpthreads/src/libgcc/dll_dependency.S\" target=\"_blank\" rel=\"nofollow noreferrer\">mingw-w64/dll_dependency.S at cf136d93e41ffff7f593230e20c5854a68322b5d · mirror/mingw-w64 · GitHub<i class=\"icon-external\"></i></a><br></p><p>那C++怎么办？不同的libstdc++可能有不小的区别。需要关掉一些C++的功能，使得用gcc也能正常链接C++代码就没问题了。也就是使用以下命令编译</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gcc -fno-rtti -fno-exceptions\n</code></pre></div><p>-----------------------------------------------------------------------</p><p>这样生成出来的汇编代码很长，尝试压缩。比如</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"...movl...\"</span><span class=\"p\">)</span>\n</code></pre></div><p> 可以替换成</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#define M \"movl\"</span>\n<span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"...\"</span><span class=\"n\">M</span><span class=\"s\">\"...\"</span><span class=\"p\">)</span>\n</code></pre></div><p>这么做的好处是不需要考虑escape什么的。 可是压缩率不太行，找了几个文件试了一下，仅仅在10%-15%之间。</p>",
        "image_url": "",
        "title": "向OJ提交编译出来的汇编代码",
        "excerpt_title": "",
        "excerpt": "比如 x.c 的内容如下 asm(\"\\t.globl main\\n\"\n\"\\t.type main,@function\\n\"\n\"main:\\n\"\n\"\\tmovl $1,%eax\\n\"\n\"\\tret\\n\");\n编译，运行，可以看到退出代码确实是1$ gcc -o x x.c\n$ ./x\n$ echo $?\n1\n$\n所以，理论上我们只需要把汇编代码，改写成C语言字符串就好了…"
    },
    {
        "type": "article",
        "updated": 1450880877,
        "id": 20441953,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1450880689,
        "url": "",
        "content": "<p>珍爱生命，远离Coq邪教。 <a class=\"internal\" href=\"http://zhuanlan.zhihu.com/marisa/20439796\">传教文：Coq - The Dairy of Marisa - 知乎专栏</a></p><p>Coq超级难入门啊。比如我前1024次尝试都以失败告终。装完Coq之后就不知道自己在干什么了，就没找到一个能看的教程。</p><p>(以下内容根据官方教程改编。) </p><p>不推荐先用CoqIDE或者Proof General <br></p><p>先学会退出<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ coqtop\nWelcome to Coq ......\n\nCoq &lt; Quit.\n</code></pre></div><p>好，现在来证明第一个定理。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Coq &lt; Theorem my_first_theorem :\nCoq &lt;   forall A B C : Prop,\nCoq &lt;     (A-&gt;(B-&gt;C)) -&gt; ((A-&gt;B)-&gt;(A-&gt;C)).\n1 subgoal\n  \n  ============================\n   forall A B C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; \n</code></pre></div><p>输入定理。Coq的显示，============================上方是假设，下方是待证明的命题。我们的目标就是从假设推出待证明的结果。 </p><p>先intros A<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros A.\n1 subgoal\n  \n  A : Prop\n  ============================\n   forall B C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; \n</code></pre></div><p>如下图所示，intros A这一步把我们一个开始的目标不妨称为X，转换成了一个新的目标不妨称为Y，只要证明了Y，我们就能证明X。也就是说，Coq通常证明过程是反着来的，把目标不断改写直到待证明的命题都是显然的或者都出现在上方的假设当中，证明就完成了。 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>                         intros A A : Prop\n======================= &lt;======== =======================\nforall A B C : Prop,              forall B C : Prop\n(A-&gt;B-&gt;C)-&gt;(A-&gt;B)-&gt;A-&gt;C           (A-&gt;B-&gt;C)-&gt;(A-&gt;B)-&gt;A-&gt;C\n</code></pre></div><p> 同样的 intros B, intros C<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros B.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  ============================\n   forall C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; intros C.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  ============================\n   (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n</code></pre></div><p>intros的另一种作用</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros H0.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  ============================\n   (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; intros H1.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  ============================\n   A -&gt; C\n\nmy_first_theorem &lt; intros H2.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   C\n</code></pre></div><p>不妨把上一个目标称为M，下面两个目标称为N。apply H0的意思是，只要证明了N，代入到H0中，我们就能证明M。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; apply H0.\n2 subgoals\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   A\n\nsubgoal 2 is:\n B \n</code></pre></div><p>也就是说，根据A和H0可以得到 B-&gt;C，再根据B可以得到C。 如下图所示</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>                  ...\n                  ======\n...    apply H0   A\n===== &lt;=========\nC                 ...\n                  ======\n                  B\n\n... 表示\n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n</code></pre></div><p>产生多个目标后，Coq会按顺序让你提供证明。因为H2就是A，所以，exact H2。 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; exact H2.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   B\n\nmy_first_theorem &lt; \n</code></pre></div><p> 类似的。apply H1, exact H2后，剩下一个目标的证明也完成了<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; apply H1.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   A\n\nmy_first_theorem &lt; exact H2.\nNo more subgoals.\n\nmy_first_theorem &lt; \n</code></pre></div><p> QED</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; Qed.\nintros A.\nintros B.\nintros C.\nintros H0.\nintros H1.\nintros H2.\napply H0.\n exact H2.\n\n apply H1.\n exact H2.\n\nmy_first_theorem is defined\n\nCoq &lt; \n</code></pre></div><p>反过来，是不是感觉好多了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>A-&gt;(B-&gt;C), A  A-&gt;B, A\n============= =======\nB-&gt;C,         B\n======================\nC\n\n((A-&gt;(B-&gt;C)) /\\ (A-&gt;B) /\\ A) -&gt; C\n===================================\n((A-&gt;(B-&gt;C)) /\\ (A-&gt;B)) -&gt; (A-&gt;C)\n===================================\n(A-&gt;(B-&gt;C)) -&gt; ((A-&gt;B) -&gt; (A-&gt;C))\n\nA : Prop\nB : Prop\nC : Prop\n=============================\n(A-&gt;(B-&gt;C))-&gt;((A-&gt;B)-&gt;(A-&gt;C))\n\n||\n\\/\n\n==================================================\nforall A B C : Prop, (A-&gt;(B-&gt;C))-&gt;((A-&gt;B)-&gt;(A-&gt;C))\n</code></pre></div>",
        "image_url": "",
        "title": "Coq sucks.",
        "excerpt_title": "",
        "excerpt": "珍爱生命，远离Coq邪教。 <a class=\"\" data-title=\"传教文：Coq - The Dairy of Marisa - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/marisa/20439796\">传教文：Coq - The Dairy of Marisa - 知乎专栏</a>Coq超级难入门啊。比如我前1024次尝试都以失败告终。装完Coq之后就不知道自己在干什么了，就没找到一个能看的教程。(以下内容根据官方教程改编。) 不推荐先用CoqIDE或者Proof General…"
    },
    {
        "type": "article",
        "updated": 1450614614,
        "id": 20432737,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1450614614,
        "url": "",
        "content": "<p>调整了git仓库的名字，改成book了。GitHub Pages上也加上了链接。重新生成了PDF。</p><p>之前老是写完了不满意重写，反反复复两个小节都没写完。现在特别开了skeleton仓库(<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/skeleton\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/skeleton · GitHub<i class=\"icon-external\"></i></a>)，先把想到的都记下来，降低反馈以及参与的难度。等skeleton里讨论了差不多了再挪到book里。<br></p><p>所以赶紧来吐槽，来补充内容吧。</p>",
        "image_url": "",
        "title": "第5个21天",
        "excerpt_title": "",
        "excerpt": "调整了git仓库的名字，改成book了。GitHub Pages上也加上了链接。重新生成了PDF。之前老是写完了不满意重写，反反复复两个小节都没写完。现在特别开了skeleton仓库(<a data-title=\"xn--21Erlang-p00o82pmp3o/skeleton · GitHub\" data-editable=\"true\" class=\"\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/skeleton\">xn--21Erlang-p00o82pmp3o/skeleton · GitHub</a>)，先把想到的都记下来，降低反馈以及参与的…"
    },
    {
        "type": "article",
        "updated": 1449976820,
        "id": 20412482,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1449932672,
        "url": "",
        "content": "<p>很多公司都在开发自己的监控系统。出发点肯定是现有的并不够好用。而这个看上去很容易嘛，那就自己开发一个。(尽管我不认同这个答案的观点) <a class=\"internal\" href=\"https://www.zhihu.com/question/27464246/answer/75704392\">为什么很多公司都自主开发监控系统？（Linux运维方面） - gashero 的回答</a> 一针见血的指出了很多公司自己开发的结果是把时间都花在了怎么采集数据，怎么展示上了，往往最后还不如现成的开源的方案。这不就是在浪费时间啊。<br></p><p>我认为他们几乎都掉进了<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Inventor%27s_paradox\" target=\"_blank\" rel=\"nofollow noreferrer\">Inventor's paradox<i class=\"icon-external\"></i></a> 。 毫无疑问，一开始开发的时候，就会以XXX为目标，把所有XXX中需要的功能都山寨一遍，等这个OK了，替换掉XXX，接着开发自己需要的功能。这实际上是没有必要的，无非是自己给自己设限制。</p><p>不仅仅是机器的状态，某个端口能不能连上需要监控。更细的，比如统计IP包的Header，看看是不是有人在攻击你的服务，更贴近业务的，比如某个时间段，来自某个地区的访问是不是突然消失了，又比如付钱是不是突然都失败了。这些东西都是监控要做的。</p><p>转换到这种思路之后，你就不会再考虑自己去实现采集数据的功能了，因为根本就不知道会有哪些数据，而是反过来，提供一些接口，要求需要使用监控的一方自己来提供数据。有现成开源的采集数据的工具就先用着再说。展示也是类似的，提供一个取数据的接口，至于怎么展示那是需要使用监控的一方自己说了算。</p><p>那监控到底要做什么呢？首先当然是报警啦。而很多工具报警的功能就只针对某一个非常小的领域，要加别的类型的报警很不容易，更别说大部分实现实际上报警是定时读一下日志判断要不要报警的。报警不是单纯的发出通知就够了，肯定需要限制发送频率，也肯定需要能合并多个通知。定时读日志尽管产生报警可以做到stateless，发送报警通知是不可能做到stateless，用adhoc, informally-specified, bug-ridden, ...的方式来存这个状态，往往就是导致使用者想自己开发的导火索。</p><p>而这些实际上可以用Complex Event Processing/Event Stream Processing(buzzword)的形式统一起来。把一个比较通用的实时事件流分析处理的功能做好了，报警的问题就迎刃而解了。而开发这么一个东西需要的技术，在2000年前后就已经是路人皆知了。现在最推荐的是看<a href=\"https://link.zhihu.com/?target=http%3A//web.cecs.pdx.edu/%7Etufte/410-510DS/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Portland State University CS 510-Data Streams<i class=\"icon-external\"></i></a>这个课程提到的相关资料。<br></p><p>因为等了好多年，发现实在是没有堪用的。于是我决定自己写一个了。毫无疑问，这个语言得选Erlang。很多实现一个stream operator就有一个消息队列，还要弄个scheduler把这几个operator调度来调度去的。用Erlang这些事都省了。</p><p>当然了，现在写的这一个derecho并不会是一个实用的版本，因为现在这个还是单机的，而且是完全按顺序处理的。主要是为了尝试一个新想法，既然大部分这种流处理都是DAG，为什么不直接用Erlang代码来写呢，变量之间的依赖关系不刚好是一个DAG么，用List来代替流，测试一个查询的功能更方便直观了。</p><p>现在derecho只是刚刚开始，刚刚把第一个例子跑起来。就是一个非常常见的例子，计算某个拍卖物品最高竞拍价格。当你实用streams这个parse_transform的时候，streams:query里面的代码就会被转换成流的查询。而不用parse_transform，那就是对普通的List操作(这个还没写)。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"k\">query</span><span class=\"p\">(</span>\n  <span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">Bid</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nv\">Price</span> <span class=\"o\">=</span>\n          <span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"nf\">groupby</span><span class=\"p\">(</span>\n            <span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"nf\">aggregate</span><span class=\"p\">(</span><span class=\"nn\">aggregate</span><span class=\"p\">:</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">price</span><span class=\"p\">),</span> <span class=\"nv\">P</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span><span class=\"p\">,</span>\n            <span class=\"n\">item</span><span class=\"p\">,</span>\n            <span class=\"nv\">Bid</span><span class=\"p\">),</span>\n      <span class=\"p\">{</span><span class=\"nv\">Price</span><span class=\"p\">}</span>\n  <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"n\">bid</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"n\">bid_price</span><span class=\"p\">]),</span>\n</code></pre></div><p>欢迎各种Issue/Pull Request</p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/derecho\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/derecho · GitHub<i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "derecho",
        "excerpt_title": "",
        "excerpt": "很多公司都在开发自己的监控系统。出发点肯定是现有的并不够好用。而这个看上去很容易嘛，那就自己开发一个。(尽管我不认同这个答案的观点) <a class=\"internal\" href=\"https://www.zhihu.com/question/27464246/answer/75704392\">为什么很多公司都自主开发监控系统？（Linux运维方面） - gashero 的回答</a> 一针见血的指出了很多公司自己开发的结果…"
    },
    {
        "type": "article",
        "updated": 1448852454,
        "id": 20377683,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1448810209,
        "url": "",
        "content": "<p> GitHub Pages上先把英文都删了，因为实在没法看。英文就等大家的Pull Request了。另外，你觉得有任何问题，果断开Issue或者Pull Request。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang<i class=\"icon-external\"></i></a></p><p>按上一个21天所说的那样，删掉了之前照搬McCarthy最早的LISP。而是直接用Erlang了。 代码已经有了，文字内容还没有。</p><p>接下来几个21天的主要内容就是赶紧加上Backtracking和Unification变成Prolog。<br></p><p>假如你发现了什么问题，赶紧去报告Issue。假如你有内容写好了，那赶紧来发Pull Request。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn · GitHub<i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "第4个21天",
        "excerpt_title": "",
        "excerpt": "GitHub Pages上先把英文都删了，因为实在没法看。英文就等大家的Pull Request了。另外，你觉得有任何问题，果断开Issue或者Pull Request。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang<i class=\"icon-external\"></i></a>按上一个21天所说的那样，删掉了之前照搬McCarthy最早的LISP。而是直接用Erlang了。 代码已经有了，文…"
    },
    {
        "type": "article",
        "updated": 1448028584,
        "id": 20357175,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1448027517,
        "url": "",
        "content": "<p>最近萧井陌开始了<a href=\"http://zhuanlan.zhihu.com/xiao-jing-mo/20353331\" class=\"internal\">如何写好代码系列 - 萧井陌的专栏 - 知乎专栏</a> 。不难看出，情况正在往那个著名的笑话 (<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.infiltec.com/j-h-wrld.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">INFILTEC: HUMOR: \"Hello World\" programs<i class=\"icon-external\"></i></a>) 的方向发展，萧井陌正是那个Master Programmer</p><p>他举的那个例子，代码并没有他说的那么糟糕，毕竟就这么简单一个功能，还能写成啥样呢？唯一能肯定的问题在于作者并不是很了解Python。一个不是很确定的问题是没有写测试，而是把测试文件放到单独的文件里了，这也很可能是因为不了解Python导致的。</p><p>只要作一些微小的修改就已经足够好了<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read_json_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        &gt;&gt;&gt; USERS = [ {\"id\": 167, \"name\": \"Mike\"},</span>\n<span class=\"sd\">        ...           {\"id\": 168, \"name\": \"Joe\"},</span>\n<span class=\"sd\">        ...           {\"id\": 169, \"name\": \"Robert\"},</span>\n<span class=\"sd\">        ...         ]</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; MESSAGES = [ {\"user\": 167, \"ts\": 946684800.0, \"text\": \"Hello, Joe\"},</span>\n<span class=\"sd\">        ...              {\"user\": 168, \"ts\": 946684805.0, \"text\": \"Hello, Mike\"},</span>\n<span class=\"sd\">        ...            ]</span>\n<span class=\"sd\">        &gt;&gt;&gt; main(USERS, MESSAGES)</span>\n<span class=\"sd\">        167 Mike</span>\n<span class=\"sd\">        168 Joe</span>\n<span class=\"sd\">        169 Robert</span>\n<span class=\"sd\">        Sat Jan  1 08:00:00 2000 :</span>\n<span class=\"sd\">            Mike : Hello, Joe</span>\n<span class=\"sd\">        Sat Jan  1 08:00:05 2000 :</span>\n<span class=\"sd\">             Joe : Hello, Mike</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{id} {name}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]))</span>\n\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]:</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{time:</span><span class=\"si\">%c</span><span class=\"s2\">} :</span><span class=\"se\">\\n</span><span class=\"s2\">{user:&gt;8} : {text}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                  <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"ts\"</span><span class=\"p\">]),</span>\n                  <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">]],</span>\n                  <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">]))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"users.json\"</span><span class=\"p\">),</span>\n         <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"messages.json\"</span><span class=\"p\">))</span>\n</code></pre></div><p>这样你只需要运行</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>python2 -m doctest xxx.py\n</code></pre></div><p>就可以检查例子是否通过了</p><p>(正文完) <br></p><p>-------------------------------------- <br></p><p>现在是广告时间</p><p>以前脑残的时候，浪费了很长时间比较ORM哪家强。而很多时候，我们只是想利用关系运算把数据关联起来，而不是要ORM那种怪物。所以我写了个玩具库 warm ，用在这里挺合适的。 <br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">warm</span> <span class=\"kn\">import</span> <span class=\"n\">RecordSet</span><span class=\"p\">,</span> <span class=\"n\">DictRows</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Rows</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read_json_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        &gt;&gt;&gt; USERS = [ {\"id\": 167, \"name\": \"Mike\"},</span>\n<span class=\"sd\">        ...           {\"id\": 168, \"name\": \"Joe\"},</span>\n<span class=\"sd\">        ...           {\"id\": 169, \"name\": \"Robert\"},</span>\n<span class=\"sd\">        ...         ]</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; MESSAGES = [ {\"user\": 167, \"ts\": 946684800.0, \"text\": \"Hello, Joe\"},</span>\n<span class=\"sd\">        ...              {\"user\": 168, \"ts\": 946684805.0, \"text\": \"Hello, Mike\"},</span>\n<span class=\"sd\">        ...            ]</span>\n<span class=\"sd\">        &gt;&gt;&gt; main(USERS, MESSAGES)</span>\n<span class=\"sd\">        167 Mike</span>\n<span class=\"sd\">        168 Joe</span>\n<span class=\"sd\">        169 Robert</span>\n<span class=\"sd\">        Sat Jan  1 08:00:00 2000 :</span>\n<span class=\"sd\">            Mike : Hello, Joe</span>\n<span class=\"sd\">        Sat Jan  1 08:00:05 2000 :</span>\n<span class=\"sd\">             Joe : Hello, Mike</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"n\">RecordSet</span><span class=\"p\">(</span><span class=\"s2\">\"User\"</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">),</span> <span class=\"n\">uniques</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,))</span>\n    <span class=\"n\">Message</span> <span class=\"o\">=</span> <span class=\"n\">RecordSet</span><span class=\"p\">(</span><span class=\"s2\">\"Message\"</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text\"</span><span class=\"p\">),</span> <span class=\"n\">uniques</span><span class=\"o\">=</span><span class=\"p\">())</span>\n    <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">()</span>\n\n    <span class=\"n\">DictRows</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n    <span class=\"n\">Rows</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">],</span>\n         <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"ts\"</span><span class=\"p\">]),</span>\n         <span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">User</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{user.id} {user.name}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">))</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">Message</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{msg.time:</span><span class=\"si\">%c</span><span class=\"s2\">} :</span><span class=\"se\">\\n</span><span class=\"s2\">{msg.user.name:&gt;8} : {msg.text}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"users.json\"</span><span class=\"p\">),</span>\n         <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"messages.json\"</span><span class=\"p\">))</span>\n</code></pre></div><p>太棒了，正如你所看到的那样，你可以写 msg.user.name 来获得用户名了。只可惜实现是渣。</p>",
        "image_url": "",
        "title": "别听萧井陌的 (2)",
        "excerpt_title": "",
        "excerpt": "最近萧井陌开始了<a data-title=\"如何写好代码系列 - 萧井陌的专栏 - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/xiao-jing-mo/20353331\">如何写好代码系列 - 萧井陌的专栏 - 知乎专栏</a> 。不难看出，情况正在往那个著名的笑话 (<a class=\"\" data-title='INFILTEC: HUMOR: \"Hello World\" programs' data-editable=\"true\" href=\"http://www.infiltec.com/j-h-wrld.htm\">INFILTEC: HUMOR: \"Hello World\" programs</a>) 的方向发展，萧井陌正是那个Master Programmer他举的那个例子，代码并没有他说的那么糟糕，毕竟就这么简单…"
    },
    {
        "type": "article",
        "updated": 1447938187,
        "id": 20354419,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1447938187,
        "url": "",
        "content": "<p>最近这段时间发生的各种各样的意外太多，没时间写东西。所以拖了很久，即便如此上一次说要写的东西总该写出来了吧。可是连这也没有，很无奈，我自己也忘了当时的思路是什么，花了好久，也就是到现在才想明白。</p><p>另外就是想了一下第一章感觉很别扭的地方该怎么改。本来在Prolog之前会先往miniKanren里绕一下的，当时没想明白怎么去掉这部分内容，现在想了一下，应该不是什么问题。在Prolog之后，原来是突然风格反转从top-down一下子变成了bottom-up，现在想了一下，可以先从只对一个predicate一种情况加tabling开始，这样过渡更自然一点。</p><p>就这样吧。 </p>",
        "image_url": "",
        "title": "第3个21天",
        "excerpt_title": "",
        "excerpt": "最近这段时间发生的各种各样的意外太多，没时间写东西。所以拖了很久，即便如此上一次说要写的东西总该写出来了吧。可是连这也没有，很无奈，我自己也忘了当时的思路是什么，花了好久，也就是到现在才想明白。另外就是想了一下第一章感觉很别扭的地方该怎么…"
    },
    {
        "type": "article",
        "updated": 1459343777,
        "id": 20325539,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1446896771,
        "url": "",
        "content": "<p>15分钟用Rails开发一个Blog有什么意思？那是2005年的Hipster追捧的玩具。</p><p>现在都已经是2015年了。HTML应该读作Hipster's Toolkit Made Live了。<br></p><p>既然是15分钟，那当然不是零基础的。</p><p>在开始之前，你需要满足以下要求</p><p>运行4.0以上Linux内核，并安装好v4l2loopback内核模块</p><p>GStreamer<br></p><p>Firefox 浏览器版本 &gt;= 40</p><p>检查设置 (about:config)<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>media.mediasource.enabled  true\nmedia.mediasource.mp4.enabled  true\nmedia.mediasource.webm.enabled  true\nmedia.mediasource.whitelist false (只有42以下版本需要)\n</code></pre></div><p>Erlang/OTP &gt;= 17.0<br></p><p>Emacs，以及erlang mode，能熟练使用C-c C-k</p><p>ebml-viewer <a class=\" external\" href=\"https://link.zhihu.com/?target=https%3A//code.google.com/p/ebml-viewer/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">code.google.com/p/ebml-</span><span class=\"invisible\">viewer/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>Matroska spec data <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/Matroska-Org/foundation-source/blob/master/spectool/specdata.xml\" target=\"_blank\" rel=\"nofollow noreferrer\">foundation-source/specdata.xml at master · Matroska-Org/foundation-source · GitHub<i class=\"icon-external\"></i></a><br></p><h2><b>正文开始了</b><br></h2><p>都安装好以后，用gstreamer把测试信号输入到/dev/video0</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gst-launch videotestsrc ! v4l2sink device=/dev/video0\n</code></pre></div><p><b>第一步</b>，先检查浏览器里能不能放这个视频信号。<br></p><p>media.html里就只放一个video标签。因为JavaScript可能要反复改，所以先叫media1.js了</p><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>hhhhh TV<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"media1.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">video</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"video\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">video</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>media1.js很简单，直接把video的src设置成这个stream的url就完了。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaDevices.getUserMedia()<i class=\"icon-external\"></i></a> ，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"nofollow noreferrer\">URL.createObjectURL()<i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>用Firefox打开这个media.html之后，先会询问是否要share selected device。</p><p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic3.zhimg.com/678a6159a646cd50daa29bbfda92c72e_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic3.zhimg.com/678a6159a646cd50daa29bbfda92c72e_r.png\">点了按钮之后，视频就开始播放了</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/ebe86f3b7cd39fa477047470d2bf6f15_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/ebe86f3b7cd39fa477047470d2bf6f15_r.png\"><p><b>第二步</b>，直接把video.src设置成这个stream的url，只能在这一个浏览器里播。我们得拿到视频数据。这个很容易，使用 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaRecorder<i class=\"icon-external\"></i></a> API就可以了。</p><p>media2.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>重新打开 media.html ，share了之后，再选stop sharing</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic3.zhimg.com/b2bde246703f4fe98dea800883d249d2_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic3.zhimg.com/b2bde246703f4fe98dea800883d249d2_r.png\"><br><p>可以看到 dataavailable 事件<br></p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic1.zhimg.com/88293a7e685d814fbd9d17424e75b3f4_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic1.zhimg.com/88293a7e685d814fbd9d17424e75b3f4_r.png\"><p><b>第三步</b>，这样的问题是，所有视频数据都是stop sharing之后一次取到的，所以并不能直播。至少得能每隔一段时间取一次。这也很简单。</p><p>media3.js只是把 media2.js的<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n</code></pre></div><p>改成了</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n</code></pre></div><p>这样，不需要点 stop sharing 就能每隔大约2秒取到视频数据了</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/2ee4d41cef823f7c0062d53483cea5d1_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/2ee4d41cef823f7c0062d53483cea5d1_r.png\"><p><b>第四步</b>，播放取到的视频数据。先播放第二步取到的整段视频数据。<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaSource\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaSource - Web APIs<i class=\"icon-external\"></i></a></p><p>很不幸，从MediaRecorder里得到的是Blob，而MediaSource需要的ArrayBuffer，所以还得先用 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/FileReader\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FileReader<i class=\"icon-external\"></i></a> 转一下。</p><p>media4.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p> 点stop sharing之后，可以看到视频开始播放了。 <br></p><br><p><b>第五步</b>，播放第三步取到的分段视频数据。因为SourceBuffer同时只能有一个appendBuffer。作一些简单的处理，假如正在update，就等updateend之后，在来调用appendBuffer。另外，等append超过2个buffer之后再开始播放，而不是像media4.js那样加入一个buffer之后立即开始播放。</p><p>media5.js<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>             \n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><br><p><b>第六步</b>，从第N个分段开始播放。这个看上去，很简单，只要跳过前几个分段就可以了。而实际上第一个分段是不一样的。</p><p>Firefox里MediaRecorder默认用的是webm格式。直播时，一开始是一个EBML header。接着定义一个size非常大(目前定义的范围内最大)的Segment，Segment里，一开始是一些Track信息之类的东西，后面就是Cluster了。除了第一个分段，后面都是很多个Cluster。 </p><p><a href=\"https://link.zhihu.com/?target=http%3A//w3c.github.io/media-source/webm-byte-stream-format.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebM Byte Stream Format<i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>EBML\n  ..\nSegment size=2^56-1\n  ...\n  Cluster\n  Cluster\n  Cluster\n</code></pre></div><p> 所以，我们要做的就是找出第一个Cluster所在位置，并把之前的部分取出来，加到SourceBuffer里，可是这样视频在videoElem.play()之后并没有开始播放 !!! 还需要把videoElem.currentTime 设置成，加到SourceBuffer里的第一个Cluster的时间。</p><p>media6.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"nx\">c</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">8</span> <span class=\"o\">-</span> <span class=\"nx\">length</span><span class=\"p\">));</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">view</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DataView</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x1a45dfa3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"EBML Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Bad EBML Size\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">ebml_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">ebml_size</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">segment_offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x18538067</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Segment Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">size_length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">segment_offset</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">size_length</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mh\">0x1F43B675</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">elem_length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">elem_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">elem_length</span><span class=\"p\">);</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">elem_length</span> <span class=\"o\">+</span> <span class=\"nx\">elem_size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">skipped</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">currentTime</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>             \n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">skipped</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"nx\">buffer</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">));</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"nx\">header</span><span class=\"p\">);</span>\n                <span class=\"nx\">skipped</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p><b>第七步</b>，现在就是要把这个拆成两部分，一部分录制上传，一部分下载播放。</p><p>不妨，每5秒一个分段，而每个分段，都用时间戳作为文件名，那么播放的时候只需要知道第一个Cluster的时间戳就可以计算出currentTime了。</p><p>假设实际使用时上传到AWS S3，我们还需要一个服务端，定时向上传的一端发送签名。在这里我们简化一下，只是用Server Sent Event向浏览器发送上传路径，其中第一个是 header.webm 用来上传 cluster 前面的所有字节。</p><p>h5tv.erl 用来启动。h5tv_storage_connection，用来模拟一个简化的S3，PUT上传文件，GET下载文件，不作任何检查，且根据文件名设置Content-Typeh5tv_channel_manager，用来记录 channel 信息。 h5tv_live_connection，则是主要就四个功能，返回channel列表，返回当前时间戳，返回某个channel最早的时间戳，提供Server Sent Event不断发送新的上传地址。</p><p>h5tv.erl<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"p\">[]),</span>\n    <span class=\"nb\">register</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">).</span>\n\n<span class=\"nf\">stop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">?</span><span class=\"nv\">MODULE</span> <span class=\"o\">!</span> <span class=\"n\">stop</span><span class=\"p\">.</span>\n\n<span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">h5tv_tcp_listener</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(</span>\n      <span class=\"mi\">8000</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http_bin</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}],</span>\n      <span class=\"p\">{</span><span class=\"n\">h5tv_storage_connection</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"p\">[]}),</span>\n\n    <span class=\"nn\">h5tv_tcp_listener</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(</span>\n      <span class=\"mi\">8001</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http_bin</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}],</span>\n      <span class=\"p\">{</span><span class=\"n\">h5tv_live_connection</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"p\">[]}),</span>\n\n    <span class=\"nn\">h5tv_channel_manager</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(),</span>\n\n    <span class=\"k\">receive</span>\n        <span class=\"n\">stop</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"n\">shutdown</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>h5tv_channel_manager.erl，仅仅是分配一个Channel编号，并把信息存入ets。因为这是一个named_table，所以怎么读就不用管了。</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_channel_manager</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">behaviour</span><span class=\"p\">(</span><span class=\"n\">gen_server</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start_link</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">]).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">handle_call</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">handle_cast</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">handle_info</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"n\">terminate</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">code_change</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">define</span><span class=\"p\">(</span><span class=\"no\">SERVER</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">).</span>\n\n<span class=\"nf\">start_link</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">({</span><span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"nv\">SERVER</span><span class=\"p\">},</span> <span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[]).</span>\n\n\n<span class=\"nf\">init</span><span class=\"p\">([])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span>\n      <span class=\"n\">h5tv_channels</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">named_table</span><span class=\"p\">,</span> <span class=\"n\">set</span><span class=\"p\">,</span> <span class=\"n\">protected</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">read_concurrency</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}]),</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}.</span>\n\n\n<span class=\"nf\">handle_call</span><span class=\"p\">({</span><span class=\"n\">create_channel</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">From</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert_new</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nv\">NextId</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">}),</span>\n    <span class=\"p\">{</span><span class=\"n\">reply</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">handle_cast</span><span class=\"p\">(_</span><span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">handle_info</span><span class=\"p\">(_</span><span class=\"nv\">Info</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">terminate</span><span class=\"p\">(_</span><span class=\"nv\">Reason</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n\n<span class=\"nf\">code_change</span><span class=\"p\">(_</span><span class=\"nv\">OldVsn</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Extra</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n</code></pre></div><p>h5tv_tcp_listener.erl，只管accept连接，并spawn process来处理。</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_tcp_listener</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start_link</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start_link</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nb\">spawn_link</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Sock</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">),</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">).</span>\n\n<span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Conn</span><span class=\"p\">|</span><span class=\"nv\">A</span><span class=\"p\">]),</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">!</span> <span class=\"n\">continue</span><span class=\"p\">,</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">).</span>\n</code></pre></div><p>h5tv_storage_connection.erl 。文件路径以当前目录下的static为根目录。</p><p>需要注意的是，这里会自动把 / 当成 /index.html<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_storage_connection</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)).</span>\n\n\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".html\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"text/html; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".js\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/javascript; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".json\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/json; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".css\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"text/css; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(_)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/octet-stream\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">.</span>\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/index.html\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">});</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[</span><span class=\"nv\">Path</span><span class=\"p\">|_]</span> <span class=\"o\">=</span> <span class=\"nn\">binary</span><span class=\"p\">:</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"?\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n    <span class=\"k\">case</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">read_file</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"static/\"</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n              <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n              <span class=\"mi\">200</span><span class=\"p\">,</span>\n              <span class=\"n\">content_type</span><span class=\"p\">(</span><span class=\"nn\">filename</span><span class=\"p\">:</span><span class=\"nf\">extension</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">)),</span>\n              <span class=\"nv\">Bin</span><span class=\"p\">);</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n              <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'PUT'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_,</span> <span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[</span><span class=\"nv\">Name1</span><span class=\"p\">|_]</span> <span class=\"o\">=</span> <span class=\"nn\">binary</span><span class=\"p\">:</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"?\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n    <span class=\"nv\">Path</span> <span class=\"o\">=</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"static/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name1</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n    <span class=\"nv\">Dirname</span> <span class=\"o\">=</span> <span class=\"nn\">filename</span><span class=\"p\">:</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">),</span>\n    <span class=\"k\">case</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">make_dir</span><span class=\"p\">(</span><span class=\"nv\">Dirname</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"n\">ok</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span><span class=\"p\">;</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">eexist</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">File</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">write</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"p\">]),</span>\n    <span class=\"nv\">Size</span> <span class=\"o\">=</span> <span class=\"n\">binary_to_integer</span><span class=\"p\">(</span><span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"nf\">get_value</span><span class=\"p\">(</span><span class=\"n\">'Content-Length'</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">)),</span>\n    <span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Request: </span><span class=\"si\">~p~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Request</span><span class=\"p\">]),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;400 Bad Request&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"text/plain\"</span><span class=\"p\">,</span>\n      <span class=\"s\">\"OK\"</span><span class=\"p\">);</span>\n<span class=\"nf\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">),</span>\n            <span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"o\">-</span><span class=\"nb\">byte_size</span><span class=\"p\">(</span><span class=\"nv\">Bin</span><span class=\"p\">));</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">closed</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>h5tv_live_connection.erl 。这里值得注意的是把时钟间隔设置成了 2.5s ，这样很多时间戳会出现两次。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_live_connection</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Body</span> <span class=\"o\">=</span>\n        <span class=\"p\">[</span> <span class=\"s\">\"[\"</span><span class=\"p\">,</span>\n          <span class=\"nn\">string</span><span class=\"p\">:</span><span class=\"nf\">join</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span> <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"{</span><span class=\"se\">\\\"</span><span class=\"s\">id</span><span class=\"se\">\\\"</span><span class=\"s\">: </span><span class=\"si\">~p</span><span class=\"s\">, </span><span class=\"se\">\\\"</span><span class=\"s\">name</span><span class=\"se\">\\\"</span><span class=\"s\">: </span><span class=\"se\">\\\"</span><span class=\"si\">~s</span><span class=\"se\">\\\"</span><span class=\"s\">}\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Id</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">])</span>\n              <span class=\"p\">||</span> <span class=\"p\">[{</span><span class=\"nv\">Id</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"p\">_}]</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"n\">'$1'</span><span class=\"p\">)</span>\n            <span class=\"p\">],</span>\n            <span class=\"s\">\", \"</span><span class=\"p\">),</span>\n          <span class=\"s\">\"]\"</span><span class=\"p\">],</span>\n\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/timestamp\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span>\n      <span class=\"n\">get_timestamp</span><span class=\"p\">());</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/timestamp/\"</span><span class=\"p\">,</span> <span class=\"nv\">ID</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{_,_,</span><span class=\"nv\">Timestamp</span><span class=\"p\">}]</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">lookup</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"n\">binary_to_integer</span><span class=\"p\">(</span><span class=\"nv\">ID</span><span class=\"p\">)),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span>\n      <span class=\"nv\">Timestamp</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/live/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">timer</span><span class=\"p\">:</span><span class=\"nf\">send_interval</span><span class=\"p\">(</span><span class=\"mi\">2500</span><span class=\"p\">,</span> <span class=\"n\">refresh</span><span class=\"p\">),</span>\n    <span class=\"nv\">Timestamp</span> <span class=\"o\">=</span> <span class=\"n\">get_timestamp</span><span class=\"p\">(),</span>\n    <span class=\"nv\">ChannelId</span> <span class=\"o\">=</span> <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"n\">h5tv_channel_manager</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">create_channel</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">}),</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: text/event-stream</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Access-Control-Allow-Origin: *</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Transfer-Encoding: chunked\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]),</span>\n    <span class=\"n\">send_header_path</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">),</span>\n    <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">),</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Request: </span><span class=\"si\">~p~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Request</span><span class=\"p\">]),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;400 Bad Request&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"n\">refresh</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">send_header_path</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_chunked</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span>\n        <span class=\"s\">\"data: </span><span class=\"si\">~p</span><span class=\"s\">/header.webm</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nv\">ChannelId</span><span class=\"p\">])).</span>\n\n\n<span class=\"nf\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"n\">get_timestamp</span><span class=\"p\">()).</span>\n\n\n<span class=\"nf\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_chunked</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span>\n        <span class=\"s\">\"data: </span><span class=\"si\">~p</span><span class=\"s\">/</span><span class=\"si\">~s</span><span class=\"s\">.webm</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">])).</span>\n\n\n<span class=\"nf\">get_timestamp</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">=</span> <span class=\"nn\">os</span><span class=\"p\">:</span><span class=\"nf\">timestamp</span><span class=\"p\">(),</span>\n    <span class=\"nv\">TS</span> <span class=\"o\">=</span> <span class=\"nv\">M</span> <span class=\"o\">*</span> <span class=\"mi\">1000000</span> <span class=\"o\">+</span> <span class=\"nv\">S</span><span class=\"p\">,</span>\n    <span class=\"nb\">integer_to_list</span><span class=\"p\">((</span><span class=\"nv\">TS</span> <span class=\"ow\">div</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">send_chunked</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Data</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nb\">iolist_size</span><span class=\"p\">(</span><span class=\"nv\">Data</span><span class=\"p\">),</span> <span class=\"mi\">16</span><span class=\"p\">),</span>\n       <span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n       <span class=\"nv\">Data</span><span class=\"p\">,</span>\n       <span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">]).</span>\n</code></pre></div><p>h5tv_http_util.erl 。这是接收Header，还有发送普通的Response。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_http_util</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">(</span>\n   <span class=\"p\">[</span> <span class=\"n\">read_http_headers</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n     <span class=\"n\">http_response</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"n\">continue</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span>\n    <span class=\"k\">after</span> <span class=\"mi\">5000</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_request</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"nv\">Headers</span> <span class=\"o\">=</span> <span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">inet</span><span class=\"p\">:</span><span class=\"nf\">setopts</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">}]),</span>\n    <span class=\"p\">{</span><span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">}.</span>\n\n\n<span class=\"nf\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_header</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Value</span><span class=\"p\">}}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[{</span><span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"nv\">Value</span><span class=\"p\">}|</span><span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)];</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">http_eoh</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[]</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">http_response</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Code</span><span class=\"p\">,</span> <span class=\"nv\">ContentType</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span>\n        <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n          <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n          <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nv\">Code</span><span class=\"p\">),</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\" \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nn\">httpd_util</span><span class=\"p\">:</span><span class=\"nf\">reason_phrase</span><span class=\"p\">(</span><span class=\"nv\">Code</span><span class=\"p\">),</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Access-Control-Allow-Origin: *</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nv\">ContentType</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Length: \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nb\">iolist_size</span><span class=\"p\">(</span><span class=\"nv\">Body</span><span class=\"p\">)),</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">).</span>\n</code></pre></div><p>为了偷懒，直接把 html 和 javascript 都丢在 static 目录下。</p><p> index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>hhhhh TV<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript;version=1.8\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"channel-list.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"/studio.html\"</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"我要直播\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>正在直播<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"results\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>点 我要直播 之后，就到了studio.html，要注意，这里用的method是GET，studio.html的javascript会自己把  ?name=xxx 里的 xxx 取出来，拼成 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/live/xxx\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8001/live/xxx</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 而服务端直接把这个名字存下来并返回了。</p><p>所以 channel-list.js 需要先 decodeURIComponent<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">resultsElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"results\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">()</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n        <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">channel</span> <span class=\"k\">of</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">aElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">aElem</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s2\">\"/watch.html?\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n                <span class=\"nx\">aElem</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createTextNode</span><span class=\"p\">(</span><span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">)));</span>\n                <span class=\"nx\">resultsElem</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">aElem</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p>而播放页面也是类似的。</p><p>studio.html, watch.html和之前的media.html除了javascript地址不一样，其他完全一样。 <br></p><p>studio.js除了第一个buffer要分成两部分以外，其他都是从EventSource里拿到一个路径之后就可以立即开始上传了。<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"nx\">c</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">8</span> <span class=\"o\">-</span> <span class=\"nx\">length</span><span class=\"p\">));</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">view</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DataView</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x1a45dfa3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"EBML Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Bad EBML Size\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">ebml_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">ebml_size</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">segment_offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x18538067</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Segment Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">segment_offset</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mh\">0x1F43B675</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">header_uploaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"loadend\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">upload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">header_uploaded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">buffer</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">header_uploaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header_size</span> <span class=\"o\">=</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header_buffer</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">header_size</span><span class=\"p\">);</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">header_size</span><span class=\"p\">));</span>\n                <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">header_buffer</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">uploading</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">upload</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n        <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n            <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n\n            <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n            <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">eventSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventSource</span><span class=\"p\">(</span><span class=\"s2\">\"http://127.0.0.1:8001/live/\"</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n            <span class=\"nx\">eventSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"open\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">5000</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"nx\">eventSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p> watch.js 比之前复杂的地方就在于要减一下，计算时间戳的差值作为初始的 currentTime<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">channel</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">loaded_timestamp</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">current_timestamp</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">timeoffset</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"arraybuffer\"</span><span class=\"p\">;</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n                <span class=\"nx\">notify_buffer_update</span><span class=\"p\">();</span>\n                <span class=\"nx\">notify_load</span><span class=\"p\">();</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">currentTime</span> <span class=\"o\">=</span> <span class=\"nx\">timeoffset</span><span class=\"p\">;</span>\n                    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n                    <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify_load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">loading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">loaded_timestamp</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">current_timestamp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n        <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span> <span class=\"o\">+</span> <span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">+</span> <span class=\"s2\">\".webm\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify_buffer_update</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n        <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">on_init_timestamp_load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">init_timestamp</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/timestamp\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current_timestamp</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">-</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n                <span class=\"nx\">setInterval</span><span class=\"p\">(</span>\n                    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">current_timestamp</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n                        <span class=\"nx\">notify_load</span><span class=\"p\">();</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"mi\">5000</span><span class=\"p\">);</span>\n\n                <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">=</span> <span class=\"nx\">current_timestamp</span> <span class=\"o\">-</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n                <span class=\"nx\">timeoffset</span> <span class=\"o\">=</span> <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">-</span> <span class=\"nx\">init_timestamp</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n                <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span> <span class=\"o\">+</span> <span class=\"s2\">\"/header.webm\"</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"sourceopen\"</span><span class=\"p\">,</span>\n        <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s1\">'updateend'</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                    <span class=\"nx\">notify_buffer_update</span><span class=\"p\">();</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">offset_loaded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">offset_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/timestamp/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span><span class=\"p\">);</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">on_init_timestamp_load</span><span class=\"p\">);</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p>启动服务端</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ erl -make\n\n$ erl\n1&gt; h5tv:start().\ntrue\n2&gt;\n</code></pre></div><br><p>打开 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8000/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8000/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>在输入框里填入channel名之后，点我要直播，就开始直播了</p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic4.zhimg.com/2b75bc268a0bce406d29f990e3c75c53_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic4.zhimg.com/2b75bc268a0bce406d29f990e3c75c53_r.png\"><br><p>在一个新标签页里打开首页，就能看到刚刚开始播出的频道</p><p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/2cecff39862708f09b27e357a6a2cc89_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/2cecff39862708f09b27e357a6a2cc89_r.png\">点进去之后，就可以看到直播的内容了</p><p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/39139d6058c4f60112f2b1a9ad393e15_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/39139d6058c4f60112f2b1a9ad393e15_r.png\">太棒了。15分钟就能开发出一个HTML5视频直播网站了。</p><p>------------------------------------------------------</p><p>广告时间:</p><p>正在考虑要不要写一本《7天自制H5视频直播网站》，里面的例子当然会更实际一点。假如你是云存储/CDN厂商，你可以赞助钱以及免费帐号，这样书里面就可以以你们的服务为例子了。假如你是出版社，这可能是2016年网站开发里最火爆的烂书了，还不赶紧私信联系。</p>",
        "image_url": "",
        "title": "[标题党]15分钟开发可支持百万观众的H5视频直播网站",
        "excerpt_title": "",
        "excerpt": "15分钟用Rails开发一个Blog有什么意思？那是2005年的Hipster追捧的玩具。现在都已经是2015年了。HTML应该读作Hipster's Toolkit Made Live了。 既然是15分钟，那当然不是零基础的。在开始之前，你需要满足以下要求运行4.0以上Linux内核，并安装好v4l2loopba…"
    },
    {
        "type": "article",
        "updated": 1445219710,
        "id": 20263544,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1445181184,
        "url": "",
        "content": "<p>首先，我没打算一个人把这书写出来。我当然希望这是一本一直有很多人在写的书，会被一直更新下去。因为我水平非常拙急，所以你们不能指望我是主要作者。所以，一开始我也是先把重心放在比较周边的工具上，这样大家可以一起开心的来写这本书。</p><p>我没有任何出版的计划。因为印出来了就没法更新了，而且这种书要印的多，估计也只能我自己掏钱了，然而我并不是土豪。放GitHub上，谁想看，随时下个最新版就好了。谁发现有问题，也能随时修订。</p><p>21天学通Erlang 主要是面向6岁小朋友的。提供一套配置好的开发环境是有必要的。比如，你不能假设每个6岁小朋友都已经学会设置环境变量的。21天学通Erlang 应该对读者知道的东西作最少的假设。</p><p>有人认为 21天学通Erlang 讲的东西太简单，太基础了，对推广Erlang帮助不大。我的观点恰恰相反。Erlang正是被人描述成只适合用来开发高并发的应用才被边缘化的，不然早火了。所以，更应该强调 Erlang简单，特别适合入门。有了群众基础才容易火啊，等到连不写程序的人都知道Erlang特别容易了，还有不火的道理？Erlang要从娃娃抓起也是一点也没错的，毕竟未来一定是他们的。想想腾讯是怎么成功的。</p><p>有人认为 21天学通Erlang 理论高度太低。可这是入门书啊，追求啥理论高度。 即便如此，21天学通Erlang 只是尽量回避使用任何适合吓唬人的术语，假如需要用到一些理论，也不会假装不存在的，该讲的还是会讲的，不会绕过去的。再说了，某人写了40行代码就觉得自己是搞理论的天才。而类似的东西，在21天学通Erlang里，只是第一章里一道难度为简单的习题而已啊。</p><p>有人认为自己水平不够，所以不来写 21天学通Erlang 。这个想法不知道错到哪里去了。难道一个老师水平高指的是教出来的学生还不如自己？没有人天生就有各种能力的，写着写着发现不够了再去补也来的及啊。</p><p>大概就这些吧 </p>",
        "image_url": "",
        "title": "21天学通Erlang的一些常见误解",
        "excerpt_title": "",
        "excerpt": "首先，我没打算一个人把这书写出来。我当然希望这是一本一直有很多人在写的书，会被一直更新下去。因为我水平非常拙急，所以你们不能指望我是主要作者。所以，一开始我也是先把重心放在比较周边的工具上，这样大家可以一起开心的来写这本书。我没有任何出版…"
    },
    {
        "type": "article",
        "updated": 1445179272,
        "id": 20280043,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1445179272,
        "url": "",
        "content": "<p>由于大家要么不积极要么不自信，Github Pages的进展不及预期。我不自量力的自己开始翻译了，发现完全不能看。所以现在改成先写英文，再写中文了。这一反复，也浪费了不少时间。所以，如何同步代码片段，这篇就来不及完成了。在 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io · GitHub<i class=\"icon-external\"></i></a> 的src分支里，求 proof reading ，欢迎 Pull Request 。</p><p>所以下一个21天，主要就是要完成如何同步代码片段这一篇，有时间的话，就再写一篇简单介绍一下目前的目录结构什么的。别的没了。就这样吧。</p>",
        "image_url": "",
        "title": "第2个21天",
        "excerpt_title": "",
        "excerpt": "由于大家要么不积极要么不自信，Github Pages的进展不及预期。我不自量力的自己开始翻译了，发现完全不能看。所以现在改成先写英文，再写中文了。这一反复，也浪费了不少时间。所以，如何同步代码片段，这篇就来不及完成了。在 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/xn…<i class=\"icon-external\"></i></a>"
    },
    {
        "type": "article",
        "updated": 1444213582,
        "id": 20255574,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1444210267,
        "url": "",
        "content": "<p>一直对各种沙盒都不满意。主要是SECCOMP STRICT模式限制实在太严格，不得不自己整个libc出来，还得是静态链接才行。后来想了想还是基于musl libc删吧。反正启动后在一个固定地址mmap一片内存，之后直接设置SECCOMP，除了__libc_start_main和__syscall这两个函数地址可能被覆盖以外，没啥好担心的了。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/barelibc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/barelibc · GitHub<i class=\"icon-external\"></i></a>。当然malloc算法换成了最土的TLSF。</p><p>另外就是开始收集各种题目，之前因为发生了各种意外没好好刷题，现在恢复。网上很多题解，基本上就一个代码，简单几句解释，有帮助，但问题是每次面试前过一遍太不现实了。我打算把考点和题目分开，单独写。题目按出处和按公司两种方式列出。 而各种Online Judge基本上都不提供数据，那么就只能自己补了。刚开的新仓库， <a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/interview-questions\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/interview-questions · GitHub<i class=\"icon-external\"></i></a><b>欢迎多多Pull Request</b>，希望能在大家的帮助下成为题目收录最多的仓库</p>",
        "image_url": "",
        "title": "[刷题]barelibc及其他",
        "excerpt_title": "",
        "excerpt": "一直对各种沙盒都不满意。主要是SECCOMP STRICT模式限制实在太严格，不得不自己整个libc出来，还得是静态链接才行。后来想了想还是基于musl libc删吧。反正启动后在一个固定地址mmap一片内存，之后直接设置SECCOMP，除了__libc_start_main和__syscall这两个…"
    },
    {
        "type": "article",
        "updated": 1443878886,
        "id": 20250615,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1443878226,
        "url": "",
        "content": "<p><b>把这个发出来，这样大家都可以开始写起来了。写好了，就可以赶紧发Pull Request了。</b></p><p>参考资料 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\" target=\"_blank\" rel=\"nofollow noreferrer\">Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub<i class=\"icon-external\"></i></a></p><p>在第一章之前会简单介绍Erlang最最基本的功能，也就是函数和模式匹配</p><p>以下是第一章内容提要。注意不是目录，有些是正文，有些是习题，且不保证严格按这个顺序来。</p><p><br>1. 写一个最原始的Lisp解释器<br>2. 加pattern matching<br>3. 用Erlang解释之前写的Erlang代码<br>4. 改写之前的解释器，改成自己维护call stack<br>5. 写一个程序，来完成4的工作<br>6. 加回溯<br>7. pattern matching升级成unification<br>8. 改成Prolog那样，以predicate为主的风格 (此时只有AST)<br>9. 用Prolog写Parser(DCG风格)来parse Prolog代码(这样就可以直接从Prolog代码开始了)<br>10. 让这个Prolog解释器足够解释大部分99 Prolog Problems里的答案<br>11. 让这个Prolog解释器足够解释Erlang解释器最早的原型<br>### Prolog太难用了，我们需要Datalog ###<br>12. Datalog之Naive/Semi Naive Evaluation<br>13. Datalog之QSQI<br>14. Datalog之Magic Set<br>15. Datalog之OLDT/SLG<br>### Datalog也可以是Parser，扔掉DCG了 ###<br>16.  从Datalog到CYK/Earley<br>17. 改成LR<br>18. 改成正则表达式<br>### 加一点backtracking回来 ###<br>19. Packrat<br>20. PCRE风格的Regex<br>### 来写个Shell ###<br>21. Erlang I/O protocol<br>22. 第一章这么快就结束了，简单回顾一下</p>",
        "image_url": "",
        "title": "[21天]第一章内容提要",
        "excerpt_title": "",
        "excerpt": "<b>把这个发出来，这样大家都可以开始写起来了。写好了，就可以赶紧发Pull Request了。</b>参考资料 <a class=\"\" data-title=\"Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub\" data-editable=\"true\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\">Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub</a>在第一章之前会简单介绍Erlang最最基本的功能，也就是函数和模式匹配以下是第一章内…"
    },
    {
        "type": "article",
        "updated": 1442664870,
        "id": 20226408,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1442654250,
        "url": "",
        "content": "<p>首先感谢<a data-title=\"@萧井陌\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780\" data-hash=\"fd7c571a0ada1a72e42e8d7992c4a780\" data-tip=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\" data-hovercard=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\">@萧井陌</a>论坛打算先蹭他的cocode.cc了。 在这里，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cocode.cc/c/erlang21\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang 主题列表<i class=\"icon-external\"></i></a> ，想吐槽什么的直接发个贴就可以了。</p><p>制作虚拟机镜像这事碰到了一点麻烦。首先是把osv-apps里的Erlang从17改成18，这个没啥大问题。18因为用的是Apache License而不是之前那个不知道咋搞出来的License，至少不用担心怎么判断和其他License是否兼容的问题了。接着想把dns解析的问题解决了，结果发现OSv自带的DHCP client竟然不会写resolv.conf，于是先用8.8.8.8凑数了。最后发现一个巨大的问题，Fedora 22上gcc升级之后暴露了OSv在ELF处理上的大bug，感觉我是修不好了。</p><p>Github pages暂定用pelican生成，用i18n_subsites来解决多语言的问题。一开始会先介绍和编辑内容相关的，比如Erlang代码是怎么测试，怎么保证PDF里面贴的代码都是被检查过的，怎么保证代码片段在多个地方出现内容是同步的等等。现在问题来了，英语渣表示英语写不来，<b>求翻译</b>啊</p>",
        "image_url": "",
        "title": "第1个21天",
        "excerpt_title": "",
        "excerpt": "首先感谢<a data-title=\"@萧井陌\" data-editable=\"true\" class=\"member_mention\" href=\"http://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780\" data-hash=\"fd7c571a0ada1a72e42e8d7992c4a780\" data-tip=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\">@萧井陌</a>论坛打算先蹭他的cocode.cc了。 在这里，<a data-title=\"21天学通Erlang 主题列表\" data-editable=\"true\" class=\"\" href=\"http://cocode.cc/c/erlang21\">21天学通Erlang 主题列表</a> ，想吐槽什么的直接发个贴就可以了。制作虚拟机镜像这事碰到了一点麻烦。首先是把osv-apps里的Erlang从17改成18，这个没啥大问题。18因为用的是Apache License而不是之前那…"
    },
    {
        "type": "article",
        "updated": 1440922965,
        "id": 20165279,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1440922965,
        "url": "",
        "content": "<p>目前打算每隔大约21天更新一次。</p><p>接下去，内容方面，先集中精力完成Prolog之前的内容。写的解释器能运行大部分99 Prolog Problems的答案，还有最早Erlang解释器的原型就可以了。可以参考列在<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\" target=\"_blank\" rel=\"nofollow noreferrer\">Wiki<i class=\"icon-external\"></i></a>上的这些。还有就是要增加习题。一方面可以把后面章节用到的辅助函数换个马甲放到前面。这肯定是不够的，所以也要到处去收集。</p><p>一开始推荐的安装方式，将会统一成VirtualBox里运行虚拟机镜像，通过端口转发让宿主机的浏览器可以访问。最好能顺便把例子还有习题能做成互动的形式。</p><p>github pages的首页将会改成blog的形式，用来发布更新。</p><p>另外就是最好能有个论坛，虽然GitHub Issues也可以，我希望门槛能更低一点，不知道你们有没有好主意。</p><p>显然这一切都需要你们的大力帮助才能继续，毕竟现在bus factor=1啊。欢迎Pull Request，当然假如不知道如何参与，可以从吐槽开始嘛。</p>",
        "image_url": "",
        "title": "21天学通Erlang即将恢复更新",
        "excerpt_title": "",
        "excerpt": "目前打算每隔大约21天更新一次。接下去，内容方面，先集中精力完成Prolog之前的内容。写的解释器能运行大部分99 Prolog Problems的答案，还有最早Erlang解释器的原型就可以了。可以参考列在<a class=\"\" data-title=\"Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub\" data-editable=\"true\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\">Wiki</a>上的这些。还有就是要增加习题。一方面可以把后面章节用到的辅…"
    },
    {
        "type": "article",
        "updated": 1431866347,
        "id": 20033711,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1431866271,
        "url": "",
        "content": "<p>Datalog相比Prolog，少了复合类型，但是要求结果是和求值顺序无关。这点就比Prolog好多了，Prolog完全没有逻辑可言，而Datalog至少是和一阶逻辑类似的。</p><p>我们用 {var, 'X'} 的形式来表示Datalog中的变量。那么，类型定义可以写成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>-type datalog_term() :: atom() | {'var', atom()}.\n-type datalog_goal() :: {atom(), [datalog_term()]}.\n-type datalog_clause() :: {datalog_goal(), [datalog_goal()]}.\n</code></pre></div><p> 一个简单的例子</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>%% start(a).\n{{start, [a]},         []},\n%% arc(d,a).\n{{arc,   [d,a]},       []},\n%% arc(e,a).\n{{arc,   [e,a]},       []},\n%% arc(a,b).\n{{arc,   [a,b]},       []},\n%% arc(a,c).\n{{arc,   [a,c]},       []},\n%% arc(b,f).\n{{arc,   [b,f]},       []},\n%% arc(c,f).\n{{arc,   [c,f]},       []},\n%% black(X):- start(X).\n{{black, [{var,'X'}]}, [{start,[{var,'X'}]}]},\n%% black(X):- white(Y), arc(Y,X).\n{{black, [{var,'X'}]}, [{white,[{var,'Y'}]}, {arc,[{var,'Y'},{var,'X'}]}]},\n%% white(X):- black(Y), arc(Y,X).\n{{white, [{var,'X'}]}, [{black,[{var,'Y'}]}, {arc,[{var,'Y'},{var,'X'}]}]},\n%% black(X):- white(Y), arc(X,Y).\n{{black, [{var,'X'}]}, [{white,[{var,'Y'}]}, {arc,[{var,'X'},{var,'Y'}]}]},\n%% white(X):- black(Y), arc(X,Y).\n{{white, [{var,'X'}]}, [{black,[{var,'Y'}]}, {arc,[{var,'X'},{var,'Y'}]}]}\n</code></pre></div><p>而所谓的naive evaluation，既然都叫naive了，那肯定是非常简单的。</p><p>首先，把所有clause分成两类，EDB (extensional) 和 IDB (intentional)</p><p>EDB</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>start(a).\narc(d,a).\narc(e,a).\narc(a,b).\narc(a,c).\narc(b,f).\narc(c,f).\n</code></pre></div><p>IDB<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>black(X): start(X).\nblack(X): white(Y), arc(Y,X).\nwhite(X): black(Y), arc(Y,X).\nblack(X): white(Y), arc(X,Y).\nwhite(X): black(Y), arc(X,Y).\n</code></pre></div><p>直接提供Fact的就是EDB，提供规则的就是IDB</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>build_db(Clauses) -&gt;\n    EDB =\n        lists:foldl(\n          fun add_fact/2,\n          dict:new(),\n          [Head || {Head, []} &lt;- Clauses]),\n\n    IDB =\n        [Clause || {_, Body} = Clause &lt;- Clauses, Body =/= []],\n\n    EDB1 = build_db(IDB, EDB),\n    [ {P, sets:to_list(Tuples)} || {P,Tuples} &lt;- dict:to_list(EDB1) ].\n</code></pre></div><p>IDB里每条规则的正文部分，可以看作是查询。每条规则都出EDB里查一遍，<br>并把结果加到EDB里。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>naive_iteration([], EDB) -&gt;\n    EDB;\nnaive_iteration([{{P,A}, Goals}|IDB], EDB) -&gt;\n    EDB1 =\n        lists:foldl(\n          fun add_fact/2,\n          EDB,\n          [ {P, [subst(T, VarMap) || T &lt;- A]}\n            || VarMap &lt;- query_db(Goals, EDB) ]),\n    naive_iteration(IDB, EDB1).\n</code></pre></div><p> 可是，这样并不能得到所有结果。那么就不断重复这个过程，直到EDB不变为止。(为了让人觉得高深莫测，那就叫不动点吧)。 </p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>build_db(IDB, EDB) -&gt;\n    case naive_iteration(IDB, EDB) of\n        EDB -&gt;\n            EDB;\n        EDB1 -&gt;\n            build_db(IDB, EDB1)\n    end.\n</code></pre></div><p>剩下的函数定义，主要就是简单的unification。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>subst({var, V}, VarMap) -&gt;\n    case dict:find(V, VarMap) of\n        {ok, V1} -&gt;\n            subst(V1, VarMap);\n        error -&gt;\n            {var, V}\n    end;\nsubst(V, _) -&gt;\n    V.\n\nbind(V, T, VarMap) -&gt;\n    case dict:is_key(V, VarMap) of\n        true -&gt;\n            false;\n        false -&gt;\n            dict:store(V, T, VarMap)\n    end.\n\n\nunify(V1, V2, VarMap) -&gt;\n    case {subst(V1, VarMap), subst(V2, VarMap)} of\n        {{var, X}, {var, X}} -&gt;\n            VarMap;\n        {{var, X1}, X2} -&gt;\n            bind(X1, X2, VarMap);\n        {X1, {var, X2}} -&gt;\n            bind(X2, X1, VarMap);\n        {X, X} -&gt;\n            VarMap;\n        _ -&gt;\n            false\n    end.\n\nunify_list([], [], VarMap) -&gt;\n    VarMap;\nunify_list([H1|T1], [H2|T2], VarMap) -&gt;\n    case unify(H1, H2, VarMap) of\n        false -&gt;\n            false;\n        VarMap1 -&gt;\n            unify_list(T1, T2, VarMap1)\n    end.\n\nadd_fact({P, A}, EDB) -&gt;\n    dict:update(P, fun (Old) -&gt; sets:add_element(A, Old) end, sets:from_list([A]), EDB).\n\nfind_facts(P, EDB) -&gt;\n    case dict:find(P, EDB) of\n        {ok, S} -&gt;\n            sets:to_list(S);\n        error -&gt;\n            []\n    end.\n\nquery_db([], VarMaps, _EDB) -&gt;\n    VarMaps;\nquery_db([{P, A}|Goals], VarMaps, EDB) -&gt;\n    VarMaps1 =\n        [ M || M &lt;- [ unify_list(A, Fact, VarMap)\n                      || Fact &lt;- find_facts(P, EDB),\n                         VarMap &lt;- VarMaps ],\n               M =/= false],\n\n    query_db(Goals, VarMaps1, EDB).\n\nquery_db(Goals, EDB) -&gt;\n    query_db(Goals, [dict:new()], EDB).\n</code></pre></div><p>参考 <a href=\"https://link.zhihu.com/?target=http%3A//www.inf.unibz.it/%257Enutt/Teaching/CL0910/CLSlides/5-datalog-eval.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">inf.unibz.it/%7Enutt/Te</span><span class=\"invisible\">aching/CL0910/CLSlides/5-datalog-eval.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//webdam.inria.fr/Alice/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">webdam.inria.fr/Alice/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p>",
        "image_url": "",
        "title": "[Parsing] 2. Naive Evaluation",
        "excerpt_title": "",
        "excerpt": "Datalog相比Prolog，少了复合类型，但是要求结果是和求值顺序无关。这点就比Prolog好多了，Prolog完全没有逻辑可言，而Datalog至少是和一阶逻辑类似的。我们用 {var, 'X'} 的形式来表示Datalog中的变量。那么，类型定义可以写成-type datalog_term() :: ato…"
    },
    {
        "type": "article",
        "updated": 1459343719,
        "id": 20029873,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1431524264,
        "url": "",
        "content": "<p>在args_file的问题解决之后。运行BEAM语言应该没啥大问题了 (误 。那就来看一下Elixir吧。结果比预想的不顺利的多啊。</p><p>首先碰到一个诡异的问题，Elixir编译到一半不小心中断了，得make clean再重新开始。这都是怎么想的，这make竟然是冒牌的。</p><p>接着发现死活Erlang和Elixir只有一个能复制进image。经过调查发现，usr.manifest文件不能指向同一个目标。比如，有两个 /**<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>/**: /path/to/some/dir\n</code></pre></div><p>那么只能有一个生效。幸亏之前就把目录设置成不同的了。 <br></p><p>顺便就带来了一个问题，之前还有 libz, openssl 什么的动态链接库是靠一段奇怪的脚本来复制的。幸好OSv已经把这个问题解决了，只要 require 对应的 module 就可以了。</p><p>总之，编译了很多次之后，Elixir也能在OSv上运行了。其他BEAM语言也开始蠢蠢欲动了。结果第一个LFE就运行不起来。经检查发现问题就出在编译的时候关闭了termcap。那就打开吧。打开之后傻眼了，还是进不了LFE Shell。</p><p>最后，经过反反复复debug，终于发现问题出在没有设置TERM环境变量。设置好之后，Erlang的ttsl_drv就能正常工作了。LFE Shell也就能运行了。 </p><p>就这点问题，竟然折腾了一天。 </p>",
        "image_url": "",
        "title": "OSv Elixir",
        "excerpt_title": "",
        "excerpt": "在args_file的问题解决之后。运行BEAM语言应该没啥大问题了 (误 。那就来看一下Elixir吧。结果比预想的不顺利的多啊。首先碰到一个诡异的问题，Elixir编译到一半不小心中断了，得make clean再重新开始。这都是怎么想的，这make竟然是冒牌的。接着发现死活Er…"
    },
    {
        "type": "article",
        "updated": 1459343697,
        "id": 20028805,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1431431180,
        "url": "",
        "content": "<p>第一个问题是把编译参数里的 --without-os_mon 去掉了。到目前为止还没解决 cpu_sup的问题，主要原因是OSv根本就没实现必要的接口 ，于是就先禁用了。而memsup和disksup，都被我从port改成port driver了，这样就不需要开新的进程了。当然了，Bug肯定是少不了的。</p><p>第二个问题是怎么patch源代码的问题。第一个问题一开始我是把代码直接复制了一份。在nyh的建议下，改成patch了。现在的做法是，先把文件 x 复制一份 x.orig ，直接改 x ，改完了用 gendiff dirname .orig 生成 patch 。从头开始打 patch 时，用 patch -b 就会自动把原始文件复制一份，这样有改动之后重新 gendiff 就可以了。<br></p><p>第三个问题是epmd怎么启动的问题。一开始还妄图使用某个纯Erlang实现的epmd server。结果发现这样对release改动过大，根本没法用。又去看了看OSv的代码，发现，完全可以再开一个线程来运行epmd。只要把erlexec改改就可以了。剩下一个小问题，因为现在没有能用的wordexp，并不能完全替代system的功能。</p><p>接下来几天，还会加上从EC2 user-data读取args_file的功能(没有就用默认的)。这样一般的Erlang程序应该都能正常启动，每个节点也可以有不同的配置了。</p>",
        "image_url": "",
        "title": "OSv Erlang的进展",
        "excerpt_title": "",
        "excerpt": "第一个问题是把编译参数里的 --without-os_mon 去掉了。到目前为止还没解决 cpu_sup的问题，主要原因是OSv根本就没实现必要的接口 ，于是就先禁用了。而memsup和disksup，都被我从port改成port driver了，这样就不需要开新的进程了。当然了，Bug肯定是少不…"
    },
    {
        "type": "article",
        "updated": 1430105205,
        "id": 20013565,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1430105205,
        "url": "",
        "content": "用Prolog语法来写Parser是一件很自然的事。比BNF要好的多。BNF 只是描述了语法，用Prolog写直接就把Parser给写完了。比如 <br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>&lt;plus_exp&gt; ::= &lt;mul_exp&gt; | &lt;mul_exp&gt; &lt;plus&gt; &lt;plus_exp&gt;\n&lt;mul_exp&gt; ::= &lt;num&gt; | &lt;num&gt; &lt;mul&gt; &lt;mul_exp&gt;\n&lt;plus&gt; ::= \"plus\"\n&lt;mul&gt; ::= \"mul\"\n&lt;num&gt; ::= &lt;integer&gt;\n</code></pre></div><p>Prolog:</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>plus(S0, S) :-\n  S0 = [plus|S].\n\nmul(S0, S) :-\n  S0 = [mul|S].\n\nnum(N, S0, S) :-\n  S0 = [N|S],\n  integer(N).\n\nplus_exp(Expr, S0, S) :-\n  mul_exp(Expr, S0, S).\n\nplus_exp(Expr, S0, S) :-\n  mul_exp(E1, S0, S1),\n  plus(S1, S2),\n  plus_exp(E2, S2, S),\n  Expr =.. [plus, E1, E2].\n\nmul_exp(Expr, S0, S) :-\n  num(Expr, S0, S).\n\nmul_exp(Expr, S0, S) :-\n  num(E1, S0, S1),\n  mul(S1, S2),\n  mul_exp(E2, S2, S),\n  Expr =.. [mul, E1, E2].\n</code></pre></div><p>问题是虽然Prolog这语法看上去很好，真的很难用来写程序，动不动就不知道回溯到哪里去了，一cut又傻了，碰到左递归就死循环了。长的像一阶逻辑，其实完全没有逻辑可言。这也能叫Prolog ? <br></p><p>即便无视这些缺点，对于写Parser来说，Prolog依旧是太强大了。Prolog可是图灵完全的。很容易构造出有无数个结果的查询</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>p([]).\np(L) :-\n  L = [a|X],\n  p(X).\n</code></pre></div><p> 为了避免这个问题，就不能有复合类型。这样就没法用List来表示输入的字符串了。当然List还有另外一个问题就是，按这么写，必须一次提供完整的输入，而不是一次一个字符。</p><p>这是可以做到的，比如 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>[1,plus,2]\n</code></pre></div><p> 可以表示成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>token(1, 0, 1).\ntoken(plus, 1, 2).\ntoken(2, 2, 3).\n</code></pre></div><p> 语法规则就可以写成 (先忽略生成的语法树)<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>plus(S0, S) :-\n  token(plus, S0, S).\n\nmul(S0, S) :-\n  token(mul, S0, S).\n\nnum(S0, S) :-\n  token(N, S0, S),\n  integer(N).\n\nplus_exp(S0, S) :-\n  mul_exp(S0, S).\n\nplus_exp(S0, S) :-\n  mul_exp(S0, S1),\n  plus(S1, S2),\n  plus_exp(S2, S).\n\nmul_exp(S0, S) :-\n  num(S0, S).\n\nmul_exp(S0, S) :-\n  num(S0, S1),\n  mul(S1, S2),\n  mul_exp(S2, S).\n</code></pre></div><p>这就变成Datalog了嘛。</p><p>接下来就来看Datalog</p>",
        "image_url": "",
        "title": "[Parsing] 1. Prolog",
        "excerpt_title": "",
        "excerpt": "用Prolog语法来写Parser是一件很自然的事。比BNF要好的多。BNF 只是描述了语法，用Prolog写直接就把Parser给写完了。比如 &lt;plus_exp&gt; ::= &lt;mul_exp&gt; | &lt;mul_exp&gt; &lt;plus&gt; &lt;plus_exp&gt;\n&lt;mul_exp&gt; ::= &lt;num&gt; | &lt;num&gt; &lt;mul&gt; &lt;mul_exp&gt;\n&lt;plus&gt; ::= \"plus\"\n&lt;mul&gt; :…"
    },
    {
        "type": "article",
        "updated": 1429951803,
        "id": 20012190,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1429951803,
        "url": "",
        "content": "<p>很多人(包括我)都有这么一种错觉，好像操作系统是一个已经解决的问题，新的内核已经没有存在的必要了。所以也就没必要去了解操作系统是怎么回事，只管用就是了。</p><p>事实恰好相反。 你肯定碰到过有那么一天，网络出故障了，惊讶的发现有人竟然不知道怎么截图了，原因竟然是打不开QQ。这只能说明现在流行的操作系统既不好用也不安全。</p><p>按正常的做法，操作系统应该有截图服务，只有提供截图服务的程序才有权在整个桌面上截图。别的程序，包括QQ，想要截图，必须向截图服务发请求。这样同时也保证了，在这个操作系统上，所有程序的桌面截图的用法都是一致的。</p><p>唯一一个在这方面做的比较好的，可能真的就只有Wayland了。Wayland当然有Wayland的问题。至少Wayland把最重要的一件事搞对了，整个显示是以Compositing方式来进行的。</p><p>Compositing简单来说就是每个窗口自己画自己的，最后由compositor拼成一张图，再交给驱动去画去。这么简单一个概念，查了好多资料，最后发现竟然只有AmigaOS才是这么做的。目前流行的操作系统差不多在AmigaOS推出之后20年，才有类似的功能，还仅仅是以扩展的形式出现的。<br></p><p>从定义来看，操作系统就是用来解决多个正在运行的程序对资源的并发访问这个问题的。只运行一个程序当然就无所谓有没有操作系统了。可是现在在操作系统上运行的程序，看上去并没有获得操作操作系统虚拟出来的设备的好处，反倒更像是陷入到API的汪洋大海之中。</p><p>Compositing才算是回归了操作系统的本质。在进程看来一个窗口就应该类似操作系统看到的一块屏幕。需要联网的进程，都有一个虚拟的网口，操作系统完成的功能更应该接近交换机。这样的概念也比什么X Window，Socket什么的更容易理解。</p><p>操作系统是如何向硬件传输数据的？直接往某一段映射为硬件的内存地址写就可以了。类似的，直接把一个窗口buffer对应的内存页，同时在compositor和GUI进程的地址空间都映射一遍就好了嘛。只要有MMU，这个就不是什么问题。这样，所谓微内核就是把驱动都放到用户态的提法就没有多大意义了，通过MMU，一样也可以把一个用户态进程的一部分内存地址，映射到硬件对应的物理地址。把大部分驱动放到用户态根本就不存在任何问题嘛。</p><p>能放到用户态的进程现在并没有放到用户态。这一定是内核出了问题。问题就出在现在流行的内核，并没有提供IPC。比如在UNIX上，连向另外一个进程发一个file descriptor都很麻烦呢，各种奇怪的magic。Wayland应该也有类似的问题，一个进程很难为另外一个进程申请一个surface。比如，在Wayland里并不存在类似XEmbed的功能。</p><p>这个问题并没有看上去那么简单。可能是因为我没仔细看，我看了一下HelenOS里并没有和论文里提到的VFS对应的代码。其他类似的情况，可能也就只有SCTP socket的peel off了吧。</p><p>这也就是为什么还需要一个新的内核。</p><p>P.S. 至于那种至运行一个程序，也敢说自己是操作系统的，比如Lisp Machine什么的。现在有了像OSv之类的内核，一个普通的单进程的Linux程序，只要编译成PIE，就能直接在OSv上运行了。别说Lisp Machine了，不管啥语言，只要是单进程的都行了。都有Erlang Machine了，还要Lisp Machine干啥？</p>",
        "image_url": "",
        "title": "为什么还需要一个新的内核？",
        "excerpt_title": "",
        "excerpt": "很多人(包括我)都有这么一种错觉，好像操作系统是一个已经解决的问题，新的内核已经没有存在的必要了。所以也就没必要去了解操作系统是怎么回事，只管用就是了。事实恰好相反。 你肯定碰到过有那么一天，网络出故障了，惊讶的发现有人竟然不知道怎么截图了…"
    },
    {
        "type": "article",
        "updated": 1429711424,
        "id": 20006819,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1429711402,
        "url": "",
        "content": "<p>本来这是在21天学通Erlang第一章里的内容。只是现在还没远远写到那儿呢。</p><p>因为占了个坑，<a class=\"internal\" href=\"http://www.zhihu.com/question/29636774/answer/45156848\">shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答</a> 。那就先写起来吧。毕竟这部分内容之前也没很仔细的检查过到底是不是这么回事。只是有个大体思路而已。趁着这个机会把提纲写了，顺便也减小一点bus factor可能的影响。<br></p><p>学Parsing，最重要的思路，就是把parser看作一种特殊的解释器。先写Datalog解释器，再变形成CYK/Earley Parser。所有表达能力不足CFG的parser都可以由此推导出来，很容易就看清楚不同算法之间的联系。</p><p>接下来，就按这个思路来一遍。<br></p><p>且看下回分解。</p>",
        "image_url": "",
        "title": "[Parsing] 0. 如何学Parsing",
        "excerpt_title": "",
        "excerpt": "本来这是在21天学通Erlang第一章里的内容。只是现在还没远远写到那儿呢。因为占了个坑，<a class=\"\" data-title=\"shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答\" data-editable=\"true\" href=\"http://www.zhihu.com/question/29636774/answer/45156848\">shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答</a> 。那就先写起来吧。毕竟这部分内容之前也没很仔细的检查过…"
    },
    {
        "type": "article",
        "updated": 1428848806,
        "id": 20001078,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1428848806,
        "url": "",
        "content": "<p>主要就是写了个脚本用来检查不同文件里同一个代码片段的内容是否一致。之前改一段代码，来来回回检查好多长的差不多的文件，就已经崩溃了。现在就好多了。</p><p>另外就是删掉了很多如何在Windows下安装Erlang的废话。改成推荐使用<a href=\"https://link.zhihu.com/?target=https%3A//chocolatey.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Chocolatey Gallery<i class=\"icon-external\"></i></a> 了。看上去好像很难用。我已经后悔了。 谁来研究一下Windows下怎么安装Erlang比较好？</p><p>另外还有一些比如换了个字体， 增加了Manifest文件用来决定exercise.zip里的内容之类的可以忽略不计的小改动 <br></p><p>就是这样</p>",
        "image_url": "",
        "title": "21天学通Erlang微量更新",
        "excerpt_title": "",
        "excerpt": "主要就是写了个脚本用来检查不同文件里同一个代码片段的内容是否一致。之前改一段代码，来来回回检查好多长的差不多的文件，就已经崩溃了。现在就好多了。另外就是删掉了很多如何在Windows下安装Erlang的废话。改成推荐使用<a data-title=\"Chocolatey Gallery\" data-editable=\"true\" href=\"https://chocolatey.org/\"> Chocolatey Gallery</a> 了。看上去…"
    },
    {
        "type": "article",
        "updated": 1459343678,
        "id": 19999451,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1428646697,
        "url": "",
        "content": "<p>忍不住开始写，结果花了一天多，各种不靠谱的写法，才只搞成这副样子</p><p><img data-rawheight=\"505\" data-rawwidth=\"903\" src=\"https://pic3.zhimg.com/8044a8ffc7b9eb2a3d6b84f6cff239f2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic3.zhimg.com/8044a8ffc7b9eb2a3d6b84f6cff239f2_r.jpg\">当然了，只支持Firefox</p>",
        "image_url": "",
        "title": "Erlang Web Editor",
        "excerpt_title": "",
        "excerpt": "忍不住开始写，结果花了一天多，各种不靠谱的写法，才只搞成这副样子当然了，只支持Firefox"
    },
    {
        "type": "article",
        "updated": 1428047173,
        "id": 19993413,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1428045867,
        "url": "",
        "content": "<p>太可恶了。必须发动人身攻击，往死里黑。专栏不就是用来干这个的。</p><p>PAT要是流行起来，以后找工作都得去很脑残的刷很多题，去参加这个该死的考试，很多公司招人直接看你有没有这个证书，没有或者分数太低，就直接把你简历丢了，想想就很可怕啊，为了刷分你就不停的去考，对办这个考试的人当然是极好的。</p><p>而且这是一个单纯考熟练度的考试，啥都不能带啊。连人家正经的程序竞赛也不限制带任何纸质资料吧。写程序最不重要的就是熟练度了吧。难道一个程序写好能用了，之后还需要每隔一星期又从头开始重新写一遍？可选的语言种类还少的可怜，连Standard ML,  APL, Ada, Prolog, Erlang, FORTRAN, Tcl什么的都没有，还让人怎么活啊。为啥就不能自带编译器了？</p><p>还有他们还在网易云课堂里开数据结构的课，根本就没打算把人教会，而是赤裸裸的只是为了给PAT提高知名度。大家都是业余时间学学的，你也用C讲数据结构啊。也不是一定不能用C讲，就算用C讲，哪怕实现一门ML家族的语言太麻烦，不如写个编译器把Erlang的子集编译成C，全都用naive的实现，代码很可能都远远不到5000行。</p><p>比如二叉树，用OCaml，可以这么定义</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>type 'a tree =\n  | Empty\n  | Tree of 'a tree * 'a * 'a tree;;\n</code></pre></div><p>检查其中是否存在某个元素</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  let rec member elem tree =\n    match tree with\n      | Empty -&gt; false\n      | Tree(left, node, right) -&gt;\n        match Elem.compare elem node with\n          | Equal -&gt; true\n          | Less -&gt;\n            member elem left\n          | Greater -&gt;\n            member elem right;;\n</code></pre></div><p>遍历</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  let rec iter tree =\n    match tree with\n      | Empty -&gt; empty\n      | Tree(left, node, right) -&gt;\n        chain (iter left) (cons node (iter right));;\n</code></pre></div><p>Iterator相关定义</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>type 'a stream =\n  | Nil\n  | Cons of 'a * 'a iterator\nand 'a iterator =\n    unit -&gt; 'a stream;;\n\nlet empty () =\n  Nil;;\n\nlet cons elem iterator () =\n  Cons(elem, iterator);;\n\nlet rec chain a b () =\n  match a () with\n    | Nil -&gt; b ()\n    | Cons(h, t) -&gt;\n      Cons(h, (chain t b));;\n</code></pre></div><p>不知道比用C容易到哪里去了</p><p>而且OCaml肯定也有QuickCheck类工具，可以用来根据property自动生成测试用例，完全不需要依赖你PAT网站上那点可怜的测试用例。检查完了，就可以开始写形式证明了，用Coq检查不知道比靠自己检查自己高明到哪里去了 (误</p><p>花同样的时间，用C写，代码写不写的出来都是个问题。</p><p>早就有人提出不满了 ，看<a class=\"internal\" href=\"http://www.zhihu.com/question/28122603/answer/41061574\">浙江大学陈越(姥姥)是什么样的存在？ - 知乎用户的回答</a></p><p>所以我看还是趁早关掉PAT。来写  21天学通Erlang 比较好</p><p>就是这样</p>",
        "image_url": "",
        "title": "可恶的PAT",
        "excerpt_title": "",
        "excerpt": "太可恶了。必须发动人身攻击，往死里黑。专栏不就是用来干这个的。PAT要是流行起来，以后找工作都得去很脑残的刷很多题，去参加这个该死的考试，很多公司招人直接看你有没有这个证书，没有或者分数太低，就直接把你简历丢了，想想就很可怕啊，为了刷分你就…"
    },
    {
        "type": "article",
        "updated": 1426648110,
        "id": 19979754,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1426648110,
        "url": "",
        "content": "<a class=\"internal\" href=\"http://www.zhihu.com/question/28830426/answer/42239930\">10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？ - 知乎用户的回答</a><p>这个问题证明写起来太麻烦了，放弃了。还是把上次那个简化的问题的证明贴上来。总体思路是一样的，就是分情况讨论，排除不可能的操作，最后证明，只有按一种方向倒水才是最优解或者最优解之一。 </p><p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a><br></p><p>以下是证明思路，具体证明自己看着办吧</p><p>首先看简单的情形</p><p><br>若 c &gt; a 且 c &gt; b,没有一个容器装得下 c 升的水,所以无解。<br>若 c = a 或 c = b,那么直接把 a 或 b 倒满就可以了。</p><p><br>因为有 a,b 两个容器,可以看成有六种操作<br>1. empty(a) 倒空 a<br>2. empty(b) 倒空 b<br>3. fill(a) 倒满 a<br>4. fill(b) 倒满 b<br>5. pour(a,b) a 倒向 b<br>6. pour(b,a) b 倒向 a</p><p><br>不妨设 a,b 内实际水量分别为 A,B。<br>一开始 A = 0, B = 0<br>所以, a * x1 + b * y1 = A 和 a * x2 + b * y2 = B 都有整数解。<br>即 x1 = 0, y1 = 0, x2 = 0, y2 = 0<br></p><p> 若操作前,a * x1 + b * y1 = A 和 a * x2 + b * y2 = B 都有整数解。<br>若进行的是操作 1,完成后,B 不变,A 变成 0,所以两者仍然都有整数解。<br>若进行的是操作 2,完成后,A 不变,B 变成 0,所以两者仍然都有整数解。<br>若进行的是操作 3,完成后,B 不变,A 变成 a,所以两者仍然都有整数解。<br>若进行的是操作 4,完成后,A 不变,B 变成 b,所以两者仍然都有整数解。<br>若进行的是操作 5,完成后,总水量不变,仍然是 a(x1 + x2 ) + b(y1 + y2 )<br>分情况讨论<br>若把 B 倒满了,那么此时 A = a(x1 + x2) + b(y1 + y2 − 1),所以两者仍然都有<br>整数解。<br>若没把 B 倒满,则 A 必然被倒空了,所以两者仍然都有整数解。<br>若进行的是操作 6,完成后,类似操作 5,分情况讨论<br>若把 A 倒满了,那么此时 B = a(x1 + x2 − 1) + b(y1 + y2 ),所以两者仍然都有<br>整数解。<br>若没把 A 倒满,则 B 必然被倒空了,所以两者仍然都有整数解。</p><p>所以,只要操作前有整数解,操作后仍然会有整数解。<br>即, c = a*x + b*y 也一定有整数解。<br>根据 Bezout’s identity,当且仅当 c 是 gcd(a, b) 的整数倍时,c = a*x + b*y 才有<br>整数解。<br>所以,若 c 不能被 gcd(a, b) 整除,那么本题无解。</p><p><br>不妨设,c = a*x + b*y,分情况讨论<br>若 a &gt; b,则根据上面的讨论,若本题有解,必有 c &lt; a。那么 x 和 y 必一正一<br>负。若两者同时为负,则 c &lt; 0,与 c &gt; 0 矛盾。若两者同时为正,则 c &gt; a,<br>与 c &lt; a 矛盾。<br>若 a &lt; b,类似的,x 和 y 必一正一负。<br>若 a = b,则根据上面的讨论,c = a = b,这种情况在前面就讨论过了。</p><p>假设最少的操作序列的第 n 步为 pour(a,b)。分情况讨论</p><p>若第 n + 1 步为 pour(b,a)。因为 pour 操作不影响总水量,而 pour 的最终结果<br>要么是 a 满,要么是 b 空,所以和直接在第 n 步 pour(b,a) 没有区别,和操作<br>最少矛盾。</p><p><br>若第 n 步操作后,a 为空,则第 n + 1 步,empty(a), pour(a,b) 没有意义。<br>此时若 empty(b),则和初始状态没有区别。若 fill(b),就和一开始直接 fill(b)<br>没有区别。都和操作最少矛盾。<br>因此,第 n + 1 步必为 fill(a)。此时第 n + 2 步,fill(a), pour(b,a) 没有意义。<br>此时若 empty(a),则和 fill(a) 前状态没有区别。若 empty(b),就和一开始直接<br>fill(a) 没有区别。若 fill(b),则和一开始直接 fill(a),fill(b) 没有区别。都和操作<br>最少矛盾。<br>因此,fill(a) 的下一步必为 pour(a,b)。</p><p>若第 n 步操作后,b 满了,则第 n + 1 步,pour(a,b), fill(b) 没有意义。<br>此时若 fill(a),则和一开始直接 fill(a),fill(b) 没有区别。若 empty(a),就和一开<br>始直接 fill(b) 没有区别,都和操作最少矛盾。<br>因此,第 n + 1 步必为 empty(b)。此时第 n + 2 步,empty(b), pour(b,a) 没有<br>意义。<br>若 empty(a),则和初始状态没有区别。若 fill(b),就和 empty(b) 前状态没有区<br>别。若 fill(a),则和一开始直接 fill(a) 没有区别。都和操作最少矛盾。<br>因此,empty(b) 的下一步必是 pour(a,b)<br>类似的,交换 a,b,也可以得到最少的操作序列的第 n 步为 pour(b,a) 对应的结<br>论。</p><p>所以,步数最少的操作方式,必是以下两种之一。</p><p><br>1. fill(a)<br>2. pour(a,b)<br>3. 若 a 为空,回到 1<br>4. empty(b)<br>5. 回到 2</p><p><br>1. fill(b)<br>2. pour(b,a)<br>3. 若 b 为空,回到 1<br>4. empty(a)<br>5. 回到 2</p><p><br>交换 a,b,第一种就变成了第二种。现在就只讨论第一种。<br></p><p>若 a &gt; b,每一次 fill(a) 后,都会不断地 pour(a,b),empty(b),直到 pour(a,b)<br>不足以倒满 b。假如把倒满 b 的 pour(a,b) 和 empty(b) 看作一组操作,把 fill(a)<br>和没倒满 b 的 pour(a,b) 看作一组操作,总操作次数就是 fill(a) 和 empty(b) 次<br>数之和的两倍。不过,若 a 是 b 的整数倍,不会出现,pour(a,b) 不足以倒满<br>b 的情况,实际上,此时只需要在 fill(a) 后,倒出 a-c 升水即可,因此,只要<br>2 (a−c)/b 次操作就可以了。<br>在非整数倍的情况,最后一次 pour(a,b) 后,并不需要 empty(b),且最后一次<br>fill(a),没有对应的没倒满 b 的 pour(a,b),所以总操作次数要减去 2<br></p><p>若 a &lt; b,会不断地 fill(a),pour(a,b),直到把 b 倒满。假如把 fill(a) 和向 b 倒<br>入 a 升水的 pour(a,b) 看成一组操作,把 empty(b),和向 b 倒入不足 a 升水<br>的 pour(a,b) 看成一组操作,总操作次数就是 fill(a) 和 empty(b) 次数之和的两<br>倍。不过,若 b 是 a 的整数倍,不会出现向 b 倒入不足 a 升水的 pour(a,b) 的<br>情况,因为此时 c 也是 a 的整数倍,只需要 2c/a 次操作就可以了。<br>在非整数倍的情况,若 a &gt; c,则 a 不为空也不满时,必然是刚好把 b 倒满。和<br>上一种情况类似,最后一次 pour(a,b) 后,并不需要 empty(b),也没有对应的<br>向 b 倒入不足 a 升水的 pour(a,b),所以总操作次数要减去 2<br>若 a &lt; c,所以最后必然是 b 中装 c 升水。所以总操作数不需要减。</p><p><br>现在就要找出最少的 fill(a) 和 empty(b) 次数之和<br>根据前面的讨论,a*x + b*y = c 的整数解,x,y 必一正一负。<br>不妨设其中一种情况为,a*k1 − b*k2 = c,且 k1 &gt; 0, k2 &gt; 0<br>因为 a * k1 = c + b * k2 ,所以 k1 越大,k2 就越大。<br>所以只要求出最小的 k1 ,就能求出最少的 fill(a) 和 empty(b) 次数之和<br>另一种情况,−a * k1 + b * k2 = c,且 k1 &gt; 0, k2 &gt; 0,也是类似的。</p><p>使用扩展欧几里德算法,可以分别求出两种情况下的解,取小的就可以了。<br>总结,<br>1. 若 c &gt; a 且 c &gt; b,无解<br>2. 若 c = a 或 c = b,最少需要 1 步操作<br>3. 若 a = b 且 c &lt;&gt; a 且 c &lt;&gt; b,无解<br>4. 若 gcd(a, b) 能整除 c,有解</p><p>gcd(a, b) 能整除 c 的情况<br>1. 若 a 是 b 的整数倍,那么取 2(a−c)/b 和 2c/b 中的最小值<br>2. 若 b 是 a 的整数倍,那么取 2(b−c)/a 和 2c/a 中的最小值<br>3. 其他情况,取分别以 a,b 代入 a,b,以 b,a 代入 a,b,按以下方法求出操<br>作步数的最小值</p><p>用扩展欧几里德算法求出 k 使得 k * a ≡ gcd(a, b) (mod b)<br>令 k1 为 k  * c / gcd(a,b) (mod b),有 k1 * a ≡ c (mod b)<br>令 k2 为 k1 * a−c/b<br>所以有 a * k1 − b * k2 = c<br>1. 若 a &lt; b 且 a &lt; c,操作步数为 2 (k1 + k2 )<br>2. 其他情况,操作步数为 2 (k1 + k2 − 1)</p><p>简化分类<br>因为只需要步数,而不需要具体步骤,交换 a,b 不影响结论。假如 a 是 a,b 中<br>小的那个,b 是 a,b 中大的那个。<br>那么一开始只要判断 c 是否比 b 大就可以了,同时后面也不需要判断 a 是否是<br>b 的整数倍了。<br>而 a = b 时,若 c &lt; b,gcd(a, b) 必然不能整除 c,所以没必要单独判断。<br>这样,就可以合并为<br>1. 若 c &gt; b,无解<br>2. 若 c = a 或 c = b,最少需要 1 步操作。<br>3. 若 b 是 a 的整数倍,取 2 (b−c)/a 和 2 c/a 中的最小值<br>4. 若 gcd(a, b) 能整除 c,有解。</p><p>因为扩展欧几里德算法可以同时计算两种情况以及 gcd(a, b)。所以没必要做三<br>次辗转相除,一次就可以完成计算了。</p><p>扩展欧几里德算法<br>为了求 k 使得 ka ≡ gcd(a, b) (mod b)<br>令 k1 = 1, k2 = 0, r1 = a, r2 = b<br>每一步,替换 k1 = k2 − k1 * floor(r2/r1) , k2 = k1 , r1 = r2 − r1 * floor(r2/r1) , r2 = r1<br>迭代过程中始终满足<br>k1 * a = r1 (mod b)<br>k2 * a = r2 (mod b)<br>因为 (k2−k1*floor(r2/r1) )a = k2*a−k1*a*floor(r2/r1) = r2−r1*floor(r2/r1) (mod b)<br>所以最终,当 r1 = 0 时,r2 = gcd(a, b),此时的 k2 就是要求的 k<br>而求 k 使得 k * b ≡ gcd(a, b) (mod a) 时,<br>一开始 k1 = 1, k2 = 0, r1 = b, r2 = a 计算一步后,k1 = 0, k2 = 1, r1 = a,<br>r2 = b<br>所以,两种情况可以同时计算。</p><p>另外,还可以改变初值。</p><p>令 k1 = c, k2 = 0, r1 = a, r2 = b<br>一开始<br>k1 * a = c * a = c * r1 = c * r1 (mod b)<br>k2 * a = 0 * a = 0 =  c*b = c * r2 (mod b)<br>而 (k2−k1*floor(r2/r1))a = k2*a−k1*a*floor(r2/r1) = c(r2−r1*floor(r2/r1)) (mod b)<br>所以迭代过程中始终满足<br>k1 * a = c * r1 (mod b)<br>k2 * a = c * r2 (mod b)<br>因此,最后当 r1 = 0 时,r2 = gcd(a, b),k2 * a = c * gcd(a, b) (mod b)<br>一开始 k1 , k2 都是 gcd(a, b) 的倍数,迭代过程中,始终减去的都是整数倍的 k1 ,所以,最终 k1 , k2 一直是 gcd(a, b) 的倍数。所以,最终 k2 * a / gcd(a,b) = c (mod b)<br>再回到 b 是 a 的整数倍的情况。假如也使用上述方法求解,一步就计算结束<br>了,得到 c/a 和 0。 c/a满足要求。而 0 不满足要求,改成 1 即可满足要求。</p><p>这样就得到了<a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957381\" class=\"internal\">Pouring Water解答 - impress your cat - 知乎专栏</a>里的代码 </p>",
        "image_url": "",
        "title": "Pouring Water证明",
        "excerpt_title": "",
        "excerpt": "<a class=\"internal\" href=\"http://www.zhihu.com/question/28830426/answer/42239930\">10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？ - 知乎用户的回答</a>这个问题证明写起来太麻烦了，放弃了。还是把上次那个简化的问题的证明贴上来。总体思路是一样的，就是分情况讨论，排除不可能的操作，最后证明，只有按一种…"
    },
    {
        "type": "article",
        "updated": 1425298349,
        "id": 19965916,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1425298349,
        "url": "",
        "content": "<p>忍不住还是简单写了一下 。反正碰到错误直接crash。语法和预期略有变化，主要就是去掉了逗号。</p><p>demo0.nic相当于 metamath.tar.bz2 里的 demo0.mm ，因为偷懒省了一些东西</p><p>缺少很多功能，比较重要的比如 distinct 。</p><p>不管怎么说，除了功能不足以及肯定存在的Bug，已经足够检查demo0.nic了。</p><p>假如你也一样蛋疼<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ erlc nicolas_lexer.xrl\n$ erlc nicolas_grammer.yrl\n$ erl -make\n$ erl\n1&gt; nicolas_verifier:file(\"demo0.nic\").\n</code></pre></div><p>这样就可以了。</p><p>现在就可以尝试在上面证明一些Type Theory基本的定理了。</p><p>我肯定能忍住到以后再说了。毕竟Type Theory不是几行trivial的代码就能跑通的。<br></p><br><p>相关链接: <br></p><p><a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957439\" class=\"internal\">尼古拉斯一世 - impress your cat - 知乎专栏</a><br></p><p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957946\">All you want to know about Nicolas, but might have been afraid to ask - impress your cat - 知乎专栏</a></p>",
        "image_url": "",
        "title": "可以检查demo0.nic了",
        "excerpt_title": "",
        "excerpt": "忍不住还是简单写了一下 。反正碰到错误直接crash。语法和预期略有变化，主要就是去掉了逗号。demo0.nic相当于 metamath.tar.bz2 里的 demo0.mm ，因为偷懒省了一些东西缺少很多功能，比较重要的比如 distinct 。不管怎么说，除了功能不足以及肯定存在的Bug…"
    },
    {
        "type": "article",
        "updated": 1425004990,
        "id": 19963099,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1424962512,
        "url": "",
        "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Penney%2527s_game\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Penney's game<i class=\"icon-external\"></i></a> 是个很简单的问题，要写一个程序来解答，代码量也是有一点的，这非常适合用来说明为啥APL家族的代码很容易理解。</p><p>至于为啥APL很容易学，APL In Exposition里已经有很好的说明了。</p><img data-rawheight=\"209\" data-rawwidth=\"681\" src=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_r.jpg\"><p>当然我主要就是来反对一下 <a class=\"internal\" href=\"http://www.zhihu.com/question/28248249/answer/40135370\">非程序猿学习什么计算机语言比较好？C语言已经学过了，有没有什么语言打的代码比较少的？ - Belleve 的回答</a></p><p>解这个问题，分析一下状态转移的情况，接着直接计算<img src=\"https://zhihu.com/equation?tex=P+%5Ccdot+%5Clim_%7Bn+%5Cto+%5Cinfty%7D%7BM%5En%7D\" alt=\"P \\cdot \\lim_{n \\to \\infty}{M^n}\" eeimg=\"1\"> 就可以了</p><p>其中，P是初始概率 [1, 0, 0, ..., 0] 。M 是状态转移矩阵。把终止状态排在最后，可以观察到，终止状态对应的几个横行，左边都是零，最右边是个单位矩阵 <img src=\"https://zhihu.com/equation?tex=%5Cbegin%7Bpmatrix%7D%0AA+%26+B+%5C%5C%0AO+%26+I%0A%5Cend%7Bpmatrix%7D\" alt=\"\\begin{pmatrix}\nA &amp; B \\\\\nO &amp; I\n\\end{pmatrix}\" eeimg=\"1\"><br></p><p> 不妨令<img src=\"https://zhihu.com/equation?tex=M%5En+%3D+%5Cbegin%7Bpmatrix%7D%0AA_n+%26+B_n+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D\" alt=\"M^n = \\begin{pmatrix}\nA_n &amp; B_n \\\\\nO &amp; I \\\\\n\\end{pmatrix}\" eeimg=\"1\"></p><img src=\"https://zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bl+c+l%7D%0AM%5En+%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_n+%26+B_n+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A+%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_%7Bn-1%7D+%26+B_%7Bn-1%7D+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D+%5Ccdot+%5Cbegin%7Bpmatrix%7D%0AA+%26+B+%5C%5C%0AO+%26+I%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_%7Bn-1%7D+%5Ccdot+A+%26+A_%7Bn-1%7D+%5Ccdot+B++%2B+B_%7Bn-1%7D+%5C%5C%0AO+%26+I+%5C%5C+%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA%5En+%26+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%5Ccdot+B+%5C%5C%0AO+%26+I+%5C%5C+%0A%5Cend%7Bpmatrix%7D%0A%5Cend%7Barray%7D\" alt=\"\\begin{array}{l c l}\nM^n &amp;=&amp; \\begin{pmatrix}\nA_n &amp; B_n \\\\\nO &amp; I \\\\\n\\end{pmatrix} \\\\\n &amp;=&amp; \\begin{pmatrix}\nA_{n-1} &amp; B_{n-1} \\\\\nO &amp; I \\\\\n\\end{pmatrix} \\cdot \\begin{pmatrix}\nA &amp; B \\\\\nO &amp; I\n\\end{pmatrix} \\\\\n&amp;=&amp; \\begin{pmatrix}\nA_{n-1} \\cdot A &amp; A_{n-1} \\cdot B  + B_{n-1} \\\\\nO &amp; I \\\\ \n\\end{pmatrix} \\\\\n&amp;=&amp; \\begin{pmatrix}\nA^n &amp; (\\sum_{i=0}^{n-1} A^i) \\cdot B \\\\\nO &amp; I \\\\ \n\\end{pmatrix}\n\\end{array}\" eeimg=\"1\"><p>因为最终都是会进入终止状态的，所以</p><img src=\"https://zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D+A%5En+%3D+O\" alt=\"\\lim_{n \\to \\infty} A^n = O\" eeimg=\"1\"><p>而<img src=\"https://zhihu.com/equation?tex=%28I-A%29+%5Ccdot+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%3D+I+-+A%5En\" alt=\"(I-A) \\cdot (\\sum_{i=0}^{n-1} A^i) = I - A^n\" eeimg=\"1\"><br><br></p><p>于是，<img src=\"https://zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D+%28I-A%29+%5Ccdot+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%3D+I\" alt=\"\\lim_{n \\to \\infty} (I-A) \\cdot (\\sum_{i=0}^{n-1} A^i) = I\" eeimg=\"1\"></p><p>因此这就相当于要求出<img src=\"https://zhihu.com/equation?tex=%28I-A%29%5E%7B-1%7D%5Ccdot+B\" alt=\"(I-A)^{-1}\\cdot B\" eeimg=\"1\"></p><p>认为APL家族代码难读的，无非就是只看到了最终的结果是类似向下面这样的一行程序</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   solve=:];&amp;&gt;{.@:(-@:#@:]([({.\"0 1%.(=@i.@:#-])@:(}.\"0 1))}.)+/@:(3 :'({.\"1 y)(;/}.\"1 y)}0$~(,])#y'&amp;]\"2)@:(2 0 1|:(((,1&amp;-)@:[,\"1 2])(i.@:#,:\"0 1])@:(((('HT',~&amp;.&gt;\"1 0]),[,.[)(1 i:~(]-:({.~-@:#))&amp;&gt;)\"0 1,~)('';#}.~.@:(,;@:(&lt;\\&amp;.&gt;)))))))\n   1r2 solve 'HHT';'HTT'\n┌───┬───┐\n│HHT│2r3│\n├───┼───┤\n│HTT│1r3│\n└───┴───┘\n</code></pre></div><p>光看这个当然难理解了。但是，谁这么写代码就是跟自己过不去，除非是去刷 codegolf 成就。</p><p>你可以把APL通常的使用环境，想像成和比 IPython Notebook 差不多，尽管APL比这个先出现很多，还比这个好用很多，但是架不住人家流行啊。APL作为函数式语言，你通常是用函数组合函数来定义函数的，所以函数的每执行一个步就可以留一个例子，而这一步用到的代码，就是和从最后定义好的函数里抽出来的对应的部分是一样的。</p><p>以上面那个函数，求解所有非终止状态的部分为例，是像下面这样的。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   &lt;\\ 'HHT'\n┌─┬──┬───┐\n│H│HH│HHT│\n└─┴──┴───┘\n   NB. 对每个序列分别求中间状态\n   &lt;\\&amp;.&gt; 'HHT';'HTT'\n┌──────────┬──────────┐\n│┌─┬──┬───┐│┌─┬──┬───┐│\n││H│HH│HHT│││H│HT│HTT││\n│└─┴──┴───┘│└─┴──┴───┘│\n└──────────┴──────────┘\n   NB. 把结果拼到一起\n   ; &lt;\\&amp;.&gt; 'HHT';'HTT'\n┌─┬──┬───┬─┬──┬───┐\n│H│HH│HHT│H│HT│HTT│\n└─┴──┴───┴─┴──┴───┘\n   NB. 把终止状态放最前面\n   (, ;@:(&lt;\\&amp;.&gt;)) 'HHT';'HTT'\n┌───┬───┬─┬──┬───┬─┬──┬───┐\n│HHT│HTT│H│HH│HHT│H│HT│HTT│\n└───┴───┴─┴──┴───┴─┴──┴───┘\n   NB. 去重之后\n   ~. (, ;@:(&lt;\\&amp;.&gt;)) 'HHT';'HTT'\n┌───┬───┬─┬──┬──┐\n│HHT│HTT│H│HH│HT│\n└───┴───┴─┴──┴──┘\n   NB. 把头砍了，后面的终止状态就没了嘛\n   (# }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))) 'HHT';'HTT'\n┌─┬──┬──┐\n│H│HH│HT│\n└─┴──┴──┘\n   NB. 再把起始状态补上\n   ('' ; # }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))) 'HHT';'HTT'\n┌┬─┬──┬──┐\n││H│HH│HT│\n└┴─┴──┴──┘\n   NB. 就是这样\n   non_terminal =: '' ; # }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))\n   non_terminal 'HHT';'HTT'\n┌┬─┬──┬──┐\n││H│HH│HT│\n└┴─┴──┴──┘\n</code></pre></div><p>代码非常容易理解好不好，都省去你自己脑补运行的中间结果了</p>",
        "image_url": "",
        "title": "Penney's game",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"Penney's game\" data-editable=\"true\" href=\"https://en.wikipedia.org/wiki/Penney%27s_game\">Penney's game</a> 是个很简单的问题，要写一个程序来解答，代码量也是有一点的，这非常适合用来说明为啥APL家族的代码很容易理解。至于为啥APL很容易学，APL In Exposition里已经有很好的说明了。当然我主要就是来反对一下 <a class=\"\" data-title=\"非程序猿学习什么计算机语言比较好？C语言已经学过了，有没有什么语言打的代码比较少的？ - Belleve 的回答\" data-editable=\"true\" href=\"http://www.zhihu.com/question/28248249/answer/40135370\">非程序猿学习什么计算机语言比较好？…</a>"
    },
    {
        "type": "article",
        "updated": 1459343638,
        "id": 19963012,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1424956496,
        "url": "",
        "content": "<p>工作流是一个很简单的概念。(其实不简单，这里就先当他是简单的)。</p><p>自己造工作流轮子的也不在少数，甚至有一些很奇怪的号称支持中国特色流程的。可是很多就算看了文档和代码，也很难理解为啥这可以工作，特别是他是怎么保证某个任务确实会执行。这方面就缺一个简单易懂的文章列表。</p><p><a href=\"http://link.zhihu.com/?target=http%3A//www.workflowpatterns.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Workflow Patterns<i class=\"icon-external\"></i></a> 这个网站倒是给了很多例子，适合用来检验功能是否足够。可是这上面的例子采用的模型是coloured petri-net，虽然例子很简单，光看图示和文字还是很费解的。看IBM developerWorks上的一系列文章，有助于更好的区分几个类似的pattern之间的区别 (差别很大啊，可是看Workflow Patterns很容易就绕进去了)<br></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart1/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing advanced workflow patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 1: Basic control flow patterns and cancellation and force completion patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart2/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 2: Multiple instance patterns and iteration patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart3/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 3: Advanced branching and synchronization patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart4/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 4: State-based, termination and trigger patterns<i class=\"icon-external\"></i></a></p><p>一种常用的也是更容易理解的用来表示工作流的模型是<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/%25CE%25A0-calculus\" target=\"_blank\" rel=\"nofollow noreferrer\">π-calculus<i class=\"icon-external\"></i></a>。pi-calculus看<a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.erlang.se/workshop/2005/noll_roy.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">erlang.se/workshop/2005</span><span class=\"invisible\">/noll_roy.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>这个就可以了。至于想不到怎么用pi-calculus表示工作流，可以参考 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//bpt.hpi.uni-potsdam.de/pub/Public/FrankPuhlmann/diss.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">bpt.hpi.uni-potsdam.de/</span><span class=\"invisible\">pub/Public/FrankPuhlmann/diss.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 和 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.stefansen.dk/papers/smawl.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">stefansen.dk/papers/sma</span><span class=\"invisible\">wl.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>就是这么简单</p><p>其实贴这个只是为了解释为啥蛋疼写了个这个 <a href=\"http://link.zhihu.com/?target=http%3A//bhuztez.github.io/pi-diagram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Diagram of π-Calculus<i class=\"icon-external\"></i></a>。发现有些人确实不理解。</p>",
        "image_url": "",
        "title": "如何理解/实现工作流？",
        "excerpt_title": "",
        "excerpt": "工作流是一个很简单的概念。(其实不简单，这里就先当他是简单的)。自己造工作流轮子的也不在少数，甚至有一些很奇怪的号称支持中国特色流程的。可是很多就算看了文档和代码，也很难理解为啥这可以工作，特别是他是怎么保证某个任务确实会执行。这方面就缺一…"
    },
    {
        "type": "article",
        "updated": 1424154585,
        "id": 19958765,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1424154566,
        "url": "",
        "content": "<p>第一个阶段，还在纠结指针，比如<a class=\"internal\" href=\"http://www.zhihu.com/question/20125963\">为什么说指针是 C 语言的精髓？ - 编程语言</a>，你以为理解了指针就是学会了C语言，实际上，只不过是会查<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cdecl.org/\" target=\"_blank\" rel=\"nofollow noreferrer\">cdecl: C gibberish ↔ English<i class=\"icon-external\"></i></a>而已</p><p>第二个阶段，你以为知道calling convention, syscall, mmap, spin lock, TLB shoot down ... 真要写个操作系统也能写出来了就是学会了C语言。其实也只不过是知道了一点C语言的皮毛罢了。</p><p>第三个阶段，你终于意识到只有学会了APL，才有可能学会C语言。不信，可以来回答一下这个问题，<a class=\"internal\" href=\"http://www.zhihu.com/question/26489010\">这段求素数个数的C语言代码是啥原理？ - C（编程语言）</a>。这个时候你清楚的意识到，很多人对代码竞赛选手的代码的指责方向完全反了，在非空白字符数除以行数这个指标上，他们是太低了而不是太高了。</p><p>最后来推荐一个C语言入门读物的下载链接，<a href=\"https://link.zhihu.com/?target=http%3A//www.softwarepreservation.org/projects/apl/Papers/197201_APL%2520In%2520Exposition_320-3010.pdf/view\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">APL in Exposition<i class=\"icon-external\"></i></a></p><p>就是这样</p>",
        "image_url": "",
        "title": "学C语言的三个阶段",
        "excerpt_title": "",
        "excerpt": "第一个阶段，还在纠结指针，比如<a class=\"\" data-title=\"为什么说指针是 C 语言的精髓？ - 编程语言\" data-editable=\"true\" href=\"http://www.zhihu.com/question/20125963\">为什么说指针是 C 语言的精髓？ - 编程语言</a>，你以为理解了指针就是学会了C语言，实际上，只不过是会查<a class=\"\" data-title=\"cdecl: C gibberish ↔ English\" data-editable=\"true\" href=\"http://cdecl.org/\">cdecl: C gibberish ↔ English</a>而已第二个阶段，你以为知道calling convention, syscall, mmap, spin lock, TLB shoot …"
    },
    {
        "type": "article",
        "updated": 1424004463,
        "id": 19957946,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1424004463,
        "url": "",
        "content": "<h2>为什么叫尼古拉斯？</h2><p>因为布尔巴基这个名字被占了，看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//wiki.planetmath.org/cgi-bin/wiki.pl/Projects\" target=\"_blank\" rel=\"nofollow noreferrer\">AsteroidMeta: Projects<i class=\"icon-external\"></i></a>这里就知道了</p><h2>为什么要重新造轮子？<br></h2><p>Metamath风格的Proof Checker太少了，而不是太多了。同时，这主要是为了《21天学通Erlang》第二章作准备。</p><h2>为什么不照着流行的Coq来？</h2><p>Coq可是从Proof Checking, Type Theory 一直到Proof Assistant全都一个程序搞定的。这么复杂，真的适合在零基础程序语言入门儿童读物一开始就讲么？</p><h2>尼古拉斯和Metamath有何不同？</h2><p>主要是换了个语法，另外把证明的过程从用一个简单的栈改成DAG，于是就更显啰嗦了。</p><h2>要怎么样才能看懂尼古拉斯的代码？<br></h2><p>可以先看 Metamath book <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//us.metamath.org/downloads/metamath.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">us.metamath.org/downloa</span><span class=\"invisible\">ds/metamath.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>根据Curry-Howard Correspondence，可以先从Erlang代码开始</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>ax1() -&gt; {['苏格拉底', '是', '人']}.\nax2([X, '是', '人']) -&gt; {[X, '会', '死']}.\n\nth1() -&gt;\n  {X1} = ax1(),\n  {X2} = ax2(X1),\n  {X2}.\n</code></pre></div><p>th1/0 就可以当作是证明了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>1&gt; th1().\n{['苏格拉底', '会', '死']}.\n</code></pre></div><p>证明和程序在用的时候终究是不一样的，你肯定不希望一个定理每次使用都需要从头开始证明。 <br></p><p>可以用Erlang里Type Spec的语法，把结论记录下来。这样用定理的时候，直接用结论就可以了。更棒的是，看上去不需要区别公理和定理了，公理无非就是没有证明的定理。<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>-spec ax1() -&gt; {AX1} when\n    AX1 :: ['苏格拉底', '是', '人'].\n\n-spec ax2(P) -&gt; {Q} when\n    P :: [X, '是', '人'],\n    Q :: [X, '会', '死'].\n\n-spec th1() -&gt; {R} when\n    R :: ['苏格拉底', '会', '死'].\n\nth1() -&gt;\n  {X1} = ax1(),\n  {X2} = ax2(X1),\n  {X2}.\n</code></pre></div><p>改语法</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>define ax1( |- AX1 ) {\n    AX1 :: { 苏格拉底 是 人 }\n}\n\ndefine ax2(P |- Q) {\n    P :: {X 是 人}\n    Q :: {X 会 死}\n}\n\ndefine th1( |- R) {\n    R :: {苏格拉底 会 死}\n}\n\nproof th1( |- R) {\n    ax1( |- X1)\n    ax2(X1 |- R)\n}\n</code></pre></div><p>主要保留的是从Prolog借鉴来的，首字母是大写的才是变量。所以不需要像Metamath那样每个符号都要定义是不是变量。大括号里直接用空格隔开多个符号就可以了，逗号就不需要了。最后就是把定义和证明的语法基本改成一致的。这样证明里的结果只要变量名对应上就可以了。</p><p>当然还可以更啰嗦一点</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>define ax1( |- AX1 ) {\n    AX1 :: { 苏格拉底 是 人 }\n}\n\ndefine ax2(P |- Q) {\n    P :: {X 是 人}\n    Q :: {X 会 死}\n}\n\ndefine th1( |- R) {\n    R :: {苏格拉底 会 死}\n}\n\nproof th1( |- R) {\n    ax1( |- X1)\n    X1 :: {苏格拉底 是 人}\n    ax2(X1 |- R)\n    R :: {苏格拉底 会 死}\n}\n</code></pre></div><p>因为变量首字母都是大写的，所以对应Metamath里distinct的概念可以直接写</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>distinct :: {X Y Z}\n</code></pre></div><p>就是这样</p>",
        "image_url": "",
        "title": "All you want to know about Nicolas, but might have been afraid to ask",
        "excerpt_title": "",
        "excerpt": "为什么叫尼古拉斯？因为布尔巴基这个名字被占了，看<a class=\"\" data-title=\"AsteroidMeta: Projects\" data-editable=\"true\" href=\"http://wiki.planetmath.org/cgi-bin/wiki.pl/Projects\">AsteroidMeta: Projects</a>这里就知道了为什么要重新造轮子？ Metamath风格的Proof Checker太少了，而不是太多了。同时，这主要是为了《21天学通Erlang》第二章作准备。为什么不照着流行的Coq来？Coq可是从Pr…"
    },
    {
        "type": "article",
        "updated": 1423927923,
        "id": 19957439,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1423927219,
        "url": "",
        "content": "<p>打算写一个电脑游戏。 电脑游戏的定义可以参考</p><p><img data-rawheight=\"286\" data-rawwidth=\"680\" src=\"https://pic3.zhimg.com/52dec19d6ab1d9ca33c913859d93bc2e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic3.zhimg.com/52dec19d6ab1d9ca33c913859d93bc2e_r.jpg\">因为我是Metamath脑残粉，所以肯定是按Metamath的方向来的。</p><p>可是布尔巴基的名字已经被另外一个类似的游戏占了，只能叫尼古拉斯了。不过叫尼古拉斯也挺好的，版本号可以是一世二世三世，听上去一下子就高级多了。</p><p>仓库已建好了，Proof Checker的大致设计也完成了，至于什么时候开始写，再说吧，也可以谁有兴趣谁来写</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/nicolas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/nicolas · GitHub<i class=\"icon-external\"></i></a><br></p><p>顺便黑一下Coq</p><p><img data-rawheight=\"496\" data-rawwidth=\"670\" src=\"https://pic2.zhimg.com/8ddbe9cdcb1a84fc95210c2f5471025d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"670\" data-original=\"https://pic2.zhimg.com/8ddbe9cdcb1a84fc95210c2f5471025d_r.jpg\">当然，这个benchmark对Coq不是很公平，完成相同的证明，无论automath还是metamath行数都要Coq的好几倍呢。</p><p>本文图都来自 <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.ru.nl/%7Efreek/talks/aut.dvi\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cs.ru.nl/~freek/talks/a</span><span class=\"invisible\">ut.dvi</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><br>就是这样</p>",
        "image_url": "",
        "title": "尼古拉斯一世",
        "excerpt_title": "",
        "excerpt": "打算写一个电脑游戏。 电脑游戏的定义可以参考因为我是Metamath脑残粉，所以肯定是按Metamath的方向来的。可是布尔巴基的名字已经被另外一个类似的游戏占了，只能叫尼古拉斯了。不过叫尼古拉斯也挺好的，版本号可以是一世二世三世，听上去一下子就高级多了…"
    },
    {
        "type": "article",
        "updated": 1423921685,
        "id": 19957381,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1423921629,
        "url": "",
        "content": "<p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a></p><p>既然有人想看我写的答案，那就贴一下</p><p>非常简单就这么几行</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">steps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">==</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">==</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">&gt;</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"n\">m2</span><span class=\"p\">,</span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">c</span>\n    <span class=\"k\">while</span> <span class=\"n\">r1</span><span class=\"p\">:</span>\n        <span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"o\">-</span><span class=\"n\">r2</span><span class=\"o\">/</span><span class=\"n\">r1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">m1</span>\n        <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"o\">-</span><span class=\"n\">r2</span><span class=\"o\">/</span><span class=\"n\">r1</span><span class=\"o\">*</span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n1</span>\n        <span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">r2</span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r1</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">r2</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">m2</span><span class=\"o\">/</span><span class=\"n\">r2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"o\">/</span><span class=\"n\">r2</span> <span class=\"ow\">or</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">&lt;</span><span class=\"n\">a</span><span class=\"p\">),(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div><br>证明也很简单，就留给有兴趣的读者当思考题了<p>就是这样</p>",
        "image_url": "",
        "title": "Pouring Water解答",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"Pouring Water - impress your cat - 知乎专栏\" data-editable=\"true\" class=\"\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a>既然有人想看我写的答案，那就贴一下非常简单就这么几行def steps(a,b,c):\n a, b = min(a,b), max(a,b)\n if (c==a) or (c==b):\n return 1\n elif (c&gt;b):\n return -1\n r1,r2,m1,m2,n1,n2 = a,b,c,0,0,c\n while r1…"
    },
    {
        "type": "article",
        "updated": 1423921202,
        "id": 19957370,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1423921202,
        "url": "",
        "content": "<p>很早之前就开始刷了，上面的题目大多很无聊，说白了最多就是考一些很奇怪的trick，代码写起来又很烦琐，更可恶的是有些题用Python还特别扭。实在没动力刷。</p><p><a class=\"internal\" href=\"http://www.zhihu.com/question/24604588\">刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程</a></p><p> 后来，突然一想，其实可以<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19938032\">把用到的函数合并到同一个Python文件 - impress your cat - 知乎专栏</a></p><p>于是就开始整理答案的代码 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/leetcode-solution\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/leetcode-solution · GitHub<i class=\"icon-external\"></i></a>，都是用Python写的， 欢迎 Pull Request</p><p>就是这样</p>",
        "image_url": "",
        "title": "刷LeetCode",
        "excerpt_title": "",
        "excerpt": "很早之前就开始刷了，上面的题目大多很无聊，说白了最多就是考一些很奇怪的trick，代码写起来又很烦琐，更可恶的是有些题用Python还特别扭。实在没动力刷。<a class=\"\" data-title=\"刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程\" data-editable=\"true\" href=\"http://www.zhihu.com/question/24604588\">刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程</a> 后来，突然一想，其实可以<a class=\"\" data-title=\"把用到的函数合并到同一个Python文件 - impress your cat - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19938032\">把用到的函…</a>"
    },
    {
        "type": "article",
        "updated": 1423838433,
        "id": 19955795,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1423838397,
        "url": "",
        "content": "<blockquote><p>One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!</p><p>— <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\" target=\"_blank\" rel=\"nofollow noreferrer\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)<i class=\"icon-external\"></i></a><br></p></blockquote><p>要想找工作，不妨先忽略萧井陌说的。他整天念叨来念叨去，就是SICP，CSAPP，CLRS。我的感觉是他自己根本就没看完这三本书，也许我是错的。但是，无论你看没看过这三本书，做没做完过这上面的习题，和找不找的到工作，应该是没啥关系的。我猜连轮子哥都没刷完其中任意一本的所有习题，不照样能去微软。一直就没找到足够好的反面例子。今天终于找到了，<a class=\"internal\" href=\"http://www.zhihu.com/question/27129103/answer/35545866\">如何看待Thomas Cormen所说看完《算法导论》需要的时间 ？ - 白荣东的回答</a>。这可是几乎刷完了也找不到工作。</p><p>我说，比如像我这种连简历都过不去的弱渣，要是听萧井陌的，肯定会饿死的。写简历要是小心翼翼地把所有buzzword都去掉，简历根本就没人看。我是怎么知道的？我找不到工作，只好到处投简历，可是根本就没人理。想A/B test也没机会啊。终于有一家公司，从两种不同渠道投了两份不同的简历，简历A没有任何buzzword。简历B上有一些buzzword。两份简历时间是错开的。结果简历A没有任何回应。简历B被很干脆的拒了。</p><p>还是有个段子说的对，简历最前面应该写精通写C, C++, Java, Objective-C, C#, Go, Node.js, JavaScript, PHP, D, Rust, COBOL, FORTRAN, BASIC, Logo, Ada, Bash, csh, Perl, Ruby, Pascal, ActionScript, Vala, Python, F#, Erlang, Boo, Scala, Groovy, Clojure, Whiley, Yeti, Scheme, Tcl, Lua, Forth, CommonLisp, Elisp, Haskell, Standard ML, OCaml, Prolog, CLU, Icon, Self, Io, SETL, SNOBOL, Mercury, REBOL, Oz, Matlab/Octave, S/R, Nim, occam-pi, APL, A+, J, K, ABC, Smalltalk, MUMPS, Elixir, Julia, Swift, Hack, TypeScript, ATS, ABAP, Haxe, Pyret .... 等语言的 Hello, world。</p><p>当然很多人给的求职的建议都是很诚恳的。内容往往是他们认为比较合理的招聘过程是怎么样的，实际上可能正如他们所说，也可能有很大的区别。我认为，简历上就应该写精通，熟练 ... 而不需要任何犹豫。简历根本就没人看，那上面用词再合理也没有任何意义。说学历不重要的人，他们找第一份工作的时候，简历上肯定也写了学历。有一家公司，我投过去的简历估计是buzzword match了，但人家回的邮件就只问一个问题，有没有学历，我回没有，然后就没有然后了。就不黑了，因为还有更可恶的要黑。</p><p>只有非常少数的简历最终有机会电话面试。比如大半年前，意外的有了一次电话面试的机会，是一家后来我才知道叫耳语的公司。他们自称是从美国回来开分舵的，各种说法听上去好像逼格很高的样子。我想面试体验总该比国内的平均水平好一点吧。结果，可以肯定这是在我仅有的几次电话面试里体验最糟糕的。就是一种很奇怪的(国内很常见的)套路，就是问各种底层怎么实现，差不多就是让你讲一下怎么写一个Erlang解释器。Erlang解释器的实现可复杂了，想光靠说就能说明白，我真的办不到啊。远比这糟糕的是，他们试图让我相信在别的语言的语言里，比如Akka，在Erlang擅长的地方能做的和Erlang一样好。另外他们还想让我相信，实时搜索引擎等于反向代理+ElasticSearch。不知道哪个问题上，我说这个之前写过，略复杂，要不就看我之前写的代码吧，竟然能告诉我不要看代码，要直接给他讲明白，这可是电话面试啊，连纸和笔都没有的。</p><p>还有一些奇怪的情况是，有些公司要有电话面试机会之前得先做笔试题。笔试题倒是不难，有一题该死的算法题。算法题也不难，玩OI/ACM的，估计10分钟就做出来了，毕竟只要不到20行代码。虽然算法渣也只能硬着头皮做了，花了差不多一下午的时间才搞定。 其实就是这个题目，<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\"><span class=\"invisible\">http://</span><span class=\"visible\">zhuanlan.zhihu.com/impr</span><span class=\"invisible\">ess-your-cat/19954774</span><span class=\"ellipsis\"></span></a>。之后却发现因为数据太弱，所以怎么都排不到前面去，只好贴一堆让有些排名很前面的代码难堪的数据泄愤。</p><p>顺便求介绍工作。也顺便感谢之前所有帮忙介绍工作的。</p>",
        "image_url": "",
        "title": "别听萧井陌的",
        "excerpt_title": "",
        "excerpt": "One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!— <a class=\"\" data-title=\"E.W.Dijkstra Archive: The Humble Programmer (EWD 340)\" data-editable=\"true\" href=\"http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)</a> 要想找工作，不妨先忽略萧井陌说的。他整天念…"
    },
    {
        "type": "article",
        "updated": 1423640045,
        "id": 19954774,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1423640045,
        "url": "",
        "content": "<p><a href=\"https://link.zhihu.com/?target=http%3A//www.spoj.com/problems/POUR1/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SPOJ.com - Problem POUR1<i class=\"icon-external\"></i></a></p><p>这题不知道为啥数据范围取的那么小。那么就自己来补一组数据吧</p><p>输入</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>300\n179424691\n179424697\n1\n179424691\n179424719\n1\n179424691\n179424731\n1\n179424691\n179424743\n1\n179424691\n179424779\n1\n179424691\n179424787\n1\n179424691\n179424793\n1\n179424691\n179424797\n1\n179424691\n179424799\n1\n179424691\n179424821\n1\n179424691\n179424871\n1\n179424691\n179424887\n1\n179424691\n179424893\n1\n179424691\n179424899\n1\n179424691\n179424907\n1\n179424691\n179424911\n1\n179424691\n179424929\n1\n179424691\n179424937\n1\n179424691\n179424941\n1\n179424691\n179424977\n1\n179424691\n179424989\n1\n179424691\n179425003\n1\n179424691\n179425019\n1\n179424691\n179425027\n1\n179424697\n179424719\n1\n179424697\n179424731\n1\n179424697\n179424743\n1\n179424697\n179424779\n1\n179424697\n179424787\n1\n179424697\n179424793\n1\n179424697\n179424797\n1\n179424697\n179424799\n1\n179424697\n179424821\n1\n179424697\n179424871\n1\n179424697\n179424887\n1\n179424697\n179424893\n1\n179424697\n179424899\n1\n179424697\n179424907\n1\n179424697\n179424911\n1\n179424697\n179424929\n1\n179424697\n179424937\n1\n179424697\n179424941\n1\n179424697\n179424977\n1\n179424697\n179424989\n1\n179424697\n179425003\n1\n179424697\n179425019\n1\n179424697\n179425027\n1\n179424719\n179424731\n1\n179424719\n179424743\n1\n179424719\n179424779\n1\n179424719\n179424787\n1\n179424719\n179424793\n1\n179424719\n179424797\n1\n179424719\n179424799\n1\n179424719\n179424821\n1\n179424719\n179424871\n1\n179424719\n179424887\n1\n179424719\n179424893\n1\n179424719\n179424899\n1\n179424719\n179424907\n1\n179424719\n179424911\n1\n179424719\n179424929\n1\n179424719\n179424937\n1\n179424719\n179424941\n1\n179424719\n179424977\n1\n179424719\n179424989\n1\n179424719\n179425003\n1\n179424719\n179425019\n1\n179424719\n179425027\n1\n179424731\n179424743\n1\n179424731\n179424779\n1\n179424731\n179424787\n1\n179424731\n179424793\n1\n179424731\n179424797\n1\n179424731\n179424799\n1\n179424731\n179424821\n1\n179424731\n179424871\n1\n179424731\n179424887\n1\n179424731\n179424893\n1\n179424731\n179424899\n1\n179424731\n179424907\n1\n179424731\n179424911\n1\n179424731\n179424929\n1\n179424731\n179424937\n1\n179424731\n179424941\n1\n179424731\n179424977\n1\n179424731\n179424989\n1\n179424731\n179425003\n1\n179424731\n179425019\n1\n179424731\n179425027\n1\n179424743\n179424779\n1\n179424743\n179424787\n1\n179424743\n179424793\n1\n179424743\n179424797\n1\n179424743\n179424799\n1\n179424743\n179424821\n1\n179424743\n179424871\n1\n179424743\n179424887\n1\n179424743\n179424893\n1\n179424743\n179424899\n1\n179424743\n179424907\n1\n179424743\n179424911\n1\n179424743\n179424929\n1\n179424743\n179424937\n1\n179424743\n179424941\n1\n179424743\n179424977\n1\n179424743\n179424989\n1\n179424743\n179425003\n1\n179424743\n179425019\n1\n179424743\n179425027\n1\n179424779\n179424787\n1\n179424779\n179424793\n1\n179424779\n179424797\n1\n179424779\n179424799\n1\n179424779\n179424821\n1\n179424779\n179424871\n1\n179424779\n179424887\n1\n179424779\n179424893\n1\n179424779\n179424899\n1\n179424779\n179424907\n1\n179424779\n179424911\n1\n179424779\n179424929\n1\n179424779\n179424937\n1\n179424779\n179424941\n1\n179424779\n179424977\n1\n179424779\n179424989\n1\n179424779\n179425003\n1\n179424779\n179425019\n1\n179424779\n179425027\n1\n179424787\n179424793\n1\n179424787\n179424797\n1\n179424787\n179424799\n1\n179424787\n179424821\n1\n179424787\n179424871\n1\n179424787\n179424887\n1\n179424787\n179424893\n1\n179424787\n179424899\n1\n179424787\n179424907\n1\n179424787\n179424911\n1\n179424787\n179424929\n1\n179424787\n179424937\n1\n179424787\n179424941\n1\n179424787\n179424977\n1\n179424787\n179424989\n1\n179424787\n179425003\n1\n179424787\n179425019\n1\n179424787\n179425027\n1\n179424793\n179424797\n1\n179424793\n179424799\n1\n179424793\n179424821\n1\n179424793\n179424871\n1\n179424793\n179424887\n1\n179424793\n179424893\n1\n179424793\n179424899\n1\n179424793\n179424907\n1\n179424793\n179424911\n1\n179424793\n179424929\n1\n179424793\n179424937\n1\n179424793\n179424941\n1\n179424793\n179424977\n1\n179424793\n179424989\n1\n179424793\n179425003\n1\n179424793\n179425019\n1\n179424793\n179425027\n1\n179424797\n179424799\n1\n179424797\n179424821\n1\n179424797\n179424871\n1\n179424797\n179424887\n1\n179424797\n179424893\n1\n179424797\n179424899\n1\n179424797\n179424907\n1\n179424797\n179424911\n1\n179424797\n179424929\n1\n179424797\n179424937\n1\n179424797\n179424941\n1\n179424797\n179424977\n1\n179424797\n179424989\n1\n179424797\n179425003\n1\n179424797\n179425019\n1\n179424797\n179425027\n1\n179424799\n179424821\n1\n179424799\n179424871\n1\n179424799\n179424887\n1\n179424799\n179424893\n1\n179424799\n179424899\n1\n179424799\n179424907\n1\n179424799\n179424911\n1\n179424799\n179424929\n1\n179424799\n179424937\n1\n179424799\n179424941\n1\n179424799\n179424977\n1\n179424799\n179424989\n1\n179424799\n179425003\n1\n179424799\n179425019\n1\n179424799\n179425027\n1\n179424821\n179424871\n1\n179424821\n179424887\n1\n179424821\n179424893\n1\n179424821\n179424899\n1\n179424821\n179424907\n1\n179424821\n179424911\n1\n179424821\n179424929\n1\n179424821\n179424937\n1\n179424821\n179424941\n1\n179424821\n179424977\n1\n179424821\n179424989\n1\n179424821\n179425003\n1\n179424821\n179425019\n1\n179424821\n179425027\n1\n179424871\n179424887\n1\n179424871\n179424893\n1\n179424871\n179424899\n1\n179424871\n179424907\n1\n179424871\n179424911\n1\n179424871\n179424929\n1\n179424871\n179424937\n1\n179424871\n179424941\n1\n179424871\n179424977\n1\n179424871\n179424989\n1\n179424871\n179425003\n1\n179424871\n179425019\n1\n179424871\n179425027\n1\n179424887\n179424893\n1\n179424887\n179424899\n1\n179424887\n179424907\n1\n179424887\n179424911\n1\n179424887\n179424929\n1\n179424887\n179424937\n1\n179424887\n179424941\n1\n179424887\n179424977\n1\n179424887\n179424989\n1\n179424887\n179425003\n1\n179424887\n179425019\n1\n179424887\n179425027\n1\n179424893\n179424899\n1\n179424893\n179424907\n1\n179424893\n179424911\n1\n179424893\n179424929\n1\n179424893\n179424937\n1\n179424893\n179424941\n1\n179424893\n179424977\n1\n179424893\n179424989\n1\n179424893\n179425003\n1\n179424893\n179425019\n1\n179424893\n179425027\n1\n179424899\n179424907\n1\n179424899\n179424911\n1\n179424899\n179424929\n1\n179424899\n179424937\n1\n179424899\n179424941\n1\n179424899\n179424977\n1\n179424899\n179424989\n1\n179424899\n179425003\n1\n179424899\n179425019\n1\n179424899\n179425027\n1\n179424907\n179424911\n1\n179424907\n179424929\n1\n179424907\n179424937\n1\n179424907\n179424941\n1\n179424907\n179424977\n1\n179424907\n179424989\n1\n179424907\n179425003\n1\n179424907\n179425019\n1\n179424907\n179425027\n1\n179424911\n179424929\n1\n179424911\n179424937\n1\n179424911\n179424941\n1\n179424911\n179424977\n1\n179424911\n179424989\n1\n179424911\n179425003\n1\n179424911\n179425019\n1\n179424911\n179425027\n1\n179424929\n179424937\n1\n179424929\n179424941\n1\n179424929\n179424977\n1\n179424929\n179424989\n1\n179424929\n179425003\n1\n179424929\n179425019\n1\n179424929\n179425027\n1\n179424937\n179424941\n1\n179424937\n179424977\n1\n179424937\n179424989\n1\n179424937\n179425003\n1\n179424937\n179425019\n1\n179424937\n179425027\n1\n179424941\n179424977\n1\n179424941\n179424989\n1\n179424941\n179425003\n1\n179424941\n179425019\n1\n179424941\n179425027\n1\n179424977\n179424989\n1\n179424977\n179425003\n1\n179424977\n179425019\n1\n179424977\n179425027\n1\n179424989\n179425003\n1\n179424989\n179425019\n1\n179424989\n179425027\n1\n179425003\n179425019\n1\n179425003\n179425027\n1\n179425019\n179425027\n1\n</code></pre></div><p>输出<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>119616460\n76896300\n197367180\n317443728\n285448440\n37380152\n35181320\n115102664\n272459796\n160102088\n123603736\n113513640\n159883476\n258785760\n222619656\n29360420\n117606176\n242150560\n255500936\n253453260\n190262580\n66709236\n356661600\n113208540\n32622672\n21108788\n140419344\n288830064\n342900616\n171948712\n236840664\n246269260\n63666848\n127865936\n177536108\n172101332\n95930088\n160627916\n184455404\n275324280\n218300192\n297080436\n120470960\n140098848\n321322932\n20059920\n289254624\n59808240\n29904120\n11961648\n221642340\n106684988\n101213964\n8971236\n330704476\n108599216\n106800476\n45371788\n3987216\n232870500\n175686796\n201639324\n174486528\n35561676\n47290268\n2658144\n98557316\n289472120\n253991052\n59808244\n194376816\n243505028\n127333700\n184861876\n10554396\n326951812\n46137804\n216229896\n261384292\n158064716\n338460452\n195373692\n177612456\n87099432\n269991656\n300500160\n136307256\n176786264\n32396156\n46068548\n219296928\n244670132\n100477868\n93035064\n192240824\n211629228\n229888032\n124600564\n205740456\n105814636\n196929684\n303313396\n297112092\n77689104\n25373208\n309776252\n347179820\n350568596\n96213340\n133936884\n269137172\n153792672\n279105224\n35884956\n187968836\n23403236\n73099004\n44069256\n352868848\n196245920\n190299076\n148324544\n68136020\n48732676\n351600264\n105946120\n214669064\n182415312\n240197852\n119616524\n215309748\n299041320\n274414404\n162336748\n165070848\n20312244\n237097112\n257175612\n260455424\n187006188\n349280396\n237679688\n237974052\n88824200\n96357812\n114460712\n128587848\n179424792\n119616528\n76896344\n64408912\n251958284\n308610728\n74478236\n81842912\n261534528\n205810868\n353865704\n305507204\n183325424\n296600328\n228980344\n238174652\n217763564\n358849592\n149520672\n300657828\n55821060\n321469512\n77398952\n176162580\n69251696\n92430988\n66643520\n214313036\n27910536\n198114984\n87099464\n100219316\n333886356\n97868076\n309009436\n334382660\n267228492\n7176992\n272459960\n96120456\n115936064\n192426668\n65704880\n181440896\n79324688\n235715064\n133753112\n173129300\n272725764\n206610436\n49840236\n211629320\n325468356\n326951976\n206006336\n327914432\n113635756\n253035112\n226417140\n11830212\n308103396\n163747016\n313993536\n32622704\n230689136\n99680492\n161482400\n334101536\n250107440\n92275664\n88019772\n346685456\n233796128\n208520880\n32204476\n119616592\n59808296\n107654936\n29904148\n290497468\n330141836\n146198076\n55821088\n175906800\n92806004\n255544628\n15379280\n119616596\n256321284\n199361000\n99680504\n342538472\n74760380\n162336844\n321469684\n150064500\n131008696\n123187284\n269137352\n59808300\n23923320\n283302500\n85440436\n211629412\n7974440\n200127828\n352869084\n241102292\n179424908\n163113560\n311003196\n147761700\n235815636\n323840148\n216805152\n326809752\n257175784\n199361020\n248434508\n263156556\n337101408\n322044780\n273037976\n86389796\n117554288\n89712464\n299041556\n254185348\n346888252\n48493232\n247207740\n329556080\n179424936\n125597468\n124217280\n250107532\n8752436\n135565540\n139552744\n74760400\n34727412\n340447396\n175252308\n299041636\n82811532\n324673804\n186602000\n153792852\n23923332\n321076328\n134568756\n149520844\n269137532\n</code></pre></div><p>就这样吧</p>",
        "image_url": "",
        "title": "Pouring Water",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"SPOJ.com - Problem POUR1\" data-editable=\"true\" href=\"http://www.spoj.com/problems/POUR1/\">SPOJ.com - Problem POUR1</a>这题不知道为啥数据范围取的那么小。那么就自己来补一组数据吧输入300\n179424691\n179424697\n1\n179424691\n179424719\n1\n179424691\n179424731\n1\n179424691\n179424743\n1\n179424691\n179424779\n1\n179424691\n179424787\n1\n179424691\n179424…"
    },
    {
        "type": "article",
        "updated": 1422708144,
        "id": 19946685,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1422708144,
        "url": "",
        "content": "<p>没有多大进展。时间都花在改行号上了。所以，在这里求<a href=\"http://www.zhihu.com/question/26873718\" class=\"internal\">tutorial中的代码怎么管理比较好？ - LaTeX</a> 的答案。</p><p>其他还有<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19944629\">弄了个Erlang的Web Shell - impress your cat - 知乎专栏</a>。 所以，假如你不知道用Erlang写点啥的话，还不如赶紧来写个Erlang Web IDE。另外，OSv 0.17已经发布了。所以，现在用官方镜像已经能启动Erlang了。Erlang Web IDE写好了之后，也可以在OSv上运行一下试试，看在OSv上的Erlang还有没有问题(肯定是有的)。<br></p><p>另外就是不知道为啥gitcafe上镜像失效了。懒得折腾了。以后的讨论直接去GitHub吧。仓库地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn · GitHub <i class=\"icon-external\"></i></a>。觉得哪里写的不好，改好了直接Pull Request吧。</p><p>接下来一段不知道多长的时间，我暂时没法继续写《21天学通Erlang》了。所以，就看你们能写多少了。<br></p><p>就是这样</p>",
        "image_url": "",
        "title": "最近的进展",
        "excerpt_title": "",
        "excerpt": "没有多大进展。时间都花在改行号上了。所以，在这里求<a href=\"http://www.zhihu.com/question/26873718\" class=\"internal\">tutorial中的代码怎么管理比较好？ - LaTeX</a> 的答案。其他还有<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19944629\">弄了个Erlang的Web Shell - impress your cat - 知乎专栏</a>。 所以，假如你不知道用Erlang写点啥的话，还不如赶紧来写个Erlang Web IDE。另外…"
    },
    {
        "type": "article",
        "updated": 1459343580,
        "id": 19946311,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1422624791,
        "url": "",
        "content": "<p>在看<a href=\"http://www.zhihu.com/question/27859000\" class=\"internal\">为什么区区Javac需要开这么多进程？ - Java</a>这个问题时， 我去试了一下JamVM。结果有点小问题，得去debian里偷个patch过来<a href=\"https://link.zhihu.com/?target=http%3A//bazaar.launchpad.net/%7Eopenjdk/openjdk/openjdk7/revision/579/patches/it-jamvm-2.0.diff%23patches/it-jamvm-2.0.diff\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">~openjdk/openjdk/openjdk7 : revision 579<i class=\"icon-external\"></i></a>。且编译参数和作者博客里写的不一样了。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>./configure --with-java-runtime-library=openjdk7\n</code></pre></div><p>要和openjdk一起用，还得替换 libjvm.so (这是怎么想的？)。还好，我有mount大法。  </p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ userns spawn -n jam --user\n# mount -B lib/libjvm.so /usr/lib/jvm/java-1.7.0-..../jre/lib/amd64/server/libjvm.so\n# java -version\njava version \"1.7.0_71\"\nOpenJDK Runtime Environment (.....)\nJamVM (build 2.0.0, inline-threaded interpreter)\n#\n</code></pre></div><p>就是这样</p>",
        "image_url": "",
        "title": "运行JamVM",
        "excerpt_title": "",
        "excerpt": "在看<a href=\"http://www.zhihu.com/question/27859000\" class=\"internal\">为什么区区Javac需要开这么多进程？ - Java</a>这个问题时， 我去试了一下JamVM。结果有点小问题，得去debian里偷个patch过来<a href=\"https://link.zhihu.com/?target=http%3A//bazaar.launchpad.net/%7Eopenjdk/openjdk/openjdk7/revision/579/patches/it-jamvm-2.0.diff%23patches/it-jamvm-2.0.diff\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">~openjdk/openjdk/openjdk7 : revision 579<i class=\"icon-external\"></i></a>。且编译参数和作者博客里写的不一样了。./configure --with-java-runtime-library=ope…"
    },
    {
        "type": "article",
        "updated": 1459343536,
        "id": 19945892,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1422595822,
        "url": "",
        "content": "<p>这种说法显然是错的。但是我发现我证明不了这是错的。</p><p>比如 <br></p><p><img data-rawheight=\"573\" data-rawwidth=\"757\" src=\"https://pic4.zhimg.com/d5406955b158e2d249f3c221ccaa19f3_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"757\" data-original=\"https://pic4.zhimg.com/d5406955b158e2d249f3c221ccaa19f3_r.jpg\">图来自  <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.cis.upenn.edu/%7Ecis570/slides/lecture04.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cis.upenn.edu/~cis570/s</span><span class=\"invisible\">lides/lecture04.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>这个完全可以用Datalog表示</p><img data-rawheight=\"752\" data-rawwidth=\"709\" src=\"https://pic2.zhimg.com/018c02c609c0013ddbc914f32661e625_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"709\" data-original=\"https://pic2.zhimg.com/018c02c609c0013ddbc914f32661e625_r.jpg\"><img data-rawheight=\"760\" data-rawwidth=\"710\" src=\"https://pic2.zhimg.com/1f0586150d1b4735c3e31d48862d2bcd_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic2.zhimg.com/1f0586150d1b4735c3e31d48862d2bcd_r.jpg\">",
        "image_url": "",
        "title": "编译原理不就是Datalog嘛",
        "excerpt_title": "",
        "excerpt": "这种说法显然是错的。但是我发现我证明不了这是错的。比如 图来自 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.cis.upenn.edu/%7Ecis570/slides/lecture04.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cis.upenn.edu/~cis570/s</span><span class=\"invisible\">lides/lecture04.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>这个完全可以用Datalog表示"
    },
    {
        "type": "article",
        "updated": 1422532162,
        "id": 19945225,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1422531863,
        "url": "",
        "content": "<p><a class=\"internal\" href=\"http://www.zhihu.com/question/27465406/answer/36806416\">如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答</a>中提出CERL没有源代码没法比较。没有，自己写一个就是了嘛。不就是setjmp/longjmp么，有啥难的。早就想写一个了，今天终于想起来了。写了个64位的，且最小的栈可以只占4K内存。要知道，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//blog.qiniu.com/%3Fp%3D1059\" target=\"_blank\" rel=\"nofollow noreferrer\">［ECUG专题回顾］《再谈CERL：详论Go与Erlang的并发编程模型差异》<i class=\"icon-external\"></i></a> ，这里提到了ESP/EBP，说明CERL是32位的，这样其实是有问题的。32位的程序进程的地址空间只有4G，而一个coroutine的栈要占用4K，那么就算全是coroutine的栈，也只能有1M的coroutine，完全不够用啊啊，看样子还做不到栈最少只占4K内存。所以，这可比CERL强多了。那就叫CERL++好了。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;setjmp.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/mman.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#define PAGE_SIZE  (4096)</span>\n<span class=\"cp\">#define STACK_SIZE (2048*PAGE_SIZE)</span>\n<span class=\"cp\">#define JB(a,b) ((a)[0].__jmpbuf[(b)])</span>\n\n<span class=\"k\">enum</span> <span class=\"n\">jb</span> <span class=\"p\">{</span><span class=\"n\">JB_RBX</span><span class=\"p\">,</span><span class=\"n\">JB_RBP</span><span class=\"p\">,</span><span class=\"n\">JB_R12</span><span class=\"p\">,</span><span class=\"n\">JB_R13</span><span class=\"p\">,</span><span class=\"n\">JB_R14</span><span class=\"p\">,</span><span class=\"n\">JB_R15</span><span class=\"p\">,</span><span class=\"n\">JB_RSP</span><span class=\"p\">,</span><span class=\"n\">JB_PC</span><span class=\"p\">};</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"n\">jb_int_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">co</span> <span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">co</span> <span class=\"o\">*</span><span class=\"n\">prev</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">;</span>\n  <span class=\"kt\">jmp_buf</span> <span class=\"kt\">jmp_buf</span><span class=\"p\">;</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">stack</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">co_t</span><span class=\"p\">;</span>\n\n<span class=\"n\">co_t</span> <span class=\"n\">exit_co</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"o\">*</span><span class=\"n\">curr_co</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"kt\">jmp_buf</span> <span class=\"n\">main_buf</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_yield</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">exit_co</span><span class=\"p\">.</span><span class=\"kt\">jmp_buf</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">main_buf</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"n\">last_co</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">last_co</span><span class=\"o\">!=</span><span class=\"n\">last_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"nl\">next</span><span class=\"p\">:</span><span class=\"o\">&amp;</span><span class=\"n\">exit_co</span><span class=\"p\">;</span>\n    <span class=\"n\">munmap</span><span class=\"p\">(</span><span class=\"n\">last_co</span><span class=\"o\">-&gt;</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">STACK_SIZE</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_exit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">main_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_start</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">register</span> <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"rbx\"</span><span class=\"p\">);</span>\n  <span class=\"k\">register</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span> <span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"r12\"</span><span class=\"p\">);</span>\n  <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span>\n  <span class=\"n\">co_exit</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"n\">jb_int_t</span> <span class=\"nf\">translate_address</span><span class=\"p\">(</span><span class=\"n\">jb_int_t</span> <span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">jb_int_t</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n  <span class=\"n\">asm</span> <span class=\"k\">volatile</span><span class=\"p\">(</span><span class=\"s\">\"xor %%fs:0x30,%0</span><span class=\"se\">\\n</span><span class=\"s\">rol $0x11,%0</span><span class=\"se\">\\n</span><span class=\"s\">\"</span> <span class=\"o\">:</span><span class=\"s\">\"=g\"</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"s\">\"0\"</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">));</span>\n  <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_create</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">),</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">mmap</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"n\">STACK_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_READ</span><span class=\"o\">|</span><span class=\"n\">PROT_WRITE</span><span class=\"p\">,</span>\n                     <span class=\"n\">MAP_PRIVATE</span><span class=\"o\">|</span><span class=\"n\">MAP_ANONYMOUS</span><span class=\"o\">|</span><span class=\"n\">MAP_STACK</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">mprotect</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_NONE</span><span class=\"p\">);</span>\n  <span class=\"n\">mprotect</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"o\">+</span><span class=\"n\">STACK_SIZE</span><span class=\"o\">-</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_NONE</span><span class=\"p\">);</span>\n  <span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"n\">new_co</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">stack</span><span class=\"o\">+</span><span class=\"n\">STACK_SIZE</span><span class=\"o\">-</span><span class=\"n\">PAGE_SIZE</span><span class=\"o\">-</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">co_t</span><span class=\"p\">));</span>\n  <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">curr_co</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"p\">;</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_PC</span><span class=\"p\">)</span>  <span class=\"o\">=</span> <span class=\"n\">translate_address</span><span class=\"p\">((</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">co_start</span><span class=\"p\">);</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_RSP</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">translate_address</span><span class=\"p\">((</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">new_co</span><span class=\"p\">);</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_RBX</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">f</span><span class=\"p\">;</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_R12</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">arg</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">my_coro</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">uintptr_t</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"n\">arg</span><span class=\"p\">;</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%lu</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">co_yield</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n  <span class=\"n\">co_main</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br>translate_address代码摘自 <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.huji.ac.il/course/2010/os/Ex/ex2/demo.c.txt\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cs.huji.ac.il/course/20</span><span class=\"invisible\">10/os/Ex/ex2/demo.c.txt</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>至于 JB*的定义，自己去看glibc的头文件 </p>",
        "image_url": "",
        "title": "CERL++",
        "excerpt_title": "",
        "excerpt": "<a data-title=\"如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答\" data-editable=\"true\" class=\"\" href=\"http://www.zhihu.com/question/27465406/answer/36806416\">如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答</a>中提出CERL没有源代码没法比较。没有，自己写一个就是了嘛。不就是setjmp/longjmp么，有啥难的。早就想写一个了，今天终于想起来了。写了个64位的，且最小的栈可以只占4K内存。要知道，<a class=\"\" data-title=\"［ECUG专题回顾］《再谈CERL：详论Go与Erlang的并发编程模型差异》\" data-editable=\"true\" href=\"http://blog.qiniu.com/?p=1059\">［ECUG专题回顾…</a>"
    },
    {
        "type": "article",
        "updated": 1459343473,
        "id": 19944629,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1422456136,
        "url": "",
        "content": "<p>各种复制粘贴之后，总算运行起来了，尽管还有各种问题。Erlang Web IDE可以开工了，地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bhuztez/ewe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/ewe<i class=\"icon-external\"></i></a></p><img data-rawheight=\"398\" data-rawwidth=\"759\" src=\"https://pic4.zhimg.com/241f533ddc10c7fa8547a597c3714f03_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic4.zhimg.com/241f533ddc10c7fa8547a597c3714f03_r.jpg\"><p>... 长度补丁，此处省略400字 </p>",
        "image_url": "",
        "title": "弄了个Erlang的Web Shell",
        "excerpt_title": "",
        "excerpt": "各种复制粘贴之后，总算运行起来了，尽管还有各种问题。Erlang Web IDE可以开工了，地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bhuztez/ewe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/ewe<i class=\"icon-external\"></i></a>... 长度补丁，此处省略400字 "
    },
    {
        "type": "article",
        "updated": 1459343458,
        "id": 19938032,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421656017,
        "url": "",
        "content": "<p>重新开始做LeetCode上的题，顺便整理一下之前写的答案。有些题目之间代码都差不多，一个题目的写法觉得不合适要改，那就有类似的几个题要改。还是挺麻烦的。且不考虑LeetCode对Python很不友好这个因素。其实最大的问题就是怎么把用到的函数合并到同一个Python文件里。这样只管import就好了。</p><p>这也不难。 毕竟Python标准库里已经有symtable了。只要不from libxxx import *，库函数不用全局变量，……，并不需要自己去分析ast的内容。写了个脚本，还不能处理class以及嵌套函数，但结果已经勉强可以接受了。</p><p>好了，继续做题去</p>",
        "image_url": "",
        "title": "把用到的函数合并到同一个Python文件",
        "excerpt_title": "",
        "excerpt": "重新开始做LeetCode上的题，顺便整理一下之前写的答案。有些题目之间代码都差不多，一个题目的写法觉得不合适要改，那就有类似的几个题要改。还是挺麻烦的。且不考虑LeetCode对Python很不友好这个因素。其实最大的问题就是怎么把用到的函数合并到同一个Pyth…"
    },
    {
        "type": "article",
        "updated": 1421416583,
        "id": 19936493,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421416583,
        "url": "",
        "content": "<blockquote><p>Though the Chinese should adore APL, it's FORTRAN they put their money on</p><p>——Alan J. Perlis<br></p></blockquote><p>举个不正确的例子。比如在J语言里等差数列求和可以写成这样。当然了，实际程序不可能这么写的。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum =: 2%~#*~{.+{:\n</code></pre></div>假如把顺序倒过来，我们就得到了<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>和曰首项加末项乘以项数除以2\n</code></pre></div><p>这可比用奇奇怪怪的符号好多了。</p><p>有人抱怨combinatory logic风格不适合地球人学习。可是我觉得中文很多时候就是combinatory logic风格的。你可能没注意到，正如APL指出的那样，很多时候组合子并不需要用一个符号来表示，比如 x (f g h) y 可以用来表示  (x f y) g (x h y) 。<br></p><p>有人抱怨说，这个语法没法用BNF表示。不能用BNF表示怎么了，Backus自己那篇Can Programming be Liberated from von Neumann Style里那语言估计要实现出来语法也没法用BNF表示。那和APL其实也没多大区别。</p><p>有人抱怨会有歧义。有歧义怎么了，出现歧义不让运行就是了。</p><p>有人抱怨这里分词是个问题。这里怎么会有问题，语义都有了，还怕啥。我看这个J语言就得考虑怎么把符号切开的问题了。这个是可以做到的，毕竟从某种角度看也可以认为是满足close-world assumption的</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>verb([first,element]).\nverb([plus]).\nverb([last,element]).\n\nsymbol([], S, S).\n\nsymbol(Sym, S0, S) :-\n  [H|S1] = S0,\n  symbol(Sym1, S1, S),\n  [H|Sym1] = Sym.\n\nverb(V, S0, S) :-\n   symbol(V, S0, S),\n   verb(V).\n\nfork(fork(V1,V2,V3), S0, S) :-\n  verb(V1, S0, S1),\n  verb(V2, S1, S2),\n  verb(V3, S2, S).\n</code></pre></div><p>你看这个问题不就解决了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>?- fork(X, [first,element,plus,last,element], []).\nX = fork([first, element], [plus], [last, element]) ;\nfalse.\n\n?- \n</code></pre></div><p>尽管实际上你肯定不会用这个算法来解析。这里只是为了让你相信这是可行的。</p><p>又有人抱怨算法复杂度不会低的。 可是，parser里都做了不少type inference该干的活了，这复杂度高一点就高一点嘛。<br></p><p>现在连平板都很常见了，所以，APL可以不需要专用键盘了，不仅仅是APL。这相当于给了平板提供了类似Emacs那样的C-x M-x。只要背几个口诀，就能用真正的编程语言来操作平板，不知道比用傻乎乎的手势来操作高明到哪里去了。</p><p>我就是来吐个槽的。反正你们还会继续追捧最强大的LISP语言，认为Y-combinator是多么深奥多么有意义，认为能写CPS变换是了不起的成就，用Monad不就是自函子上的幺半群来提升逼格的，全然无视大APL的时代马上就要来了。</p>",
        "image_url": "",
        "title": "为什么你应该用中文写程序",
        "excerpt_title": "",
        "excerpt": "Though the Chinese should adore APL, it's FORTRAN they put their money on——Alan J. Perlis 举个不正确的例子。比如在J语言里等差数列求和可以写成这样。当然了，实际程序不可能这么写的。sum =: 2%~#*~{.+{:\n假如把顺序倒过来，我们就得到了和曰首项…"
    },
    {
        "type": "article",
        "updated": 1459343439,
        "id": 19935811,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421387889,
        "url": "",
        "content": "<blockquote><p>The fundamental cause of the trouble is that in the modern world the stupid are cocksure while the intelligent are full of doubt.<br>—— Bertrand Russell<br></p></blockquote><p>经常有人黑Erlang。当然这通常对一门语言来说是好事。很奇怪的是，有好多人在讲完自己使用Erlang的经验之后，非要找点Erlang的缺点出来才肯罢休，往往莫名其妙的把Erlang的优点当成缺点来黑。</p><p>有人看到一些用Erlang开发高可用，分布式软件的成功案例就能立即得出Erlang一定是难学的。Erlang是很容易学的。目前，无论用什么语言，要开发分布式程序，都不会像print \"Hello, world!\"那么容易。但是，难道Erlang只能用来写分布式程序么？即便是写分布式程序，用Erlang学也比用别的语言容易多了。</p><p>有人用X语言开发了个网络程序，结果优化了半天，才勉强跑分不输Erlang不优化的版本，就能立即得出结论Erlang不适合开发复杂的业务逻辑。实际上，Erlang就是为了完成复杂的业务逻辑而设计了。那个X语言连在data plane要跑赢为control plane设计的Erlang都那么难，问题才更严重呢。一群还在纠结Protocol Buffer和Thrift到底哪家强的语言，有什么脸来说自带ASN.1编译器的Erlang写不了复杂的逻辑。当然了，也可能是因为他们有把逻辑搞复杂的天赋。</p><p>我觉得<a class=\"internal\" href=\"http://www.zhihu.com/question/20405300/answer/37277635\"><span class=\"invisible\">http://www.</span><span class=\"visible\">zhihu.com/question/2040</span><span class=\"invisible\">5300/answer/37277635</span><span class=\"ellipsis\"></span></a>里说的就很不错。一群渣渣换用Erlang做出能上线运营的网游了。这要是不能说明Erlang强大，我想你需要购买一些Silver Bullet了。现在这情况就导致了，越是说Erlang的强大，Erlang就越是被边缘化。</p><p>所以，别再提Erlang支持高并发了。应该多讲讲Erlang是多么适合用来做快速原型开发之类的。而且Erlang根本就不支持高并发。我不觉得你能在Erlang里解决C10K的问题，因为这问题根本就不存在嘛。</p>",
        "image_url": "",
        "title": "别再提Erlang支持高并发了",
        "excerpt_title": "",
        "excerpt": "The fundamental cause of the trouble is that in the modern world the stupid are cocksure while the intelligent are full of doubt. —— Bertrand Russell 经常有人黑Erlang。当然这通常对一门语言来说是好事。很奇怪的是，有好多人在讲完自己使用Er…"
    },
    {
        "type": "article",
        "updated": 1421243772,
        "id": 19935107,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421243447,
        "url": "",
        "content": "<p>看到有个问题<a class=\"internal\" href=\"http://www.zhihu.com/question/27588523\">在 n 个整数里，找出2个数相加等于 sum 的所有整数？ - 程序员</a></p><p>感觉J语言里有一种直观的解法，直接按到X/2的距离排序就好了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   X =: 10\n   Y =: _5 + i.20\n   X\n10\n   Y\n_5 _4 _3 _2 _1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n   NB. 计算到X/2距离的两倍\n   |X-2*Y\n20 18 16 14 12 10 8 6 4 2 0 2 4 6 8 10 12 14 16 18\n   NB. 按到X/2的距离排序\n   Y/:|X-2*Y\n5 4 6 3 7 2 8 1 9 0 10 _1 11 _2 12 _3 13 _4 14 _5\n   NB. 现在只要找到连续的两个数，他们的和是X\n   NB. 掐头去尾排在一起，为了方便求和，再转一下\n   |: (}:,.}.)Y/:|X-2*Y\n5 4 6 3 7 2 8 1 9  0 10 _1 11 _2 12 _3 13 _4 14\n4 6 3 7 2 8 1 9 0 10 _1 11 _2 12 _3 13 _4 14 _5\n   NB. 求和\n   +/|: (}:,.}.)Y/:|X-2*Y\n9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9\n   NB. 判断是否等于X\n   X=+/|: (}:,.}.)Y/:|X-2*Y\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n   NB. 据此筛选出对应的数\n   (X&amp;=@:+/#|:)|:(}:,.}.)Y/:|X-2*Y\n 4  6\n 3  7\n 2  8\n 1  9\n 0 10\n_1 11\n_2 12\n_3 13\n_4 14\n   NB. 完工，不到40个字符就解决了\n   f=:4 :'(x&amp;=@:+/#|:)|:(}:,.}.)y/:|x-2*y'\n   10 f _5 + i.20\n 4  6\n 3  7\n 2  8\n 1  9\n 0 10\n_1 11\n_2 12\n_3 13\n_4 14\n</code></pre></div><p>P.S. 不知道为啥突然联想到在GitHub上约架的实在太弱了，在微博上约还差不多。</p>",
        "image_url": "",
        "title": "找出所有和为X的两个整数",
        "excerpt_title": "",
        "excerpt": "看到有个问题<a class=\"internal\" href=\"http://www.zhihu.com/question/27588523\">在 n 个整数里，找出2个数相加等于 sum 的所有整数？ - 程序员</a>感觉J语言里有一种直观的解法，直接按到X/2的距离排序就好了 X =: 10\n Y =: _5 + i.20\n X\n10\n Y\n_5 _4 _3 _2 _1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n NB. 计算到X/2距离的两倍\n |X…"
    },
    {
        "type": "article",
        "updated": 1421119549,
        "id": 19934099,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421119549,
        "url": "",
        "content": "<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   NB. 一直写不好八皇后问题，因为代码写起来很麻烦\n   NB. 看了曾老师的答案，感觉这个问题在J语言里有一种比较直观的解法\n   NB. 其实就是把这个问题分解成两个问题\n   NB. 1) 生成全排列，这样每条横线，每条竖线上都只有一个皇后\n   NB. 2) 检查每条斜线上是否最多只有一个皇后\n\n   NB. 生成全排列很简单\n   (i.!3)A.i.3\n0 1 2\n0 2 1\n1 0 2\n1 2 0\n2 0 1\n2 1 0\n   NB. 0表示空，1表示皇后\n   #:2^(i.!3)A.i.3\n0 0 1\n0 1 0\n1 0 0\n\n0 0 1\n1 0 0\n0 1 0\n\n0 1 0\n0 0 1\n1 0 0\n\n0 1 0\n1 0 0\n0 0 1\n\n1 0 0\n0 0 1\n0 1 0\n\n1 0 0\n0 1 0\n0 0 1\n\n   NB. 沿从右上往左下的斜线相加\n   +//.\"2 #:2^(i.!3)A.i.3\n0 0 3 0 0\n0 1 1 1 0\n0 1 1 1 0\n0 2 0 0 1\n1 0 0 2 0\n1 0 1 0 1\n\n   NB. 判断是否大于1\n   1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 0 0\n\n   NB. 因为是从上到下算下去的，得转一下\n   |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 0 0 0 0 0\n0 0 0 1 0 0\n1 0 0 0 0 0\n0 0 0 0 1 0\n0 0 0 0 0 0\n\n   NB. 按竖行分别取或\n   +./ |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n1 0 0 1 1 0\n\n   NB. 取反\n   -. +./ |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 1 1 0 0 1\n\n   NB. 定义d，是否在从右上往左下的斜线上皇后数小于等于1\n   d=:3 :'-.+./|:1&lt;+//.\"2 y'\n   d #:2^(i.!3)A.i.3\n0 1 1 0 0 1\n\n   NB. 取出对应的矩阵\n   (d#]) #:2^(i.!3)A.i.3\n0 0 1\n1 0 0\n0 1 0\n\n0 1 0\n0 0 1\n1 0 0\n\n1 0 0\n0 1 0\n0 0 1\n\n   NB. 把矩阵沿竖直方向翻转，这样找出左上往右下的斜线上皇后数小于等于1的\n   (|.@d#]) #:2^(i.!3)A.i.3\n0 0 1\n0 1 0\n1 0 0\n\n0 1 0\n1 0 0\n0 0 1\n\n1 0 0\n0 0 1\n0 1 0\n\n   NB. 定义q，用来找出所有N皇后矩阵\n   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'\n   # q 8\n92\n   q 4\n0 0 1 0\n1 0 0 0\n0 0 0 1\n0 1 0 0\n\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0\n   q 6\n0 0 0 0 1 0\n0 0 1 0 0 0\n1 0 0 0 0 0\n0 0 0 0 0 1\n0 0 0 1 0 0\n0 1 0 0 0 0\n\n0 0 0 1 0 0\n1 0 0 0 0 0\n0 0 0 0 1 0\n0 1 0 0 0 0\n0 0 0 0 0 1\n0 0 1 0 0 0\n\n0 0 1 0 0 0\n0 0 0 0 0 1\n0 1 0 0 0 0\n0 0 0 0 1 0\n1 0 0 0 0 0\n0 0 0 1 0 0\n\n0 1 0 0 0 0\n0 0 0 1 0 0\n0 0 0 0 0 1\n1 0 0 0 0 0\n0 0 1 0 0 0\n0 0 0 0 1 0\n\n   NB. 太棒了，不到80个字符就已经能解出八皇后问题了\n   d=:3 :'-.+./|:1&lt;+//.\"2 y'\n   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'\n</code></pre></div>",
        "image_url": "",
        "title": "八皇后问题",
        "excerpt_title": "",
        "excerpt": "NB. 一直写不好八皇后问题，因为代码写起来很麻烦\n NB. 看了曾老师的答案，感觉这个问题在J语言里有一种比较直观的解法\n NB. 其实就是把这个问题分解成两个问题\n NB. 1) 生成全排列，这样每条横线，每条竖线上都只有一个皇后\n NB. 2) 检查每条斜线上是否最…"
    },
    {
        "type": "article",
        "updated": 1421062853,
        "id": 19933594,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1421062853,
        "url": "",
        "content": "<p>比如下面这个程序<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>&gt;&gt;&gt; def subsets(a):\n...     if not a: yield ()\n...     else:\n...         for s in subsets(a[1:]):\n...             yield s\n...             yield (a[0],)+s\n... \n&gt;&gt;&gt; list(subsets([1,2,3]))\n[(), (1,), (2,), (1, 2), (3,), (1, 3), (2, 3), (1, 2, 3)]\n</code></pre></div><p>在J语言里<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   #: i. 2 ^ # 1 2 3\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\n   comb =: 3 : '#: i. 2 ^ # y'\n   (comb#]) 1 2 3\n0 0 0\n3 0 0\n2 0 0\n2 3 0\n1 0 0\n1 3 0\n1 2 0\n1 2 3\n</code></pre></div><p>可这样在短的数组后面自动补0了。需要用u &amp;. v。X (u &amp;. v) Y 相当于对于X, Y中每组对应元素x, y，计算v^:_1 ((v x) u (v y))。当v是&gt;时，就可以先取出box中的数，计算完再放进另一个box里。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   (([: &lt;\"1 comb) (# &amp;. &gt;) &lt;) 1 2 3\n┌┬─┬─┬───┬─┬───┬───┬─────┐\n││3│2│2 3│1│1 3│1 2│1 2 3│\n└┴─┴─┴───┴─┴───┴───┴─────┘\n</code></pre></div><p><br>这样就好多了</p>",
        "image_url": "",
        "title": "Box",
        "excerpt_title": "",
        "excerpt": "比如下面这个程序 &gt;&gt;&gt; def subsets(a):\n... if not a: yield ()\n... else:\n... for s in subsets(a[1:]):\n... yield s\n... yield (a[0],)+s\n... \n&gt;&gt;&gt; list(subsets([1,2,3]))\n[(), (1,), (2,), (1, 2), (3,), (1, 3), (2, 3), (1, 2, 3)]\n在J语言里 #: i. 2…"
    },
    {
        "type": "article",
        "updated": 1420776547,
        "id": 19931246,
        "author": {
            "headline": "正在找工作 ...",
            "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
            "is_advertiser": false,
            "type": "people",
            "id": "dcddea61834f6b2dcb515f393fe29575",
            "url_token": "bhuztez",
            "user_type": "people",
            "name": "bhuztez",
            "is_org": false,
            "gender": 1,
            "badge": [],
            "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
            "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
        },
        "comment_permission": "all",
        "created": 1420776547,
        "url": "",
        "content": "<p>Hipster都特别喜欢标榜自己推崇的东西是多么的与众不同。可是我发现了一个问题，Erlang一点都不流行啊。可见，流行并不是因为他们所说的原因。据我长时间仔细观察，发现实际上他们就是不断重复声称某个东西和别的不一样，是否真的不同不重要。</p><p>当Ruby on Rails流行起来的时候，很多人都在喊Convention over Configuration，可是在这一点上和他们的假想敌PHP又有什么本质的不同呢。Node.js更是赤裸裸地宣称在JavaScript里的event-driven相比在别的语言里就是好就是好就是好。而Go把异常改个名字，就有人声称Go里面没有异常了。这个自然是非常好的选择了。毕竟其实人是要花很长时间才能接受不同的想法的。新瓶装旧酒，就能给人以不断在学习新技术的错觉，让人获得满足感。因为没有新东西，愚蠢的地球人会很乐于接受的。这样就把旧东西顺便都卖出去了。</p><p>我记得在Erlang 17之前，很多人都在一直抱怨record，却很少有人抱怨Erlang的头文件和宏。实际上record最恶心的地方不就是因为这玩意儿就是靠头文件和宏这种机制来工作的么。但是Erlang为什么会有头文件这种奇奇怪怪的东西？是这样的，有一天Mike Williams告诉Joe Armstrong说，很多客户都在抱怨Erlang语法太奇怪了，能不能改得更像C一点。Joe Armstrong摇摇头说，Erlang已经这么简单了，没啥语法能砍掉换成类C的了。Mike Williams说，恶心他们一下也没什么，反正他们受得了C。Joe Armstrong说，那好吧，那就学一下C语言里的头文件和宏的概念吧。后面的结果大家都知道了。其实Erlang里Map实现非常简单，说穿了就是两个tuple()。<br></p><p>现在Erlang有了Map，许式伟就提出是时候放弃Erlang了。我想，是时候黑许式伟了。自从许式伟听说Go语言之后，他就一个劲的在黑Erlang，黑来黑去其实挺好的，但是他整天把Erlang的优点当成缺点在黑，也是蛮拼的。不难看出，许式伟不是水货就是在卖私货。卖私货的可能性更大一点。毕竟七牛这个名字，据说就是因为他们有七个大牛。一开始他们用Erlang，结果一个大牛就把所有工作都做完了，另外六个大牛都闲着没事干。老板就不高兴了。后来他们发现了Go，这下七个人都有活干了，Go语言比较新方便宣传，还能把潜在的竞争对手带进沟里去，想必那是极好的。此言一出，就有机智的网友在评论里提醒我七牛是不会承认这点的。那许式伟自然就是水货了。Q.E.D.</p><p>下面就按他是水货的思路来黑</p><p>pth不就是那个用来在那些没实现线程的内核里用来凑合当线程用的东西么，Java一开始还只用类似的东西号称绿色线程呢。这都没听说过，难道不是水货么？(当然从标榜不同的角度讲，反正CERL已经用不着了，和别人相同就相同了)。</p><p>至于那个栈能自动增长。自从编译器有了split stack的功能，C语言里其实也可以这么做的。Go和Rust都用过一段时间split stack，当然都已经不约而同的放弃了，改用别的办法来达到类似的效果了。而且Go语言效果比你在C里面用个库好，那是因为他是一门不同的语言，从语言设计上就可以考虑这个问题。C语言你加私有扩展其实也可以做到的嘛。</p><p>上面也有可能是恰好不了解，也说不定。可其他黑Erlang的地方，只会使用稻草人攻击，段子也编不像样，黑的水准是不是太低了点呢？</p><blockquote><p>首先谈谈对锁的态度，Erlang对锁非常反感，它认为变量不可变可以很大程度避免锁，Erlang认为锁有很大的心智负担所以不应该存在锁。 <br></p></blockquote><p>Erlang没有反对过锁，Erlang从来没有提倡过程序不该用锁，通过变量不可变来避免锁也就无从谈起了。逻辑上需要锁，难道你不用么？好像Erlang相关的工具，有一个帮助你检查哪些可能有死锁的地方的工具(可能是正在开发，不确定没查资料完全凭感觉写的)，难道是来糊弄人的。Erlang反对的是，你自己用CPU指令去实现锁。因为不同的进程可能根本就不在一台机器上，请问怎么用CPU指令去锁？Erlang不鼓励进程之间共享内存，因为不同的进程可能根本就不在一台机器上，请问他们之间怎么共享内存？</p><blockquote><p>那么可能会有人问，那Erlang怎么做高并发呢？其实是两点：第一是每个Erlang物理的进程会有很多的服务器，每个服务器相互是无干扰的，它们可以并发。第二是单服务器想要高并发怎么办？Erlang对这个问题的回答就是请异步IO。 </p></blockquote><p>此处莫非goroutine有魔法了？ <br></p><blockquote><p>首先为什么会有中间状态的引入？因为有异步IO，所以刚刚的某一个请求其实还没有完成，但是它必须把时间让给另外一个请求 ，所以这个时候服务器就要维持刚刚没有完成的那个请求的中间状态。一旦有中间状态的话，这个服务器的状态本身就不干净，单次请求的中间状态要服务器来维持状态，这个是非常不合理的事情。</p></blockquote><p>实际上有些协议要求一个连接能连续发多个请求，且要求你不能等前一个请求处理完再处理下一个请求的。请和制订协议的人去理论去。除非你能告诉我你Go里面怎么用同步的逻辑来实现？难道不是和Erlang一样再起一个进程来处理这个请求吗？ </p><br><blockquote><p>多核时代已经喊了快十年了，但是我们大家可以看到，几乎没有多少语言把执行体这个作为语言内建标准来做，我觉得这是Go很大的创举。</p></blockquote><p>SIMULA-67，Ada等一大帮语言哭了。就语法特别像C的大部分都没有而已。即便是Erlang也比Go先出现，Erlang从来没说这个概念是原创的。</p><blockquote><p>因为Erlang收到请求以后没有办法创建一个子的执行体，然后让它处理某一个具体的请求\n不用再管它。但是Erlang里面进程没有共享状态，你要改服务器状态必须用异步IO的方式，把事情做了再把消息扔给服务器对他说你自己改状态。通过消息\n改服务器状态，这个成本是比较大的，而且带来了很多问题。</p></blockquote><p>A History of Erlang里就说了</p><blockquote>If a data structure is shared by two phys-<br>ical nodes and if one node fails, then failure recovery is often im-<br>possible. The reason why Erlang shares no data structures and uses<br>pure copying message passing is to sidestep all the nasty problems<br>of figuring out what to replicate and how to cope with failures in a<br>distributed system. </blockquote><p>其实这里有两个问题，一是子进程在另外一台机器上，你根本没办法共享内存。二是，即便能共享内存，通过共享内存改变状态不代表你启动子进程完了就不用管了，子进程改状态改到一半挂了怎么办？你是打算连带着挂掉所有其他子进程呢，还是在你的server进程里处理各种状态改一半就挂了的情况？这不是把问题越搞越复杂了么。当然了，你也可以说你的程序从不出错，是的，我想你可以做到的。</p><blockquote><p>I remember Mike, Robert and I having great fun asking the<br>same question over and over again: “what happens if it fails?”—<br>the answer we got was almost always a variant on “our model<br>assumes no failures.”</p></blockquote><p>许式伟判断一门语言的好坏，主要就看这门语言共享内存是否和C++一样方便。学一门新语言非要去看自己熟悉的语言擅长的地方是不是也都一样好。我求您别学新语言了。Alan J. Perlis就说过</p><blockquote>A language that doesn't affect the way you think about programming, is not worth knowing. <br></blockquote><p>他发现在自己熟悉的语言擅长的地方不一样好，就能立即得出结论</p><blockquote>Erlang语言并没有带来什么实质性的好处。</blockquote><p>Erlang语言在开发的过程中做了大量对比实验来验证Erlang是否真的好。</p><blockquote><p>If you don't run experiments before you start designing a <b>new</b> system, your <b>entire system</b> will be an experiment!</p><p>—Mike Williams</p></blockquote><p>A History of Erlang里就提到了一开始他们就用能找到的各种不同风格的语言实现同一个程序，试图从中选出一门最合适的语言作为基础，结果没一种语言包含足够多他们需要的语言特性，接着他们就开始尝试把各种语言中比较合适的语言特性合并到一起。一开始Joe Armstrong是在Smalltalk的基础上实现的，奈何当时unix上运行的Smalltalk GC一次至少要15分钟，他们就去订购Smalltalk Machine，结果等了几个月快递还没把货送到，正好在这段时间他们在Prolog上已经实现了不少功能了，最后Smalltalk machine终于来了，也不能闲着吧，就让给后来成为UML三巨头之一的那位爷爷去玩了。等到Erlang逐渐成熟起来，他们也用Erlang去实现一个接近实际的项目，和用别的语言实现做对比，发现平均开发效率大约是后者的8倍。<br></p><p>最近出现的一些新语言，很少有像Erlang这样真的用一个比较实际的项目去做实验的。可能Rust比较好一点，Mozilla开发这门语言的时候是真的在用他写一个浏览器，但其实也没有比较严格的对比实验。</p><p>当然你可以认为爱立信是自吹自擂，那摩托罗拉总没必要刻意吹捧竞争对手开发的语言吧。摩托罗拉的研究结果显示，完成相同的功能，Erlang平均只需要C++ \n1/7的代码量，和8倍开发效率大致接近。同时，Erlang的平均响应时间大约是C++的一半，吞吐量却大约是C++的两倍。而且C++程序在超过设计负载没多少的时候就挂掉了，需要手工重启。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.macs.hw.ac.uk/%7Etrinder/papers/CPE2006.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"> http://www.macs.hw.ac.uk/~trinder/papers/CPE2006.pdf<i class=\"icon-external\"></i></a></p><p>Erlang语言概念特别少，主要只有三个，模式，函数和消息。变量是个坏翻译。variable应该翻译成元。从某种角度看，变量就应该是不可变的，所谓的变量不可变根本就不是问题。许式伟所谓的变量可变实际上相当于OCaml里，所有变量都用ref。</p><p>在比较知名的语言里，Erlang可能是唯一一个把错误代码和异常分清楚的。你永远只返回错误代码，调用的一方只匹配能处理的情况。而不能处理的情况，因为没有匹配，会自动引发异常。异常发生时就应该让进程挂掉，因为这不是你代码预期的情况，此时做任何多余的事情最有可能的结果就是让情况变得更糟糕。</p><p>在这之上有supervision tree。万一一个重要的进程莫名奇怪的挂了，可能他就是需要重启一下。</p><blockquote><p>Have you tried turning it off and on again?</p><p>— IT Crowd<br></p></blockquote><p>再往上，Erlang是一门control plane的语言。Erlang比较适合用来写运行在很多台机器上的服务的controller，Erlang就是用来写业务逻辑的。只不过很多语言网络吞吐能力如此糟糕，不做丧心病狂的优化，用来处理data plane竟然还比不过不优化的Erlang。于是他们就宣称Erlang只适合用来转发数据包，不适合用来写复杂的业务逻辑。OpenFlow出来一段时间之后，我还在想为啥就没人用Erlang写个实用的Controller呢，结果其实也没过多久，就听说Tail-f被Cisco收购了。</p><p>我想，你也会觉得Erlang是一门不错的语言的。毕竟</p><blockquote><p>... the rest of the world was wrong and ... we were right</p><p>— A History of Erlang</p></blockquote>",
        "image_url": "",
        "title": "流行的秘诀就是新瓶装旧酒",
        "excerpt_title": "",
        "excerpt": "Hipster都特别喜欢标榜自己推崇的东西是多么的与众不同。可是我发现了一个问题，Erlang一点都不流行啊。可见，流行并不是因为他们所说的原因。据我长时间仔细观察，发现实际上他们就是不断重复声称某个东西和别的不一样，是否真的不同不重要。当Ruby on Rai…"
    }
]