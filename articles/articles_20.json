{
    "paging": {
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=40",
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=0",
        "is_end": false,
        "totals": 106,
        "is_start": false
    },
    "data": [
        {
            "type": "article",
            "updated": 1478790045,
            "id": 23575108,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1478789539,
            "url": "",
            "content": "<p>知乎的文章不能反对，实在太恶心了。<br></p><p><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/23560609\">觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏</a><br></p><p><a data-title=\"@Burris Ewell \" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell </a>的回答问题很大，但也不能明目张胆的搞稻草人攻击。不过，就这也能有几千赞？</p><p>那个问题本身就很奇怪，题主竟然会认为 句子过于简单 。<a data-title=\"@Burris Ewell\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>也莫名其妙的来了一句，“句式相对很简单”。</p><p>恶魔的奶爸列出数字，说明我们在英语小说里，也能找出很多长句，和复杂的句型，甚至有的从头到尾都是长句。并此把 <a data-editable=\"true\" data-title=\"@Burris Ewell\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>  批判一番。然而 <a data-title=\"@Burris Ewell\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell</a>   举的正面例子就有一个是超长的句子。而那正是我想批判的，所以印象深刻。<br></p><p>恶魔的奶爸英语水平大家都很清楚有多高，整天就只会强调什么，长难句很重要，语法很重要。甚至还推荐人家学英语用什么回译法。一开始是吹嘘英语学习是不需要什么老师的，自学很重要。后来又转变成英语学习一定要找一个好老师。于是，我想我们将目睹又一个成功人士的诞生，值得曾老师关注。 <br></p><p><br><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/19758941\">就恶魔的奶爸英文水平一事的探讨 - 恶膜的奶爸的文章 - 知乎专栏</a></p><blockquote>7. 恶魔的奶爸就是用英文赚钱的！<p>我很奇怪，我从来没有对自己的文章收过费，都是有人提问邀请我就去答，很多时候态度还很不好，你们何时听过奶爸的英语培训班这种说法？一不卖书，二不推销资料，三不忽悠你加入我的培训班，我要真是靠英文来赚钱，那不是早就饿死了？</p><p>以后也别说我是业界良心，我压根儿不是英文培训界的，算什么业界人士？</p></blockquote><p><a href=\"https://www.zhihu.com/question/51817921\" class=\"internal\">恶喵的奶爸最近推出的英语百日训练营是真的么？ - 英语学习</a></p><blockquote><p>19日在他的微信公众号上看到了恶喵的奶爸开设的英语百日训练营，主要针对练习口语，600元100天，因为在公众号上学习他的方法，所以毫不犹豫报了名并转账过去 </p></blockquote>",
            "image_url": "",
            "title": "不要欺负我们不会英语",
            "excerpt_title": "",
            "excerpt": "知乎的文章不能反对，实在太恶心了。 <a class=\"\" data-title=\"觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/23560609\">觉得自己比钱钟书英文好可以，但拜托你先弄懂什么叫“维多利亚风格” - 二师兄说 - 知乎专栏</a> <a data-title=\"@Burris Ewell \" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/2e94191a824f99e99b5930d5461d33b1\" data-hash=\"2e94191a824f99e99b5930d5461d33b1\" data-hovercard=\"p$b$2e94191a824f99e99b5930d5461d33b1\">@Burris Ewell </a>的回答问题很大，但也不能明目张胆的搞稻草人攻击。不过，就这也能有几千赞？那个问题本身就很奇怪，题主竟然…"
        },
        {
            "type": "article",
            "updated": 1477115067,
            "id": 23128839,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1477115068,
            "url": "",
            "content": "<p>对于熟悉C++的人来说，Rust不需要花多少时间学习的，Rust基本上就是熟悉C++的人想要的C++。</p><p>Rust有trait, borrow checking和type inference。有了trait，我们就可以完全按Abstract Data Type的风格来写程序了，写 Stack::push(stack, item) 而不是 stack.push(item) ，替换stack实现，不用担心push是不是指的是同一个意思。当然了，C++也可以搞成这样，只是需要用的奇技淫巧太多了。C++里有些container进行了一些操作之后之前的某些iterator就失效了，你要是继续用就完蛋了。在rust里的borrow checking就是在编译阶段能给你报个错，直接就不给你这个出错的机会。这样当然是更好了，不用提心吊胆了。type inference缓解了C++里面比如allocator类型的问题，对刷题来说足够用了。比如C++里，linked list的allocator类型是allocator&lt;T&gt;而不是allocator&lt;LinkedListNode&lt;T&gt;&gt;，这个根本就是不讲道理的。而在Rust里，我们可以写 LinkedList::&lt;usize,_&gt;::new_with_allocator(MemoryPool::new_with_capacity(capacity)) ，避免了中间出现一个诡异的allocator。<br></p><p>所以，用Rust来造一个库，可以极大的避免误用。有一个功能齐全的库，短期来看，可以减少从思路到提交的时间，提高单位时间的刷题量。现在只剩下一个问题，如何向OJ提交Rust代码了。办法也是有的，提交汇编代码，只要OJ有gcc，那么 __asm__(\"...\") 这样就是可行的，没有办法可以阻挡的。只要尽量不去用标准库(std)里的东西，Rust生成出来的汇编代码，完全可以做到没有任何额外的依赖。而且编译器生成出来的汇编代码碰到的兼容性问题会远远少于C和C++源代码。当然了，库里面也是会有一些非泛型的函数，这个就需要生成LLVM bitcode，而解答的代码的bitcode合并了之后来一次lto，具体代码可以抄袭rust源代码。这里必须用rust里的LLVM来搞定这个问题，不然还得额外装一套相同版本的LLVM，太麻烦了。最后对于某些代码长度上限特别低的OJ，需要用之前提到的压缩算法压缩后再提交。</p>",
            "image_url": "",
            "title": "Rust将取代C/C++成为刷题的首选",
            "excerpt_title": "",
            "excerpt": "对于熟悉C++的人来说，Rust不需要花多少时间学习的，Rust基本上就是熟悉C++的人想要的C++。Rust有trait, borrow checking和type inference。有了trait，我们就可以完全按Abstract Data Type的风格来写程序了，写 Stack::push(stack, item) 而不是 stack.pus…"
        },
        {
            "type": "article",
            "updated": 1475637302,
            "id": 22767091,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1475637273,
            "url": "",
            "content": "<p>mxnet的卖点主要就是能消几个中间数组。NNVM无非就是把这个功能抽出来，你按他的要求写Operator，也可以获得消数组的功能。消中间数组并不是什么新发明。古时候的SISAL就做的很好了。NNVM的抽象层次决定了他并不能充分发挥消中间数组的好处。</p><p>能消去中间数组，就意味着，矩阵点乘，你可以分两步来算，先算乘法，再算加法。反正中间数组会被消去，最终结果和合并在一起算没什么区别。这也就使得抽象层次可以降低，我们不再需要支持矩阵点乘，只需要支持乘法和加法就可以了。这也使得backpropagation变成了真正的自动求导，毕竟你只需要把基本运算的导数公式抄过来就可以了。</p><p>所以NNVM的抽象是失败的。就比如实现convolution，你需要在每一个后端都把convolution实现一遍，而且是forward+backward都要自己来。很可能一维要实现一遍，二维还要再实现一遍，甚至比如维度 1 2 3 4 5 6 你要在 3 4 5 维上算 convolution 还得实现一遍。正常的抽象难道不应该是前端实现一遍convolution就好了。</p>",
            "image_url": "",
            "title": "为什么不看好NNVM",
            "excerpt_title": "",
            "excerpt": "mxnet的卖点主要就是能消几个中间数组。NNVM无非就是把这个功能抽出来，你按他的要求写Operator，也可以获得消数组的功能。消中间数组并不是什么新发明。古时候的SISAL就做的很好了。NNVM的抽象层次决定了他并不能充分发挥消中间数组的好处。能消去中间数组…"
        },
        {
            "type": "article",
            "updated": 1475076061,
            "id": 22684953,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1475076062,
            "url": "",
            "content": "<p>选择民科的路线，就决定了你唯一的依靠就是计算机了。</p><p>proof checker也没什么可选的，只有metamath风格的了。其他都太复杂了，你都没法检验自己是不是正确实现了。还有比如前段时间metamath邮件列表里就有人指出AFP里有几个比较老的证明，用最新的Isabelle根本就检查不了。也就是实际上你也没办法充分利用现成的证明。</p><p>尽量避免使用  <img src=\"https://zhihu.com/equation?tex=%5Csum+%5Cprod\" alt=\"\\sum \\prod\" eeimg=\"1\"> 这种风格的记号，而是像 APL 那样用 +/ */ 。</p><p>选择Type Theory而不是ZFC。<br></p><p>接下来，自制的无论是proof assistant，CAS，还是SMT Solver之类的工具，不要浪费时间去证明这些程序是对的，只要都输出形式证明，我们只要知道我们用到的证明都是对的，Bug满天飞是无所谓的。</p><p>可以先试着完成Formalizing 100 Theorems。</p><p> 差不多就这样吧</p>",
            "image_url": "",
            "title": "民科是如何学数学的",
            "excerpt_title": "",
            "excerpt": "选择民科的路线，就决定了你唯一的依靠就是计算机了。proof checker也没什么可选的，只有metamath风格的了。其他都太复杂了，你都没法检验自己是不是正确实现了。还有比如前段时间metamath邮件列表里就有人指出AFP里有几个比较老的证明，用最新的Isabelle根…"
        },
        {
            "type": "article",
            "updated": 1475074689,
            "id": 22684623,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1475073982,
            "url": "",
            "content": "<p>必须要使用硬实时操作系统</p><p>类似PC主板那样的双BIOS，随便刷不怕变砖<br></p><p>不要有基带芯片。应该用软件无线电来完成3G/4G通信<br></p><p>数字电路能用FPGA的，就全用FPGA解决，不要用独立芯片</p><p>应用软件应该使用符合类似 IETF 组织，比如就叫DETF，规定的RFC 相互通信。我不喜欢，我就可以直接换成另外一家实现相同协议的软件<br></p><p>操作界面应该类似Emacs，有C-x C-c的区别</p><p>支持函数式命令，比如 急急如律令，表示前面那条命令以优先级2运行。这种风格符合现代的命令行里，比如verbose，vvv的用法。也是完全正确的汉语。应该大力推广。</p>",
            "image_url": "",
            "title": "民科需要什么样的手机",
            "excerpt_title": "",
            "excerpt": "必须要使用硬实时操作系统类似PC主板那样的双BIOS，随便刷不怕变砖 不要有基带芯片。应该用软件无线电来完成3G/4G通信 数字电路能用FPGA的，就全用FPGA解决，不要用独立芯片应用软件应该使用符合类似 IETF 组织，比如就叫DETF，规定的RFC 相互通信。我不喜…"
        },
        {
            "type": "article",
            "updated": 1474083578,
            "id": 22475613,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1474082570,
            "url": "",
            "content": "<p>四十大盗公司中秋节发月饼，有剩余，决定抽签决定谁拿到剩下的月饼。</p><p>为避免有人作弊，四十大盗公司提出了月饼scheme。</p><p>每个人生成 公钥P 私钥Q  用私钥加密公钥得R</p><p>每个人随机选，或者自己瞎编一个 0-2**128-1 的整数，C</p><p>C用私钥加密得E</p><p>第一步公开 R 和 E</p><p>等所有人都公开了R和E</p><p>再公开P</p><p>按P的顺序把C连在一起，HMAC后，作为随机数种子 (HMAC以四十大盗的月饼为key)<br></p><p>由P的顺序决定每个人的编号，比如 1- 40<br></p><p>并把编号排成一个环，按取出的第一个随机数，逆时针旋转，旋转后的编号的是每个人的正式编号</p><p>接着选到哪个随机数就归谁<br></p><p>请问，月饼scheme有哪些问题</p>",
            "image_url": "",
            "title": "月饼scheme",
            "excerpt_title": "",
            "excerpt": "四十大盗公司中秋节发月饼，有剩余，决定抽签决定谁拿到剩下的月饼。为避免有人作弊，四十大盗公司提出了月饼scheme。每个人生成 公钥P 私钥Q 用私钥加密公钥得R每个人随机选，或者自己瞎编一个 0-2**128-1 的整数，CC用私钥加密得E第一步公开 R 和 E等所有…"
        },
        {
            "type": "article",
            "updated": 1473779453,
            "id": 22437550,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1473779453,
            "url": "",
            "content": "<p> LiFT里的oblique和J语言的oblique最大的区别是方向是相反的。</p><p>J语言里 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>+//.\n\n 0 1 2\n 1 2 3\n 2 3 4\n\n 0 1 2\n   1 2 3\n     2 3 4\n------------\n 0 2 6 6 4\n</code></pre></div><p>同时，为了避免不必要的麻烦，LiFT不允许不规则的数组出现。在这一点上LiFT反而和APL更接近。</p><p>LiFT里oblique扩展到多维的。以一维为例，两个数组相?乘之后，再(oblique 1 +)就是一维卷积了。</p><p> 第一个表中，每个格的数值是对应的A?*B?， 而C?表示，这个数值应该加到C?</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>    A0  A1  A2  A3  A4  A5\nB0  C2  C3  C4  C5  C6  C7\nB1  C1  C2  C3  C4  C5  C6\nB2  C0  C1  C2  C3  C4  C5\n\nC0\n      A0 A1 A2 A3 A4 A5\nB0 B1 B2\n\nC1\n      A0 A1 A2 A3 A4 A5\n   B0 B1 B2\n</code></pre></div><p> 当然了，有些时候，没有和B所有元素相乘的结果是不要的。所以我们需要trim，同样trim也是多维的。这里同样以一维为例。trim 2就表示头尾各去掉2个元素。<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>C0 C1 C2 C3 C4 C5 C6 C7\n      C2 C3 C4 C5\n</code></pre></div><p>不难发现，假如B中所有元素都是1，(oblique 1 +)改成(oblique 1 &gt;.) 我们就算出了max pooling所有需要的数值，还有一些不需要的。</p><p>记 数组X的元素个数为 n(X)</p><p>若有 n(A) % n(B) = 0，令 C 为 (trim (n(B)-1)) A，则 n(C) = (n(A) / n(B) - 1)  * n(B) + 1<br></p><p>因为LiFT里所有数组下标都是从1开始的。比如 (stride 3) 的功能就是取出所有下标是3的整数倍的元素。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>C0 C1 C2 C3 C4 C5 C6 C7\n      C2 C3 C4 C5\n      D0 D1 D2 D3\n      D0       D3\n</code></pre></div><p>这样 oblique ，trim 完了，再stride就是pooling了</p><p>所以呢，LiFT里是不需要有什么卷积层，pooling层的。毕竟什么都没有才是最好的。</p>",
            "image_url": "",
            "title": "LiFT之oblique",
            "excerpt_title": "",
            "excerpt": "LiFT里的oblique和J语言的oblique最大的区别是方向是相反的。J语言里 +//.\n\n 0 1 2\n 1 2 3\n 2 3 4\n\n 0 1 2\n 1 2 3\n 2 3 4\n------------\n 0 2 6 6 4同时，为了避免不必要的麻烦，LiFT不允许不规则的数组出现。在这一点上LiFT反而和APL更接近。LiFT里oblique…"
        },
        {
            "type": "article",
            "updated": 1472871051,
            "id": 22293225,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1472871051,
            "url": "",
            "content": "<p>生成出来代码排版之后长这样</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#define inf (1.0 / 0.0)</span>\n\n<span class=\"n\">__kernel</span> <span class=\"kt\">void</span> <span class=\"nf\">kernel0</span><span class=\"p\">(</span><span class=\"n\">__global</span> <span class=\"kt\">float</span> <span class=\"n\">v0</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">__global</span> <span class=\"kt\">float</span> <span class=\"n\">v2</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n  <span class=\"n\">__local</span> <span class=\"kt\">float</span> <span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">16</span><span class=\"p\">];</span>\n  <span class=\"kt\">float</span> <span class=\"n\">private_v2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n  <span class=\"kt\">int</span> <span class=\"n\">b0</span> <span class=\"o\">=</span> <span class=\"n\">get_group_id</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">get_group_id</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">get_local_id</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"kt\">int</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">get_local_id</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">15</span><span class=\"p\">);</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(((((((((</span><span class=\"mi\">30</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">31</span> <span class=\"o\">*</span> <span class=\"n\">t1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">16</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">28</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">31</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span>\n          <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"o\">||</span>\n         <span class=\"p\">(</span><span class=\"n\">b1</span> <span class=\"o\">==</span> <span class=\"n\">t0</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n      <span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"n\">t0</span><span class=\"p\">][</span><span class=\"n\">t1</span><span class=\"p\">][</span><span class=\"n\">c2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">[((((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">/</span>\n                                  <span class=\"mi\">8</span><span class=\"p\">)][((((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"mi\">8</span><span class=\"p\">)]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">barrier</span><span class=\"p\">(</span><span class=\"n\">CLK_LOCAL_MEM_FENCE</span> <span class=\"o\">|</span> <span class=\"n\">CLK_GLOBAL_MEM_FENCE</span><span class=\"p\">);</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c0</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">);</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">c0</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">7</span><span class=\"p\">);</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"mf\">0.000000</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">c2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">);</span> <span class=\"p\">(</span><span class=\"n\">c5</span> <span class=\"o\">&lt;=</span> <span class=\"p\">((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">));</span> <span class=\"n\">c5</span> <span class=\"o\">=</span> <span class=\"n\">c5</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span>\n              <span class=\"p\">((</span><span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)])</span> <span class=\"o\">+</span>\n               <span class=\"p\">((</span><span class=\"n\">local_v0</span><span class=\"p\">[(</span><span class=\"n\">c2</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)][((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c2</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c5</span><span class=\"p\">)][(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c0</span><span class=\"p\">))</span> <span class=\"o\">+</span>\n                                                       <span class=\"p\">(</span><span class=\"n\">c2</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">))])</span> <span class=\"o\">*</span>\n                <span class=\"p\">(</span><span class=\"n\">local_v0</span><span class=\"p\">[</span><span class=\"n\">b1</span><span class=\"p\">][</span><span class=\"n\">t1</span><span class=\"p\">][((((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">c5</span><span class=\"p\">))])));</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]</span> <span class=\"o\">=</span>\n          <span class=\"p\">(</span><span class=\"n\">private_v2</span><span class=\"p\">[(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c0</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)][(((</span><span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">c1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c0</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">c0</span> <span class=\"o\">=</span> <span class=\"n\">c0</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">v2</span><span class=\"p\">[(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t0</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c0</span><span class=\"p\">))][(((</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">t1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"n\">c1</span><span class=\"p\">))]</span> <span class=\"o\">=</span>\n          <span class=\"p\">(</span><span class=\"n\">private_v2</span><span class=\"p\">[</span><span class=\"n\">c0</span><span class=\"p\">][</span><span class=\"n\">c1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">barrier</span><span class=\"p\">(</span><span class=\"n\">CLK_LOCAL_MEM_FENCE</span> <span class=\"o\">|</span> <span class=\"n\">CLK_GLOBAL_MEM_FENCE</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p> 没有掌握正确的数组切割技术，产生了一个奇怪的 if。另外现在是在循环外面就把数组复制进来的，应该进一步看哪些只在一个循环中用到，把复制操作挪到循环里面去，以减少local memory的使用。</p>",
            "image_url": "",
            "title": "LiFT使用OpenCL的local/private memory",
            "excerpt_title": "",
            "excerpt": "生成出来代码排版之后长这样#define inf (1.0 / 0.0)\n\n__kernel void kernel0(__global float v0[8][8], __global float v2[8][8]) {\n __local float local_v0[2][2][16];\n float private_v2[2][2];\n int b0 = get_group_id(0);\n int b1 = get_group_id(1);…"
        },
        {
            "type": "article",
            "updated": 1472698262,
            "id": 22264698,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1472698098,
            "url": "",
            "content": "<p>ppcg动不动就崩溃，懒得找原因了。直接自己生成了</p><p>举一个简单的例子，就是一个矩阵自乘<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>A :: (in 8 8)\nB :: (out 8 8)\n\nB := (((reduce 1 +)\"2) (A (*\"1 2) A))\n</code></pre></div><p>生成C代码，这样调用就可以了</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">\"matmul_c.h\"</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span>\n<span class=\"nf\">main</span><span class=\"p\">(){</span>\n  <span class=\"kt\">float</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n  <span class=\"kt\">float</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">][</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n  <span class=\"k\">struct</span> <span class=\"n\">matmul_state</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"p\">{.</span><span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"p\">.</span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">};</span>\n\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n      <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">;</span>\n\n  <span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n      <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%5.0f \"</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>生成OpenCL代码，简单调用这里只需要把 matmul_c.h 改成 matmul_cl.h 就可以了</p><p>生成matmul_cl.c, matmul_cl.h, matmul.cl 这三个文件 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>python -m lift --emit opencl matmul matmul.model\n</code></pre></div><p>编译链接<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gcc -o matmul -Wl,--format=binary matmul.cl -Wl,--format=default matmul.c matmul_cl.c -lOpenCL\n</code></pre></div><p>这样就得到了 matmul 。<br></p><p>当然了现在还不支持插入barrier，所以需要barrier的都生成不出来，也没法从global复制到local。不管怎么说已经扔掉了ppcg，剩下的这些很快就可以支持了。</p>",
            "image_url": "",
            "title": "LiFT输出OpenCL",
            "excerpt_title": "",
            "excerpt": "ppcg动不动就崩溃，懒得找原因了。直接自己生成了举一个简单的例子，就是一个矩阵自乘 A :: (in 8 8)\nB :: (out 8 8)\n\nB := (((reduce 1 +)\"2) (A (*\"1 2) A))\n生成C代码，这样调用就可以了#include &lt;stdio.h&gt;\n#include \"matmul_c.h\"\n\nint\nmain(){\n float A…"
        },
        {
            "type": "article",
            "updated": 1471526879,
            "id": 22076949,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1471526879,
            "url": "",
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bhuztez/lift</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>现在可以利用ppcg生成gpu代码了。</p><p>有几个问题，中间数组留在栈上，你自己手动删吧。有些情况ppcg会崩溃，原因不明。 <br></p><p>这些问题等改成不依赖ppcg生成gpu代码应该就可以解决了。</p><p>另外，请自行根据ppcg的README里的说明，按你的显卡设置grid/block/tile参数。</p><p>就是这样</p>",
            "image_url": "",
            "title": "LiFT更新",
            "excerpt_title": "",
            "excerpt": "<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bhuztez/lift</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>现在可以利用ppcg生成gpu代码了。有几个问题，中间数组留在栈上，你自己手动删吧。有些情况ppcg会崩溃，原因不明。 这些问题等改成不依赖ppcg生成gpu代码应该就可以解决了。另外，请自行根据ppcg的README里的说明，按你的显卡设置grid/…"
        },
        {
            "type": "article",
            "updated": 1471356752,
            "id": 22041597,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1471348263,
            "url": "",
            "content": "<blockquote>Ask not what your country can do for you, ask what you can do for your country <br><br>—— J.F. Kennedy</blockquote><p>比赛背景很多字，故略。暂时命名成bboc(曾博) scheme，目前<b>没有</b>奖金。欢迎提供奖金，可以在评论中说明奖金的要求和条款(比如只给第一名)。<b>谁出钱最多，命名权就归谁</b>。</p><p>scheme的设计目标，假设bboc收购了知乎，bboc希望他的粉丝账号能显示粉丝徽章，且他能查出到底谁注册了某个账号，以便防止轮子哥冒充粉丝，但是不允许知乎能查出来，也不允许有人可以伪造身份注册。限制密码学算法只允许使用现有的类型，比如<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2585%25AC%25E5%25BC%2580%25E5%25AF%2586%25E9%2592%25A5%25E5%258A%25A0%25E5%25AF%2586\" target=\"_blank\" rel=\"nofollow noreferrer\">公开密钥加密<i class=\"icon-external\"></i></a>， <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25B0%258D%25E7%25A8%25B1%25E5%25AF%2586%25E9%2591%25B0%25E5%258A%25A0%25E5%25AF%2586\" target=\"_blank\" rel=\"nofollow noreferrer\">对称密钥加密<i class=\"icon-external\"></i></a>， <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25AF%2586%25E7%25A2%25BC%25E9%259B%259C%25E6%25B9%258A%25E5%2587%25BD%25E6%2595%25B8\" target=\"_blank\" rel=\"nofollow noreferrer\">密码散列函数<i class=\"icon-external\"></i></a>等等，毕竟bboc比较严谨。 当然，另外一种方式是，你可以证明基于已有的算法，无法构造出bboc scheme，那bboc就不收购知乎了。</p><p>直接在知乎上发一篇文章，把地址贴到评论里就算参与了。当然也欢迎对要求的不合理之处提出意见。 要求改变之后立即以新的要求为准。</p><p>具体细节</p><p><b>bboc scheme level I</b></p><p>1. bboc可以事先和粉丝单独交换一些信息</p><p>2. bboc可以广播一些类似公钥的信息</p><p>3. bboc可以定期发布一些revoke list之类的过期信息，但是知乎只能知道哪些注册信息过期了，不能分辨出账号是否来自同一个粉丝。同样的方法，也可以用来查询哪些粉丝在知乎上有哪些账号，知乎只会知道账号列表，不能知道哪些账号是同一个粉丝</p><p>4. 知乎拿到粉丝注册信息之后，不需要去问bboc就可以知道是否是bboc认证粉丝。</p><p>5.  每个粉丝可以注册多个账号，且不允许知乎能分辨出是否来自同一个粉丝。</p><p>6. 即便拿到同一个粉丝的任意多个注册信息，也伪造不出粉丝的身份<br></p><p>7. bboc可以从账号注册信息中，分辨出是谁注册的</p><p>8. bboc同时也会收购Quora。会通过新增活跃粉丝数考核业绩。为避免两个网站串通造假，粉丝给Quora提供的注册信息，知乎是没法验证通过的。反之亦然。<br></p><p><b>bboc scheme level II</b></p><p>bboc 粉丝太多，需要雇人来认证了。那么问题来了雇来的人不可靠怎么办?</p><p>9. 修改第一条，改成粉丝需要去N个办事处和bboc的多个代表分别交换信息。办事处之间不允许交流信息。盗取N-1个办事处的所有资料，能得出的结论不能多于知乎。但是粉丝必须去所有办事处都交换信息过才能在知乎注册。</p><p><b>bboc scheme level III</b></p><p>10. 修改第3条，bboc调取账号时，不允许知乎知道bboc调取了哪些账号，避免向轮子哥走漏风声。</p>",
            "image_url": "",
            "title": "bboc scheme大赛",
            "excerpt_title": "",
            "excerpt": "Ask not what your country can do for you, ask what you can do for your country —— J.F. Kennedy比赛背景很多字，故略。暂时命名成bboc(曾博) scheme，目前<b>没有</b>奖金。欢迎提供奖金，可以在评论中说明奖金的要求和条款(比如只给第一名)。<b>谁出钱最多，…</b>"
        },
        {
            "type": "article",
            "updated": 1470323244,
            "id": 21874584,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1470323244,
            "url": "",
            "content": "<p><a href=\"https://zhuanlan.zhihu.com/p/21857880\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">857880</span><span class=\"ellipsis\"></span></a></p><p>盘符是过时的做法，早就该被淘汰了。所以要拯救SSD，正确的做法是给Users单独创建一个分区。假如你分不清分区和盘符，说明微软认为你智商太低，不适合用Windows。</p><p> Windows安装难度很高，比安装工具莫名其妙消失了的ArchLinux还高那么一点点。</p><p>你得先进入Advance模式，鬼才知道得按Shift+F10才能进入命令 (<a href=\"https://link.zhihu.com/?target=https%3A//technet.microsoft.com/en-us/magazine/gg491396.aspx\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">technet.microsoft.com/e</span><span class=\"invisible\">n-us/magazine/gg491396.aspx</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> )，接着也不知道怎么搞，才能让他按你的分区方案装，反正从安装界面上看似乎也看不出来。<br></p><p>既然你一开始就没正确安装，那就不管这个了。你就参考，把用户目录复制到另外一个分区去</p><p><a href=\"https://link.zhihu.com/?target=http%3A//keenesoftware.com/2009/05/10/move-vistas-users-folder-to-a-different-drive/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">keenesoftware.com/2009/</span><span class=\"invisible\">05/10/move-vistas-users-folder-to-a-different-drive/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//forums.whirlpool.net.au/archive/1309345%23rr21337336\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">forums.whirlpool.net.au</span><span class=\"invisible\">/archive/1309345#rr21337336</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>注意看评论，注意分辨里面没区分盘符和分区的情况。</p>",
            "image_url": "",
            "title": "不要把Users目录链接到另外一个盘符",
            "excerpt_title": "",
            "excerpt": "<a href=\"https://zhuanlan.zhihu.com/p/21857880\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">857880</span><span class=\"ellipsis\"></span></a>盘符是过时的做法，早就该被淘汰了。所以要拯救SSD，正确的做法是给Users单独创建一个分区。假如你分不清分区和盘符，说明微软认为你智商太低，不适合用Windows。 Windows安装难度很高，比安装工具莫名其妙消失了的ArchLinux还高那么一…"
        },
        {
            "type": "article",
            "updated": 1468854461,
            "id": 21636039,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1468854210,
            "url": "",
            "content": "<p><a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//alexnisnevich.github.io/untrusted/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">alexnisnevich.github.io</span><span class=\"invisible\">/untrusted/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>不是什么新东西。不要怪我老土。 <br></p><p>很多所谓的教你学编程的游戏都非常无趣，他们总是站在居高临下的角度以怎么教你学习一点比如程序语言的知识。而且这也没有多大意义。学会trial and error，比掌握一点可怜的知识重要多了。因为思路的限制，大部分都做成了几个bot打来打去这种形式。而像Robocode这种单纯的bot对战，入门就比较困难，比这更糟糕的是，之后更困难，你在会写一些基于简单规则的bot之后直接就不知所措了。 </p><p>untrusted的目标只是做一个好玩的复古的游戏，你使用规定的方式作弊才能进入下一关。我认为这很可能是未来大部分计算机游戏(不要与视频游戏混淆)的起点。同时，尽管他们在开发时并没有考虑什么教育意义，用这个untrusted来入门，比其他你在网上找到的什么东西都强。目标明确，让你自己想办法去作弊，而不是生硬的塞给你一点知识。毫无疑问，把这个玩通关，效果就要比比如萧井陌的2K培训强多了。顺便提一下另外一个用Python的类似的游戏 <a href=\"https://link.zhihu.com/?target=https%3A//schilcote.itch.io/injection\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">schilcote.itch.io/injec</span><span class=\"invisible\">tion</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "强烈推荐untrusted",
            "excerpt_title": "",
            "excerpt": "<a class=\"\" href=\"http://alexnisnevich.github.io/untrusted/\">http://alexnisnevich.github.io/untrusted/</a>不是什么新东西。不要怪我老土。 很多所谓的教你学编程的游戏都非常无趣，他们总是站在居高临下的角度以怎么教你学习一点比如程序语言的知识。而且这也没有多大意义。学会trial and error，比掌握一点可怜的知识重要多了。因为思路的限…"
        },
        {
            "type": "article",
            "updated": 1468554937,
            "id": 21601402,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1468554006,
            "url": "",
            "content": "<p>老是有人问函数式要如何入门。我早就说过了，只要识字的人，函数式就已经入门了 。所以当然-21天就可以入门了。</p><p>在原始APL里，求平均数，通常的写法是</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>avg←{(+⌿⍵)÷≢⍵}\n</code></pre></div><p>而J，求平均数</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>avg =: +/ % #\n</code></pre></div><p>J相对原始APL的一大改进就是我们不再需要使用⍺⍵</p><p>J使用了 [ 和 ] 这两个函数<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>x [ y = x\nx ] y = y\n</code></pre></div><p>这样用J使用纯函数风格组合新函数时，所有用到的都是函数，毕竟 [ ] 是真正普通函数，而⍺⍵并不是。<br></p><br><p>这对我们有何启发呢？我们平时是如何说平均数的</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>相加 除以 项数\n+/   %   #\n</code></pre></div><p>除了J是从右向左计算的，我们是从左往右计算的，写法上并没有本质区别。相对应/，加对应+。 Alan J. Perlis 早就说过了 Though the Chinese should adore APL, it's FORTRAN they put their money on。APL你对应不起来还情有可原。J这个都已经完全一样了，你要是还看不出来，那我不禁要问，你到底识不识字了。</p><p>我们用西方不识字的人搞出来的文字理论，当然会觉得有各种省略， 各种倒序，各种词性乱用。明明很自然的说法，用这狗屁理论解释不通，那自然是理论有问题。 <br></p><p>看看九章算术<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>合分术曰\n母互乘子并以为实\n...\n</code></pre></div><p>你非要因为母指的是分母，认为这个是名词。那当然解释不通了。因为我们的文字从两千多年前就是函数式的，你得把母当成一个函数，作用是取出分母，那就全都能解释通了。</p><p>用类似ML的风格，近似可以写成这样<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>let 合(x:[分,分]) =\n  ...\n  where\n    实 = 并(互(乘)((母 x), (子 x)))\n</code></pre></div><p>这就导致了一个问题，你的代码就没法朗读了。</p><p>所以说，函数式你早就已经入门了，掌握的还是更高级的形式。而不是Haskell里那种 (.) . (.) 。</p>",
            "image_url": "",
            "title": "函数式-21天入门教程",
            "excerpt_title": "",
            "excerpt": "老是有人问函数式要如何入门。我早就说过了，只要识字的人，函数式就已经入门了 。所以当然-21天就可以入门了。在原始APL里，求平均数，通常的写法是avg←{(+⌿⍵)÷≢⍵}\n而J，求平均数avg =: +/ % #\nJ相对原始APL的一大改进就是我们不再需要使用…"
        },
        {
            "type": "article",
            "updated": 1468049232,
            "id": 21541240,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1468048700,
            "url": "",
            "content": "<p>前面已经提到了，现在的深度学习框架都过于复杂了。</p><p>现在我们来回顾一下，为什么我们自制的深度学习框架能如此简单。</p><p><b>首先</b>我们抛弃了layer的概念。layer有一个很大的问题，每个layer你都要自己写forward和backward。backward就需要你自己去求导，写一个新的layer就很麻烦。有了自动求导 (<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21102230\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">102230</span><span class=\"ellipsis\"></span></a> )，我们就不需要自己去写backward了。</p><p>比如我们这么定义relu就好了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>relu\"0 := (0.0 &gt;. y)\n</code></pre></div><p>又比如softmax</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>ratio\"1 := (y / ((reduce 1 +) y))\nsoftmax\"1 := (ratio (exp (y - ((reduce 1 &gt;.) y))))\n</code></pre></div><p>又比如sigmoid</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sigmoid\"0 := (1 / ((exp (0 - y)) + 1))\n</code></pre></div><p>只要你用的都是基本函数，就不再需要自己去求导了</p><p><b>其次</b>，我们向J语言学习了rank。<a href=\"https://zhuanlan.zhihu.com/p/21523386\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">523386</span><span class=\"ellipsis\"></span></a>。 有了这个rank，我们就不需要有循环了。要是有了循环等控制结构，就要和autograd那样用很复杂的tape结构来求导。更糟糕的是，比如像sum之类的函数，每个你都得处理一遍，而不像这里我们只需要抄好加法的求导公式，sum自然就有了。</p><p>比如convolution就可以拆分出来<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Conv1 := ((((trim 2 2)\"2) (((oblique 2 +)\"4) (K1 ((*\"2 0)\"2 2) Input))) + B1)\n</code></pre></div><p><b>第三</b>，我们真正实现了消去中间数组的功能(<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21519402\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">519402</span><span class=\"ellipsis\"></span></a>) ，这使得我们可以独树一帜的，让你写矩阵点乘时，只能先算乘法再算加法，最终结果里却不会出现这个中间数组。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sigmoid\"0 := (1 / ((exp (0 - y)) + 1))\ndot\"1 1 := ((reduce 1 +) (x * y))\n\nHidden := (sigmoid ((W1 dot Input) + B1))\n</code></pre></div><p>所以你可以看到，比如MNIST demo (<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/21379622\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/21</span><span class=\"invisible\">379622</span><span class=\"ellipsis\"></span></a>)，因为我们的写法就相当于直接写公式，不会出现这里(<a class=\"internal\" href=\"https://www.zhihu.com/question/46607672/answer/105261421\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/4660</span><span class=\"invisible\">7672/answer/105261421</span><span class=\"ellipsis\"></span></a>)提到的layer有隐藏的参数导致难以理解的问题。同时我们这里的函数都是扩展到可以支持任意多维的，所以我们的convolution才是真正通用的，而不是像某些框架里的layer一样只能支持固定的几种convolution。</p><p><b>第四</b>， 我们选择使用integer set library。而不是使用现成封装好的库，比如cuDNN什么的。你可以自己用integer set library来做常规的优化，也可以偷懒调用ppcg去优化。这样能同时支持CPU以及各种GPU，自行选择分块和并行，编译期就可以决定内存分配方案。缺点是有时编译时间可以让theano望尘莫及。</p><p><b>最后的最后</b>，山寨一个ConvNetJS的MNIST demo，来展示我们的框架确实是能运行起来的。<br></p><p><a href=\"http://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-mnist-demo/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">bhuztez.github.io/lift-</span><span class=\"invisible\">mnist-demo/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>英文版等着你来找问题，改进<br></p><p><a href=\"http://link.zhihu.com/?target=https%3A//bhuztez.github.io/lift-tutorial/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">bhuztez.github.io/lift-</span><span class=\"invisible\">tutorial/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "7天自制深度学习框架(完)",
            "excerpt_title": "",
            "excerpt": "前面已经提到了，现在的深度学习框架都过于复杂了。现在我们来回顾一下，为什么我们自制的深度学习框架能如此简单。<b>首先</b>我们抛弃了layer的概念。layer有一个很大的问题，每个layer你都要自己写forward和backward。backward就需要你自己去求导，写一个新的la…"
        },
        {
            "type": "article",
            "updated": 1467971141,
            "id": 21534614,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1467971069,
            "url": "",
            "content": "<p>stable里 <br></p><p>target加不了 <br></p><p><a href=\"https://www.zhihu.com/question/46337084/answer/110045196\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/4633</span><span class=\"invisible\">7084/answer/110045196</span><span class=\"ellipsis\"></span></a></p><p>no_std什么的用不了 <br></p><p><a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/no-stdlib.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doc.rust-lang.org/book/</span><span class=\"invisible\">no-stdlib.html</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>rustc_llvm什么的也用不了</p><p>只能放弃stable</p>",
            "image_url": "",
            "title": "rust还是只能用nightly啊",
            "excerpt_title": "",
            "excerpt": ""
        },
        {
            "type": "article",
            "updated": 1467882257,
            "id": 21523386,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1467881811,
            "url": "",
            "content": "<p>是个框架都在说tensor。比如torch直接把数组称为tensor了。tensorflow名字里就有tensor了。然而他们都没有像J一样，从tensor analysis里学习一个rank。</p><p>数组的rank就是数组的维数。J语言里，verb(也就是通常所说的函数)也是有rank的。有了这个rank，我们就不需要循环了。毕竟有了循环，自动求导就要用什么tape之类的结构了，麻烦啊。</p><p>先定义数组还有view<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">ArrayView</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"n\">offset</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"n\">length</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">subview</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ArrayView</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">/</span><span class=\"n\">blocks</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"o\">/</span><span class=\"n\">blocks</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">index</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span><span class=\"o\">+</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Array</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">shape</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">ArrayView</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</code></pre></div><p>C语言一个数组</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>int a[2][3] = {{1,2,3},{4,5,6}};\n</code></pre></div><p>我们就写成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>a = Array((3,2),[1,2,3,4,5,6])\n</code></pre></div><p>先看单目运算。sum的输入是一个rank-n的数组，输出是rank-(n-1)的数组</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum of Array((3,), [1,2,3])\n1 + 2 + 3 = 6\n\nsum of Array((3,2), [1,2,3,4,5,6])\n1  2  3\n+  +  +\n4  5  6\n-------\n5  7  9\n</code></pre></div><p> 计算对每个rank-1的数组分别计算sum</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum\"1 of Array((3,2), [1,2,3,4,5,6])\n1 + 2 + 3 = 6\n4 + 5 + 6 = 15\n</code></pre></div><p>我们定义sum</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_shape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">interp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n            <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n            <span class=\"n\">vyi</span> <span class=\"o\">=</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n                <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">vyi</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n</code></pre></div><p>先算出dimension的积，这样多个循环就合并成了一个循环</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">product</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">l</span><span class=\"p\">:</span>\n        <span class=\"n\">x</span> <span class=\"o\">*=</span> <span class=\"n\">e</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ry</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n\n    <span class=\"n\">vy</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n    <span class=\"n\">vz</span> <span class=\"o\">=</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">()</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">),</span> <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>结果</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((),[</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,),[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">])</span>\n</code></pre></div><p>每个verb有内置的rank，且rank是可以嵌套的。我们用None表示J里的rank infinity<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n            <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n        <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">),</span>\n              <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">rankex1</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">get_shape_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n    <span class=\"n\">interp_monad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>再来看结果</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>assert rankex1(Sum(), (), Array((3,),[1,2,3])) == Array((),[6])\nassert rankex1(Sum(), (), Array((3,2),[1,2,3,4,5,6])) == Array((3,),[5,7,9])\nassert rankex1(Sum(), (1,), Array((3,2),[1,2,3,4,5,6])) == Array((2,),[6,15])\n</code></pre></div><p>双目运算，还需要agree</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>agree\n\"2   5 4    1 2 3\n\"3   6 7 8    2 3\n\nnot agree\n\"2   5 4    1 2\n\"2   6 7  1 2 3\n</code></pre></div><p>实现</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">agree</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">==</span><span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">),</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">sx</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">sy</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">get_shape</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">rx</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">agree</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">:],</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:])</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ranks</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">rank</span>\n        <span class=\"n\">inner</span> <span class=\"o\">=</span> <span class=\"n\">op</span><span class=\"o\">.</span><span class=\"n\">interp</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span><span class=\"p\">,</span> <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"n\">ranks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n            <span class=\"n\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">rx</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">rx</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">ry</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ry</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n    <span class=\"n\">sxo</span><span class=\"p\">,</span> <span class=\"n\">syo</span> <span class=\"o\">=</span> <span class=\"n\">sx</span><span class=\"p\">[</span><span class=\"n\">rx</span><span class=\"p\">:],</span> <span class=\"n\">sy</span><span class=\"p\">[</span><span class=\"n\">ry</span><span class=\"p\">:]</span>\n    <span class=\"n\">px</span><span class=\"p\">,</span> <span class=\"n\">py</span> <span class=\"o\">=</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">sxo</span><span class=\"p\">),</span> <span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">syo</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sxo</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">syo</span><span class=\"p\">):</span>\n        <span class=\"n\">common</span> <span class=\"o\">=</span> <span class=\"n\">px</span>\n        <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">common</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n                <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">),</span>\n                      <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">),</span>\n                      <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">common</span> <span class=\"o\">=</span> <span class=\"n\">py</span>\n        <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">px</span><span class=\"o\">/</span><span class=\"n\">common</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">common</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n                <span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">sx</span><span class=\"p\">[:</span><span class=\"n\">rx</span><span class=\"p\">],</span> <span class=\"n\">vx</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">),</span>\n                      <span class=\"n\">sy</span><span class=\"p\">[:</span><span class=\"n\">ry</span><span class=\"p\">],</span> <span class=\"n\">vy</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">py</span><span class=\"p\">),</span>\n                      <span class=\"n\">vz</span><span class=\"o\">.</span><span class=\"n\">subview</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">extra</span><span class=\"o\">+</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">px</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">rankex2</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">get_shape_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n    <span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"n\">Array</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">xrange</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">))])</span>\n    <span class=\"n\">interp_dyad</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ranks</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(),</span> <span class=\"n\">z</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">z</span>\n</code></pre></div><p>来个加号</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">class</span> <span class=\"nc\">Plus</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_shape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">interp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sx</span><span class=\"p\">,</span> <span class=\"n\">vx</span><span class=\"p\">,</span> <span class=\"n\">sy</span><span class=\"p\">,</span> <span class=\"n\">vy</span><span class=\"p\">,</span> <span class=\"n\">vz</span><span class=\"p\">):</span>\n        <span class=\"n\">vz</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vx</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">vy</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">assert</span> <span class=\"n\">rankex2</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(),</span> <span class=\"p\">(),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"k\">assert</span> <span class=\"n\">rankex2</span><span class=\"p\">(</span><span class=\"n\">Plus</span><span class=\"p\">(),</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]),</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,),[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]))</span> <span class=\"o\">==</span> <span class=\"n\">Array</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">),[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">])</span>\n</code></pre></div><p>完工</p>",
            "image_url": "",
            "title": "tensor和rank",
            "excerpt_title": "",
            "excerpt": "是个框架都在说tensor。比如torch直接把数组称为tensor了。tensorflow名字里就有tensor了。然而他们都没有像J一样，从tensor analysis里学习一个rank。数组的rank就是数组的维数。J语言里，verb(也就是通常所说的函数)也是有rank的。有了这个rank，我们就不…"
        },
        {
            "type": "article",
            "updated": 1467879766,
            "id": 21519402,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1467879346,
            "url": "",
            "content": "<p>好了，大家都已经熟练掌握如何实现tensor rank和自动求导了。</p><p>上一回提到我们把 C = A + B 编译成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>({S[i] -&gt; C[i] : 0 &lt;= i &lt; 2},\n (call, +,\n  (var, {S[i] -&gt; A[i] : 0 &lt;= i &lt; 2}),\n  (var, {S[i] -&gt; B[i] : 0 &lt;= i &lt; 2})))\n</code></pre></div><p>而 B = (reduce 1 +) A 要编译成三个statement</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>init\n({S1[] -&gt; B[]}, (const, 0.0))\n\nupdate\n({S2[i] -&gt; B[] : 0 &lt;= i &lt; 2},\n (call, +,\n  (var, {S2[i] -&gt; B[] : 0 &lt;= i &lt; 2}),\n  (var, {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}))\n)\n\nfini\n({S3[] -&gt; B[]}, (var, {S3[] -&gt; B[]}))\n</code></pre></div><p>我们独树一帜的把点乘分乘法和加法两个步骤计算，产生了一个巨大的中间数组。这个很不好。那现在就让我们来消除这些用不着的中间数组<br></p><p>就举一个简单的例子 A是输入，C是输出，我们要把B消掉<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>{S1[i] -&gt; B[i] : 0 &lt;= i &lt; 2} : {S1[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n{S2[i] -&gt; C[i] : 0 &lt;= i &lt; 2} : {S2[i] -&gt; B[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>首先呢，我们可以找出，每个元素最多只用到一次的数组，在这里就是 B 了 </p><p>接着我们找出所有用到B的statement，那就是S2了</p><p>把S2中对B的引用，都展开成B的定义。</p><p>计算statement的对应关系 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  {S2[i] -&gt; B[i] : 0 &lt;= i &lt; 2} * (({S1[i] -&gt; B[i] : 0 &lt;= i &lt; 2})^-1)\n= {S2[i] -&gt; S1[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p> 展开S1</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  {S2[i] -&gt; S1[i] : 0 &lt;= i &lt; 2} * {S1[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n= {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>这样，我们就得到了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>{S2[i] -&gt; C[i] : 0 &lt;= i &lt; 2} : {S2[i] -&gt; A[i] : 0 &lt;= i &lt; 2}\n</code></pre></div><p>也就是把B消掉了<br></p><p>用类似的思路，我们可以把各种用不到的中间数组整个都消去了。我们站在integer set library的肩膀上，不知道比mxnet自己瞎搞一套消中间数组的办法高到哪里去了。</p><p>中间数组消去之后，你就用传统的基于polyhedral model的循环优化。无论是细粒度并行，分块计算，还是编译期决定内存分配方案，都可以在polyhedral model下完成。这是正规学校计算机相关专业编译原理课上都会讲的。这里主要关注把一个深度学习框架糊起来，最最关键，最最不容易找到的资料，其他的就不展开了。假如你一定要问关于polyhedral model的问题，不妨问问皇家理工最精通编译原理的轮子哥。</p>",
            "image_url": "",
            "title": "下一代深度学习框架技术内幕",
            "excerpt_title": "",
            "excerpt": "好了，大家都已经熟练掌握如何实现tensor rank和自动求导了。上一回提到我们把 C = A + B 编译成({S[i] -&gt; C[i] : 0 &lt;= i &lt; 2},\n (call, +,\n (var, {S[i] -&gt; A[i] : 0 &lt;= i &lt; 2}),\n (var, {S[i] -&gt; B[i] : 0 &lt;= i &lt; 2})))\n而 B = (reduce 1 +) A 要编译成三…"
        },
        {
            "type": "article",
            "updated": 1466863850,
            "id": 21425065,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1466863850,
            "url": "",
            "content": "<p>之前死活没效果，经过长时间反反复复检查，发现这竟然不是我的bug。详情见<a class=\"internal\" href=\"https://www.zhihu.com/question/47826876\">这个问题</a></p><p>教程会迅速在这里发布，欢迎来吐槽。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lift-tutorial\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/lift-tutorial<i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "MNIST demo终于跑通了",
            "excerpt_title": "",
            "excerpt": "之前死活没效果，经过长时间反反复复检查，发现这竟然不是我的bug。详情见<a data-title=\"这个问题\" data-editable=\"true\" class=\"\" href=\"https://www.zhihu.com/question/47826876\">这个问题</a>教程会迅速在这里发布，欢迎来吐槽。<a class=\"\" href=\"https://github.com/bhuztez/lift-tutorial\"> https://github.com/bhuztez/lift-tutorial</a>"
        },
        {
            "type": "article",
            "updated": 1466327215,
            "id": 21379622,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1466319993,
            "url": "",
            "content": "<p>功能上和<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html\" target=\"_blank\" rel=\"nofollow noreferrer\">ConvNetJS的MNIST demo<i class=\"icon-external\"></i></a> 一致。这个demo奇葩的地方在于，尽管batch size默认是20，但是sample还是一个个算的。下面给的代码也就是算一个sample的。</p><br><p>假如你不了解J语言，得先看一下<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.jsoftware.com/help/learning/07.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">rank<i class=\"icon-external\"></i></a>的概念。以及几个基本函数的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//code.jsoftware.com/wiki/NuVoc\" target=\"_blank\" rel=\"nofollow noreferrer\">定义<i class=\"icon-external\"></i></a>，比较重要的有insert和oblique。 </p><p>有了这个rank，语言里就不需要引入循环了。当然了，<a class=\"internal\" href=\"https://www.zhihu.com/question/35485591/answer/81444260\">这个回答</a>还提到了一个问题，theano编译期不检查shape。数组的shape就好比是变量的类型，你一个静态shape的语言不在编译期检查shape，实在是太荒唐了。这个要实现是挺容易的。我实在想不通为啥theano不支持。</p><p>以下就是根据Input和Target计算Loss的<b>完整</b>代码了。要注意到这是完整的代码，没有任何东西被隐藏起来。而且从Input到FC，只要你愿意，可以合并成一行。</p><p>当然中间偷懒了，在Conv2那里少了reshape，所以你会发现多了一维出来。</p><p>reduce相当于J语言里的insert。同时reduce 和 oblique 都扩展到了多个维度。trim会从头尾两端去除几个数，(stride n)要求对应的shape为 k * n + 1。这些也都支持多个维度。<br></p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Input :: (in 24 24)\nTarget :: (in 10)\nK1 :: (in 8 5 5)\nB1 :: (in 8)\nK2 :: (in 16 8 5 5)\nB2 :: (in 16)\nW :: (in 16 1 4 4 10)\nB :: (in 10)\nConv1 :: (out 8 24 24)\nRelu1 :: (out 8 24 24)\nPool1 :: (out 8 12 12)\nConv2 :: (out 16 1 12 12)\nRelu2 :: (out 16 1 12 12)\nPool2 :: (out 16 1 4 4)\nFC :: (out 10)\nSM :: (out 10)\nLoss :: (out)\n\nrelu\"0 := (0.0 &gt;. y)\nratio\"1 := (y / ((reduce 1 +) y))\n\nConv1 := ((((trim 2 2)\"2) (((oblique 2 +)\"4) (K1 ((*\"2 0)\"2 2) Input))) + B1)\nRelu1 := (relu Conv1)\nPool1 := (((stride 2 2)\"2) (((trim 1 1)\"2) (((oblique 2 &gt;.)\"4) (((duplicate 2 2)\"0) Relu1))))\n\nConv2 := ((((trim 7 2 2)\"3) (((oblique 3 +)\"6)  (K2 ((*\"3 0)\"3 3) Pool1))) + B2)\nRelu2 := (relu Conv2)\nPool2 := (((stride 3 3)\"2) (((trim 2 2)\"2) (((oblique 2 &gt;.)\"4) (((duplicate 3 3)\"0) Relu2))))\n\nFC := (((reduce 4 +) (W * Pool2)) + B)\nSM := (ratio (exp (FC - ((reduce 1 &gt;.) FC))))\n\nLoss := (0 - (log ((reduce 1 +) (Target * SM))))\n</code></pre></div><p>卷积和pooling都统一成了oblique的形式，这样代码实现起来更为简单。 </p><p>完全immutable的语义，而不是像Caffe那样搞了个奇葩的 <a class=\"internal\" href=\"https://www.zhihu.com/question/46501015\">inplace</a> 。 </p><p> 只支持rank=0的数的求导。比如对FC求导可以写成这样，第一行用来声明数组的shape</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>dFC :: (out 10)\ndFC :: (grad Loss FC)\n</code></pre></div><p>我们不支持循环，不支持条件分支，不支持mutable，不支持运算符优先级。毕竟什么都不支持才是最好的。</p>",
            "image_url": "",
            "title": "MNIST demo的代码",
            "excerpt_title": "",
            "excerpt": "功能上和<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cs.stanford.edu/people/karpathy/convnetjs/demo/mnist.html\" target=\"_blank\" rel=\"nofollow noreferrer\">ConvNetJS的MNIST demo<i class=\"icon-external\"></i></a> 一致。这个demo奇葩的地方在于，尽管batch size默认是20，但是sample还是一个个算的。下面给的代码也就是算一个sample的。 假如你不了解J语言，得先看一下<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.jsoftware.com/help/learning/07.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">rank<i class=\"icon-external\"></i></a>的概念。以及几个基本函数的<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//code.jsoftware.com/wiki/NuVoc\" target=\"_blank\" rel=\"nofollow noreferrer\">定义<i class=\"icon-external\"></i></a>，比较重要的有insert和oblique…"
        }
    ]
}