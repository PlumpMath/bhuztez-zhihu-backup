{
    "paging": {
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=60",
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=20",
        "is_end": false,
        "totals": 106,
        "is_start": false
    },
    "data": [
        {
            "type": "article",
            "updated": 1464152754,
            "id": 21107077,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1464151305,
            "url": "",
            "content": "<blockquote><p>One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!</p><p>— <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\" target=\"_blank\" rel=\"nofollow noreferrer\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)<i class=\"icon-external\"></i></a></p></blockquote><p>这只是提供另外一种观点，并不保证观点有多么合理。接受这个观点，后果自负。万一错过了什么发财的机会也不要来抱怨。</p><p>最近很多媒体都在大肆宣传劫持什么TCP的消息。害的连我妈看了报道之后就开始骂了，你个没出息的家伙，你看人家年纪也不大却那么厉害，你怎么不去向人家学学。</p><p>我都不知道从哪里说起好了。 这行业真的有钱赚么？WhatsApp，一个破聊天软件能卖190亿美元。有哪家信息安全行业的公司市值有那么多？且不说他们员工数可能都有WhatsApp的几十倍了。且不说他们要面对的问题不知道比一个破聊天软件麻烦到哪里去了。</p><p>另一方面，国内这些互联网公司真的需要信息安全专家么？在这片神奇的土地上，程序员竞相在GitHub上晒密码，在线上的服务晒SVN仓库。区区一个XcodeGhost，就差不多全军覆灭了。我早就有了知名的论断，他们的安全水平如此之低，以至于只要稍稍提高他们的开发效率或者稍稍降低维护成本就可以极大的提高他们的安全水平了。在这样的环境里，哪怕你有天大的决心，也不可能有效提升自己的水平，只能无奈的等着被历史的车轮无情的碾过。</p><br><p>这本来也没什么。 糟糕的是，有些对信息安全一窍不通，思维混乱，前言不搭后语的大V，却有意无意的在吸引别人加入这个行业。典型的有云舒，在<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20949353\">别瞎猜了，我离开阿里只为创业，仅此而已</a>一文里，前脚自己刚用过什么剑术、兵法这些不恰当的比喻，后脚就开始嘲笑别人用道德经，自愈来做比喻，以显示自己多么较真了。碰到任何质疑，只会自鸣得意，你们这些沙丁鱼民科，攻不破我，那我就是安全的。完全不具备做这一行最最基本的职业态度。</p><p>要注意到，信息安全行业是一个危险的行业。没有安理会颁发的资格证书，非要自己偷偷摸摸学习这些东西，这结果就和自己偷偷摸摸造什么核反应堆是一样的。真要造个凑合能用的也许并不难，可是你真的能保证你不会被抓起来关到荒无人烟的沙漠里去么？而且这已经算是最好的结果了。你可以狡辩说你自己瞎搞搞水平高不到哪里去，不会引起注意。匹夫无罪，怀璧其罪。这也不完全正确。你自己是否掌握了高超的技术根本不重要，当别人都认为你掌握了的时候，你就有麻烦了。 </p><p>这就是为什么不建议加入信息安全行业，古人云绝学无忧，什么都不知道才是最好的。</p>",
            "image_url": "",
            "title": "为什么不建议加入信息安全行业？",
            "excerpt_title": "",
            "excerpt": "One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!— <a data-title=\"E.W.Dijkstra Archive: The Humble Programmer (EWD 340)\" data-editable=\"true\" class=\"\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)</a>这只是提供另外一种观点，并不保证观点有多么合…"
        },
        {
            "type": "article",
            "updated": 1464141087,
            "id": 21102230,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1464092227,
            "url": "",
            "content": "<p>上文<a href=\"https://zhuanlan.zhihu.com/p/20942572\" class=\"internal\">为什么要自制深度学习框架? </a>提到小朋友对autograd这么复杂充满了疑问。autograd这么复杂当然是有原因的。就算有的代码里面有循环，autograd也给你求出来。</p><p>这对于一个简单的深度学习框架来说太复杂了。而另一方面，有些深度学习框架，仍然在使用backpropagation方式，自己定义operator哪怕没有引入新的基本函数也仍然需要自己针对forward写backward。 正如<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//idontgetoutmuch.wordpress.com/2013/10/13/backpropogation-is-just-steepest-descent-with-automatic-differentiation-2/\" target=\"_blank\" rel=\"nofollow noreferrer\">Backpropogation is Just Steepest Descent with Automatic Differentiation<i class=\"icon-external\"></i></a>指出的那样，所谓的Backpropagation就是自动求导。backward主要功能就是给forward求导。</p><p>这两种情况都不能令人满意，毕竟我们的口号是</p><blockquote><p>No code is better than no code.</p></blockquote><p>而自动求导这个名字起的很多余。直接照着求导规则计算怎么就成了自动求导了呢？同时，网上流传的各种关于自动求导的文章，包括上面提到了这篇，只讲明白了forward模式，并没有把backward模式讲清楚，尽管backward模式也同样简单。</p><p>看一个简单的例子<br></p><img src=\"http://zhihu.com/equation?tex=v_2+%26%3D%26+f%28v_1%29+%5C%5C%0Av_3+%26%3D%26+g%28v_2%29+%5C%5C%0Av_4+%26%3D%26+h%28v_3%29+%5C%5C%0A%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_1%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_3%7D++%5Ccdot+%5Cfrac%7B%5Cpartial+v_3%7D%7B%5Cpartial+v_2%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v_2%7D%7B%5Cpartial+v_1%7D\" alt=\"v_2 &amp;=&amp; f(v_1) \\\\\nv_3 &amp;=&amp; g(v_2) \\\\\nv_4 &amp;=&amp; h(v_3) \\\\\n\\frac{\\partial v_4}{\\partial v_1} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_3}  \\cdot \\frac{\\partial v_3}{\\partial v_2} \\cdot \\frac{\\partial v_2}{\\partial v_1}\" eeimg=\"1\"><p>根据乘法结合率，你可以从右往左算(forward)，也可以从左往右算(backward)</p><p>第二个例子 <br></p><img src=\"http://zhihu.com/equation?tex=v_2+%26%3D%26+f%28v_1%29+%5C%5C%0Av_3+%26%3D%26+g%28v_1%29+%5C%5C%0Av_4+%26%3D%26+v_2+%2B+v_3+%5C%5C%0Av_5+%26%3D%26+h%28v_4%29+%5C%5C%0Av_6+%26%3D%26+i%28v_5%29+%5C%5C\" alt=\"v_2 &amp;=&amp; f(v_1) \\\\\nv_3 &amp;=&amp; g(v_1) \\\\\nv_4 &amp;=&amp; v_2 + v_3 \\\\\nv_5 &amp;=&amp; h(v_4) \\\\\nv_6 &amp;=&amp; i(v_5) \\\\\" eeimg=\"1\"><br><p>backward模式，计算 <img src=\"http://zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_5%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v_5%7D%7B%5Cpartial+v_4%7D+%5Ccdot+%28%5Cfrac%7B%5Cpartial+v4%7D%7B%5Cpartial+v2%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v2%7D%7B%5Cpartial+v1%7D+%2B+%5Cfrac%7B%5Cpartial+v4%7D%7B%5Cpartial+v3%7D+%5Ccdot+%5Cfrac%7B%5Cpartial+v3%7D%7B%5Cpartial+v1%7D%29\" alt=\"\\frac{\\partial v_6}{\\partial v_5} \\cdot \\frac{\\partial v_5}{\\partial v_4} \\cdot (\\frac{\\partial v4}{\\partial v2} \\cdot \\frac{\\partial v2}{\\partial v1} + \\frac{\\partial v4}{\\partial v3} \\cdot \\frac{\\partial v3}{\\partial v1})\" eeimg=\"1\">   时利用了<b>乘法分配律 </b>。而恰好按加减乘除以及乘方的求导规则都能这么用，不然就不会有什么backpropagation了。</p><img src=\"http://zhihu.com/equation?tex=v_7+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v5%7D+%5C%5C%0Av_8+%26%3D%26+%5Cfrac%7B%5Cpartial+v_5%7D%7B%5Cpartial+v4%7D+%5C%5C%0Av_9+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v4%7D+%3D+v_8+%5Ccdot+v_7+%5C%5C%0Av_%7B10%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_2%7D+%3D+1%5C%5C%0Av_%7B11%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_2%7D+%3D+v_9+%5Ccdot+v_%7B10%7D+%5C%5C%0Av_%7B12%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_2%7D%7B%5Cpartial+v_1%7D+%5C%5C%0Av_%7B13%7D+%26%3D%26+v_%7B11%7D+%5Ccdot+v_%7B12%7D+%5C%5C%0Av_%7B14%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_4%7D%7B%5Cpartial+v_3%7D+%3D+1%5C%5C%0Av_%7B15%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_6%7D%7B%5Cpartial+v_3%7D+%3D+v_%7B9%7D+%5Ccdot+v_%7B14%7D+%5C%5C%0Av_%7B16%7D+%26%3D%26+%5Cfrac%7B%5Cpartial+v_3%7D%7B%5Cpartial+v_1%7D+%5C%5C%0Av_%7B17%7D+%26%3D%26+v_%7B15%7D+%5Ccdot+v_%7B16%7D+%5C%5C%0Av_%7B18%7D+%26%3D%26+v_%7B13%7D+%2B+v_%7B17%7D+%5C%5C\" alt=\"v_7 &amp;=&amp; \\frac{\\partial v_6}{\\partial v5} \\\\\nv_8 &amp;=&amp; \\frac{\\partial v_5}{\\partial v4} \\\\\nv_9 &amp;=&amp; \\frac{\\partial v_6}{\\partial v4} = v_8 \\cdot v_7 \\\\\nv_{10} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_2} = 1\\\\\nv_{11} &amp;=&amp; \\frac{\\partial v_6}{\\partial v_2} = v_9 \\cdot v_{10} \\\\\nv_{12} &amp;=&amp; \\frac{\\partial v_2}{\\partial v_1} \\\\\nv_{13} &amp;=&amp; v_{11} \\cdot v_{12} \\\\\nv_{14} &amp;=&amp; \\frac{\\partial v_4}{\\partial v_3} = 1\\\\\nv_{15} &amp;=&amp; \\frac{\\partial v_6}{\\partial v_3} = v_{9} \\cdot v_{14} \\\\\nv_{16} &amp;=&amp; \\frac{\\partial v_3}{\\partial v_1} \\\\\nv_{17} &amp;=&amp; v_{15} \\cdot v_{16} \\\\\nv_{18} &amp;=&amp; v_{13} + v_{17} \\\\\" eeimg=\"1\"><br><p>代码按wikipedia词条<a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Automatic_differentiation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Automatic differentiation<i class=\"icon-external\"></i></a>的例子来</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Vars</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">):</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n                <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"v\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">defs</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">==</span> <span class=\"n\">w</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">acc</span>\n\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'input'</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"sin\"</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"cos\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'+'</span><span class=\"p\">:</span>\n        <span class=\"n\">gx</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">acc</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'*'</span><span class=\"p\">:</span>\n        <span class=\"n\">gx</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">acc</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">acc</span><span class=\"p\">),</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">autodiff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">wrt</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">w</span> <span class=\"ow\">in</span> <span class=\"n\">wrt</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># z = (sin x) + (x * y)</span>\n\n<span class=\"nb\">vars</span> <span class=\"o\">=</span> <span class=\"n\">Vars</span><span class=\"p\">()</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"+\"</span><span class=\"p\">,</span> <span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">),</span><span class=\"nb\">vars</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"sin\"</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">print</span> <span class=\"n\">autodiff</span><span class=\"p\">(</span><span class=\"nb\">vars</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"nb\">vars</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span>\n</code></pre></div><p>结果</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>('v7', 'v1')\nv1 ('input', 1)\nv2 ('input', 2)\nv3 ('*', 'v1', 'v2')\nv4 ('sin', 'v1')\nv5 ('+', 'v3', 'v4')\nv6 ('cos', 'v1')\nv7 ('+', 'v2', 'v6')\n</code></pre></div><p>diff就是直接按求导规则计算。想支持更多函数就自己把规则抄过来就好了</p><p>而Vars里加入重复的定义不会返回新的名字，同时以下情况按此处理</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>add('+', 0, x) -&gt; x\nadd('+', x, 0) -&gt; x\nadd('*', 1, x) -&gt; x\nadd('*', x, 1) -&gt; x\nadd('*', 0, x) -&gt; 0\nadd('*', x, 0) -&gt; 0\n</code></pre></div><p>以避免创建不必要的变量。</p><p>就是这么简单。 </p>",
            "image_url": "",
            "title": "只有求导没有自动求导",
            "excerpt_title": "",
            "excerpt": "上文<a data-title=\"为什么要自制深度学习框架? - bhuztez的文章 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20942572\">为什么要自制深度学习框架? </a>提到小朋友对autograd这么复杂充满了疑问。autograd这么复杂当然是有原因的。就算有的代码里面有循环，autograd也给你求出来。这对于一个简单的深度学习框架来说太复杂了。而另一方面，有些深度学习框架，仍然在使用backprop…"
        },
        {
            "type": "article",
            "updated": 1464064855,
            "id": 20942572,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1463818712,
            "url": "",
            "content": "<p><a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20929496\">7天自制深度学习框架</a>一文自发布以来，骗了不少赞。</p><p>可是评论中也有装神弄鬼之士出来质疑 </p><blockquote><p>不懂深度学习还要做深度学习框架更是痴人说梦了。 </p></blockquote><p>那我就要来把你批判一番了。正是不懂深度学习才要做深度学习框架，因为现有的框架都是写给懂深度学习的人用的。</p><p>有一位小朋友问我，现在别人整天在吹的这个深度学习是什么东西？</p><p>我说深度学习我没看过，不过公式上应该是很简单的东西，大约就是十几个到几十个 Z = f(X dot Y)</p><p>小朋友说了既然那么简单，还不赶紧找个例子出来看看</p><p>我想既然三天两头就有公司/团队出来说他们搞了个开源的深度学习框架，那找个例子应该挺容易的。没想到我竟然栽了。</p><p>我先选了Caffe。小朋友马上就问我了，这个protobuf是什么，和深度学习有什么关系？我哪里知道啊。就说那就换一个吧。</p><p>正好曾老师那几天一直就是在把Caffe和Torch比来比去。凭着对曾老师的信任，我决定换Torch试试。小朋友又问了，Torch那个layer和你说的公式怎么对应起来，还有Torch里面那个数组为什么能叫Tensor？这我怎么知道啊？</p><p>那就换theano吧，这回总该满意了吧。 没想到啊，小朋友还是有问题要问，为什么theano里写公式要和我之前告诉他的写法不一样，不一样也就算了，为啥还这么麻烦？</p><p>我也是惊呆了，没想到知名的深度学习框架一个个都这么难用啊。这可如何是好。</p><p>试了一个又一个，都有这样或者那样的问题。在我即将崩溃之时，我看到了autograd。autograd就是我的大救星。小朋友看了果然很满意，就是还有一个问题，为啥要求导的只能放在第一个参数里。看到我窘迫的表情，小朋友也看出来了，我就是他的问题一个都答不出来的渣渣，决定饶了我。所以他改问我一个简单一点的问题，让我告诉他autograd这个函数是怎么实现的。</p><p>我感到智商受到了这些深度学习框架的侮辱，大放厥辞，这些东西这么难用，我们自己造一个就是了，这有什么难的？他们不就是欺负我不懂深度学习么。</p><p>这就是为什么我要造一个深度学习框架了。</p><p>-------------------------------------</p><p>废话我就不再说了。现在就差把几个部分组合到一起了，你们等着，绝对能简单到让你们大跌眼镜。你一定想不到竟然这么容易就能搞出一个深度学习框架。</p>",
            "image_url": "",
            "title": "为什么要自制深度学习框架?",
            "excerpt_title": "",
            "excerpt": "<a class=\"\" data-title=\"7天自制深度学习框架 - bhuztez的文章 - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20929496\">7天自制深度学习框架</a>一文自发布以来，骗了不少赞。可是评论中也有装神弄鬼之士出来质疑 不懂深度学习还要做深度学习框架更是痴人说梦了。 那我就要来把你批判一番了。正是不懂深度学习才要做深度学习框架，因为现有的框架都是写给懂深度学习的人用的。有一…"
        },
        {
            "type": "article",
            "updated": 1463649884,
            "id": 20929496,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1463645028,
            "url": "",
            "content": "<p>上一篇 <a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20325539\">15分钟开发可支持百万观众的H5视频直播网站</a> 虽然骗了很多赞，很显然，不会有啥实际影响。毕竟WebRTC服务端要写一遍，代码量还是很大的。光ICE就不是几行代码能讲清楚的。</p><p>那么换一个容易的目标。现在深度学习非常火爆，可是，很遗憾，我没有看到有知名的IT培训机构，比如，北大青鸟，传智播客，达内，兄弟连等等，在大张旗鼓的宣传他们的深度学习培训班。深度学习的培训班，从理论上讲，要比程序员培训班容易开啊，毕竟深度学习只是一个公式Z = f(X  dot Y)  重复了很多遍，只要把有影响力的论文里计算量要求不大的例子都照着做一遍就好啦，这有什么难度？Web前端都比这难多了。另一方面，因为深度学习往往需要GPU集群，显然我是买不起Tesla集群的。这种单纯只是门槛高的东西，是一个非常好的培训市场。比如，思科的各种证书培训，有人会说这种培训没用吗？可实际上这就是思科人为制造的高门槛。根据网上有些自称思科工作人员的说法，思科自己有一个非常好用的运行在Linux上的路由器/交换机模拟器(可以自行脑补在rumpkernel出来之前，思科就已经有了一个更完善的rumpkernel，无非运行的是他家的iOS)，就是不拿个出来给你用，所以你就没法照着官方教程/文档自学。而有些比较好的厂家，你买他的路由器/交换机，他是会提供对应的模拟器给你的。[CITATION NEEDED]</p><p>所以很明显，一定是哪里出了问题。经过我的观察，我发现现在流行的深度学习工具都非常难用。你也知道，每隔几个星期，就有公司/团队跳出来说他们搞了个新的工具/框架，有这个那个优点，实际上和别家的工具差不多难用。举两个极端的例子，剩下的大多处于这两个之间。一种是theano，最大的优势是提供自动求导，可以非常灵活的表示各种模型，因为<a class=\"internal\" href=\"https://www.zhihu.com/question/45576145\">求导符号的问题</a>，不独立成单独一个文件，而是在一门现成的语言里面提供这个功能，用起来非常别扭。另一种是caffe，直接就做成了layer套layer，你想定义一个奇葩的模型，并不是光照着定义就行了，还有不少别的工作要做。</p><p> 他们各自的问题，我想了好久，发现并不是那么容易解决的。但是，我们一定要解决这些问题吗？我想是不需要的。像caffe那样把模型和训练文件分开，我们就不需要去寻找一个更好的求导符号。像theano那样提供自动求导，我们的写法就可以更贴近公式，而不是需要再学一套layer的定义。毕竟比如像上面说的，培训机构要开深度学习培训班，主要要讲的也是深度学习的模型，而不是这个caffe怎么用。同时也让深度学习不再神秘，不再是一堆看不懂的东西。</p><p>我又看了一下，用现有的开源工具拼凑一下就可以搞出来了。于是就有了这个系列。会一步一步教你如何实现一个简单的深度学习框架。会像<a class=\"internal\" href=\"https://zhuanlan.zhihu.com/p/20689554\">lisp0</a>一样，轮子虽小，五脏俱全。 该有的都会有，能抄近路的地方也会毫不犹豫的过去。</p><p>目前的想法是，使用时，需要三个文件，模型文件，训练文件，以及数据读取文件。提供一个转换工具，可以将比如caffe等的模型转换过来，这个是有必要的，见底下分析。模型文件里面就是一些简单的公式。而公式的格式为了方便起见，不引入运算符优先级，强制必须加括号。会顺便介绍一下如何自动求导，自动并行(SIMD或者多线程)等等相关技术。至于生成是原生程序还是JavaScript，待定。 <br></p><br><p>先占坑。免得忘了。</p><p>-----</p><p>顺便推荐一个更好用的自动求导工具。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/HIPS/autograd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">autograd<i class=\"icon-external\"></i></a></p><p>缺陷是，你需要特别注意，这个自动求导的功能指的是对函数第一个参数求导。 所以，所有需要求导的都得以第一个参数传进去</p><p>比如这个<a href=\"https://link.zhihu.com/?target=https%3A//mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Step by Step Backpropagation Example<i class=\"icon-external\"></i></a>， 可以写成</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">import</span> <span class=\"nn\">autograd.numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autograd</span> <span class=\"kn\">import</span> <span class=\"n\">grad</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n    <span class=\"p\">(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"n\">B1</span><span class=\"p\">),(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">B2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">params</span>\n    <span class=\"n\">hidden</span> <span class=\"o\">=</span> <span class=\"n\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">B1</span><span class=\"p\">)</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">sigmoid</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">hidden</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">B2</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loss</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">,</span><span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">-</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">))</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n\n<span class=\"n\">loss_grad</span> <span class=\"o\">=</span> <span class=\"n\">grad</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"n\">grad</span> <span class=\"o\">=</span> <span class=\"n\">loss_grad</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"nb\">input</span><span class=\"p\">,</span><span class=\"n\">target</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[(</span><span class=\"n\">W</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">dW</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">dB</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">((</span><span class=\"n\">dW</span><span class=\"p\">,</span><span class=\"n\">dB</span><span class=\"p\">),(</span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"n\">B</span><span class=\"p\">))</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">grad</span><span class=\"p\">,</span><span class=\"n\">params</span><span class=\"p\">)]</span>\n\n<span class=\"n\">W1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"mf\">0.15</span><span class=\"p\">,</span><span class=\"mf\">0.20</span><span class=\"p\">],</span>\n      <span class=\"p\">[</span><span class=\"mf\">0.25</span><span class=\"p\">,</span><span class=\"mf\">0.30</span><span class=\"p\">]])</span>\n\n<span class=\"n\">B1</span> <span class=\"o\">=</span> <span class=\"mf\">0.35</span>\n\n<span class=\"n\">W2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"mf\">0.40</span><span class=\"p\">,</span><span class=\"mf\">0.45</span><span class=\"p\">],</span>\n      <span class=\"p\">[</span><span class=\"mf\">0.50</span><span class=\"p\">,</span><span class=\"mf\">0.55</span><span class=\"p\">]])</span>\n\n<span class=\"n\">B2</span> <span class=\"o\">=</span> <span class=\"mf\">0.60</span>\n\n<span class=\"n\">PARAMS</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">W1</span><span class=\"p\">,</span><span class=\"n\">B1</span><span class=\"p\">),(</span><span class=\"n\">W2</span><span class=\"p\">,</span><span class=\"n\">B2</span><span class=\"p\">)]</span>\n<span class=\"n\">INPUT</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.05</span><span class=\"p\">,</span><span class=\"mf\">0.10</span><span class=\"p\">])</span>\n<span class=\"n\">TARGET</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.01</span><span class=\"p\">,</span><span class=\"mf\">0.99</span><span class=\"p\">])</span>\n\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">PARAMS</span> <span class=\"o\">=</span> <span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">PARAMS</span><span class=\"p\">,</span><span class=\"n\">INPUT</span><span class=\"p\">,</span><span class=\"n\">TARGET</span><span class=\"p\">)</span>\n</code></pre></div><p>这可比一堆数学公式容易理解多了。</p>",
            "image_url": "",
            "title": "7天自制深度学习框架",
            "excerpt_title": "",
            "excerpt": "上一篇 <a class=\"\" data-title=\"[标题党]15分钟开发可支持百万观众的H5视频直播网站 - impress your cat - 知乎专栏\" data-editable=\"true\" href=\"https://zhuanlan.zhihu.com/p/20325539\">15分钟开发可支持百万观众的H5视频直播网站</a> 虽然骗了很多赞，很显然，不会有啥实际影响。毕竟WebRTC服务端要写一遍，代码量还是很大的。光ICE就不是几行代码能讲清楚的。那么换一个容易的目标。现在深度学习非常火爆，可是，很遗憾，我没有看到有知…"
        },
        {
            "type": "article",
            "updated": 1461077690,
            "id": 20774580,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1461077690,
            "url": "",
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//erlang3437.slack.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">erlang3437.slack.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>前两天试了一下，感觉还行，至少他还提供一个凑合的gateway支持IRC和XMPP。就去注册一个，结果Slack嫌我给的域名太长不让我注册。后来我想了一下就注册了这个域名。评论或者私信或者邮件告诉我你的邮箱，<b>我就赶紧把你加进去</b>。</p><p>第一章内容重新调整之后，现在路线是一上来，学了一点点Erlang之后，就直接用学的这些东西写一个能解释之前刚学的这部分Erlang的解释器。在自己实现调用栈之后，就加上send/recv这两个特殊函数，使得刚好功能和最原始的Erlang一致。毕竟在消息之前已经实现一些Erlang的功能了，实在没必要用Prolog再来一遍。因此，Prolog部分也可以简化，只保留比Datalog对应的过来多一点点的就够了，高级的operator功能都先无视了。这几天先会完成Prolog部分的代码。我想在6月底之前完成到Prolog那一节之前的内容，因为现在已经有PEG风格的parser了，所以主要就缺一个好的backtracking的例子了。这样一开始几个节的思路理顺了，接下来几个21天还会有很多内容出现，所以我去弄了个Slack Team方便大家吐槽。</p>",
            "image_url": "",
            "title": "21天学通Erlang Slack Team",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"slack.com 的页面\" data-editable=\"true\" href=\"https://erlang3437.slack.com/\">https://erlang3437.slack.com/</a>前两天试了一下，感觉还行，至少他还提供一个凑合的gateway支持IRC和XMPP。就去注册一个，结果Slack嫌我给的域名太长不让我注册。后来我想了一下就注册了这个域名。评论或者私信或者邮件告诉我你的邮箱，<b>我就赶紧把你加进去</b>。第一章内…"
        },
        {
            "type": "article",
            "updated": 1460811068,
            "id": 20760395,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1460811009,
            "url": "",
            "content": "<p>因为现在在最最基本的语法之后，直接就开始解释Erlang的AST了，而不是从括号语言那里取绕了。而之前的做法有个问题是，在Prolog之后才开始写parser，但是要解释Prolog就得先写个parser。现在既然已经在用AST了，那么引入parse_transform也不是什么问题。所以可以用一个简单的parse_transform把代码转换成PEG风格的parser。所以在能解释之前所有Erlang模块的AST之后，就开始写PEG parser。这样在Prolog前就有parser了，且在backtracking之前过渡更自然一点。</p><p>expression.erl 类似 Erlang Shell 里解释Erlang表达式的功能。比如 </p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,[{</span><span class=\"n\">'X'</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}]}</span> <span class=\"o\">=</span> <span class=\"nn\">expression</span><span class=\"p\">:</span><span class=\"nf\">eval_string</span><span class=\"p\">(</span><span class=\"s\">\"X.\"</span><span class=\"p\">,[{</span><span class=\"n\">'X'</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">}]).</span>\n</code></pre></div><p>function.erl 更进一步，能解释单个模块里的函数，比如</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nn\">function</span><span class=\"p\">:</span><span class=\"nf\">test</span><span class=\"p\">({</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"s\">\"seq.erl\"</span><span class=\"p\">}).</span>\n</code></pre></div><p> 相当于</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">seq</span><span class=\"p\">:</span><span class=\"nf\">test</span><span class=\"p\">().</span>\n</code></pre></div><p>只是所有seq里的函数是由function.erl来解释的。目前，运行seq.erl, board.erl, bindings.erl, expression.erl以及function.erl都没有问题。</p><p>最简单的parse_transform，实现的功能相当于</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">(</span><span class=\"n\">export_all</span><span class=\"p\">).</span>\n</code></pre></div><p>因为是parse_transform，所以得这么用</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">({</span><span class=\"n\">parse_transform</span><span class=\"p\">,</span> <span class=\"n\">export_all</span><span class=\"p\">}).</span>\n</code></pre></div><p>接下来就可以有PEG transform了。plain Erlang风格写个简单的parse整数的功能<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nf\">digit</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span>\n  <span class=\"k\">when</span> <span class=\"nv\">H</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">=&lt;</span> <span class=\"sc\">$9</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">-</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">};</span>\n<span class=\"nf\">digit</span><span class=\"p\">(_</span><span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">error</span><span class=\"p\">.</span>\n\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nv\">Acc1</span> <span class=\"o\">=</span> <span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"nv\">N</span><span class=\"p\">,</span>\n            <span class=\"k\">case</span> <span class=\"n\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc1</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n                <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N1</span><span class=\"p\">,</span> <span class=\"nv\">S2</span><span class=\"p\">};</span>\n                <span class=\"n\">error</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Acc1</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span>\n            <span class=\"k\">end</span><span class=\"p\">;</span>\n        <span class=\"n\">error</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">error</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>有了peg_transform之后，可以只关心能匹配的情况，不匹配的情况自动返回error。特别的int函数，第一个clause失败后会尝试第二个clause。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">compile</span><span class=\"p\">({</span><span class=\"n\">parse_transform</span><span class=\"p\">,</span> <span class=\"n\">peg_transform</span><span class=\"p\">}).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">rules</span><span class=\"p\">([</span><span class=\"n\">int</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">digit</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">digit</span><span class=\"p\">([</span><span class=\"nv\">H</span><span class=\"p\">|</span><span class=\"nv\">T</span><span class=\"p\">])</span>\n  <span class=\"k\">when</span> <span class=\"nv\">H</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">=&lt;</span> <span class=\"sc\">$9</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">H</span> <span class=\"o\">-</span> <span class=\"sc\">$0</span><span class=\"p\">,</span> <span class=\"nv\">T</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"c\">%%</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">),</span> <span class=\"c\">%%</span>\n    <span class=\"n\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">);</span>\n<span class=\"nf\">int</span><span class=\"p\">(</span><span class=\"nv\">Acc</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">(</span><span class=\"nv\">S</span><span class=\"p\">),</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Acc</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"o\">+</span><span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">S1</span><span class=\"p\">}.</span>\n</code></pre></div><p>失败包括两种情况，一种是clause的pattern不匹配，另一种不匹配是发生在类似这种地方</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Expr</span><span class=\"p\">,</span> <span class=\"nv\">Remain</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"n\">rule</span><span class=\"p\">(...)</span>\n</code></pre></div><p>利用peg_transform，就可以写一个简单的parser，替换掉 parse_util:parse_expr/1</p><p>这些代码都已经在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/skeleton\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - xn--21Erlang-p00o82pmp3o/skeleton<i class=\"icon-external\"></i></a> 里更新了。</p>",
            "image_url": "",
            "title": "第6/7/8/9个21天",
            "excerpt_title": "",
            "excerpt": "因为现在在最最基本的语法之后，直接就开始解释Erlang的AST了，而不是从括号语言那里取绕了。而之前的做法有个问题是，在Prolog之后才开始写parser，但是要解释Prolog就得先写个parser。现在既然已经在用AST了，那么引入parse_transform也不是什么问题。所…"
        },
        {
            "type": "article",
            "updated": 1460353659,
            "id": 20734035,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1460353587,
            "url": "",
            "content": "<p>有几大理由<br></p><p>尽管有很大的缺陷，依然被广泛用于教学。Haskell的Lazy by default在很多时候不仅用不着反而会带来不必要的麻烦。而Java是伪装成静态类型的动态类型语言。</p><p>很多Haskell粉丝把immutable当成了FP，却对真正的FP风格嗤之以鼻。用真正FP风格的Haskell代码大约长这样 (. (.) . (. . (. .)) . .) 。 很多Java粉丝把class interface当成了OO，却对真正的OO风格嗤之以鼻，(Java代码太长，故略) ...</p><p>他们都有很多听上去高大上实际上很简单的名词，有不少初学者对此感到困惑。比如，单子。</p>",
            "image_url": "",
            "title": "Haskell is the new Java",
            "excerpt_title": "",
            "excerpt": "有几大理由 尽管有很大的缺陷，依然被广泛用于教学。Haskell的Lazy by default在很多时候不仅用不着反而会带来不必要的麻烦。而Java是伪装成静态类型的动态类型语言。很多Haskell粉丝把immutable当成了FP，却对真正的FP风格嗤之以鼻。用真正FP风格的Haskell…"
        },
        {
            "type": "article",
            "updated": 1460174219,
            "id": 20725914,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1460127528,
            "url": "",
            "content": "<p>在删一些旧文件时，突然想到了这个问题。顺便黑一下Peter Norvig的 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//norvig.com/21-days.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Teach Yourself Programming in Ten Years<i class=\"icon-external\"></i></a> 。他这篇文章除了\"Why is everyone in such a rush?\"是对的，给的建议经不起时间的考验。对于过去十年来说，最好的办法实际上啥也不学等十年才是最划算的，尤其是对于十年之前的我来说。</p><p>十年之前烂尾的程序，在我现在看来，要么就是完全不值得写，要么想写只要有几天时间就可以写出来。很多十年前，完全不敢想像自己也能写的程序，现在竟然已经写过不少了。看上去好像取得了非常大的进步，可是仔细一想把现在的我直接扔到十年前，该烂尾的还是会烂尾，写不出来的还是写不出来。</p><p>这十年间</p><p>出现了Stack Overflow。以前随便碰到个小问题都足以使一个程序烂尾了，特别是对于我这种业余的来说，花几天时间去解决一个小问题完全是不现实的。现在，绝大多数都只要从Stack Overflow上复制几行代码就好了。<br></p><p>git/hg之类的DVCS成为了主流，而在十年前，我想我从来就没搞明白过CVS和SVN。我承认我是在学会git或者hg的基本操作之后才搞明白SVN的，那时已经没几个项目在用CVS了，也就无视了。写程序而不用版本管理工具是完全无法想象的。</p><p>国外有很多不错的课程对于只要买得起普通电脑的人来说，自学已经没有任何障碍了。比如MIT 6.828，现在已经只需要用vanilla QEMU就可以了。而在之前，很多类似的课程用的都不是x86指令集，或者需要打过一些奇怪补丁的QEMU或者别的什么(包括MIT 6.828)。更多的是直接让你死在boot-loader上。</p><p>还有至少大家都听说过Erlang了，当然绝大多数人都退缩了。而我并没有。很多问题，用Erlang进行快速原型开发要容易多了，假如你退缩了，你就注意不到了，比如解析H264 bit stream，用Erlang比用C还容易不少。</p><p>国内宽带也普及了。很多大学的各种开源镜像都已经比较完善了。很容易就能用上各种Linux发行版提供的打包好的库，而不是自己从不知道哪里去找源代码还不知道怎么编译。</p><p> 所以，这十年里，我唯一有效的努力就是试着学了一点Erlang(因为令人吃惊的事实是，大部分人都做不到这一点)，其他的进步都和自身努力无关，全是时代的进步带给我的。</p>",
            "image_url": "",
            "title": "个人的努力在时代的进步面前不值一提",
            "excerpt_title": "",
            "excerpt": "在删一些旧文件时，突然想到了这个问题。顺便黑一下Peter Norvig的 <a class=\"\" data-title=\"Teach Yourself Programming in Ten Years\" data-editable=\"true\" href=\"http://norvig.com/21-days.html\">Teach Yourself Programming in Ten Years</a> 。他这篇文章除了\"Why is everyone in such a rush?\"是对的，给的建议经不起时间的考验。对于过去十年来说，最好的办法实际上啥也不学等十年才是…"
        },
        {
            "type": "article",
            "updated": 1459387963,
            "id": 20689554,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1459350065,
            "url": "",
            "content": "<p>代码没写完，广告先打起来<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/lisp0\" target=\"_blank\" rel=\"nofollow noreferrer\"> GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP<i class=\"icon-external\"></i></a></p><br><p>学习高级语言Runtime最好的办法，当然是自己动手写一个啦。毫无疑问假如你不是特别喜欢走弯路的轮子哥，肯定选从容易的开始。那么就选最最原始的LISP好了(Brainfuck之类的过于简单，这里先忽略他们的存在)。lisp0不会像Lisp Machine是一台单独的机器，lisp0就是一个普通的运行在Linux的程序。</p><p>既然是把Runtime实现一遍，那么在操作系统之上全都自己来实现，连CRT和libc也不要用。因为Lisp语言自己就又栈了，所以C程序没事别递归，用的栈是非常有限的，于是用bss段里的一段内存当C语言的栈，而操作系统在启动时，分配来的栈，给Lisp用。这样虽然奇葩了点，非常省事啊。</p><p>因为(假装)lisp0是immutable的，所以只要简单的引用计数就可以了。不过这写起来麻烦，用一次就要增减一次。还不如先用个简单的Mark sweep GC。因为immutable，所以新的不能被旧的引用，在allocate后把他们串成一个栈，只要从新往旧扫一遍，在扫到时还没被标记，那就一定不会被标记到，可以放心的free。至于memory allocator，就用简陋的TLSF算法就好了，这算法看上去就像个增强版的Buddy allocator。<br></p><p>既然Lisp霸占了原本给C用的栈，使用方式也就和C保持一致好了。因为GCC支持Labels as Values，所以只要在CALL之后放一个label，那个label的值就是返回地址了。同时，因为symbol只接受[_0-9A-Za-z]+，所以长度小于等于8的symbol，经过base64解码之后长度就只有6字节了，而64位机器上去掉3位tag，还有61位，完全放的下。</p><p>接下来，lisp0应该改用HAMT来实现environment，换一个更好的GC。本文到此就结束了。</p>",
            "image_url": "",
            "title": "lisp0",
            "excerpt_title": "",
            "excerpt": "代码没写完，广告先打起来<a class=\"\" data-title=\"GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP\" data-editable=\"true\" href=\"https://github.com/bhuztez/lisp0\"> GitHub - bhuztez/lisp0: a bare minimum remake of origin LISP</a> 学习高级语言Runtime最好的办法，当然是自己动手写一个啦。毫无疑问假如你不是特别喜欢走弯路的轮子哥，肯定选从容易的开始。那么就选最最原始的LISP好了(Brainfuc…"
        },
        {
            "type": "article",
            "updated": 1459343169,
            "id": 20689218,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1459343170,
            "url": "",
            "content": "<p>假如您看得上只有仅仅2K+粉丝的专栏，刚好又没有专栏。任何和编程或者形式证明相关的，特别是能和Erlang, APL(包括APL家族的A+, J, K等等), Metamath等扯上关系的，欢迎来稿。</p><p>根据知乎专栏的新玩法，在知乎允许的范围(我也懒得了解了)内，假如有幸收录您的一篇投稿，就会把您列为作者之一，也就是下一次就可以直接发了。 (不知道能不能抢文章，那样就好玩了) </p>",
            "image_url": "",
            "title": "欢迎投稿本专栏",
            "excerpt_title": "",
            "excerpt": "假如您看得上只有仅仅2K+粉丝的专栏，刚好又没有专栏。任何和编程或者形式证明相关的，特别是能和Erlang, APL(包括APL家族的A+, J, K等等), Metamath等扯上关系的，欢迎来稿。根据知乎专栏的新玩法，在知乎允许的范围(我也懒得了解了)内，假如有幸收录您的…"
        },
        {
            "type": "article",
            "updated": 1458306921,
            "id": 20656358,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1458306921,
            "url": "",
            "content": "<p>之前只是解决了是否可能的问题。真正要能用，还是要把代码长度控制在允许的范围内。 <br></p><p>一是需要压缩率更高的算法</p><p><a class=\"internal\" href=\"https://www.zhihu.com/question/39504416/answer/88728975\">如何提高写在C语言里的汇编代码的压缩率？ - 知乎用户的回答</a></p><p>二是用gcc编译时，加上参数 -fwhole-program 而不是通常的 -flto <br></p><p>这样提交上去的代码长度不少就只有10K左右了。而算法库的源代码目前都已经接近50K了，无脑复制成一个文件已经没啥OJ会接受了。</p>",
            "image_url": "",
            "title": "向OJ提交编译出来的汇编代码2",
            "excerpt_title": "",
            "excerpt": "之前只是解决了是否可能的问题。真正要能用，还是要把代码长度控制在允许的范围内。 一是需要压缩率更高的算法<a class=\"internal\" href=\"https://www.zhihu.com/question/39504416/answer/88728975\">如何提高写在C语言里的汇编代码的压缩率？ - 知乎用户的回答</a>二是用gcc编译时，加上参数 -fwhole-program 而不是通常的 -flto 这样提交上去的代码…"
        },
        {
            "type": "article",
            "updated": 1457354480,
            "id": 20627628,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1457353305,
            "url": "",
            "content": "<p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/awesome-ancient-chinese-books\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - bhuztez/awesome-ancient-chinese-books: A curated list of awesome chinese books<i class=\"icon-external\"></i></a><br></p><p>暂时没时间维护。先把坑挖开，<b>求支持</b>。</p><p>目标就是整理个目录，把网上能找到的古籍的地址按书名记录好，以便查阅。 </p><p>主要是为了以后开发中文编程语言时有据可循，而不是自己胡编乱造</p><p>就是这样</p>",
            "image_url": "",
            "title": "Awesome Ancient Chinese Books",
            "excerpt_title": "",
            "excerpt": "<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/awesome-ancient-chinese-books\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - bhuztez/awesome-ancient-chinese-books: A curated list of awesome chinese books<i class=\"icon-external\"></i></a> 暂时没时间维护。先把坑挖开，<b>求支持</b>。目标就是整理个目录，把网上能找到的古籍的地址按书名记录好，以便查阅。 主要是为了以后开发中文编程语言时有据可循，而…"
        },
        {
            "type": "article",
            "updated": 1459343887,
            "id": 20612720,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1456835574,
            "url": "",
            "content": "<p>application/x-www-form-urlencoded这种比较简单就不讨论了。</p><p>multipart/form-data就比较麻烦了。搜了一下结果发现要么是远古时期的，要么就是推荐requests。有必要这么麻烦么？Python明明自带MIME库了，为啥就没人推荐用标准库的方法？只能自己来了</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"kn\">from</span> <span class=\"nn\">urllib2</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Form</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">,</span> <span class=\"s1\">'multipart/form-data'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_payload</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_write_headers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">_generator</span><span class=\"p\">):</span>\n        <span class=\"c1\"># DARK MAGIC followed</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Field</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_header</span><span class=\"p\">(</span><span class=\"s1\">'Content-Disposition'</span><span class=\"p\">,</span><span class=\"s1\">'form-data'</span><span class=\"p\">,</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_payload</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">form_data</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">Form</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span><span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">form_data</span><span class=\"o\">.</span><span class=\"n\">iteritems</span><span class=\"p\">():</span>\n        <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)))</span>\n\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">as_string</span><span class=\"p\">()</span>\n    <span class=\"c1\"># THIS IS A SEPARATION BARRIER</span>\n    <span class=\"c1\"># NEVER LET CODE MOVE ACROSS THIS</span>\n    <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s1\">'Content-Type'</span><span class=\"p\">]}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Request</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n</code></pre></div><p> 就是这样</p>",
            "image_url": "",
            "title": "[黑魔法]Python模拟HTML表单提交",
            "excerpt_title": "",
            "excerpt": "application/x-www-form-urlencoded这种比较简单就不讨论了。multipart/form-data就比较麻烦了。搜了一下结果发现要么是远古时期的，要么就是推荐requests。有必要这么麻烦么？Python明明自带MIME库了，为啥就没人推荐用标准库的方法？只能自己来了from url…"
        },
        {
            "type": "article",
            "updated": 1453387521,
            "id": 20521163,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1453387521,
            "url": "",
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/barelibc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/barelibc<i class=\"icon-external\"></i></a></p><p>在<a class=\"internal\" href=\"https://www.zhihu.com/question/39519315/answer/81747490\">为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答</a>的启发下，我把 __syscall 挪到 crt1.o 里去了，免得被覆盖还不知道。</p><p>之前可能没提用barelibc也可以支持一部分C++了。注意编译的命令是 gcc 而不是 g++，不然会链接 libstdc++ ，就见鬼了。</p><p>--------------------------</p><p>正式开始在刷题的库。主要卖点是写完运行一行命令可以生成能提交到OJ的代码。在正式发布之前暂时不会公开源代码。假如你手上有很多现成优质代码捐赠给我，那果断加入吧。<br></p><p>没代码，你也可以来完善这个TODO list。目标是收集各种topic，可能出现的题型，以及每个题型一个例题。以便我的库能覆盖所有常见题型。<br></p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/oj-solutions/blob/master/TODO.md\" target=\"_blank\" rel=\"nofollow noreferrer\">oj-solutions/TODO.md at master · bhuztez/oj-solutions · GitHub<i class=\"icon-external\"></i></a><br></p><p>欢迎Pull Request </p><p>--------------------------</p><p>另外，第6个21天的更新会和第7个21天一起发布</p>",
            "image_url": "",
            "title": "barelibc问题修复及其他",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"bhuztez/barelibc\" data-editable=\"true\" href=\"https://github.com/bhuztez/barelibc\">bhuztez/barelibc</a>在<a class=\"\" data-title=\"为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答\" data-editable=\"true\" href=\"https://www.zhihu.com/question/39519315/answer/81747490\">为什么链接时__libc_start_main和__syscall行为不同？ - bsdelf 的回答</a>的启发下，我把 __syscall 挪到 crt1.o 里去了，免得被覆盖还不知道。之前可能没提用barelibc也可以支持一部分C++了。注意编译的命令是 gcc 而不是 g++，不然会链接 …"
        },
        {
            "type": "article",
            "updated": 1452596309,
            "id": 20494114,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1452596265,
            "url": "",
            "content": "<p> 比如 x.c 的内容如下<br></p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">.globl main</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">.type main,@function</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"main:</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">movl $1,%eax</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"s\">\"</span><span class=\"se\">\\t</span><span class=\"s\">ret</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n</code></pre></div><p>编译，运行，可以看到退出代码确实是1</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ gcc -o x x.c\n$ ./x\n$ echo $?\n1\n$\n</code></pre></div><p>所以，理论上我们只需要把汇编代码，改写成C语言字符串就好了。</p><p>用 gcc -S -o- x.c 就能看到编译出来的汇编代码了</p><p>可是，发现在某些运行在Windows的OJ(用老版本的MinGW gcc)提交这些汇编代码时，会编译不过去，提示缺少 ___chkstk_ms ，假如关掉这个会导致程序出错。参考<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/8400118/what-is-the-purpose-of-the-chkstk-function\" target=\"_blank\" rel=\"nofollow noreferrer\">c++ - What is the purpose of the _chkstk() function?<i class=\"icon-external\"></i></a></p><p>假设当前函数栈横跨 B - E ，假如直接跳过C页访问D页，就出错了<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  A    B    C    D    E\n+----+----+----+----+----\n|    |    |    |    |\n+----+----+----+----+----\n       |         ^     |-&gt;\n</code></pre></div><p>暂时的办法就是直接抄一份现在版本的代码进去，反正也不长</p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//github.com/mirror/mingw-w64/blob/cf136d93e41ffff7f593230e20c5854a68322b5d/mingw-w64-libraries/winpthreads/src/libgcc/dll_dependency.S\" target=\"_blank\" rel=\"nofollow noreferrer\">mingw-w64/dll_dependency.S at cf136d93e41ffff7f593230e20c5854a68322b5d · mirror/mingw-w64 · GitHub<i class=\"icon-external\"></i></a><br></p><p>那C++怎么办？不同的libstdc++可能有不小的区别。需要关掉一些C++的功能，使得用gcc也能正常链接C++代码就没问题了。也就是使用以下命令编译</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gcc -fno-rtti -fno-exceptions\n</code></pre></div><p>-----------------------------------------------------------------------</p><p>这样生成出来的汇编代码很长，尝试压缩。比如</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"...movl...\"</span><span class=\"p\">)</span>\n</code></pre></div><p> 可以替换成</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#define M \"movl\"</span>\n<span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"...\"</span><span class=\"n\">M</span><span class=\"s\">\"...\"</span><span class=\"p\">)</span>\n</code></pre></div><p>这么做的好处是不需要考虑escape什么的。 可是压缩率不太行，找了几个文件试了一下，仅仅在10%-15%之间。</p>",
            "image_url": "",
            "title": "向OJ提交编译出来的汇编代码",
            "excerpt_title": "",
            "excerpt": "比如 x.c 的内容如下 asm(\"\\t.globl main\\n\"\n\"\\t.type main,@function\\n\"\n\"main:\\n\"\n\"\\tmovl $1,%eax\\n\"\n\"\\tret\\n\");\n编译，运行，可以看到退出代码确实是1$ gcc -o x x.c\n$ ./x\n$ echo $?\n1\n$\n所以，理论上我们只需要把汇编代码，改写成C语言字符串就好了…"
        },
        {
            "type": "article",
            "updated": 1450880877,
            "id": 20441953,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1450880689,
            "url": "",
            "content": "<p>珍爱生命，远离Coq邪教。 <a class=\"internal\" href=\"http://zhuanlan.zhihu.com/marisa/20439796\">传教文：Coq - The Dairy of Marisa - 知乎专栏</a></p><p>Coq超级难入门啊。比如我前1024次尝试都以失败告终。装完Coq之后就不知道自己在干什么了，就没找到一个能看的教程。</p><p>(以下内容根据官方教程改编。) </p><p>不推荐先用CoqIDE或者Proof General <br></p><p>先学会退出<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ coqtop\nWelcome to Coq ......\n\nCoq &lt; Quit.\n</code></pre></div><p>好，现在来证明第一个定理。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>Coq &lt; Theorem my_first_theorem :\nCoq &lt;   forall A B C : Prop,\nCoq &lt;     (A-&gt;(B-&gt;C)) -&gt; ((A-&gt;B)-&gt;(A-&gt;C)).\n1 subgoal\n  \n  ============================\n   forall A B C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; \n</code></pre></div><p>输入定理。Coq的显示，============================上方是假设，下方是待证明的命题。我们的目标就是从假设推出待证明的结果。 </p><p>先intros A<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros A.\n1 subgoal\n  \n  A : Prop\n  ============================\n   forall B C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; \n</code></pre></div><p>如下图所示，intros A这一步把我们一个开始的目标不妨称为X，转换成了一个新的目标不妨称为Y，只要证明了Y，我们就能证明X。也就是说，Coq通常证明过程是反着来的，把目标不断改写直到待证明的命题都是显然的或者都出现在上方的假设当中，证明就完成了。 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>                         intros A A : Prop\n======================= &lt;======== =======================\nforall A B C : Prop,              forall B C : Prop\n(A-&gt;B-&gt;C)-&gt;(A-&gt;B)-&gt;A-&gt;C           (A-&gt;B-&gt;C)-&gt;(A-&gt;B)-&gt;A-&gt;C\n</code></pre></div><p> 同样的 intros B, intros C<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros B.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  ============================\n   forall C : Prop, (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; intros C.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  ============================\n   (A -&gt; B -&gt; C) -&gt; (A -&gt; B) -&gt; A -&gt; C\n</code></pre></div><p>intros的另一种作用</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; intros H0.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  ============================\n   (A -&gt; B) -&gt; A -&gt; C\n\nmy_first_theorem &lt; intros H1.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  ============================\n   A -&gt; C\n\nmy_first_theorem &lt; intros H2.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   C\n</code></pre></div><p>不妨把上一个目标称为M，下面两个目标称为N。apply H0的意思是，只要证明了N，代入到H0中，我们就能证明M。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; apply H0.\n2 subgoals\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   A\n\nsubgoal 2 is:\n B \n</code></pre></div><p>也就是说，根据A和H0可以得到 B-&gt;C，再根据B可以得到C。 如下图所示</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>                  ...\n                  ======\n...    apply H0   A\n===== &lt;=========\nC                 ...\n                  ======\n                  B\n\n... 表示\n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n</code></pre></div><p>产生多个目标后，Coq会按顺序让你提供证明。因为H2就是A，所以，exact H2。 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; exact H2.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   B\n\nmy_first_theorem &lt; \n</code></pre></div><p> 类似的。apply H1, exact H2后，剩下一个目标的证明也完成了<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; apply H1.\n1 subgoal\n  \n  A : Prop\n  B : Prop\n  C : Prop\n  H0 : A -&gt; B -&gt; C\n  H1 : A -&gt; B\n  H2 : A\n  ============================\n   A\n\nmy_first_theorem &lt; exact H2.\nNo more subgoals.\n\nmy_first_theorem &lt; \n</code></pre></div><p> QED</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>my_first_theorem &lt; Qed.\nintros A.\nintros B.\nintros C.\nintros H0.\nintros H1.\nintros H2.\napply H0.\n exact H2.\n\n apply H1.\n exact H2.\n\nmy_first_theorem is defined\n\nCoq &lt; \n</code></pre></div><p>反过来，是不是感觉好多了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>A-&gt;(B-&gt;C), A  A-&gt;B, A\n============= =======\nB-&gt;C,         B\n======================\nC\n\n((A-&gt;(B-&gt;C)) /\\ (A-&gt;B) /\\ A) -&gt; C\n===================================\n((A-&gt;(B-&gt;C)) /\\ (A-&gt;B)) -&gt; (A-&gt;C)\n===================================\n(A-&gt;(B-&gt;C)) -&gt; ((A-&gt;B) -&gt; (A-&gt;C))\n\nA : Prop\nB : Prop\nC : Prop\n=============================\n(A-&gt;(B-&gt;C))-&gt;((A-&gt;B)-&gt;(A-&gt;C))\n\n||\n\\/\n\n==================================================\nforall A B C : Prop, (A-&gt;(B-&gt;C))-&gt;((A-&gt;B)-&gt;(A-&gt;C))\n</code></pre></div>",
            "image_url": "",
            "title": "Coq sucks.",
            "excerpt_title": "",
            "excerpt": "珍爱生命，远离Coq邪教。 <a class=\"\" data-title=\"传教文：Coq - The Dairy of Marisa - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/marisa/20439796\">传教文：Coq - The Dairy of Marisa - 知乎专栏</a>Coq超级难入门啊。比如我前1024次尝试都以失败告终。装完Coq之后就不知道自己在干什么了，就没找到一个能看的教程。(以下内容根据官方教程改编。) 不推荐先用CoqIDE或者Proof General…"
        },
        {
            "type": "article",
            "updated": 1450614614,
            "id": 20432737,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1450614614,
            "url": "",
            "content": "<p>调整了git仓库的名字，改成book了。GitHub Pages上也加上了链接。重新生成了PDF。</p><p>之前老是写完了不满意重写，反反复复两个小节都没写完。现在特别开了skeleton仓库(<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/skeleton\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/skeleton · GitHub<i class=\"icon-external\"></i></a>)，先把想到的都记下来，降低反馈以及参与的难度。等skeleton里讨论了差不多了再挪到book里。<br></p><p>所以赶紧来吐槽，来补充内容吧。</p>",
            "image_url": "",
            "title": "第5个21天",
            "excerpt_title": "",
            "excerpt": "调整了git仓库的名字，改成book了。GitHub Pages上也加上了链接。重新生成了PDF。之前老是写完了不满意重写，反反复复两个小节都没写完。现在特别开了skeleton仓库(<a data-title=\"xn--21Erlang-p00o82pmp3o/skeleton · GitHub\" data-editable=\"true\" class=\"\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/skeleton\">xn--21Erlang-p00o82pmp3o/skeleton · GitHub</a>)，先把想到的都记下来，降低反馈以及参与的…"
        },
        {
            "type": "article",
            "updated": 1449976820,
            "id": 20412482,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1449932672,
            "url": "",
            "content": "<p>很多公司都在开发自己的监控系统。出发点肯定是现有的并不够好用。而这个看上去很容易嘛，那就自己开发一个。(尽管我不认同这个答案的观点) <a class=\"internal\" href=\"https://www.zhihu.com/question/27464246/answer/75704392\">为什么很多公司都自主开发监控系统？（Linux运维方面） - gashero 的回答</a> 一针见血的指出了很多公司自己开发的结果是把时间都花在了怎么采集数据，怎么展示上了，往往最后还不如现成的开源的方案。这不就是在浪费时间啊。<br></p><p>我认为他们几乎都掉进了<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Inventor%27s_paradox\" target=\"_blank\" rel=\"nofollow noreferrer\">Inventor's paradox<i class=\"icon-external\"></i></a> 。 毫无疑问，一开始开发的时候，就会以XXX为目标，把所有XXX中需要的功能都山寨一遍，等这个OK了，替换掉XXX，接着开发自己需要的功能。这实际上是没有必要的，无非是自己给自己设限制。</p><p>不仅仅是机器的状态，某个端口能不能连上需要监控。更细的，比如统计IP包的Header，看看是不是有人在攻击你的服务，更贴近业务的，比如某个时间段，来自某个地区的访问是不是突然消失了，又比如付钱是不是突然都失败了。这些东西都是监控要做的。</p><p>转换到这种思路之后，你就不会再考虑自己去实现采集数据的功能了，因为根本就不知道会有哪些数据，而是反过来，提供一些接口，要求需要使用监控的一方自己来提供数据。有现成开源的采集数据的工具就先用着再说。展示也是类似的，提供一个取数据的接口，至于怎么展示那是需要使用监控的一方自己说了算。</p><p>那监控到底要做什么呢？首先当然是报警啦。而很多工具报警的功能就只针对某一个非常小的领域，要加别的类型的报警很不容易，更别说大部分实现实际上报警是定时读一下日志判断要不要报警的。报警不是单纯的发出通知就够了，肯定需要限制发送频率，也肯定需要能合并多个通知。定时读日志尽管产生报警可以做到stateless，发送报警通知是不可能做到stateless，用adhoc, informally-specified, bug-ridden, ...的方式来存这个状态，往往就是导致使用者想自己开发的导火索。</p><p>而这些实际上可以用Complex Event Processing/Event Stream Processing(buzzword)的形式统一起来。把一个比较通用的实时事件流分析处理的功能做好了，报警的问题就迎刃而解了。而开发这么一个东西需要的技术，在2000年前后就已经是路人皆知了。现在最推荐的是看<a href=\"https://link.zhihu.com/?target=http%3A//web.cecs.pdx.edu/%7Etufte/410-510DS/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Portland State University CS 510-Data Streams<i class=\"icon-external\"></i></a>这个课程提到的相关资料。<br></p><p>因为等了好多年，发现实在是没有堪用的。于是我决定自己写一个了。毫无疑问，这个语言得选Erlang。很多实现一个stream operator就有一个消息队列，还要弄个scheduler把这几个operator调度来调度去的。用Erlang这些事都省了。</p><p>当然了，现在写的这一个derecho并不会是一个实用的版本，因为现在这个还是单机的，而且是完全按顺序处理的。主要是为了尝试一个新想法，既然大部分这种流处理都是DAG，为什么不直接用Erlang代码来写呢，变量之间的依赖关系不刚好是一个DAG么，用List来代替流，测试一个查询的功能更方便直观了。</p><p>现在derecho只是刚刚开始，刚刚把第一个例子跑起来。就是一个非常常见的例子，计算某个拍卖物品最高竞拍价格。当你实用streams这个parse_transform的时候，streams:query里面的代码就会被转换成流的查询。而不用parse_transform，那就是对普通的List操作(这个还没写)。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"k\">query</span><span class=\"p\">(</span>\n  <span class=\"k\">fun</span> <span class=\"p\">(</span><span class=\"nv\">Bid</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nv\">Price</span> <span class=\"o\">=</span>\n          <span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"nf\">groupby</span><span class=\"p\">(</span>\n            <span class=\"k\">fun</span><span class=\"p\">(</span><span class=\"nv\">P</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n                    <span class=\"nn\">streams</span><span class=\"p\">:</span><span class=\"nf\">aggregate</span><span class=\"p\">(</span><span class=\"nn\">aggregate</span><span class=\"p\">:</span><span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">price</span><span class=\"p\">),</span> <span class=\"nv\">P</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span><span class=\"p\">,</span>\n            <span class=\"n\">item</span><span class=\"p\">,</span>\n            <span class=\"nv\">Bid</span><span class=\"p\">),</span>\n      <span class=\"p\">{</span><span class=\"nv\">Price</span><span class=\"p\">}</span>\n  <span class=\"k\">end</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"n\">bid</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"n\">bid_price</span><span class=\"p\">]),</span>\n</code></pre></div><p>欢迎各种Issue/Pull Request</p><p><a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/derecho\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/derecho · GitHub<i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "derecho",
            "excerpt_title": "",
            "excerpt": "很多公司都在开发自己的监控系统。出发点肯定是现有的并不够好用。而这个看上去很容易嘛，那就自己开发一个。(尽管我不认同这个答案的观点) <a class=\"internal\" href=\"https://www.zhihu.com/question/27464246/answer/75704392\">为什么很多公司都自主开发监控系统？（Linux运维方面） - gashero 的回答</a> 一针见血的指出了很多公司自己开发的结果…"
        },
        {
            "type": "article",
            "updated": 1448852454,
            "id": 20377683,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1448810209,
            "url": "",
            "content": "<p> GitHub Pages上先把英文都删了，因为实在没法看。英文就等大家的Pull Request了。另外，你觉得有任何问题，果断开Issue或者Pull Request。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang<i class=\"icon-external\"></i></a></p><p>按上一个21天所说的那样，删掉了之前照搬McCarthy最早的LISP。而是直接用Erlang了。 代码已经有了，文字内容还没有。</p><p>接下来几个21天的主要内容就是赶紧加上Backtracking和Unification变成Prolog。<br></p><p>假如你发现了什么问题，赶紧去报告Issue。假如你有内容写好了，那赶紧来发Pull Request。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn · GitHub<i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "第4个21天",
            "excerpt_title": "",
            "excerpt": "GitHub Pages上先把英文都删了，因为实在没法看。英文就等大家的Pull Request了。另外，你觉得有任何问题，果断开Issue或者Pull Request。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang<i class=\"icon-external\"></i></a>按上一个21天所说的那样，删掉了之前照搬McCarthy最早的LISP。而是直接用Erlang了。 代码已经有了，文…"
        },
        {
            "type": "article",
            "updated": 1448028584,
            "id": 20357175,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1448027517,
            "url": "",
            "content": "<p>最近萧井陌开始了<a href=\"http://zhuanlan.zhihu.com/xiao-jing-mo/20353331\" class=\"internal\">如何写好代码系列 - 萧井陌的专栏 - 知乎专栏</a> 。不难看出，情况正在往那个著名的笑话 (<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.infiltec.com/j-h-wrld.htm\" target=\"_blank\" rel=\"nofollow noreferrer\">INFILTEC: HUMOR: \"Hello World\" programs<i class=\"icon-external\"></i></a>) 的方向发展，萧井陌正是那个Master Programmer</p><p>他举的那个例子，代码并没有他说的那么糟糕，毕竟就这么简单一个功能，还能写成啥样呢？唯一能肯定的问题在于作者并不是很了解Python。一个不是很确定的问题是没有写测试，而是把测试文件放到单独的文件里了，这也很可能是因为不了解Python导致的。</p><p>只要作一些微小的修改就已经足够好了<br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read_json_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        &gt;&gt;&gt; USERS = [ {\"id\": 167, \"name\": \"Mike\"},</span>\n<span class=\"sd\">        ...           {\"id\": 168, \"name\": \"Joe\"},</span>\n<span class=\"sd\">        ...           {\"id\": 169, \"name\": \"Robert\"},</span>\n<span class=\"sd\">        ...         ]</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; MESSAGES = [ {\"user\": 167, \"ts\": 946684800.0, \"text\": \"Hello, Joe\"},</span>\n<span class=\"sd\">        ...              {\"user\": 168, \"ts\": 946684805.0, \"text\": \"Hello, Mike\"},</span>\n<span class=\"sd\">        ...            ]</span>\n<span class=\"sd\">        &gt;&gt;&gt; main(USERS, MESSAGES)</span>\n<span class=\"sd\">        167 Mike</span>\n<span class=\"sd\">        168 Joe</span>\n<span class=\"sd\">        169 Robert</span>\n<span class=\"sd\">        Sat Jan  1 08:00:00 2000 :</span>\n<span class=\"sd\">            Mike : Hello, Joe</span>\n<span class=\"sd\">        Sat Jan  1 08:00:05 2000 :</span>\n<span class=\"sd\">             Joe : Hello, Mike</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{id} {name}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]))</span>\n\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]:</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s2\">\"name\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{time:</span><span class=\"si\">%c</span><span class=\"s2\">} :</span><span class=\"se\">\\n</span><span class=\"s2\">{user:&gt;8} : {text}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                  <span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"ts\"</span><span class=\"p\">]),</span>\n                  <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">users</span><span class=\"p\">[</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">]],</span>\n                  <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">]))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"users.json\"</span><span class=\"p\">),</span>\n         <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"messages.json\"</span><span class=\"p\">))</span>\n</code></pre></div><p>这样你只需要运行</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>python2 -m doctest xxx.py\n</code></pre></div><p>就可以检查例子是否通过了</p><p>(正文完) <br></p><p>-------------------------------------- <br></p><p>现在是广告时间</p><p>以前脑残的时候，浪费了很长时间比较ORM哪家强。而很多时候，我们只是想利用关系运算把数据关联起来，而不是要ORM那种怪物。所以我写了个玩具库 warm ，用在这里挺合适的。 <br></p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"ch\">#!/usr/bin/env python2</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">warm</span> <span class=\"kn\">import</span> <span class=\"n\">RecordSet</span><span class=\"p\">,</span> <span class=\"n\">DictRows</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">Rows</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">read_json_file</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        &gt;&gt;&gt; USERS = [ {\"id\": 167, \"name\": \"Mike\"},</span>\n<span class=\"sd\">        ...           {\"id\": 168, \"name\": \"Joe\"},</span>\n<span class=\"sd\">        ...           {\"id\": 169, \"name\": \"Robert\"},</span>\n<span class=\"sd\">        ...         ]</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; MESSAGES = [ {\"user\": 167, \"ts\": 946684800.0, \"text\": \"Hello, Joe\"},</span>\n<span class=\"sd\">        ...              {\"user\": 168, \"ts\": 946684805.0, \"text\": \"Hello, Mike\"},</span>\n<span class=\"sd\">        ...            ]</span>\n<span class=\"sd\">        &gt;&gt;&gt; main(USERS, MESSAGES)</span>\n<span class=\"sd\">        167 Mike</span>\n<span class=\"sd\">        168 Joe</span>\n<span class=\"sd\">        169 Robert</span>\n<span class=\"sd\">        Sat Jan  1 08:00:00 2000 :</span>\n<span class=\"sd\">            Mike : Hello, Joe</span>\n<span class=\"sd\">        Sat Jan  1 08:00:05 2000 :</span>\n<span class=\"sd\">             Joe : Hello, Mike</span>\n<span class=\"sd\">        &gt;&gt;&gt;</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"n\">RecordSet</span><span class=\"p\">(</span><span class=\"s2\">\"User\"</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"name\"</span><span class=\"p\">),</span> <span class=\"n\">uniques</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,))</span>\n    <span class=\"n\">Message</span> <span class=\"o\">=</span> <span class=\"n\">RecordSet</span><span class=\"p\">(</span><span class=\"s2\">\"Message\"</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"user_id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"time\"</span><span class=\"p\">,</span> <span class=\"s2\">\"text\"</span><span class=\"p\">),</span> <span class=\"n\">uniques</span><span class=\"o\">=</span><span class=\"p\">())</span>\n    <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">user_id</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">()</span>\n\n    <span class=\"n\">DictRows</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n    <span class=\"n\">Rows</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">Message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"user\"</span><span class=\"p\">],</span>\n         <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromtimestamp</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"ts\"</span><span class=\"p\">]),</span>\n         <span class=\"n\">msg</span><span class=\"p\">[</span><span class=\"s2\">\"text\"</span><span class=\"p\">])</span>\n        <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">User</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{user.id} {user.name}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">user</span><span class=\"p\">))</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">Message</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s2\">\"{msg.time:</span><span class=\"si\">%c</span><span class=\"s2\">} :</span><span class=\"se\">\\n</span><span class=\"s2\">{msg.user.name:&gt;8} : {msg.text}\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"users.json\"</span><span class=\"p\">),</span>\n         <span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">read_json_file</span><span class=\"p\">(</span><span class=\"s2\">\"messages.json\"</span><span class=\"p\">))</span>\n</code></pre></div><p>太棒了，正如你所看到的那样，你可以写 msg.user.name 来获得用户名了。只可惜实现是渣。</p>",
            "image_url": "",
            "title": "别听萧井陌的 (2)",
            "excerpt_title": "",
            "excerpt": "最近萧井陌开始了<a data-title=\"如何写好代码系列 - 萧井陌的专栏 - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/xiao-jing-mo/20353331\">如何写好代码系列 - 萧井陌的专栏 - 知乎专栏</a> 。不难看出，情况正在往那个著名的笑话 (<a class=\"\" data-title='INFILTEC: HUMOR: \"Hello World\" programs' data-editable=\"true\" href=\"http://www.infiltec.com/j-h-wrld.htm\">INFILTEC: HUMOR: \"Hello World\" programs</a>) 的方向发展，萧井陌正是那个Master Programmer他举的那个例子，代码并没有他说的那么糟糕，毕竟就这么简单…"
        }
    ]
}