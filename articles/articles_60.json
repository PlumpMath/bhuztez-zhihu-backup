{
    "paging": {
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=80",
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=40",
        "is_end": false,
        "totals": 106,
        "is_start": false
    },
    "data": [
        {
            "type": "article",
            "updated": 1447938187,
            "id": 20354419,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1447938187,
            "url": "",
            "content": "<p>最近这段时间发生的各种各样的意外太多，没时间写东西。所以拖了很久，即便如此上一次说要写的东西总该写出来了吧。可是连这也没有，很无奈，我自己也忘了当时的思路是什么，花了好久，也就是到现在才想明白。</p><p>另外就是想了一下第一章感觉很别扭的地方该怎么改。本来在Prolog之前会先往miniKanren里绕一下的，当时没想明白怎么去掉这部分内容，现在想了一下，应该不是什么问题。在Prolog之后，原来是突然风格反转从top-down一下子变成了bottom-up，现在想了一下，可以先从只对一个predicate一种情况加tabling开始，这样过渡更自然一点。</p><p>就这样吧。 </p>",
            "image_url": "",
            "title": "第3个21天",
            "excerpt_title": "",
            "excerpt": "最近这段时间发生的各种各样的意外太多，没时间写东西。所以拖了很久，即便如此上一次说要写的东西总该写出来了吧。可是连这也没有，很无奈，我自己也忘了当时的思路是什么，花了好久，也就是到现在才想明白。另外就是想了一下第一章感觉很别扭的地方该怎么…"
        },
        {
            "type": "article",
            "updated": 1459343777,
            "id": 20325539,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1446896771,
            "url": "",
            "content": "<p>15分钟用Rails开发一个Blog有什么意思？那是2005年的Hipster追捧的玩具。</p><p>现在都已经是2015年了。HTML应该读作Hipster's Toolkit Made Live了。<br></p><p>既然是15分钟，那当然不是零基础的。</p><p>在开始之前，你需要满足以下要求</p><p>运行4.0以上Linux内核，并安装好v4l2loopback内核模块</p><p>GStreamer<br></p><p>Firefox 浏览器版本 &gt;= 40</p><p>检查设置 (about:config)<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>media.mediasource.enabled  true\nmedia.mediasource.mp4.enabled  true\nmedia.mediasource.webm.enabled  true\nmedia.mediasource.whitelist false (只有42以下版本需要)\n</code></pre></div><p>Erlang/OTP &gt;= 17.0<br></p><p>Emacs，以及erlang mode，能熟练使用C-c C-k</p><p>ebml-viewer <a class=\" external\" href=\"https://link.zhihu.com/?target=https%3A//code.google.com/p/ebml-viewer/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">code.google.com/p/ebml-</span><span class=\"invisible\">viewer/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>Matroska spec data <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/Matroska-Org/foundation-source/blob/master/spectool/specdata.xml\" target=\"_blank\" rel=\"nofollow noreferrer\">foundation-source/specdata.xml at master · Matroska-Org/foundation-source · GitHub<i class=\"icon-external\"></i></a><br></p><h2><b>正文开始了</b><br></h2><p>都安装好以后，用gstreamer把测试信号输入到/dev/video0</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>gst-launch videotestsrc ! v4l2sink device=/dev/video0\n</code></pre></div><p><b>第一步</b>，先检查浏览器里能不能放这个视频信号。<br></p><p>media.html里就只放一个video标签。因为JavaScript可能要反复改，所以先叫media1.js了</p><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>hhhhh TV<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"media1.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">video</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"video\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">video</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>media1.js很简单，直接把video的src设置成这个stream的url就完了。</p><p><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaDevices.getUserMedia()<i class=\"icon-external\"></i></a> ，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\" target=\"_blank\" rel=\"nofollow noreferrer\">URL.createObjectURL()<i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>用Firefox打开这个media.html之后，先会询问是否要share selected device。</p><p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic3.zhimg.com/678a6159a646cd50daa29bbfda92c72e_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic3.zhimg.com/678a6159a646cd50daa29bbfda92c72e_r.png\">点了按钮之后，视频就开始播放了</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/ebe86f3b7cd39fa477047470d2bf6f15_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/ebe86f3b7cd39fa477047470d2bf6f15_r.png\"><p><b>第二步</b>，直接把video.src设置成这个stream的url，只能在这一个浏览器里播。我们得拿到视频数据。这个很容易，使用 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaRecorder<i class=\"icon-external\"></i></a> API就可以了。</p><p>media2.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>重新打开 media.html ，share了之后，再选stop sharing</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic3.zhimg.com/b2bde246703f4fe98dea800883d249d2_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic3.zhimg.com/b2bde246703f4fe98dea800883d249d2_r.png\"><br><p>可以看到 dataavailable 事件<br></p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic1.zhimg.com/88293a7e685d814fbd9d17424e75b3f4_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic1.zhimg.com/88293a7e685d814fbd9d17424e75b3f4_r.png\"><p><b>第三步</b>，这样的问题是，所有视频数据都是stop sharing之后一次取到的，所以并不能直播。至少得能每隔一段时间取一次。这也很简单。</p><p>media3.js只是把 media2.js的<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n</code></pre></div><p>改成了</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n</code></pre></div><p>这样，不需要点 stop sharing 就能每隔大约2秒取到视频数据了</p><img data-rawheight=\"368\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/2ee4d41cef823f7c0062d53483cea5d1_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/2ee4d41cef823f7c0062d53483cea5d1_r.png\"><p><b>第四步</b>，播放取到的视频数据。先播放第二步取到的整段视频数据。<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/MediaSource\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MediaSource - Web APIs<i class=\"icon-external\"></i></a></p><p>很不幸，从MediaRecorder里得到的是Blob，而MediaSource需要的ArrayBuffer，所以还得先用 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/FileReader\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FileReader<i class=\"icon-external\"></i></a> 转一下。</p><p>media4.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p> 点stop sharing之后，可以看到视频开始播放了。 <br></p><br><p><b>第五步</b>，播放第三步取到的分段视频数据。因为SourceBuffer同时只能有一个appendBuffer。作一些简单的处理，假如正在update，就等updateend之后，在来调用appendBuffer。另外，等append超过2个buffer之后再开始播放，而不是像media4.js那样加入一个buffer之后立即开始播放。</p><p>media5.js<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>             \n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><br><p><b>第六步</b>，从第N个分段开始播放。这个看上去，很简单，只要跳过前几个分段就可以了。而实际上第一个分段是不一样的。</p><p>Firefox里MediaRecorder默认用的是webm格式。直播时，一开始是一个EBML header。接着定义一个size非常大(目前定义的范围内最大)的Segment，Segment里，一开始是一些Track信息之类的东西，后面就是Cluster了。除了第一个分段，后面都是很多个Cluster。 </p><p><a href=\"https://link.zhihu.com/?target=http%3A//w3c.github.io/media-source/webm-byte-stream-format.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WebM Byte Stream Format<i class=\"icon-external\"></i></a><br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>EBML\n  ..\nSegment size=2^56-1\n  ...\n  Cluster\n  Cluster\n  Cluster\n</code></pre></div><p> 所以，我们要做的就是找出第一个Cluster所在位置，并把之前的部分取出来，加到SourceBuffer里，可是这样视频在videoElem.play()之后并没有开始播放 !!! 还需要把videoElem.currentTime 设置成，加到SourceBuffer里的第一个Cluster的时间。</p><p>media6.js</p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"nx\">c</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">8</span> <span class=\"o\">-</span> <span class=\"nx\">length</span><span class=\"p\">));</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">view</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DataView</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x1a45dfa3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"EBML Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Bad EBML Size\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">ebml_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">ebml_size</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">segment_offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x18538067</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Segment Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">size_length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">segment_offset</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">size_length</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mh\">0x1F43B675</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">elem_length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">elem_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">elem_length</span><span class=\"p\">);</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">elem_length</span> <span class=\"o\">+</span> <span class=\"nx\">elem_size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">skipped</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n\n        <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s1\">'sourceopen'</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n                <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"updateend\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">currentTime</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n                                <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>             \n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">skipped</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header</span> <span class=\"o\">=</span> <span class=\"nx\">buffer</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">));</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"nx\">header</span><span class=\"p\">);</span>\n                <span class=\"nx\">skipped</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n        <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n            <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                    <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                    <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">);</span>\n                <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">);</span>\n</code></pre></div><p><b>第七步</b>，现在就是要把这个拆成两部分，一部分录制上传，一部分下载播放。</p><p>不妨，每5秒一个分段，而每个分段，都用时间戳作为文件名，那么播放的时候只需要知道第一个Cluster的时间戳就可以计算出currentTime了。</p><p>假设实际使用时上传到AWS S3，我们还需要一个服务端，定时向上传的一端发送签名。在这里我们简化一下，只是用Server Sent Event向浏览器发送上传路径，其中第一个是 header.webm 用来上传 cluster 前面的所有字节。</p><p>h5tv.erl 用来启动。h5tv_storage_connection，用来模拟一个简化的S3，PUT上传文件，GET下载文件，不作任何检查，且根据文件名设置Content-Typeh5tv_channel_manager，用来记录 channel 信息。 h5tv_live_connection，则是主要就四个功能，返回channel列表，返回当前时间戳，返回某个channel最早的时间戳，提供Server Sent Event不断发送新的上传地址。</p><p>h5tv.erl<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">stop</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"p\">[]),</span>\n    <span class=\"nb\">register</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">).</span>\n\n<span class=\"nf\">stop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">?</span><span class=\"nv\">MODULE</span> <span class=\"o\">!</span> <span class=\"n\">stop</span><span class=\"p\">.</span>\n\n<span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">h5tv_tcp_listener</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(</span>\n      <span class=\"mi\">8000</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http_bin</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}],</span>\n      <span class=\"p\">{</span><span class=\"n\">h5tv_storage_connection</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"p\">[]}),</span>\n\n    <span class=\"nn\">h5tv_tcp_listener</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(</span>\n      <span class=\"mi\">8001</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">binary</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">active</span><span class=\"p\">,</span> <span class=\"n\">false</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">http_bin</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">reuseaddr</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}],</span>\n      <span class=\"p\">{</span><span class=\"n\">h5tv_live_connection</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"p\">[]}),</span>\n\n    <span class=\"nn\">h5tv_channel_manager</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">(),</span>\n\n    <span class=\"k\">receive</span>\n        <span class=\"n\">stop</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nb\">exit</span><span class=\"p\">(</span><span class=\"n\">shutdown</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>h5tv_channel_manager.erl，仅仅是分配一个Channel编号，并把信息存入ets。因为这是一个named_table，所以怎么读就不用管了。</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_channel_manager</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">behaviour</span><span class=\"p\">(</span><span class=\"n\">gen_server</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start_link</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">]).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">handle_call</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">handle_cast</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">handle_info</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n         <span class=\"n\">terminate</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">code_change</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">define</span><span class=\"p\">(</span><span class=\"no\">SERVER</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">).</span>\n\n<span class=\"nf\">start_link</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">start_link</span><span class=\"p\">({</span><span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"nv\">SERVER</span><span class=\"p\">},</span> <span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[]).</span>\n\n\n<span class=\"nf\">init</span><span class=\"p\">([])</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">new</span><span class=\"p\">(</span>\n      <span class=\"n\">h5tv_channels</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"n\">named_table</span><span class=\"p\">,</span> <span class=\"n\">set</span><span class=\"p\">,</span> <span class=\"n\">protected</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">read_concurrency</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">}]),</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}.</span>\n\n\n<span class=\"nf\">handle_call</span><span class=\"p\">({</span><span class=\"n\">create_channel</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">From</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">insert_new</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nv\">NextId</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">}),</span>\n    <span class=\"p\">{</span><span class=\"n\">reply</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span><span class=\"p\">,</span> <span class=\"nv\">NextId</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">handle_cast</span><span class=\"p\">(_</span><span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">handle_info</span><span class=\"p\">(_</span><span class=\"nv\">Info</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n\n<span class=\"nf\">terminate</span><span class=\"p\">(_</span><span class=\"nv\">Reason</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">State</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">ok</span><span class=\"p\">.</span>\n\n<span class=\"nf\">code_change</span><span class=\"p\">(_</span><span class=\"nv\">OldVsn</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Extra</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">State</span><span class=\"p\">}.</span>\n</code></pre></div><p>h5tv_tcp_listener.erl，只管accept连接，并spawn process来处理。</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_tcp_listener</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start_link</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start_link</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nb\">spawn_link</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">MODULE</span><span class=\"p\">,</span> <span class=\"n\">init</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">]).</span>\n\n<span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Sock</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nv\">Port</span><span class=\"p\">,</span> <span class=\"nv\">Options</span><span class=\"p\">),</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">).</span>\n\n<span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">accept</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">=</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Conn</span><span class=\"p\">|</span><span class=\"nv\">A</span><span class=\"p\">]),</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">controlling_process</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Pid</span><span class=\"p\">),</span>\n    <span class=\"nv\">Pid</span> <span class=\"o\">!</span> <span class=\"n\">continue</span><span class=\"p\">,</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Sock</span><span class=\"p\">,</span> <span class=\"nv\">Handler</span><span class=\"p\">).</span>\n</code></pre></div><p>h5tv_storage_connection.erl 。文件路径以当前目录下的static为根目录。</p><p>需要注意的是，这里会自动把 / 当成 /index.html<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_storage_connection</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)).</span>\n\n\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".html\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"text/html; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".js\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/javascript; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".json\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/json; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\".css\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"text/css; charset=utf-8\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"nf\">content_type</span><span class=\"p\">(_)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"application/octet-stream\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">.</span>\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/index.html\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">});</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[</span><span class=\"nv\">Path</span><span class=\"p\">|_]</span> <span class=\"o\">=</span> <span class=\"nn\">binary</span><span class=\"p\">:</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"?\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n    <span class=\"k\">case</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">read_file</span><span class=\"p\">(</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"static/\"</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n              <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n              <span class=\"mi\">200</span><span class=\"p\">,</span>\n              <span class=\"n\">content_type</span><span class=\"p\">(</span><span class=\"nn\">filename</span><span class=\"p\">:</span><span class=\"nf\">extension</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">)),</span>\n              <span class=\"nv\">Bin</span><span class=\"p\">);</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n              <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">;</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'PUT'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_,</span> <span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[</span><span class=\"nv\">Name1</span><span class=\"p\">|_]</span> <span class=\"o\">=</span> <span class=\"nn\">binary</span><span class=\"p\">:</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"?\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n    <span class=\"nv\">Path</span> <span class=\"o\">=</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"static/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name1</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n    <span class=\"nv\">Dirname</span> <span class=\"o\">=</span> <span class=\"nn\">filename</span><span class=\"p\">:</span><span class=\"nf\">dirname</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">),</span>\n    <span class=\"k\">case</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">make_dir</span><span class=\"p\">(</span><span class=\"nv\">Dirname</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"n\">ok</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span><span class=\"p\">;</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">eexist</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">File</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">write</span><span class=\"p\">,</span> <span class=\"n\">binary</span><span class=\"p\">]),</span>\n    <span class=\"nv\">Size</span> <span class=\"o\">=</span> <span class=\"n\">binary_to_integer</span><span class=\"p\">(</span><span class=\"nn\">proplists</span><span class=\"p\">:</span><span class=\"nf\">get_value</span><span class=\"p\">(</span><span class=\"n\">'Content-Length'</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">)),</span>\n    <span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Request: </span><span class=\"si\">~p~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Request</span><span class=\"p\">]),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;400 Bad Request&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"text/plain\"</span><span class=\"p\">,</span>\n      <span class=\"s\">\"OK\"</span><span class=\"p\">);</span>\n<span class=\"nf\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Bin</span><span class=\"p\">),</span>\n            <span class=\"n\">write_file</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">,</span> <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Size</span><span class=\"o\">-</span><span class=\"nb\">byte_size</span><span class=\"p\">(</span><span class=\"nv\">Bin</span><span class=\"p\">));</span>\n        <span class=\"p\">{</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">closed</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nn\">file</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">File</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>h5tv_live_connection.erl 。这里值得注意的是把时钟间隔设置成了 2.5s ，这样很多时间戳会出现两次。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_live_connection</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">([</span><span class=\"n\">start</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)).</span>\n\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nv\">Body</span> <span class=\"o\">=</span>\n        <span class=\"p\">[</span> <span class=\"s\">\"[\"</span><span class=\"p\">,</span>\n          <span class=\"nn\">string</span><span class=\"p\">:</span><span class=\"nf\">join</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span> <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"{</span><span class=\"se\">\\\"</span><span class=\"s\">id</span><span class=\"se\">\\\"</span><span class=\"s\">: </span><span class=\"si\">~p</span><span class=\"s\">, </span><span class=\"se\">\\\"</span><span class=\"s\">name</span><span class=\"se\">\\\"</span><span class=\"s\">: </span><span class=\"se\">\\\"</span><span class=\"si\">~s</span><span class=\"se\">\\\"</span><span class=\"s\">}\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Id</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">])</span>\n              <span class=\"p\">||</span> <span class=\"p\">[{</span><span class=\"nv\">Id</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"p\">_}]</span> <span class=\"o\">&lt;-</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"n\">'$1'</span><span class=\"p\">)</span>\n            <span class=\"p\">],</span>\n            <span class=\"s\">\", \"</span><span class=\"p\">),</span>\n          <span class=\"s\">\"]\"</span><span class=\"p\">],</span>\n\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/timestamp\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span>\n      <span class=\"n\">get_timestamp</span><span class=\"p\">());</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/timestamp/\"</span><span class=\"p\">,</span> <span class=\"nv\">ID</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">[{_,_,</span><span class=\"nv\">Timestamp</span><span class=\"p\">}]</span> <span class=\"o\">=</span> <span class=\"nn\">ets</span><span class=\"p\">:</span><span class=\"nf\">lookup</span><span class=\"p\">(</span><span class=\"n\">h5tv_channels</span><span class=\"p\">,</span> <span class=\"n\">binary_to_integer</span><span class=\"p\">(</span><span class=\"nv\">ID</span><span class=\"p\">)),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"mi\">200</span><span class=\"p\">,</span>\n      <span class=\"s\">\"application/json\"</span><span class=\"p\">,</span>\n      <span class=\"nv\">Timestamp</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">'GET'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">abs_path</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"/live/\"</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"o\">/</span><span class=\"n\">binary</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"p\">_</span><span class=\"nv\">Headers</span><span class=\"p\">})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">timer</span><span class=\"p\">:</span><span class=\"nf\">send_interval</span><span class=\"p\">(</span><span class=\"mi\">2500</span><span class=\"p\">,</span> <span class=\"n\">refresh</span><span class=\"p\">),</span>\n    <span class=\"nv\">Timestamp</span> <span class=\"o\">=</span> <span class=\"n\">get_timestamp</span><span class=\"p\">(),</span>\n    <span class=\"nv\">ChannelId</span> <span class=\"o\">=</span> <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"n\">h5tv_channel_manager</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">create_channel</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">}),</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 200 OK</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: text/event-stream</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Access-Control-Allow-Origin: *</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Transfer-Encoding: chunked\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n       <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]),</span>\n    <span class=\"n\">send_header_path</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">),</span>\n    <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">),</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">);</span>\n<span class=\"nf\">handle_request</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">io</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"s\">\"Unknown Request: </span><span class=\"si\">~p~n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Request</span><span class=\"p\">]),</span>\n    <span class=\"nn\">h5tv_http_util</span><span class=\"p\">:</span><span class=\"nf\">http_response</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"s\">\"text/html\"</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"&lt;h1&gt;400 Bad Request&lt;/h1&gt;\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"n\">refresh</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"n\">loop</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">send_header_path</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_chunked</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span>\n        <span class=\"s\">\"data: </span><span class=\"si\">~p</span><span class=\"s\">/header.webm</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nv\">ChannelId</span><span class=\"p\">])).</span>\n\n\n<span class=\"nf\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"n\">get_timestamp</span><span class=\"p\">()).</span>\n\n\n<span class=\"nf\">send_timestamp</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">send_chunked</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"nn\">io_lib</span><span class=\"p\">:</span><span class=\"nf\">format</span><span class=\"p\">(</span>\n        <span class=\"s\">\"data: </span><span class=\"si\">~p</span><span class=\"s\">/</span><span class=\"si\">~s</span><span class=\"s\">.webm</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"nv\">ChannelId</span><span class=\"p\">,</span> <span class=\"nv\">Timestamp</span><span class=\"p\">])).</span>\n\n\n<span class=\"nf\">get_timestamp</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span>\n    <span class=\"p\">{</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">=</span> <span class=\"nn\">os</span><span class=\"p\">:</span><span class=\"nf\">timestamp</span><span class=\"p\">(),</span>\n    <span class=\"nv\">TS</span> <span class=\"o\">=</span> <span class=\"nv\">M</span> <span class=\"o\">*</span> <span class=\"mi\">1000000</span> <span class=\"o\">+</span> <span class=\"nv\">S</span><span class=\"p\">,</span>\n    <span class=\"nb\">integer_to_list</span><span class=\"p\">((</span><span class=\"nv\">TS</span> <span class=\"ow\">div</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">).</span>\n\n\n<span class=\"nf\">send_chunked</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Data</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n      <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n      <span class=\"p\">[</span><span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nb\">iolist_size</span><span class=\"p\">(</span><span class=\"nv\">Data</span><span class=\"p\">),</span> <span class=\"mi\">16</span><span class=\"p\">),</span>\n       <span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span>\n       <span class=\"nv\">Data</span><span class=\"p\">,</span>\n       <span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"p\">]).</span>\n</code></pre></div><p>h5tv_http_util.erl 。这是接收Header，还有发送普通的Response。<br></p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span></span><span class=\"p\">-</span><span class=\"ni\">module</span><span class=\"p\">(</span><span class=\"n\">h5tv_http_util</span><span class=\"p\">).</span>\n\n<span class=\"p\">-</span><span class=\"ni\">export</span><span class=\"p\">(</span>\n   <span class=\"p\">[</span> <span class=\"n\">read_http_headers</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n     <span class=\"n\">http_response</span><span class=\"o\">/</span><span class=\"mi\">4</span><span class=\"p\">]).</span>\n\n\n<span class=\"nf\">read_http_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">receive</span>\n        <span class=\"n\">continue</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">ok</span>\n    <span class=\"k\">after</span> <span class=\"mi\">5000</span> <span class=\"o\">-&gt;</span>\n            <span class=\"n\">throw</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span><span class=\"p\">,</span>\n\n    <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_request</span><span class=\"p\">,</span> <span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">}}</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n    <span class=\"nv\">Headers</span> <span class=\"o\">=</span> <span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">inet</span><span class=\"p\">:</span><span class=\"nf\">setopts</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"n\">packet</span><span class=\"p\">,</span> <span class=\"n\">raw</span><span class=\"p\">}]),</span>\n    <span class=\"p\">{</span><span class=\"nv\">Method</span><span class=\"p\">,</span> <span class=\"nv\">Path</span><span class=\"p\">,</span> <span class=\"nv\">Version</span><span class=\"p\">,</span> <span class=\"nv\">Headers</span><span class=\"p\">}.</span>\n\n\n<span class=\"nf\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">case</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">recv</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">http_header</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"nv\">Value</span><span class=\"p\">}}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[{</span><span class=\"nv\">Field</span><span class=\"p\">,</span> <span class=\"nv\">Value</span><span class=\"p\">}|</span><span class=\"n\">recv_headers</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">)];</span>\n        <span class=\"p\">{</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">http_eoh</span><span class=\"p\">}</span> <span class=\"o\">-&gt;</span>\n            <span class=\"p\">[]</span>\n    <span class=\"k\">end</span><span class=\"p\">.</span>\n\n\n<span class=\"nf\">http_response</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">,</span> <span class=\"nv\">Code</span><span class=\"p\">,</span> <span class=\"nv\">ContentType</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span>\n        <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span>\n          <span class=\"nv\">Conn</span><span class=\"p\">,</span>\n          <span class=\"p\">[</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">\"HTTP/1.1 \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nv\">Code</span><span class=\"p\">),</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\" \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nn\">httpd_util</span><span class=\"p\">:</span><span class=\"nf\">reason_phrase</span><span class=\"p\">(</span><span class=\"nv\">Code</span><span class=\"p\">),</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Connection: close</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Access-Control-Allow-Origin: *</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Type: \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nv\">ContentType</span><span class=\"p\">,</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"Content-Length: \"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nb\">integer_to_list</span><span class=\"p\">(</span><span class=\"nb\">iolist_size</span><span class=\"p\">(</span><span class=\"nv\">Body</span><span class=\"p\">)),</span>\n           <span class=\"o\">&lt;&lt;</span><span class=\"s\">\"</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s\">\"</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"nv\">Body</span><span class=\"p\">]),</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"nn\">gen_tcp</span><span class=\"p\">:</span><span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"nv\">Conn</span><span class=\"p\">).</span>\n</code></pre></div><p>为了偷懒，直接把 html 和 javascript 都丢在 static 目录下。</p><p> index.html</p><div class=\"highlight\"><pre><code class=\"language-html\"><span></span><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>hhhhh TV<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/javascript;version=1.8\"</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"channel-list.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">\"/studio.html\"</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">\"GET\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"name\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">\"我要直播\"</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>正在直播<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"results\"</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</code></pre></div><p>点 我要直播 之后，就到了studio.html，要注意，这里用的method是GET，studio.html的javascript会自己把  ?name=xxx 里的 xxx 取出来，拼成 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8001/live/xxx\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8001/live/xxx</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 而服务端直接把这个名字存下来并返回了。</p><p>所以 channel-list.js 需要先 decodeURIComponent<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">resultsElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"results\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">()</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/\"</span><span class=\"p\">);</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n        <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">channel</span> <span class=\"k\">of</span> <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">aElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">aElem</span><span class=\"p\">.</span><span class=\"nx\">href</span> <span class=\"o\">=</span> <span class=\"s2\">\"/watch.html?\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n                <span class=\"nx\">aElem</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createTextNode</span><span class=\"p\">(</span><span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">channel</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">)));</span>\n                <span class=\"nx\">resultsElem</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">aElem</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p>而播放页面也是类似的。</p><p>studio.html, watch.html和之前的media.html除了javascript地址不一样，其他完全一样。 <br></p><p>studio.js除了第一个buffer要分成两部分以外，其他都是从EventSource里拿到一个路径之后就可以立即开始上传了。<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"nx\">c</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"nx\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"p\">(</span><span class=\"mi\">8</span> <span class=\"o\">-</span> <span class=\"nx\">length</span><span class=\"p\">));</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">&lt;</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">v</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"o\">+</span><span class=\"nx\">i</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">view</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">DataView</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">array</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x1a45dfa3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"EBML Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Bad EBML Size\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">ebml_size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">ebml_size</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">segment_offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"mh\">0x18538067</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"s2\">\"Segment Element ID not found\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">segment_offset</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">]);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">segment_offset</span> <span class=\"o\">+</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"nx\">length</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">.</span><span class=\"nx\">getUint32</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mh\">0x1F43B675</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_length</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">[</span><span class=\"nx\">offset</span><span class=\"p\">]);</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">size</span> <span class=\"o\">=</span> <span class=\"nx\">get_vint_value</span><span class=\"p\">(</span><span class=\"nx\">array</span><span class=\"p\">,</span> <span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">length</span><span class=\"p\">);</span>\n        <span class=\"nx\">offset</span> <span class=\"o\">+=</span> <span class=\"nx\">length</span> <span class=\"o\">+</span> <span class=\"nx\">size</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">offset</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">header_uploaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"loadend\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                <span class=\"nx\">notify</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">upload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">uploading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">header_uploaded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">buffer</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">header_uploaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">FileReader</span><span class=\"p\">();</span>\n\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header_size</span> <span class=\"o\">=</span> <span class=\"nx\">parse_header_size</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n                <span class=\"kd\">var</span> <span class=\"nx\">header_buffer</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">header_size</span><span class=\"p\">);</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">unshift</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">header_size</span><span class=\"p\">));</span>\n                <span class=\"nx\">do_upload</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">,</span> <span class=\"nx\">header_buffer</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n\n        <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">readAsArrayBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">uploading</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">upload</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n\n    <span class=\"nx\">navigator</span><span class=\"p\">.</span><span class=\"nx\">mediaDevices</span><span class=\"p\">.</span><span class=\"nx\">getUserMedia</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span> <span class=\"nx\">video</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n    <span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n        <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n            <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n\n            <span class=\"kd\">var</span> <span class=\"nx\">mediaRecorder</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaRecorder</span><span class=\"p\">(</span><span class=\"nx\">stream</span><span class=\"p\">);</span>\n            <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"dataavailable\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                    <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"kd\">var</span> <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">);</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">eventSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventSource</span><span class=\"p\">(</span><span class=\"s2\">\"http://127.0.0.1:8001/live/\"</span> <span class=\"o\">+</span> <span class=\"nx\">name</span><span class=\"p\">);</span>\n            <span class=\"nx\">eventSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"open\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">mediaRecorder</span><span class=\"p\">.</span><span class=\"nx\">start</span><span class=\"p\">(</span><span class=\"mi\">5000</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"nx\">eventSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"message\"</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">paths</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n                        <span class=\"nx\">notify</span><span class=\"p\">();</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p> watch.js 比之前复杂的地方就在于要减一下，计算时间戳的差值作为初始的 currentTime<br></p><div class=\"highlight\"><pre><code class=\"language-js\"><span></span><span class=\"s2\">\"use strict\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">onload</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">videoElem</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">\"video\"</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">mediaSource</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MediaSource</span><span class=\"p\">();</span>\n    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"nx\">URL</span><span class=\"p\">.</span><span class=\"nx\">createObjectURL</span><span class=\"p\">(</span><span class=\"nx\">mediaSource</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">channel</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">sourceBuffer</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">loaded_timestamp</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">current_timestamp</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffers</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">offset_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">timeoffset</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">buffer_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"nx\">path</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"arraybuffer\"</span><span class=\"p\">;</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n                <span class=\"nx\">notify_buffer_update</span><span class=\"p\">();</span>\n                <span class=\"nx\">notify_load</span><span class=\"p\">();</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">started_play</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nx\">buffer_count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffer_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">currentTime</span> <span class=\"o\">=</span> <span class=\"nx\">timeoffset</span><span class=\"p\">;</span>\n                    <span class=\"nx\">videoElem</span><span class=\"p\">.</span><span class=\"nx\">play</span><span class=\"p\">();</span>\n                    <span class=\"nx\">started_play</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify_load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">loading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">loaded_timestamp</span> <span class=\"o\">&gt;=</span> <span class=\"nx\">current_timestamp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n        <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span> <span class=\"o\">+</span> <span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">+</span> <span class=\"s2\">\".webm\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">notify_buffer_update</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">updating</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">buffer</span> <span class=\"o\">=</span> <span class=\"nx\">buffers</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">();</span>\n        <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">appendBuffer</span><span class=\"p\">(</span><span class=\"nx\">buffer</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">on_init_timestamp_load</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">init_timestamp</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/timestamp\"</span><span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n            <span class=\"s2\">\"load\"</span><span class=\"p\">,</span>\n            <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">current_timestamp</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">-</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n                <span class=\"nx\">setInterval</span><span class=\"p\">(</span>\n                    <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n                        <span class=\"nx\">current_timestamp</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n                        <span class=\"nx\">notify_load</span><span class=\"p\">();</span>\n                    <span class=\"p\">},</span>\n                    <span class=\"mi\">5000</span><span class=\"p\">);</span>\n\n                <span class=\"nx\">loading</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n                <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">=</span> <span class=\"nx\">current_timestamp</span> <span class=\"o\">-</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n                <span class=\"nx\">timeoffset</span> <span class=\"o\">=</span> <span class=\"nx\">loaded_timestamp</span> <span class=\"o\">-</span> <span class=\"nx\">init_timestamp</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n                <span class=\"nx\">do_load</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span> <span class=\"o\">+</span> <span class=\"s2\">\"/header.webm\"</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">);</span>\n        <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">mediaSource</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"sourceopen\"</span><span class=\"p\">,</span>\n        <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">sourceBuffer</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">addSourceBuffer</span><span class=\"p\">(</span><span class=\"s1\">'video/webm; codecs=\"vp8,vorbis\"'</span><span class=\"p\">);</span>\n            <span class=\"nx\">sourceBuffer</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n                <span class=\"s1\">'updateend'</span><span class=\"p\">,</span>\n                <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">updating</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n                    <span class=\"nx\">notify_buffer_update</span><span class=\"p\">();</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">offset_loaded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"nx\">offset_loaded</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">xhr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">XMLHttpRequest</span><span class=\"p\">();</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">open</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"http://127.0.0.1:8001/timestamp/\"</span> <span class=\"o\">+</span> <span class=\"nx\">channel</span><span class=\"p\">);</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">responseType</span> <span class=\"o\">=</span> <span class=\"s2\">\"json\"</span><span class=\"p\">;</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">on_init_timestamp_load</span><span class=\"p\">);</span>\n            <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"load\"</span><span class=\"p\">,</span> <span class=\"nx\">onload</span><span class=\"p\">);</span>\n</code></pre></div><p>启动服务端</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ erl -make\n\n$ erl\n1&gt; h5tv:start().\ntrue\n2&gt;\n</code></pre></div><br><p>打开 <a href=\"https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8000/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">127.0.0.1:8000/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p><p>在输入框里填入channel名之后，点我要直播，就开始直播了</p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic4.zhimg.com/2b75bc268a0bce406d29f990e3c75c53_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic4.zhimg.com/2b75bc268a0bce406d29f990e3c75c53_r.png\"><br><p>在一个新标签页里打开首页，就能看到刚刚开始播出的频道</p><p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/2cecff39862708f09b27e357a6a2cc89_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/2cecff39862708f09b27e357a6a2cc89_r.png\">点进去之后，就可以看到直播的内容了</p><p><img data-rawheight=\"568\" data-rawwidth=\"562\" src=\"https://pic2.zhimg.com/39139d6058c4f60112f2b1a9ad393e15_b.png\" class=\"origin_image zh-lightbox-thumb\" width=\"562\" data-original=\"https://pic2.zhimg.com/39139d6058c4f60112f2b1a9ad393e15_r.png\">太棒了。15分钟就能开发出一个HTML5视频直播网站了。</p><p>------------------------------------------------------</p><p>广告时间:</p><p>正在考虑要不要写一本《7天自制H5视频直播网站》，里面的例子当然会更实际一点。假如你是云存储/CDN厂商，你可以赞助钱以及免费帐号，这样书里面就可以以你们的服务为例子了。假如你是出版社，这可能是2016年网站开发里最火爆的烂书了，还不赶紧私信联系。</p>",
            "image_url": "",
            "title": "[标题党]15分钟开发可支持百万观众的H5视频直播网站",
            "excerpt_title": "",
            "excerpt": "15分钟用Rails开发一个Blog有什么意思？那是2005年的Hipster追捧的玩具。现在都已经是2015年了。HTML应该读作Hipster's Toolkit Made Live了。 既然是15分钟，那当然不是零基础的。在开始之前，你需要满足以下要求运行4.0以上Linux内核，并安装好v4l2loopba…"
        },
        {
            "type": "article",
            "updated": 1445219710,
            "id": 20263544,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1445181184,
            "url": "",
            "content": "<p>首先，我没打算一个人把这书写出来。我当然希望这是一本一直有很多人在写的书，会被一直更新下去。因为我水平非常拙急，所以你们不能指望我是主要作者。所以，一开始我也是先把重心放在比较周边的工具上，这样大家可以一起开心的来写这本书。</p><p>我没有任何出版的计划。因为印出来了就没法更新了，而且这种书要印的多，估计也只能我自己掏钱了，然而我并不是土豪。放GitHub上，谁想看，随时下个最新版就好了。谁发现有问题，也能随时修订。</p><p>21天学通Erlang 主要是面向6岁小朋友的。提供一套配置好的开发环境是有必要的。比如，你不能假设每个6岁小朋友都已经学会设置环境变量的。21天学通Erlang 应该对读者知道的东西作最少的假设。</p><p>有人认为 21天学通Erlang 讲的东西太简单，太基础了，对推广Erlang帮助不大。我的观点恰恰相反。Erlang正是被人描述成只适合用来开发高并发的应用才被边缘化的，不然早火了。所以，更应该强调 Erlang简单，特别适合入门。有了群众基础才容易火啊，等到连不写程序的人都知道Erlang特别容易了，还有不火的道理？Erlang要从娃娃抓起也是一点也没错的，毕竟未来一定是他们的。想想腾讯是怎么成功的。</p><p>有人认为 21天学通Erlang 理论高度太低。可这是入门书啊，追求啥理论高度。 即便如此，21天学通Erlang 只是尽量回避使用任何适合吓唬人的术语，假如需要用到一些理论，也不会假装不存在的，该讲的还是会讲的，不会绕过去的。再说了，某人写了40行代码就觉得自己是搞理论的天才。而类似的东西，在21天学通Erlang里，只是第一章里一道难度为简单的习题而已啊。</p><p>有人认为自己水平不够，所以不来写 21天学通Erlang 。这个想法不知道错到哪里去了。难道一个老师水平高指的是教出来的学生还不如自己？没有人天生就有各种能力的，写着写着发现不够了再去补也来的及啊。</p><p>大概就这些吧 </p>",
            "image_url": "",
            "title": "21天学通Erlang的一些常见误解",
            "excerpt_title": "",
            "excerpt": "首先，我没打算一个人把这书写出来。我当然希望这是一本一直有很多人在写的书，会被一直更新下去。因为我水平非常拙急，所以你们不能指望我是主要作者。所以，一开始我也是先把重心放在比较周边的工具上，这样大家可以一起开心的来写这本书。我没有任何出版…"
        },
        {
            "type": "article",
            "updated": 1445179272,
            "id": 20280043,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1445179272,
            "url": "",
            "content": "<p>由于大家要么不积极要么不自信，Github Pages的进展不及预期。我不自量力的自己开始翻译了，发现完全不能看。所以现在改成先写英文，再写中文了。这一反复，也浪费了不少时间。所以，如何同步代码片段，这篇就来不及完成了。在 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io · GitHub<i class=\"icon-external\"></i></a> 的src分支里，求 proof reading ，欢迎 Pull Request 。</p><p>所以下一个21天，主要就是要完成如何同步代码片段这一篇，有时间的话，就再写一篇简单介绍一下目前的目录结构什么的。别的没了。就这样吧。</p>",
            "image_url": "",
            "title": "第2个21天",
            "excerpt_title": "",
            "excerpt": "由于大家要么不积极要么不自信，Github Pages的进展不及预期。我不自量力的自己开始翻译了，发现完全不能看。所以现在改成先写英文，再写中文了。这一反复，也浪费了不少时间。所以，如何同步代码片段，这篇就来不及完成了。在 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/xn--21Erlang-p00o82pmp3o.github.io\" target=\"_blank\" rel=\"nofollow noreferrer\">xn--21Erlang-p00o82pmp3o/xn…<i class=\"icon-external\"></i></a>"
        },
        {
            "type": "article",
            "updated": 1444213582,
            "id": 20255574,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1444210267,
            "url": "",
            "content": "<p>一直对各种沙盒都不满意。主要是SECCOMP STRICT模式限制实在太严格，不得不自己整个libc出来，还得是静态链接才行。后来想了想还是基于musl libc删吧。反正启动后在一个固定地址mmap一片内存，之后直接设置SECCOMP，除了__libc_start_main和__syscall这两个函数地址可能被覆盖以外，没啥好担心的了。<a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/barelibc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/barelibc · GitHub<i class=\"icon-external\"></i></a>。当然malloc算法换成了最土的TLSF。</p><p>另外就是开始收集各种题目，之前因为发生了各种意外没好好刷题，现在恢复。网上很多题解，基本上就一个代码，简单几句解释，有帮助，但问题是每次面试前过一遍太不现实了。我打算把考点和题目分开，单独写。题目按出处和按公司两种方式列出。 而各种Online Judge基本上都不提供数据，那么就只能自己补了。刚开的新仓库， <a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/interview-questions\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/interview-questions · GitHub<i class=\"icon-external\"></i></a><b>欢迎多多Pull Request</b>，希望能在大家的帮助下成为题目收录最多的仓库</p>",
            "image_url": "",
            "title": "[刷题]barelibc及其他",
            "excerpt_title": "",
            "excerpt": "一直对各种沙盒都不满意。主要是SECCOMP STRICT模式限制实在太严格，不得不自己整个libc出来，还得是静态链接才行。后来想了想还是基于musl libc删吧。反正启动后在一个固定地址mmap一片内存，之后直接设置SECCOMP，除了__libc_start_main和__syscall这两个…"
        },
        {
            "type": "article",
            "updated": 1443878886,
            "id": 20250615,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1443878226,
            "url": "",
            "content": "<p><b>把这个发出来，这样大家都可以开始写起来了。写好了，就可以赶紧发Pull Request了。</b></p><p>参考资料 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\" target=\"_blank\" rel=\"nofollow noreferrer\">Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub<i class=\"icon-external\"></i></a></p><p>在第一章之前会简单介绍Erlang最最基本的功能，也就是函数和模式匹配</p><p>以下是第一章内容提要。注意不是目录，有些是正文，有些是习题，且不保证严格按这个顺序来。</p><p><br>1. 写一个最原始的Lisp解释器<br>2. 加pattern matching<br>3. 用Erlang解释之前写的Erlang代码<br>4. 改写之前的解释器，改成自己维护call stack<br>5. 写一个程序，来完成4的工作<br>6. 加回溯<br>7. pattern matching升级成unification<br>8. 改成Prolog那样，以predicate为主的风格 (此时只有AST)<br>9. 用Prolog写Parser(DCG风格)来parse Prolog代码(这样就可以直接从Prolog代码开始了)<br>10. 让这个Prolog解释器足够解释大部分99 Prolog Problems里的答案<br>11. 让这个Prolog解释器足够解释Erlang解释器最早的原型<br>### Prolog太难用了，我们需要Datalog ###<br>12. Datalog之Naive/Semi Naive Evaluation<br>13. Datalog之QSQI<br>14. Datalog之Magic Set<br>15. Datalog之OLDT/SLG<br>### Datalog也可以是Parser，扔掉DCG了 ###<br>16.  从Datalog到CYK/Earley<br>17. 改成LR<br>18. 改成正则表达式<br>### 加一点backtracking回来 ###<br>19. Packrat<br>20. PCRE风格的Regex<br>### 来写个Shell ###<br>21. Erlang I/O protocol<br>22. 第一章这么快就结束了，简单回顾一下</p>",
            "image_url": "",
            "title": "[21天]第一章内容提要",
            "excerpt_title": "",
            "excerpt": "<b>把这个发出来，这样大家都可以开始写起来了。写好了，就可以赶紧发Pull Request了。</b>参考资料 <a class=\"\" data-title=\"Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub\" data-editable=\"true\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\">Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub</a>在第一章之前会简单介绍Erlang最最基本的功能，也就是函数和模式匹配以下是第一章内…"
        },
        {
            "type": "article",
            "updated": 1442664870,
            "id": 20226408,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1442654250,
            "url": "",
            "content": "<p>首先感谢<a data-title=\"@萧井陌\" data-editable=\"true\" class=\"member_mention\" href=\"https://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780\" data-hash=\"fd7c571a0ada1a72e42e8d7992c4a780\" data-tip=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\" data-hovercard=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\">@萧井陌</a>论坛打算先蹭他的cocode.cc了。 在这里，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cocode.cc/c/erlang21\" target=\"_blank\" rel=\"nofollow noreferrer\">21天学通Erlang 主题列表<i class=\"icon-external\"></i></a> ，想吐槽什么的直接发个贴就可以了。</p><p>制作虚拟机镜像这事碰到了一点麻烦。首先是把osv-apps里的Erlang从17改成18，这个没啥大问题。18因为用的是Apache License而不是之前那个不知道咋搞出来的License，至少不用担心怎么判断和其他License是否兼容的问题了。接着想把dns解析的问题解决了，结果发现OSv自带的DHCP client竟然不会写resolv.conf，于是先用8.8.8.8凑数了。最后发现一个巨大的问题，Fedora 22上gcc升级之后暴露了OSv在ELF处理上的大bug，感觉我是修不好了。</p><p>Github pages暂定用pelican生成，用i18n_subsites来解决多语言的问题。一开始会先介绍和编辑内容相关的，比如Erlang代码是怎么测试，怎么保证PDF里面贴的代码都是被检查过的，怎么保证代码片段在多个地方出现内容是同步的等等。现在问题来了，英语渣表示英语写不来，<b>求翻译</b>啊</p>",
            "image_url": "",
            "title": "第1个21天",
            "excerpt_title": "",
            "excerpt": "首先感谢<a data-title=\"@萧井陌\" data-editable=\"true\" class=\"member_mention\" href=\"http://www.zhihu.com/people/fd7c571a0ada1a72e42e8d7992c4a780\" data-hash=\"fd7c571a0ada1a72e42e8d7992c4a780\" data-tip=\"p$b$fd7c571a0ada1a72e42e8d7992c4a780\">@萧井陌</a>论坛打算先蹭他的cocode.cc了。 在这里，<a data-title=\"21天学通Erlang 主题列表\" data-editable=\"true\" class=\"\" href=\"http://cocode.cc/c/erlang21\">21天学通Erlang 主题列表</a> ，想吐槽什么的直接发个贴就可以了。制作虚拟机镜像这事碰到了一点麻烦。首先是把osv-apps里的Erlang从17改成18，这个没啥大问题。18因为用的是Apache License而不是之前那…"
        },
        {
            "type": "article",
            "updated": 1440922965,
            "id": 20165279,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1440922965,
            "url": "",
            "content": "<p>目前打算每隔大约21天更新一次。</p><p>接下去，内容方面，先集中精力完成Prolog之前的内容。写的解释器能运行大部分99 Prolog Problems的答案，还有最早Erlang解释器的原型就可以了。可以参考列在<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\" target=\"_blank\" rel=\"nofollow noreferrer\">Wiki<i class=\"icon-external\"></i></a>上的这些。还有就是要增加习题。一方面可以把后面章节用到的辅助函数换个马甲放到前面。这肯定是不够的，所以也要到处去收集。</p><p>一开始推荐的安装方式，将会统一成VirtualBox里运行虚拟机镜像，通过端口转发让宿主机的浏览器可以访问。最好能顺便把例子还有习题能做成互动的形式。</p><p>github pages的首页将会改成blog的形式，用来发布更新。</p><p>另外就是最好能有个论坛，虽然GitHub Issues也可以，我希望门槛能更低一点，不知道你们有没有好主意。</p><p>显然这一切都需要你们的大力帮助才能继续，毕竟现在bus factor=1啊。欢迎Pull Request，当然假如不知道如何参与，可以从吐槽开始嘛。</p>",
            "image_url": "",
            "title": "21天学通Erlang即将恢复更新",
            "excerpt_title": "",
            "excerpt": "目前打算每隔大约21天更新一次。接下去，内容方面，先集中精力完成Prolog之前的内容。写的解释器能运行大部分99 Prolog Problems的答案，还有最早Erlang解释器的原型就可以了。可以参考列在<a class=\"\" data-title=\"Home · xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn Wiki · GitHub\" data-editable=\"true\" href=\"https://github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn/wiki\">Wiki</a>上的这些。还有就是要增加习题。一方面可以把后面章节用到的辅…"
        },
        {
            "type": "article",
            "updated": 1431866347,
            "id": 20033711,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1431866271,
            "url": "",
            "content": "<p>Datalog相比Prolog，少了复合类型，但是要求结果是和求值顺序无关。这点就比Prolog好多了，Prolog完全没有逻辑可言，而Datalog至少是和一阶逻辑类似的。</p><p>我们用 {var, 'X'} 的形式来表示Datalog中的变量。那么，类型定义可以写成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>-type datalog_term() :: atom() | {'var', atom()}.\n-type datalog_goal() :: {atom(), [datalog_term()]}.\n-type datalog_clause() :: {datalog_goal(), [datalog_goal()]}.\n</code></pre></div><p> 一个简单的例子</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>%% start(a).\n{{start, [a]},         []},\n%% arc(d,a).\n{{arc,   [d,a]},       []},\n%% arc(e,a).\n{{arc,   [e,a]},       []},\n%% arc(a,b).\n{{arc,   [a,b]},       []},\n%% arc(a,c).\n{{arc,   [a,c]},       []},\n%% arc(b,f).\n{{arc,   [b,f]},       []},\n%% arc(c,f).\n{{arc,   [c,f]},       []},\n%% black(X):- start(X).\n{{black, [{var,'X'}]}, [{start,[{var,'X'}]}]},\n%% black(X):- white(Y), arc(Y,X).\n{{black, [{var,'X'}]}, [{white,[{var,'Y'}]}, {arc,[{var,'Y'},{var,'X'}]}]},\n%% white(X):- black(Y), arc(Y,X).\n{{white, [{var,'X'}]}, [{black,[{var,'Y'}]}, {arc,[{var,'Y'},{var,'X'}]}]},\n%% black(X):- white(Y), arc(X,Y).\n{{black, [{var,'X'}]}, [{white,[{var,'Y'}]}, {arc,[{var,'X'},{var,'Y'}]}]},\n%% white(X):- black(Y), arc(X,Y).\n{{white, [{var,'X'}]}, [{black,[{var,'Y'}]}, {arc,[{var,'X'},{var,'Y'}]}]}\n</code></pre></div><p>而所谓的naive evaluation，既然都叫naive了，那肯定是非常简单的。</p><p>首先，把所有clause分成两类，EDB (extensional) 和 IDB (intentional)</p><p>EDB</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>start(a).\narc(d,a).\narc(e,a).\narc(a,b).\narc(a,c).\narc(b,f).\narc(c,f).\n</code></pre></div><p>IDB<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>black(X): start(X).\nblack(X): white(Y), arc(Y,X).\nwhite(X): black(Y), arc(Y,X).\nblack(X): white(Y), arc(X,Y).\nwhite(X): black(Y), arc(X,Y).\n</code></pre></div><p>直接提供Fact的就是EDB，提供规则的就是IDB</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>build_db(Clauses) -&gt;\n    EDB =\n        lists:foldl(\n          fun add_fact/2,\n          dict:new(),\n          [Head || {Head, []} &lt;- Clauses]),\n\n    IDB =\n        [Clause || {_, Body} = Clause &lt;- Clauses, Body =/= []],\n\n    EDB1 = build_db(IDB, EDB),\n    [ {P, sets:to_list(Tuples)} || {P,Tuples} &lt;- dict:to_list(EDB1) ].\n</code></pre></div><p>IDB里每条规则的正文部分，可以看作是查询。每条规则都出EDB里查一遍，<br>并把结果加到EDB里。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>naive_iteration([], EDB) -&gt;\n    EDB;\nnaive_iteration([{{P,A}, Goals}|IDB], EDB) -&gt;\n    EDB1 =\n        lists:foldl(\n          fun add_fact/2,\n          EDB,\n          [ {P, [subst(T, VarMap) || T &lt;- A]}\n            || VarMap &lt;- query_db(Goals, EDB) ]),\n    naive_iteration(IDB, EDB1).\n</code></pre></div><p> 可是，这样并不能得到所有结果。那么就不断重复这个过程，直到EDB不变为止。(为了让人觉得高深莫测，那就叫不动点吧)。 </p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>build_db(IDB, EDB) -&gt;\n    case naive_iteration(IDB, EDB) of\n        EDB -&gt;\n            EDB;\n        EDB1 -&gt;\n            build_db(IDB, EDB1)\n    end.\n</code></pre></div><p>剩下的函数定义，主要就是简单的unification。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>subst({var, V}, VarMap) -&gt;\n    case dict:find(V, VarMap) of\n        {ok, V1} -&gt;\n            subst(V1, VarMap);\n        error -&gt;\n            {var, V}\n    end;\nsubst(V, _) -&gt;\n    V.\n\nbind(V, T, VarMap) -&gt;\n    case dict:is_key(V, VarMap) of\n        true -&gt;\n            false;\n        false -&gt;\n            dict:store(V, T, VarMap)\n    end.\n\n\nunify(V1, V2, VarMap) -&gt;\n    case {subst(V1, VarMap), subst(V2, VarMap)} of\n        {{var, X}, {var, X}} -&gt;\n            VarMap;\n        {{var, X1}, X2} -&gt;\n            bind(X1, X2, VarMap);\n        {X1, {var, X2}} -&gt;\n            bind(X2, X1, VarMap);\n        {X, X} -&gt;\n            VarMap;\n        _ -&gt;\n            false\n    end.\n\nunify_list([], [], VarMap) -&gt;\n    VarMap;\nunify_list([H1|T1], [H2|T2], VarMap) -&gt;\n    case unify(H1, H2, VarMap) of\n        false -&gt;\n            false;\n        VarMap1 -&gt;\n            unify_list(T1, T2, VarMap1)\n    end.\n\nadd_fact({P, A}, EDB) -&gt;\n    dict:update(P, fun (Old) -&gt; sets:add_element(A, Old) end, sets:from_list([A]), EDB).\n\nfind_facts(P, EDB) -&gt;\n    case dict:find(P, EDB) of\n        {ok, S} -&gt;\n            sets:to_list(S);\n        error -&gt;\n            []\n    end.\n\nquery_db([], VarMaps, _EDB) -&gt;\n    VarMaps;\nquery_db([{P, A}|Goals], VarMaps, EDB) -&gt;\n    VarMaps1 =\n        [ M || M &lt;- [ unify_list(A, Fact, VarMap)\n                      || Fact &lt;- find_facts(P, EDB),\n                         VarMap &lt;- VarMaps ],\n               M =/= false],\n\n    query_db(Goals, VarMaps1, EDB).\n\nquery_db(Goals, EDB) -&gt;\n    query_db(Goals, [dict:new()], EDB).\n</code></pre></div><p>参考 <a href=\"https://link.zhihu.com/?target=http%3A//www.inf.unibz.it/%257Enutt/Teaching/CL0910/CLSlides/5-datalog-eval.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">inf.unibz.it/%7Enutt/Te</span><span class=\"invisible\">aching/CL0910/CLSlides/5-datalog-eval.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//webdam.inria.fr/Alice/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">webdam.inria.fr/Alice/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a></p>",
            "image_url": "",
            "title": "[Parsing] 2. Naive Evaluation",
            "excerpt_title": "",
            "excerpt": "Datalog相比Prolog，少了复合类型，但是要求结果是和求值顺序无关。这点就比Prolog好多了，Prolog完全没有逻辑可言，而Datalog至少是和一阶逻辑类似的。我们用 {var, 'X'} 的形式来表示Datalog中的变量。那么，类型定义可以写成-type datalog_term() :: ato…"
        },
        {
            "type": "article",
            "updated": 1459343719,
            "id": 20029873,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1431524264,
            "url": "",
            "content": "<p>在args_file的问题解决之后。运行BEAM语言应该没啥大问题了 (误 。那就来看一下Elixir吧。结果比预想的不顺利的多啊。</p><p>首先碰到一个诡异的问题，Elixir编译到一半不小心中断了，得make clean再重新开始。这都是怎么想的，这make竟然是冒牌的。</p><p>接着发现死活Erlang和Elixir只有一个能复制进image。经过调查发现，usr.manifest文件不能指向同一个目标。比如，有两个 /**<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>/**: /path/to/some/dir\n</code></pre></div><p>那么只能有一个生效。幸亏之前就把目录设置成不同的了。 <br></p><p>顺便就带来了一个问题，之前还有 libz, openssl 什么的动态链接库是靠一段奇怪的脚本来复制的。幸好OSv已经把这个问题解决了，只要 require 对应的 module 就可以了。</p><p>总之，编译了很多次之后，Elixir也能在OSv上运行了。其他BEAM语言也开始蠢蠢欲动了。结果第一个LFE就运行不起来。经检查发现问题就出在编译的时候关闭了termcap。那就打开吧。打开之后傻眼了，还是进不了LFE Shell。</p><p>最后，经过反反复复debug，终于发现问题出在没有设置TERM环境变量。设置好之后，Erlang的ttsl_drv就能正常工作了。LFE Shell也就能运行了。 </p><p>就这点问题，竟然折腾了一天。 </p>",
            "image_url": "",
            "title": "OSv Elixir",
            "excerpt_title": "",
            "excerpt": "在args_file的问题解决之后。运行BEAM语言应该没啥大问题了 (误 。那就来看一下Elixir吧。结果比预想的不顺利的多啊。首先碰到一个诡异的问题，Elixir编译到一半不小心中断了，得make clean再重新开始。这都是怎么想的，这make竟然是冒牌的。接着发现死活Er…"
        },
        {
            "type": "article",
            "updated": 1459343697,
            "id": 20028805,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1431431180,
            "url": "",
            "content": "<p>第一个问题是把编译参数里的 --without-os_mon 去掉了。到目前为止还没解决 cpu_sup的问题，主要原因是OSv根本就没实现必要的接口 ，于是就先禁用了。而memsup和disksup，都被我从port改成port driver了，这样就不需要开新的进程了。当然了，Bug肯定是少不了的。</p><p>第二个问题是怎么patch源代码的问题。第一个问题一开始我是把代码直接复制了一份。在nyh的建议下，改成patch了。现在的做法是，先把文件 x 复制一份 x.orig ，直接改 x ，改完了用 gendiff dirname .orig 生成 patch 。从头开始打 patch 时，用 patch -b 就会自动把原始文件复制一份，这样有改动之后重新 gendiff 就可以了。<br></p><p>第三个问题是epmd怎么启动的问题。一开始还妄图使用某个纯Erlang实现的epmd server。结果发现这样对release改动过大，根本没法用。又去看了看OSv的代码，发现，完全可以再开一个线程来运行epmd。只要把erlexec改改就可以了。剩下一个小问题，因为现在没有能用的wordexp，并不能完全替代system的功能。</p><p>接下来几天，还会加上从EC2 user-data读取args_file的功能(没有就用默认的)。这样一般的Erlang程序应该都能正常启动，每个节点也可以有不同的配置了。</p>",
            "image_url": "",
            "title": "OSv Erlang的进展",
            "excerpt_title": "",
            "excerpt": "第一个问题是把编译参数里的 --without-os_mon 去掉了。到目前为止还没解决 cpu_sup的问题，主要原因是OSv根本就没实现必要的接口 ，于是就先禁用了。而memsup和disksup，都被我从port改成port driver了，这样就不需要开新的进程了。当然了，Bug肯定是少不…"
        },
        {
            "type": "article",
            "updated": 1430105205,
            "id": 20013565,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1430105205,
            "url": "",
            "content": "用Prolog语法来写Parser是一件很自然的事。比BNF要好的多。BNF 只是描述了语法，用Prolog写直接就把Parser给写完了。比如 <br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>&lt;plus_exp&gt; ::= &lt;mul_exp&gt; | &lt;mul_exp&gt; &lt;plus&gt; &lt;plus_exp&gt;\n&lt;mul_exp&gt; ::= &lt;num&gt; | &lt;num&gt; &lt;mul&gt; &lt;mul_exp&gt;\n&lt;plus&gt; ::= \"plus\"\n&lt;mul&gt; ::= \"mul\"\n&lt;num&gt; ::= &lt;integer&gt;\n</code></pre></div><p>Prolog:</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>plus(S0, S) :-\n  S0 = [plus|S].\n\nmul(S0, S) :-\n  S0 = [mul|S].\n\nnum(N, S0, S) :-\n  S0 = [N|S],\n  integer(N).\n\nplus_exp(Expr, S0, S) :-\n  mul_exp(Expr, S0, S).\n\nplus_exp(Expr, S0, S) :-\n  mul_exp(E1, S0, S1),\n  plus(S1, S2),\n  plus_exp(E2, S2, S),\n  Expr =.. [plus, E1, E2].\n\nmul_exp(Expr, S0, S) :-\n  num(Expr, S0, S).\n\nmul_exp(Expr, S0, S) :-\n  num(E1, S0, S1),\n  mul(S1, S2),\n  mul_exp(E2, S2, S),\n  Expr =.. [mul, E1, E2].\n</code></pre></div><p>问题是虽然Prolog这语法看上去很好，真的很难用来写程序，动不动就不知道回溯到哪里去了，一cut又傻了，碰到左递归就死循环了。长的像一阶逻辑，其实完全没有逻辑可言。这也能叫Prolog ? <br></p><p>即便无视这些缺点，对于写Parser来说，Prolog依旧是太强大了。Prolog可是图灵完全的。很容易构造出有无数个结果的查询</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>p([]).\np(L) :-\n  L = [a|X],\n  p(X).\n</code></pre></div><p> 为了避免这个问题，就不能有复合类型。这样就没法用List来表示输入的字符串了。当然List还有另外一个问题就是，按这么写，必须一次提供完整的输入，而不是一次一个字符。</p><p>这是可以做到的，比如 <br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>[1,plus,2]\n</code></pre></div><p> 可以表示成</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>token(1, 0, 1).\ntoken(plus, 1, 2).\ntoken(2, 2, 3).\n</code></pre></div><p> 语法规则就可以写成 (先忽略生成的语法树)<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>plus(S0, S) :-\n  token(plus, S0, S).\n\nmul(S0, S) :-\n  token(mul, S0, S).\n\nnum(S0, S) :-\n  token(N, S0, S),\n  integer(N).\n\nplus_exp(S0, S) :-\n  mul_exp(S0, S).\n\nplus_exp(S0, S) :-\n  mul_exp(S0, S1),\n  plus(S1, S2),\n  plus_exp(S2, S).\n\nmul_exp(S0, S) :-\n  num(S0, S).\n\nmul_exp(S0, S) :-\n  num(S0, S1),\n  mul(S1, S2),\n  mul_exp(S2, S).\n</code></pre></div><p>这就变成Datalog了嘛。</p><p>接下来就来看Datalog</p>",
            "image_url": "",
            "title": "[Parsing] 1. Prolog",
            "excerpt_title": "",
            "excerpt": "用Prolog语法来写Parser是一件很自然的事。比BNF要好的多。BNF 只是描述了语法，用Prolog写直接就把Parser给写完了。比如 &lt;plus_exp&gt; ::= &lt;mul_exp&gt; | &lt;mul_exp&gt; &lt;plus&gt; &lt;plus_exp&gt;\n&lt;mul_exp&gt; ::= &lt;num&gt; | &lt;num&gt; &lt;mul&gt; &lt;mul_exp&gt;\n&lt;plus&gt; ::= \"plus\"\n&lt;mul&gt; :…"
        },
        {
            "type": "article",
            "updated": 1429951803,
            "id": 20012190,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1429951803,
            "url": "",
            "content": "<p>很多人(包括我)都有这么一种错觉，好像操作系统是一个已经解决的问题，新的内核已经没有存在的必要了。所以也就没必要去了解操作系统是怎么回事，只管用就是了。</p><p>事实恰好相反。 你肯定碰到过有那么一天，网络出故障了，惊讶的发现有人竟然不知道怎么截图了，原因竟然是打不开QQ。这只能说明现在流行的操作系统既不好用也不安全。</p><p>按正常的做法，操作系统应该有截图服务，只有提供截图服务的程序才有权在整个桌面上截图。别的程序，包括QQ，想要截图，必须向截图服务发请求。这样同时也保证了，在这个操作系统上，所有程序的桌面截图的用法都是一致的。</p><p>唯一一个在这方面做的比较好的，可能真的就只有Wayland了。Wayland当然有Wayland的问题。至少Wayland把最重要的一件事搞对了，整个显示是以Compositing方式来进行的。</p><p>Compositing简单来说就是每个窗口自己画自己的，最后由compositor拼成一张图，再交给驱动去画去。这么简单一个概念，查了好多资料，最后发现竟然只有AmigaOS才是这么做的。目前流行的操作系统差不多在AmigaOS推出之后20年，才有类似的功能，还仅仅是以扩展的形式出现的。<br></p><p>从定义来看，操作系统就是用来解决多个正在运行的程序对资源的并发访问这个问题的。只运行一个程序当然就无所谓有没有操作系统了。可是现在在操作系统上运行的程序，看上去并没有获得操作操作系统虚拟出来的设备的好处，反倒更像是陷入到API的汪洋大海之中。</p><p>Compositing才算是回归了操作系统的本质。在进程看来一个窗口就应该类似操作系统看到的一块屏幕。需要联网的进程，都有一个虚拟的网口，操作系统完成的功能更应该接近交换机。这样的概念也比什么X Window，Socket什么的更容易理解。</p><p>操作系统是如何向硬件传输数据的？直接往某一段映射为硬件的内存地址写就可以了。类似的，直接把一个窗口buffer对应的内存页，同时在compositor和GUI进程的地址空间都映射一遍就好了嘛。只要有MMU，这个就不是什么问题。这样，所谓微内核就是把驱动都放到用户态的提法就没有多大意义了，通过MMU，一样也可以把一个用户态进程的一部分内存地址，映射到硬件对应的物理地址。把大部分驱动放到用户态根本就不存在任何问题嘛。</p><p>能放到用户态的进程现在并没有放到用户态。这一定是内核出了问题。问题就出在现在流行的内核，并没有提供IPC。比如在UNIX上，连向另外一个进程发一个file descriptor都很麻烦呢，各种奇怪的magic。Wayland应该也有类似的问题，一个进程很难为另外一个进程申请一个surface。比如，在Wayland里并不存在类似XEmbed的功能。</p><p>这个问题并没有看上去那么简单。可能是因为我没仔细看，我看了一下HelenOS里并没有和论文里提到的VFS对应的代码。其他类似的情况，可能也就只有SCTP socket的peel off了吧。</p><p>这也就是为什么还需要一个新的内核。</p><p>P.S. 至于那种至运行一个程序，也敢说自己是操作系统的，比如Lisp Machine什么的。现在有了像OSv之类的内核，一个普通的单进程的Linux程序，只要编译成PIE，就能直接在OSv上运行了。别说Lisp Machine了，不管啥语言，只要是单进程的都行了。都有Erlang Machine了，还要Lisp Machine干啥？</p>",
            "image_url": "",
            "title": "为什么还需要一个新的内核？",
            "excerpt_title": "",
            "excerpt": "很多人(包括我)都有这么一种错觉，好像操作系统是一个已经解决的问题，新的内核已经没有存在的必要了。所以也就没必要去了解操作系统是怎么回事，只管用就是了。事实恰好相反。 你肯定碰到过有那么一天，网络出故障了，惊讶的发现有人竟然不知道怎么截图了…"
        },
        {
            "type": "article",
            "updated": 1429711424,
            "id": 20006819,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1429711402,
            "url": "",
            "content": "<p>本来这是在21天学通Erlang第一章里的内容。只是现在还没远远写到那儿呢。</p><p>因为占了个坑，<a class=\"internal\" href=\"http://www.zhihu.com/question/29636774/answer/45156848\">shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答</a> 。那就先写起来吧。毕竟这部分内容之前也没很仔细的检查过到底是不是这么回事。只是有个大体思路而已。趁着这个机会把提纲写了，顺便也减小一点bus factor可能的影响。<br></p><p>学Parsing，最重要的思路，就是把parser看作一种特殊的解释器。先写Datalog解释器，再变形成CYK/Earley Parser。所有表达能力不足CFG的parser都可以由此推导出来，很容易就看清楚不同算法之间的联系。</p><p>接下来，就按这个思路来一遍。<br></p><p>且看下回分解。</p>",
            "image_url": "",
            "title": "[Parsing] 0. 如何学Parsing",
            "excerpt_title": "",
            "excerpt": "本来这是在21天学通Erlang第一章里的内容。只是现在还没远远写到那儿呢。因为占了个坑，<a class=\"\" data-title=\"shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答\" data-editable=\"true\" href=\"http://www.zhihu.com/question/29636774/answer/45156848\">shift reduce，预测分析，递归下降分析（这是解析方法）和LL(K) LR(K) SLR以LALR的关系？ - 知乎用户的回答</a> 。那就先写起来吧。毕竟这部分内容之前也没很仔细的检查过…"
        },
        {
            "type": "article",
            "updated": 1428848806,
            "id": 20001078,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1428848806,
            "url": "",
            "content": "<p>主要就是写了个脚本用来检查不同文件里同一个代码片段的内容是否一致。之前改一段代码，来来回回检查好多长的差不多的文件，就已经崩溃了。现在就好多了。</p><p>另外就是删掉了很多如何在Windows下安装Erlang的废话。改成推荐使用<a href=\"https://link.zhihu.com/?target=https%3A//chocolatey.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> Chocolatey Gallery<i class=\"icon-external\"></i></a> 了。看上去好像很难用。我已经后悔了。 谁来研究一下Windows下怎么安装Erlang比较好？</p><p>另外还有一些比如换了个字体， 增加了Manifest文件用来决定exercise.zip里的内容之类的可以忽略不计的小改动 <br></p><p>就是这样</p>",
            "image_url": "",
            "title": "21天学通Erlang微量更新",
            "excerpt_title": "",
            "excerpt": "主要就是写了个脚本用来检查不同文件里同一个代码片段的内容是否一致。之前改一段代码，来来回回检查好多长的差不多的文件，就已经崩溃了。现在就好多了。另外就是删掉了很多如何在Windows下安装Erlang的废话。改成推荐使用<a data-title=\"Chocolatey Gallery\" data-editable=\"true\" href=\"https://chocolatey.org/\"> Chocolatey Gallery</a> 了。看上去…"
        },
        {
            "type": "article",
            "updated": 1459343678,
            "id": 19999451,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1428646697,
            "url": "",
            "content": "<p>忍不住开始写，结果花了一天多，各种不靠谱的写法，才只搞成这副样子</p><p><img data-rawheight=\"505\" data-rawwidth=\"903\" src=\"https://pic3.zhimg.com/8044a8ffc7b9eb2a3d6b84f6cff239f2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic3.zhimg.com/8044a8ffc7b9eb2a3d6b84f6cff239f2_r.jpg\">当然了，只支持Firefox</p>",
            "image_url": "",
            "title": "Erlang Web Editor",
            "excerpt_title": "",
            "excerpt": "忍不住开始写，结果花了一天多，各种不靠谱的写法，才只搞成这副样子当然了，只支持Firefox"
        },
        {
            "type": "article",
            "updated": 1428047173,
            "id": 19993413,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1428045867,
            "url": "",
            "content": "<p>太可恶了。必须发动人身攻击，往死里黑。专栏不就是用来干这个的。</p><p>PAT要是流行起来，以后找工作都得去很脑残的刷很多题，去参加这个该死的考试，很多公司招人直接看你有没有这个证书，没有或者分数太低，就直接把你简历丢了，想想就很可怕啊，为了刷分你就不停的去考，对办这个考试的人当然是极好的。</p><p>而且这是一个单纯考熟练度的考试，啥都不能带啊。连人家正经的程序竞赛也不限制带任何纸质资料吧。写程序最不重要的就是熟练度了吧。难道一个程序写好能用了，之后还需要每隔一星期又从头开始重新写一遍？可选的语言种类还少的可怜，连Standard ML,  APL, Ada, Prolog, Erlang, FORTRAN, Tcl什么的都没有，还让人怎么活啊。为啥就不能自带编译器了？</p><p>还有他们还在网易云课堂里开数据结构的课，根本就没打算把人教会，而是赤裸裸的只是为了给PAT提高知名度。大家都是业余时间学学的，你也用C讲数据结构啊。也不是一定不能用C讲，就算用C讲，哪怕实现一门ML家族的语言太麻烦，不如写个编译器把Erlang的子集编译成C，全都用naive的实现，代码很可能都远远不到5000行。</p><p>比如二叉树，用OCaml，可以这么定义</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>type 'a tree =\n  | Empty\n  | Tree of 'a tree * 'a * 'a tree;;\n</code></pre></div><p>检查其中是否存在某个元素</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  let rec member elem tree =\n    match tree with\n      | Empty -&gt; false\n      | Tree(left, node, right) -&gt;\n        match Elem.compare elem node with\n          | Equal -&gt; true\n          | Less -&gt;\n            member elem left\n          | Greater -&gt;\n            member elem right;;\n</code></pre></div><p>遍历</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>  let rec iter tree =\n    match tree with\n      | Empty -&gt; empty\n      | Tree(left, node, right) -&gt;\n        chain (iter left) (cons node (iter right));;\n</code></pre></div><p>Iterator相关定义</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>type 'a stream =\n  | Nil\n  | Cons of 'a * 'a iterator\nand 'a iterator =\n    unit -&gt; 'a stream;;\n\nlet empty () =\n  Nil;;\n\nlet cons elem iterator () =\n  Cons(elem, iterator);;\n\nlet rec chain a b () =\n  match a () with\n    | Nil -&gt; b ()\n    | Cons(h, t) -&gt;\n      Cons(h, (chain t b));;\n</code></pre></div><p>不知道比用C容易到哪里去了</p><p>而且OCaml肯定也有QuickCheck类工具，可以用来根据property自动生成测试用例，完全不需要依赖你PAT网站上那点可怜的测试用例。检查完了，就可以开始写形式证明了，用Coq检查不知道比靠自己检查自己高明到哪里去了 (误</p><p>花同样的时间，用C写，代码写不写的出来都是个问题。</p><p>早就有人提出不满了 ，看<a class=\"internal\" href=\"http://www.zhihu.com/question/28122603/answer/41061574\">浙江大学陈越(姥姥)是什么样的存在？ - 知乎用户的回答</a></p><p>所以我看还是趁早关掉PAT。来写  21天学通Erlang 比较好</p><p>就是这样</p>",
            "image_url": "",
            "title": "可恶的PAT",
            "excerpt_title": "",
            "excerpt": "太可恶了。必须发动人身攻击，往死里黑。专栏不就是用来干这个的。PAT要是流行起来，以后找工作都得去很脑残的刷很多题，去参加这个该死的考试，很多公司招人直接看你有没有这个证书，没有或者分数太低，就直接把你简历丢了，想想就很可怕啊，为了刷分你就…"
        },
        {
            "type": "article",
            "updated": 1426648110,
            "id": 19979754,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1426648110,
            "url": "",
            "content": "<a class=\"internal\" href=\"http://www.zhihu.com/question/28830426/answer/42239930\">10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？ - 知乎用户的回答</a><p>这个问题证明写起来太麻烦了，放弃了。还是把上次那个简化的问题的证明贴上来。总体思路是一样的，就是分情况讨论，排除不可能的操作，最后证明，只有按一种方向倒水才是最优解或者最优解之一。 </p><p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a><br></p><p>以下是证明思路，具体证明自己看着办吧</p><p>首先看简单的情形</p><p><br>若 c &gt; a 且 c &gt; b,没有一个容器装得下 c 升的水,所以无解。<br>若 c = a 或 c = b,那么直接把 a 或 b 倒满就可以了。</p><p><br>因为有 a,b 两个容器,可以看成有六种操作<br>1. empty(a) 倒空 a<br>2. empty(b) 倒空 b<br>3. fill(a) 倒满 a<br>4. fill(b) 倒满 b<br>5. pour(a,b) a 倒向 b<br>6. pour(b,a) b 倒向 a</p><p><br>不妨设 a,b 内实际水量分别为 A,B。<br>一开始 A = 0, B = 0<br>所以, a * x1 + b * y1 = A 和 a * x2 + b * y2 = B 都有整数解。<br>即 x1 = 0, y1 = 0, x2 = 0, y2 = 0<br></p><p> 若操作前,a * x1 + b * y1 = A 和 a * x2 + b * y2 = B 都有整数解。<br>若进行的是操作 1,完成后,B 不变,A 变成 0,所以两者仍然都有整数解。<br>若进行的是操作 2,完成后,A 不变,B 变成 0,所以两者仍然都有整数解。<br>若进行的是操作 3,完成后,B 不变,A 变成 a,所以两者仍然都有整数解。<br>若进行的是操作 4,完成后,A 不变,B 变成 b,所以两者仍然都有整数解。<br>若进行的是操作 5,完成后,总水量不变,仍然是 a(x1 + x2 ) + b(y1 + y2 )<br>分情况讨论<br>若把 B 倒满了,那么此时 A = a(x1 + x2) + b(y1 + y2 − 1),所以两者仍然都有<br>整数解。<br>若没把 B 倒满,则 A 必然被倒空了,所以两者仍然都有整数解。<br>若进行的是操作 6,完成后,类似操作 5,分情况讨论<br>若把 A 倒满了,那么此时 B = a(x1 + x2 − 1) + b(y1 + y2 ),所以两者仍然都有<br>整数解。<br>若没把 A 倒满,则 B 必然被倒空了,所以两者仍然都有整数解。</p><p>所以,只要操作前有整数解,操作后仍然会有整数解。<br>即, c = a*x + b*y 也一定有整数解。<br>根据 Bezout’s identity,当且仅当 c 是 gcd(a, b) 的整数倍时,c = a*x + b*y 才有<br>整数解。<br>所以,若 c 不能被 gcd(a, b) 整除,那么本题无解。</p><p><br>不妨设,c = a*x + b*y,分情况讨论<br>若 a &gt; b,则根据上面的讨论,若本题有解,必有 c &lt; a。那么 x 和 y 必一正一<br>负。若两者同时为负,则 c &lt; 0,与 c &gt; 0 矛盾。若两者同时为正,则 c &gt; a,<br>与 c &lt; a 矛盾。<br>若 a &lt; b,类似的,x 和 y 必一正一负。<br>若 a = b,则根据上面的讨论,c = a = b,这种情况在前面就讨论过了。</p><p>假设最少的操作序列的第 n 步为 pour(a,b)。分情况讨论</p><p>若第 n + 1 步为 pour(b,a)。因为 pour 操作不影响总水量,而 pour 的最终结果<br>要么是 a 满,要么是 b 空,所以和直接在第 n 步 pour(b,a) 没有区别,和操作<br>最少矛盾。</p><p><br>若第 n 步操作后,a 为空,则第 n + 1 步,empty(a), pour(a,b) 没有意义。<br>此时若 empty(b),则和初始状态没有区别。若 fill(b),就和一开始直接 fill(b)<br>没有区别。都和操作最少矛盾。<br>因此,第 n + 1 步必为 fill(a)。此时第 n + 2 步,fill(a), pour(b,a) 没有意义。<br>此时若 empty(a),则和 fill(a) 前状态没有区别。若 empty(b),就和一开始直接<br>fill(a) 没有区别。若 fill(b),则和一开始直接 fill(a),fill(b) 没有区别。都和操作<br>最少矛盾。<br>因此,fill(a) 的下一步必为 pour(a,b)。</p><p>若第 n 步操作后,b 满了,则第 n + 1 步,pour(a,b), fill(b) 没有意义。<br>此时若 fill(a),则和一开始直接 fill(a),fill(b) 没有区别。若 empty(a),就和一开<br>始直接 fill(b) 没有区别,都和操作最少矛盾。<br>因此,第 n + 1 步必为 empty(b)。此时第 n + 2 步,empty(b), pour(b,a) 没有<br>意义。<br>若 empty(a),则和初始状态没有区别。若 fill(b),就和 empty(b) 前状态没有区<br>别。若 fill(a),则和一开始直接 fill(a) 没有区别。都和操作最少矛盾。<br>因此,empty(b) 的下一步必是 pour(a,b)<br>类似的,交换 a,b,也可以得到最少的操作序列的第 n 步为 pour(b,a) 对应的结<br>论。</p><p>所以,步数最少的操作方式,必是以下两种之一。</p><p><br>1. fill(a)<br>2. pour(a,b)<br>3. 若 a 为空,回到 1<br>4. empty(b)<br>5. 回到 2</p><p><br>1. fill(b)<br>2. pour(b,a)<br>3. 若 b 为空,回到 1<br>4. empty(a)<br>5. 回到 2</p><p><br>交换 a,b,第一种就变成了第二种。现在就只讨论第一种。<br></p><p>若 a &gt; b,每一次 fill(a) 后,都会不断地 pour(a,b),empty(b),直到 pour(a,b)<br>不足以倒满 b。假如把倒满 b 的 pour(a,b) 和 empty(b) 看作一组操作,把 fill(a)<br>和没倒满 b 的 pour(a,b) 看作一组操作,总操作次数就是 fill(a) 和 empty(b) 次<br>数之和的两倍。不过,若 a 是 b 的整数倍,不会出现,pour(a,b) 不足以倒满<br>b 的情况,实际上,此时只需要在 fill(a) 后,倒出 a-c 升水即可,因此,只要<br>2 (a−c)/b 次操作就可以了。<br>在非整数倍的情况,最后一次 pour(a,b) 后,并不需要 empty(b),且最后一次<br>fill(a),没有对应的没倒满 b 的 pour(a,b),所以总操作次数要减去 2<br></p><p>若 a &lt; b,会不断地 fill(a),pour(a,b),直到把 b 倒满。假如把 fill(a) 和向 b 倒<br>入 a 升水的 pour(a,b) 看成一组操作,把 empty(b),和向 b 倒入不足 a 升水<br>的 pour(a,b) 看成一组操作,总操作次数就是 fill(a) 和 empty(b) 次数之和的两<br>倍。不过,若 b 是 a 的整数倍,不会出现向 b 倒入不足 a 升水的 pour(a,b) 的<br>情况,因为此时 c 也是 a 的整数倍,只需要 2c/a 次操作就可以了。<br>在非整数倍的情况,若 a &gt; c,则 a 不为空也不满时,必然是刚好把 b 倒满。和<br>上一种情况类似,最后一次 pour(a,b) 后,并不需要 empty(b),也没有对应的<br>向 b 倒入不足 a 升水的 pour(a,b),所以总操作次数要减去 2<br>若 a &lt; c,所以最后必然是 b 中装 c 升水。所以总操作数不需要减。</p><p><br>现在就要找出最少的 fill(a) 和 empty(b) 次数之和<br>根据前面的讨论,a*x + b*y = c 的整数解,x,y 必一正一负。<br>不妨设其中一种情况为,a*k1 − b*k2 = c,且 k1 &gt; 0, k2 &gt; 0<br>因为 a * k1 = c + b * k2 ,所以 k1 越大,k2 就越大。<br>所以只要求出最小的 k1 ,就能求出最少的 fill(a) 和 empty(b) 次数之和<br>另一种情况,−a * k1 + b * k2 = c,且 k1 &gt; 0, k2 &gt; 0,也是类似的。</p><p>使用扩展欧几里德算法,可以分别求出两种情况下的解,取小的就可以了。<br>总结,<br>1. 若 c &gt; a 且 c &gt; b,无解<br>2. 若 c = a 或 c = b,最少需要 1 步操作<br>3. 若 a = b 且 c &lt;&gt; a 且 c &lt;&gt; b,无解<br>4. 若 gcd(a, b) 能整除 c,有解</p><p>gcd(a, b) 能整除 c 的情况<br>1. 若 a 是 b 的整数倍,那么取 2(a−c)/b 和 2c/b 中的最小值<br>2. 若 b 是 a 的整数倍,那么取 2(b−c)/a 和 2c/a 中的最小值<br>3. 其他情况,取分别以 a,b 代入 a,b,以 b,a 代入 a,b,按以下方法求出操<br>作步数的最小值</p><p>用扩展欧几里德算法求出 k 使得 k * a ≡ gcd(a, b) (mod b)<br>令 k1 为 k  * c / gcd(a,b) (mod b),有 k1 * a ≡ c (mod b)<br>令 k2 为 k1 * a−c/b<br>所以有 a * k1 − b * k2 = c<br>1. 若 a &lt; b 且 a &lt; c,操作步数为 2 (k1 + k2 )<br>2. 其他情况,操作步数为 2 (k1 + k2 − 1)</p><p>简化分类<br>因为只需要步数,而不需要具体步骤,交换 a,b 不影响结论。假如 a 是 a,b 中<br>小的那个,b 是 a,b 中大的那个。<br>那么一开始只要判断 c 是否比 b 大就可以了,同时后面也不需要判断 a 是否是<br>b 的整数倍了。<br>而 a = b 时,若 c &lt; b,gcd(a, b) 必然不能整除 c,所以没必要单独判断。<br>这样,就可以合并为<br>1. 若 c &gt; b,无解<br>2. 若 c = a 或 c = b,最少需要 1 步操作。<br>3. 若 b 是 a 的整数倍,取 2 (b−c)/a 和 2 c/a 中的最小值<br>4. 若 gcd(a, b) 能整除 c,有解。</p><p>因为扩展欧几里德算法可以同时计算两种情况以及 gcd(a, b)。所以没必要做三<br>次辗转相除,一次就可以完成计算了。</p><p>扩展欧几里德算法<br>为了求 k 使得 ka ≡ gcd(a, b) (mod b)<br>令 k1 = 1, k2 = 0, r1 = a, r2 = b<br>每一步,替换 k1 = k2 − k1 * floor(r2/r1) , k2 = k1 , r1 = r2 − r1 * floor(r2/r1) , r2 = r1<br>迭代过程中始终满足<br>k1 * a = r1 (mod b)<br>k2 * a = r2 (mod b)<br>因为 (k2−k1*floor(r2/r1) )a = k2*a−k1*a*floor(r2/r1) = r2−r1*floor(r2/r1) (mod b)<br>所以最终,当 r1 = 0 时,r2 = gcd(a, b),此时的 k2 就是要求的 k<br>而求 k 使得 k * b ≡ gcd(a, b) (mod a) 时,<br>一开始 k1 = 1, k2 = 0, r1 = b, r2 = a 计算一步后,k1 = 0, k2 = 1, r1 = a,<br>r2 = b<br>所以,两种情况可以同时计算。</p><p>另外,还可以改变初值。</p><p>令 k1 = c, k2 = 0, r1 = a, r2 = b<br>一开始<br>k1 * a = c * a = c * r1 = c * r1 (mod b)<br>k2 * a = 0 * a = 0 =  c*b = c * r2 (mod b)<br>而 (k2−k1*floor(r2/r1))a = k2*a−k1*a*floor(r2/r1) = c(r2−r1*floor(r2/r1)) (mod b)<br>所以迭代过程中始终满足<br>k1 * a = c * r1 (mod b)<br>k2 * a = c * r2 (mod b)<br>因此,最后当 r1 = 0 时,r2 = gcd(a, b),k2 * a = c * gcd(a, b) (mod b)<br>一开始 k1 , k2 都是 gcd(a, b) 的倍数,迭代过程中,始终减去的都是整数倍的 k1 ,所以,最终 k1 , k2 一直是 gcd(a, b) 的倍数。所以,最终 k2 * a / gcd(a,b) = c (mod b)<br>再回到 b 是 a 的整数倍的情况。假如也使用上述方法求解,一步就计算结束<br>了,得到 c/a 和 0。 c/a满足要求。而 0 不满足要求,改成 1 即可满足要求。</p><p>这样就得到了<a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957381\" class=\"internal\">Pouring Water解答 - impress your cat - 知乎专栏</a>里的代码 </p>",
            "image_url": "",
            "title": "Pouring Water证明",
            "excerpt_title": "",
            "excerpt": "<a class=\"internal\" href=\"http://www.zhihu.com/question/28830426/answer/42239930\">10L 瓶装水通过一个7L 瓶和3L 瓶平分成两瓶5L 水，有什么数学方法计算此类问题？ - 知乎用户的回答</a>这个问题证明写起来太麻烦了，放弃了。还是把上次那个简化的问题的证明贴上来。总体思路是一样的，就是分情况讨论，排除不可能的操作，最后证明，只有按一种…"
        },
        {
            "type": "article",
            "updated": 1425298349,
            "id": 19965916,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1425298349,
            "url": "",
            "content": "<p>忍不住还是简单写了一下 。反正碰到错误直接crash。语法和预期略有变化，主要就是去掉了逗号。</p><p>demo0.nic相当于 metamath.tar.bz2 里的 demo0.mm ，因为偷懒省了一些东西</p><p>缺少很多功能，比较重要的比如 distinct 。</p><p>不管怎么说，除了功能不足以及肯定存在的Bug，已经足够检查demo0.nic了。</p><p>假如你也一样蛋疼<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ erlc nicolas_lexer.xrl\n$ erlc nicolas_grammer.yrl\n$ erl -make\n$ erl\n1&gt; nicolas_verifier:file(\"demo0.nic\").\n</code></pre></div><p>这样就可以了。</p><p>现在就可以尝试在上面证明一些Type Theory基本的定理了。</p><p>我肯定能忍住到以后再说了。毕竟Type Theory不是几行trivial的代码就能跑通的。<br></p><br><p>相关链接: <br></p><p><a href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957439\" class=\"internal\">尼古拉斯一世 - impress your cat - 知乎专栏</a><br></p><p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19957946\">All you want to know about Nicolas, but might have been afraid to ask - impress your cat - 知乎专栏</a></p>",
            "image_url": "",
            "title": "可以检查demo0.nic了",
            "excerpt_title": "",
            "excerpt": "忍不住还是简单写了一下 。反正碰到错误直接crash。语法和预期略有变化，主要就是去掉了逗号。demo0.nic相当于 metamath.tar.bz2 里的 demo0.mm ，因为偷懒省了一些东西缺少很多功能，比较重要的比如 distinct 。不管怎么说，除了功能不足以及肯定存在的Bug…"
        },
        {
            "type": "article",
            "updated": 1425004990,
            "id": 19963099,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1424962512,
            "url": "",
            "content": "<p><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Penney%2527s_game\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Penney's game<i class=\"icon-external\"></i></a> 是个很简单的问题，要写一个程序来解答，代码量也是有一点的，这非常适合用来说明为啥APL家族的代码很容易理解。</p><p>至于为啥APL很容易学，APL In Exposition里已经有很好的说明了。</p><img data-rawheight=\"209\" data-rawwidth=\"681\" src=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic4.zhimg.com/97f01baf2ec315227178af0c36b3eb7b_r.jpg\"><p>当然我主要就是来反对一下 <a class=\"internal\" href=\"http://www.zhihu.com/question/28248249/answer/40135370\">非程序猿学习什么计算机语言比较好？C语言已经学过了，有没有什么语言打的代码比较少的？ - Belleve 的回答</a></p><p>解这个问题，分析一下状态转移的情况，接着直接计算<img src=\"https://zhihu.com/equation?tex=P+%5Ccdot+%5Clim_%7Bn+%5Cto+%5Cinfty%7D%7BM%5En%7D\" alt=\"P \\cdot \\lim_{n \\to \\infty}{M^n}\" eeimg=\"1\"> 就可以了</p><p>其中，P是初始概率 [1, 0, 0, ..., 0] 。M 是状态转移矩阵。把终止状态排在最后，可以观察到，终止状态对应的几个横行，左边都是零，最右边是个单位矩阵 <img src=\"https://zhihu.com/equation?tex=%5Cbegin%7Bpmatrix%7D%0AA+%26+B+%5C%5C%0AO+%26+I%0A%5Cend%7Bpmatrix%7D\" alt=\"\\begin{pmatrix}\nA &amp; B \\\\\nO &amp; I\n\\end{pmatrix}\" eeimg=\"1\"><br></p><p> 不妨令<img src=\"https://zhihu.com/equation?tex=M%5En+%3D+%5Cbegin%7Bpmatrix%7D%0AA_n+%26+B_n+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D\" alt=\"M^n = \\begin{pmatrix}\nA_n &amp; B_n \\\\\nO &amp; I \\\\\n\\end{pmatrix}\" eeimg=\"1\"></p><img src=\"https://zhihu.com/equation?tex=%5Cbegin%7Barray%7D%7Bl+c+l%7D%0AM%5En+%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_n+%26+B_n+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A+%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_%7Bn-1%7D+%26+B_%7Bn-1%7D+%5C%5C%0AO+%26+I+%5C%5C%0A%5Cend%7Bpmatrix%7D+%5Ccdot+%5Cbegin%7Bpmatrix%7D%0AA+%26+B+%5C%5C%0AO+%26+I%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA_%7Bn-1%7D+%5Ccdot+A+%26+A_%7Bn-1%7D+%5Ccdot+B++%2B+B_%7Bn-1%7D+%5C%5C%0AO+%26+I+%5C%5C+%0A%5Cend%7Bpmatrix%7D+%5C%5C%0A%26%3D%26+%5Cbegin%7Bpmatrix%7D%0AA%5En+%26+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%5Ccdot+B+%5C%5C%0AO+%26+I+%5C%5C+%0A%5Cend%7Bpmatrix%7D%0A%5Cend%7Barray%7D\" alt=\"\\begin{array}{l c l}\nM^n &amp;=&amp; \\begin{pmatrix}\nA_n &amp; B_n \\\\\nO &amp; I \\\\\n\\end{pmatrix} \\\\\n &amp;=&amp; \\begin{pmatrix}\nA_{n-1} &amp; B_{n-1} \\\\\nO &amp; I \\\\\n\\end{pmatrix} \\cdot \\begin{pmatrix}\nA &amp; B \\\\\nO &amp; I\n\\end{pmatrix} \\\\\n&amp;=&amp; \\begin{pmatrix}\nA_{n-1} \\cdot A &amp; A_{n-1} \\cdot B  + B_{n-1} \\\\\nO &amp; I \\\\ \n\\end{pmatrix} \\\\\n&amp;=&amp; \\begin{pmatrix}\nA^n &amp; (\\sum_{i=0}^{n-1} A^i) \\cdot B \\\\\nO &amp; I \\\\ \n\\end{pmatrix}\n\\end{array}\" eeimg=\"1\"><p>因为最终都是会进入终止状态的，所以</p><img src=\"https://zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D+A%5En+%3D+O\" alt=\"\\lim_{n \\to \\infty} A^n = O\" eeimg=\"1\"><p>而<img src=\"https://zhihu.com/equation?tex=%28I-A%29+%5Ccdot+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%3D+I+-+A%5En\" alt=\"(I-A) \\cdot (\\sum_{i=0}^{n-1} A^i) = I - A^n\" eeimg=\"1\"><br><br></p><p>于是，<img src=\"https://zhihu.com/equation?tex=%5Clim_%7Bn+%5Cto+%5Cinfty%7D+%28I-A%29+%5Ccdot+%28%5Csum_%7Bi%3D0%7D%5E%7Bn-1%7D+A%5Ei%29+%3D+I\" alt=\"\\lim_{n \\to \\infty} (I-A) \\cdot (\\sum_{i=0}^{n-1} A^i) = I\" eeimg=\"1\"></p><p>因此这就相当于要求出<img src=\"https://zhihu.com/equation?tex=%28I-A%29%5E%7B-1%7D%5Ccdot+B\" alt=\"(I-A)^{-1}\\cdot B\" eeimg=\"1\"></p><p>认为APL家族代码难读的，无非就是只看到了最终的结果是类似向下面这样的一行程序</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   solve=:];&amp;&gt;{.@:(-@:#@:]([({.\"0 1%.(=@i.@:#-])@:(}.\"0 1))}.)+/@:(3 :'({.\"1 y)(;/}.\"1 y)}0$~(,])#y'&amp;]\"2)@:(2 0 1|:(((,1&amp;-)@:[,\"1 2])(i.@:#,:\"0 1])@:(((('HT',~&amp;.&gt;\"1 0]),[,.[)(1 i:~(]-:({.~-@:#))&amp;&gt;)\"0 1,~)('';#}.~.@:(,;@:(&lt;\\&amp;.&gt;)))))))\n   1r2 solve 'HHT';'HTT'\n┌───┬───┐\n│HHT│2r3│\n├───┼───┤\n│HTT│1r3│\n└───┴───┘\n</code></pre></div><p>光看这个当然难理解了。但是，谁这么写代码就是跟自己过不去，除非是去刷 codegolf 成就。</p><p>你可以把APL通常的使用环境，想像成和比 IPython Notebook 差不多，尽管APL比这个先出现很多，还比这个好用很多，但是架不住人家流行啊。APL作为函数式语言，你通常是用函数组合函数来定义函数的，所以函数的每执行一个步就可以留一个例子，而这一步用到的代码，就是和从最后定义好的函数里抽出来的对应的部分是一样的。</p><p>以上面那个函数，求解所有非终止状态的部分为例，是像下面这样的。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   &lt;\\ 'HHT'\n┌─┬──┬───┐\n│H│HH│HHT│\n└─┴──┴───┘\n   NB. 对每个序列分别求中间状态\n   &lt;\\&amp;.&gt; 'HHT';'HTT'\n┌──────────┬──────────┐\n│┌─┬──┬───┐│┌─┬──┬───┐│\n││H│HH│HHT│││H│HT│HTT││\n│└─┴──┴───┘│└─┴──┴───┘│\n└──────────┴──────────┘\n   NB. 把结果拼到一起\n   ; &lt;\\&amp;.&gt; 'HHT';'HTT'\n┌─┬──┬───┬─┬──┬───┐\n│H│HH│HHT│H│HT│HTT│\n└─┴──┴───┴─┴──┴───┘\n   NB. 把终止状态放最前面\n   (, ;@:(&lt;\\&amp;.&gt;)) 'HHT';'HTT'\n┌───┬───┬─┬──┬───┬─┬──┬───┐\n│HHT│HTT│H│HH│HHT│H│HT│HTT│\n└───┴───┴─┴──┴───┴─┴──┴───┘\n   NB. 去重之后\n   ~. (, ;@:(&lt;\\&amp;.&gt;)) 'HHT';'HTT'\n┌───┬───┬─┬──┬──┐\n│HHT│HTT│H│HH│HT│\n└───┴───┴─┴──┴──┘\n   NB. 把头砍了，后面的终止状态就没了嘛\n   (# }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))) 'HHT';'HTT'\n┌─┬──┬──┐\n│H│HH│HT│\n└─┴──┴──┘\n   NB. 再把起始状态补上\n   ('' ; # }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))) 'HHT';'HTT'\n┌┬─┬──┬──┐\n││H│HH│HT│\n└┴─┴──┴──┘\n   NB. 就是这样\n   non_terminal =: '' ; # }. ~.@:(, ;@:(&lt;\\&amp;.&gt;))\n   non_terminal 'HHT';'HTT'\n┌┬─┬──┬──┐\n││H│HH│HT│\n└┴─┴──┴──┘\n</code></pre></div><p>代码非常容易理解好不好，都省去你自己脑补运行的中间结果了</p>",
            "image_url": "",
            "title": "Penney's game",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"Penney's game\" data-editable=\"true\" href=\"https://en.wikipedia.org/wiki/Penney%27s_game\">Penney's game</a> 是个很简单的问题，要写一个程序来解答，代码量也是有一点的，这非常适合用来说明为啥APL家族的代码很容易理解。至于为啥APL很容易学，APL In Exposition里已经有很好的说明了。当然我主要就是来反对一下 <a class=\"\" data-title=\"非程序猿学习什么计算机语言比较好？C语言已经学过了，有没有什么语言打的代码比较少的？ - Belleve 的回答\" data-editable=\"true\" href=\"http://www.zhihu.com/question/28248249/answer/40135370\">非程序猿学习什么计算机语言比较好？…</a>"
        }
    ]
}