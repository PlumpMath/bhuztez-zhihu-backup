{
    "paging": {
        "next": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=100",
        "previous": "https://www.zhihu.com/api/v4/members/bhuztez/articles?include=data%5B%2A%5D.content&limit=20&offset=60",
        "is_end": false,
        "totals": 106,
        "is_start": false
    },
    "data": [
        {
            "type": "article",
            "updated": 1459343638,
            "id": 19963012,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1424956496,
            "url": "",
            "content": "<p>工作流是一个很简单的概念。(其实不简单，这里就先当他是简单的)。</p><p>自己造工作流轮子的也不在少数，甚至有一些很奇怪的号称支持中国特色流程的。可是很多就算看了文档和代码，也很难理解为啥这可以工作，特别是他是怎么保证某个任务确实会执行。这方面就缺一个简单易懂的文章列表。</p><p><a href=\"http://link.zhihu.com/?target=http%3A//www.workflowpatterns.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Workflow Patterns<i class=\"icon-external\"></i></a> 这个网站倒是给了很多例子，适合用来检验功能是否足够。可是这上面的例子采用的模型是coloured petri-net，虽然例子很简单，光看图示和文字还是很费解的。看IBM developerWorks上的一系列文章，有助于更好的区分几个类似的pattern之间的区别 (差别很大啊，可是看Workflow Patterns很容易就绕进去了)<br></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart1/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing advanced workflow patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 1: Basic control flow patterns and cancellation and force completion patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart2/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 2: Multiple instance patterns and iteration patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart3/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 3: Advanced branching and synchronization patterns<i class=\"icon-external\"></i></a></p><p><a class=\" wrap external\" href=\"http://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/webservices/library/ws-impavdworkflowpart4/index.html\" target=\"_blank\" rel=\"nofollow noreferrer\">Implementing Advanced Workflow Patterns in WebSphere Integration\n                Developer and WebSphere Process Server, Part 4: State-based, termination and trigger patterns<i class=\"icon-external\"></i></a></p><p>一种常用的也是更容易理解的用来表示工作流的模型是<a class=\" wrap external\" href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/%25CE%25A0-calculus\" target=\"_blank\" rel=\"nofollow noreferrer\">π-calculus<i class=\"icon-external\"></i></a>。pi-calculus看<a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.erlang.se/workshop/2005/noll_roy.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">erlang.se/workshop/2005</span><span class=\"invisible\">/noll_roy.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>这个就可以了。至于想不到怎么用pi-calculus表示工作流，可以参考 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//bpt.hpi.uni-potsdam.de/pub/Public/FrankPuhlmann/diss.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">bpt.hpi.uni-potsdam.de/</span><span class=\"invisible\">pub/Public/FrankPuhlmann/diss.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 和 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.stefansen.dk/papers/smawl.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">stefansen.dk/papers/sma</span><span class=\"invisible\">wl.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>就是这么简单</p><p>其实贴这个只是为了解释为啥蛋疼写了个这个 <a href=\"http://link.zhihu.com/?target=http%3A//bhuztez.github.io/pi-diagram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Diagram of π-Calculus<i class=\"icon-external\"></i></a>。发现有些人确实不理解。</p>",
            "image_url": "",
            "title": "如何理解/实现工作流？",
            "excerpt_title": "",
            "excerpt": "工作流是一个很简单的概念。(其实不简单，这里就先当他是简单的)。自己造工作流轮子的也不在少数，甚至有一些很奇怪的号称支持中国特色流程的。可是很多就算看了文档和代码，也很难理解为啥这可以工作，特别是他是怎么保证某个任务确实会执行。这方面就缺一…"
        },
        {
            "type": "article",
            "updated": 1424154585,
            "id": 19958765,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1424154566,
            "url": "",
            "content": "<p>第一个阶段，还在纠结指针，比如<a class=\"internal\" href=\"http://www.zhihu.com/question/20125963\">为什么说指针是 C 语言的精髓？ - 编程语言</a>，你以为理解了指针就是学会了C语言，实际上，只不过是会查<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//cdecl.org/\" target=\"_blank\" rel=\"nofollow noreferrer\">cdecl: C gibberish ↔ English<i class=\"icon-external\"></i></a>而已</p><p>第二个阶段，你以为知道calling convention, syscall, mmap, spin lock, TLB shoot down ... 真要写个操作系统也能写出来了就是学会了C语言。其实也只不过是知道了一点C语言的皮毛罢了。</p><p>第三个阶段，你终于意识到只有学会了APL，才有可能学会C语言。不信，可以来回答一下这个问题，<a class=\"internal\" href=\"http://www.zhihu.com/question/26489010\">这段求素数个数的C语言代码是啥原理？ - C（编程语言）</a>。这个时候你清楚的意识到，很多人对代码竞赛选手的代码的指责方向完全反了，在非空白字符数除以行数这个指标上，他们是太低了而不是太高了。</p><p>最后来推荐一个C语言入门读物的下载链接，<a href=\"https://link.zhihu.com/?target=http%3A//www.softwarepreservation.org/projects/apl/Papers/197201_APL%2520In%2520Exposition_320-3010.pdf/view\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">APL in Exposition<i class=\"icon-external\"></i></a></p><p>就是这样</p>",
            "image_url": "",
            "title": "学C语言的三个阶段",
            "excerpt_title": "",
            "excerpt": "第一个阶段，还在纠结指针，比如<a class=\"\" data-title=\"为什么说指针是 C 语言的精髓？ - 编程语言\" data-editable=\"true\" href=\"http://www.zhihu.com/question/20125963\">为什么说指针是 C 语言的精髓？ - 编程语言</a>，你以为理解了指针就是学会了C语言，实际上，只不过是会查<a class=\"\" data-title=\"cdecl: C gibberish ↔ English\" data-editable=\"true\" href=\"http://cdecl.org/\">cdecl: C gibberish ↔ English</a>而已第二个阶段，你以为知道calling convention, syscall, mmap, spin lock, TLB shoot …"
        },
        {
            "type": "article",
            "updated": 1424004463,
            "id": 19957946,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1424004463,
            "url": "",
            "content": "<h2>为什么叫尼古拉斯？</h2><p>因为布尔巴基这个名字被占了，看<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//wiki.planetmath.org/cgi-bin/wiki.pl/Projects\" target=\"_blank\" rel=\"nofollow noreferrer\">AsteroidMeta: Projects<i class=\"icon-external\"></i></a>这里就知道了</p><h2>为什么要重新造轮子？<br></h2><p>Metamath风格的Proof Checker太少了，而不是太多了。同时，这主要是为了《21天学通Erlang》第二章作准备。</p><h2>为什么不照着流行的Coq来？</h2><p>Coq可是从Proof Checking, Type Theory 一直到Proof Assistant全都一个程序搞定的。这么复杂，真的适合在零基础程序语言入门儿童读物一开始就讲么？</p><h2>尼古拉斯和Metamath有何不同？</h2><p>主要是换了个语法，另外把证明的过程从用一个简单的栈改成DAG，于是就更显啰嗦了。</p><h2>要怎么样才能看懂尼古拉斯的代码？<br></h2><p>可以先看 Metamath book <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//us.metamath.org/downloads/metamath.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">us.metamath.org/downloa</span><span class=\"invisible\">ds/metamath.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a><br></p><p>根据Curry-Howard Correspondence，可以先从Erlang代码开始</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>ax1() -&gt; {['苏格拉底', '是', '人']}.\nax2([X, '是', '人']) -&gt; {[X, '会', '死']}.\n\nth1() -&gt;\n  {X1} = ax1(),\n  {X2} = ax2(X1),\n  {X2}.\n</code></pre></div><p>th1/0 就可以当作是证明了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>1&gt; th1().\n{['苏格拉底', '会', '死']}.\n</code></pre></div><p>证明和程序在用的时候终究是不一样的，你肯定不希望一个定理每次使用都需要从头开始证明。 <br></p><p>可以用Erlang里Type Spec的语法，把结论记录下来。这样用定理的时候，直接用结论就可以了。更棒的是，看上去不需要区别公理和定理了，公理无非就是没有证明的定理。<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>-spec ax1() -&gt; {AX1} when\n    AX1 :: ['苏格拉底', '是', '人'].\n\n-spec ax2(P) -&gt; {Q} when\n    P :: [X, '是', '人'],\n    Q :: [X, '会', '死'].\n\n-spec th1() -&gt; {R} when\n    R :: ['苏格拉底', '会', '死'].\n\nth1() -&gt;\n  {X1} = ax1(),\n  {X2} = ax2(X1),\n  {X2}.\n</code></pre></div><p>改语法</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>define ax1( |- AX1 ) {\n    AX1 :: { 苏格拉底 是 人 }\n}\n\ndefine ax2(P |- Q) {\n    P :: {X 是 人}\n    Q :: {X 会 死}\n}\n\ndefine th1( |- R) {\n    R :: {苏格拉底 会 死}\n}\n\nproof th1( |- R) {\n    ax1( |- X1)\n    ax2(X1 |- R)\n}\n</code></pre></div><p>主要保留的是从Prolog借鉴来的，首字母是大写的才是变量。所以不需要像Metamath那样每个符号都要定义是不是变量。大括号里直接用空格隔开多个符号就可以了，逗号就不需要了。最后就是把定义和证明的语法基本改成一致的。这样证明里的结果只要变量名对应上就可以了。</p><p>当然还可以更啰嗦一点</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>define ax1( |- AX1 ) {\n    AX1 :: { 苏格拉底 是 人 }\n}\n\ndefine ax2(P |- Q) {\n    P :: {X 是 人}\n    Q :: {X 会 死}\n}\n\ndefine th1( |- R) {\n    R :: {苏格拉底 会 死}\n}\n\nproof th1( |- R) {\n    ax1( |- X1)\n    X1 :: {苏格拉底 是 人}\n    ax2(X1 |- R)\n    R :: {苏格拉底 会 死}\n}\n</code></pre></div><p>因为变量首字母都是大写的，所以对应Metamath里distinct的概念可以直接写</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>distinct :: {X Y Z}\n</code></pre></div><p>就是这样</p>",
            "image_url": "",
            "title": "All you want to know about Nicolas, but might have been afraid to ask",
            "excerpt_title": "",
            "excerpt": "为什么叫尼古拉斯？因为布尔巴基这个名字被占了，看<a class=\"\" data-title=\"AsteroidMeta: Projects\" data-editable=\"true\" href=\"http://wiki.planetmath.org/cgi-bin/wiki.pl/Projects\">AsteroidMeta: Projects</a>这里就知道了为什么要重新造轮子？ Metamath风格的Proof Checker太少了，而不是太多了。同时，这主要是为了《21天学通Erlang》第二章作准备。为什么不照着流行的Coq来？Coq可是从Pr…"
        },
        {
            "type": "article",
            "updated": 1423927923,
            "id": 19957439,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1423927219,
            "url": "",
            "content": "<p>打算写一个电脑游戏。 电脑游戏的定义可以参考</p><p><img data-rawheight=\"286\" data-rawwidth=\"680\" src=\"https://pic3.zhimg.com/52dec19d6ab1d9ca33c913859d93bc2e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic3.zhimg.com/52dec19d6ab1d9ca33c913859d93bc2e_r.jpg\">因为我是Metamath脑残粉，所以肯定是按Metamath的方向来的。</p><p>可是布尔巴基的名字已经被另外一个类似的游戏占了，只能叫尼古拉斯了。不过叫尼古拉斯也挺好的，版本号可以是一世二世三世，听上去一下子就高级多了。</p><p>仓库已建好了，Proof Checker的大致设计也完成了，至于什么时候开始写，再说吧，也可以谁有兴趣谁来写</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/nicolas\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/nicolas · GitHub<i class=\"icon-external\"></i></a><br></p><p>顺便黑一下Coq</p><p><img data-rawheight=\"496\" data-rawwidth=\"670\" src=\"https://pic2.zhimg.com/8ddbe9cdcb1a84fc95210c2f5471025d_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"670\" data-original=\"https://pic2.zhimg.com/8ddbe9cdcb1a84fc95210c2f5471025d_r.jpg\">当然，这个benchmark对Coq不是很公平，完成相同的证明，无论automath还是metamath行数都要Coq的好几倍呢。</p><p>本文图都来自 <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.ru.nl/%7Efreek/talks/aut.dvi\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cs.ru.nl/~freek/talks/a</span><span class=\"invisible\">ut.dvi</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p><br>就是这样</p>",
            "image_url": "",
            "title": "尼古拉斯一世",
            "excerpt_title": "",
            "excerpt": "打算写一个电脑游戏。 电脑游戏的定义可以参考因为我是Metamath脑残粉，所以肯定是按Metamath的方向来的。可是布尔巴基的名字已经被另外一个类似的游戏占了，只能叫尼古拉斯了。不过叫尼古拉斯也挺好的，版本号可以是一世二世三世，听上去一下子就高级多了…"
        },
        {
            "type": "article",
            "updated": 1423921685,
            "id": 19957381,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1423921629,
            "url": "",
            "content": "<p><a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a></p><p>既然有人想看我写的答案，那就贴一下</p><p>非常简单就这么几行</p><div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">steps</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">),</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">==</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">==</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">&gt;</span><span class=\"n\">b</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"n\">m1</span><span class=\"p\">,</span><span class=\"n\">m2</span><span class=\"p\">,</span><span class=\"n\">n1</span><span class=\"p\">,</span><span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">c</span>\n    <span class=\"k\">while</span> <span class=\"n\">r1</span><span class=\"p\">:</span>\n        <span class=\"n\">m1</span><span class=\"p\">,</span> <span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">m2</span><span class=\"o\">-</span><span class=\"n\">r2</span><span class=\"o\">/</span><span class=\"n\">r1</span><span class=\"o\">*</span><span class=\"n\">m1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">m1</span>\n        <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"o\">-</span><span class=\"n\">r2</span><span class=\"o\">/</span><span class=\"n\">r1</span><span class=\"o\">*</span><span class=\"n\">n1</span><span class=\"p\">)</span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n1</span>\n        <span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">r2</span><span class=\"o\">%</span><span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r1</span>\n    <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"o\">%</span> <span class=\"n\">r2</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">m2</span><span class=\"o\">/</span><span class=\"n\">r2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">n2</span><span class=\"o\">/</span><span class=\"n\">r2</span> <span class=\"ow\">or</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"p\">((</span><span class=\"n\">m</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"o\">+</span><span class=\"n\">m</span><span class=\"o\">-</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">&lt;</span><span class=\"n\">a</span><span class=\"p\">),(</span><span class=\"n\">n</span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div><br>证明也很简单，就留给有兴趣的读者当思考题了<p>就是这样</p>",
            "image_url": "",
            "title": "Pouring Water解答",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"Pouring Water - impress your cat - 知乎专栏\" data-editable=\"true\" class=\"\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\">Pouring Water - impress your cat - 知乎专栏</a>既然有人想看我写的答案，那就贴一下非常简单就这么几行def steps(a,b,c):\n a, b = min(a,b), max(a,b)\n if (c==a) or (c==b):\n return 1\n elif (c&gt;b):\n return -1\n r1,r2,m1,m2,n1,n2 = a,b,c,0,0,c\n while r1…"
        },
        {
            "type": "article",
            "updated": 1423921202,
            "id": 19957370,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1423921202,
            "url": "",
            "content": "<p>很早之前就开始刷了，上面的题目大多很无聊，说白了最多就是考一些很奇怪的trick，代码写起来又很烦琐，更可恶的是有些题用Python还特别扭。实在没动力刷。</p><p><a class=\"internal\" href=\"http://www.zhihu.com/question/24604588\">刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程</a></p><p> 后来，突然一想，其实可以<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19938032\">把用到的函数合并到同一个Python文件 - impress your cat - 知乎专栏</a></p><p>于是就开始整理答案的代码 <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=https%3A//github.com/bhuztez/leetcode-solution\" target=\"_blank\" rel=\"nofollow noreferrer\">bhuztez/leetcode-solution · GitHub<i class=\"icon-external\"></i></a>，都是用Python写的， 欢迎 Pull Request</p><p>就是这样</p>",
            "image_url": "",
            "title": "刷LeetCode",
            "excerpt_title": "",
            "excerpt": "很早之前就开始刷了，上面的题目大多很无聊，说白了最多就是考一些很奇怪的trick，代码写起来又很烦琐，更可恶的是有些题用Python还特别扭。实在没动力刷。<a class=\"\" data-title=\"刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程\" data-editable=\"true\" href=\"http://www.zhihu.com/question/24604588\">刚开始做leetcode上的题，就发现做不下去了，怎么办？ - 编程</a> 后来，突然一想，其实可以<a class=\"\" data-title=\"把用到的函数合并到同一个Python文件 - impress your cat - 知乎专栏\" data-editable=\"true\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19938032\">把用到的函…</a>"
        },
        {
            "type": "article",
            "updated": 1423838433,
            "id": 19955795,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1423838397,
            "url": "",
            "content": "<blockquote><p>One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!</p><p>— <a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.utexas.edu/%7EEWD/transcriptions/EWD03xx/EWD340.html\" target=\"_blank\" rel=\"nofollow noreferrer\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)<i class=\"icon-external\"></i></a><br></p></blockquote><p>要想找工作，不妨先忽略萧井陌说的。他整天念叨来念叨去，就是SICP，CSAPP，CLRS。我的感觉是他自己根本就没看完这三本书，也许我是错的。但是，无论你看没看过这三本书，做没做完过这上面的习题，和找不找的到工作，应该是没啥关系的。我猜连轮子哥都没刷完其中任意一本的所有习题，不照样能去微软。一直就没找到足够好的反面例子。今天终于找到了，<a class=\"internal\" href=\"http://www.zhihu.com/question/27129103/answer/35545866\">如何看待Thomas Cormen所说看完《算法导论》需要的时间 ？ - 白荣东的回答</a>。这可是几乎刷完了也找不到工作。</p><p>我说，比如像我这种连简历都过不去的弱渣，要是听萧井陌的，肯定会饿死的。写简历要是小心翼翼地把所有buzzword都去掉，简历根本就没人看。我是怎么知道的？我找不到工作，只好到处投简历，可是根本就没人理。想A/B test也没机会啊。终于有一家公司，从两种不同渠道投了两份不同的简历，简历A没有任何buzzword。简历B上有一些buzzword。两份简历时间是错开的。结果简历A没有任何回应。简历B被很干脆的拒了。</p><p>还是有个段子说的对，简历最前面应该写精通写C, C++, Java, Objective-C, C#, Go, Node.js, JavaScript, PHP, D, Rust, COBOL, FORTRAN, BASIC, Logo, Ada, Bash, csh, Perl, Ruby, Pascal, ActionScript, Vala, Python, F#, Erlang, Boo, Scala, Groovy, Clojure, Whiley, Yeti, Scheme, Tcl, Lua, Forth, CommonLisp, Elisp, Haskell, Standard ML, OCaml, Prolog, CLU, Icon, Self, Io, SETL, SNOBOL, Mercury, REBOL, Oz, Matlab/Octave, S/R, Nim, occam-pi, APL, A+, J, K, ABC, Smalltalk, MUMPS, Elixir, Julia, Swift, Hack, TypeScript, ATS, ABAP, Haxe, Pyret .... 等语言的 Hello, world。</p><p>当然很多人给的求职的建议都是很诚恳的。内容往往是他们认为比较合理的招聘过程是怎么样的，实际上可能正如他们所说，也可能有很大的区别。我认为，简历上就应该写精通，熟练 ... 而不需要任何犹豫。简历根本就没人看，那上面用词再合理也没有任何意义。说学历不重要的人，他们找第一份工作的时候，简历上肯定也写了学历。有一家公司，我投过去的简历估计是buzzword match了，但人家回的邮件就只问一个问题，有没有学历，我回没有，然后就没有然后了。就不黑了，因为还有更可恶的要黑。</p><p>只有非常少数的简历最终有机会电话面试。比如大半年前，意外的有了一次电话面试的机会，是一家后来我才知道叫耳语的公司。他们自称是从美国回来开分舵的，各种说法听上去好像逼格很高的样子。我想面试体验总该比国内的平均水平好一点吧。结果，可以肯定这是在我仅有的几次电话面试里体验最糟糕的。就是一种很奇怪的(国内很常见的)套路，就是问各种底层怎么实现，差不多就是让你讲一下怎么写一个Erlang解释器。Erlang解释器的实现可复杂了，想光靠说就能说明白，我真的办不到啊。远比这糟糕的是，他们试图让我相信在别的语言的语言里，比如Akka，在Erlang擅长的地方能做的和Erlang一样好。另外他们还想让我相信，实时搜索引擎等于反向代理+ElasticSearch。不知道哪个问题上，我说这个之前写过，略复杂，要不就看我之前写的代码吧，竟然能告诉我不要看代码，要直接给他讲明白，这可是电话面试啊，连纸和笔都没有的。</p><p>还有一些奇怪的情况是，有些公司要有电话面试机会之前得先做笔试题。笔试题倒是不难，有一题该死的算法题。算法题也不难，玩OI/ACM的，估计10分钟就做出来了，毕竟只要不到20行代码。虽然算法渣也只能硬着头皮做了，花了差不多一下午的时间才搞定。 其实就是这个题目，<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19954774\"><span class=\"invisible\">http://</span><span class=\"visible\">zhuanlan.zhihu.com/impr</span><span class=\"invisible\">ess-your-cat/19954774</span><span class=\"ellipsis\"></span></a>。之后却发现因为数据太弱，所以怎么都排不到前面去，只好贴一堆让有些排名很前面的代码难堪的数据泄愤。</p><p>顺便求介绍工作。也顺便感谢之前所有帮忙介绍工作的。</p>",
            "image_url": "",
            "title": "别听萧井陌的",
            "excerpt_title": "",
            "excerpt": "One moral of the above story is, of course, that we must be very careful\n when we give advice to younger people; sometimes they follow it!— <a class=\"\" data-title=\"E.W.Dijkstra Archive: The Humble Programmer (EWD 340)\" data-editable=\"true\" href=\"http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html\">E.W.Dijkstra Archive: The Humble Programmer (EWD 340)</a> 要想找工作，不妨先忽略萧井陌说的。他整天念…"
        },
        {
            "type": "article",
            "updated": 1423640045,
            "id": 19954774,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1423640045,
            "url": "",
            "content": "<p><a href=\"https://link.zhihu.com/?target=http%3A//www.spoj.com/problems/POUR1/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SPOJ.com - Problem POUR1<i class=\"icon-external\"></i></a></p><p>这题不知道为啥数据范围取的那么小。那么就自己来补一组数据吧</p><p>输入</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>300\n179424691\n179424697\n1\n179424691\n179424719\n1\n179424691\n179424731\n1\n179424691\n179424743\n1\n179424691\n179424779\n1\n179424691\n179424787\n1\n179424691\n179424793\n1\n179424691\n179424797\n1\n179424691\n179424799\n1\n179424691\n179424821\n1\n179424691\n179424871\n1\n179424691\n179424887\n1\n179424691\n179424893\n1\n179424691\n179424899\n1\n179424691\n179424907\n1\n179424691\n179424911\n1\n179424691\n179424929\n1\n179424691\n179424937\n1\n179424691\n179424941\n1\n179424691\n179424977\n1\n179424691\n179424989\n1\n179424691\n179425003\n1\n179424691\n179425019\n1\n179424691\n179425027\n1\n179424697\n179424719\n1\n179424697\n179424731\n1\n179424697\n179424743\n1\n179424697\n179424779\n1\n179424697\n179424787\n1\n179424697\n179424793\n1\n179424697\n179424797\n1\n179424697\n179424799\n1\n179424697\n179424821\n1\n179424697\n179424871\n1\n179424697\n179424887\n1\n179424697\n179424893\n1\n179424697\n179424899\n1\n179424697\n179424907\n1\n179424697\n179424911\n1\n179424697\n179424929\n1\n179424697\n179424937\n1\n179424697\n179424941\n1\n179424697\n179424977\n1\n179424697\n179424989\n1\n179424697\n179425003\n1\n179424697\n179425019\n1\n179424697\n179425027\n1\n179424719\n179424731\n1\n179424719\n179424743\n1\n179424719\n179424779\n1\n179424719\n179424787\n1\n179424719\n179424793\n1\n179424719\n179424797\n1\n179424719\n179424799\n1\n179424719\n179424821\n1\n179424719\n179424871\n1\n179424719\n179424887\n1\n179424719\n179424893\n1\n179424719\n179424899\n1\n179424719\n179424907\n1\n179424719\n179424911\n1\n179424719\n179424929\n1\n179424719\n179424937\n1\n179424719\n179424941\n1\n179424719\n179424977\n1\n179424719\n179424989\n1\n179424719\n179425003\n1\n179424719\n179425019\n1\n179424719\n179425027\n1\n179424731\n179424743\n1\n179424731\n179424779\n1\n179424731\n179424787\n1\n179424731\n179424793\n1\n179424731\n179424797\n1\n179424731\n179424799\n1\n179424731\n179424821\n1\n179424731\n179424871\n1\n179424731\n179424887\n1\n179424731\n179424893\n1\n179424731\n179424899\n1\n179424731\n179424907\n1\n179424731\n179424911\n1\n179424731\n179424929\n1\n179424731\n179424937\n1\n179424731\n179424941\n1\n179424731\n179424977\n1\n179424731\n179424989\n1\n179424731\n179425003\n1\n179424731\n179425019\n1\n179424731\n179425027\n1\n179424743\n179424779\n1\n179424743\n179424787\n1\n179424743\n179424793\n1\n179424743\n179424797\n1\n179424743\n179424799\n1\n179424743\n179424821\n1\n179424743\n179424871\n1\n179424743\n179424887\n1\n179424743\n179424893\n1\n179424743\n179424899\n1\n179424743\n179424907\n1\n179424743\n179424911\n1\n179424743\n179424929\n1\n179424743\n179424937\n1\n179424743\n179424941\n1\n179424743\n179424977\n1\n179424743\n179424989\n1\n179424743\n179425003\n1\n179424743\n179425019\n1\n179424743\n179425027\n1\n179424779\n179424787\n1\n179424779\n179424793\n1\n179424779\n179424797\n1\n179424779\n179424799\n1\n179424779\n179424821\n1\n179424779\n179424871\n1\n179424779\n179424887\n1\n179424779\n179424893\n1\n179424779\n179424899\n1\n179424779\n179424907\n1\n179424779\n179424911\n1\n179424779\n179424929\n1\n179424779\n179424937\n1\n179424779\n179424941\n1\n179424779\n179424977\n1\n179424779\n179424989\n1\n179424779\n179425003\n1\n179424779\n179425019\n1\n179424779\n179425027\n1\n179424787\n179424793\n1\n179424787\n179424797\n1\n179424787\n179424799\n1\n179424787\n179424821\n1\n179424787\n179424871\n1\n179424787\n179424887\n1\n179424787\n179424893\n1\n179424787\n179424899\n1\n179424787\n179424907\n1\n179424787\n179424911\n1\n179424787\n179424929\n1\n179424787\n179424937\n1\n179424787\n179424941\n1\n179424787\n179424977\n1\n179424787\n179424989\n1\n179424787\n179425003\n1\n179424787\n179425019\n1\n179424787\n179425027\n1\n179424793\n179424797\n1\n179424793\n179424799\n1\n179424793\n179424821\n1\n179424793\n179424871\n1\n179424793\n179424887\n1\n179424793\n179424893\n1\n179424793\n179424899\n1\n179424793\n179424907\n1\n179424793\n179424911\n1\n179424793\n179424929\n1\n179424793\n179424937\n1\n179424793\n179424941\n1\n179424793\n179424977\n1\n179424793\n179424989\n1\n179424793\n179425003\n1\n179424793\n179425019\n1\n179424793\n179425027\n1\n179424797\n179424799\n1\n179424797\n179424821\n1\n179424797\n179424871\n1\n179424797\n179424887\n1\n179424797\n179424893\n1\n179424797\n179424899\n1\n179424797\n179424907\n1\n179424797\n179424911\n1\n179424797\n179424929\n1\n179424797\n179424937\n1\n179424797\n179424941\n1\n179424797\n179424977\n1\n179424797\n179424989\n1\n179424797\n179425003\n1\n179424797\n179425019\n1\n179424797\n179425027\n1\n179424799\n179424821\n1\n179424799\n179424871\n1\n179424799\n179424887\n1\n179424799\n179424893\n1\n179424799\n179424899\n1\n179424799\n179424907\n1\n179424799\n179424911\n1\n179424799\n179424929\n1\n179424799\n179424937\n1\n179424799\n179424941\n1\n179424799\n179424977\n1\n179424799\n179424989\n1\n179424799\n179425003\n1\n179424799\n179425019\n1\n179424799\n179425027\n1\n179424821\n179424871\n1\n179424821\n179424887\n1\n179424821\n179424893\n1\n179424821\n179424899\n1\n179424821\n179424907\n1\n179424821\n179424911\n1\n179424821\n179424929\n1\n179424821\n179424937\n1\n179424821\n179424941\n1\n179424821\n179424977\n1\n179424821\n179424989\n1\n179424821\n179425003\n1\n179424821\n179425019\n1\n179424821\n179425027\n1\n179424871\n179424887\n1\n179424871\n179424893\n1\n179424871\n179424899\n1\n179424871\n179424907\n1\n179424871\n179424911\n1\n179424871\n179424929\n1\n179424871\n179424937\n1\n179424871\n179424941\n1\n179424871\n179424977\n1\n179424871\n179424989\n1\n179424871\n179425003\n1\n179424871\n179425019\n1\n179424871\n179425027\n1\n179424887\n179424893\n1\n179424887\n179424899\n1\n179424887\n179424907\n1\n179424887\n179424911\n1\n179424887\n179424929\n1\n179424887\n179424937\n1\n179424887\n179424941\n1\n179424887\n179424977\n1\n179424887\n179424989\n1\n179424887\n179425003\n1\n179424887\n179425019\n1\n179424887\n179425027\n1\n179424893\n179424899\n1\n179424893\n179424907\n1\n179424893\n179424911\n1\n179424893\n179424929\n1\n179424893\n179424937\n1\n179424893\n179424941\n1\n179424893\n179424977\n1\n179424893\n179424989\n1\n179424893\n179425003\n1\n179424893\n179425019\n1\n179424893\n179425027\n1\n179424899\n179424907\n1\n179424899\n179424911\n1\n179424899\n179424929\n1\n179424899\n179424937\n1\n179424899\n179424941\n1\n179424899\n179424977\n1\n179424899\n179424989\n1\n179424899\n179425003\n1\n179424899\n179425019\n1\n179424899\n179425027\n1\n179424907\n179424911\n1\n179424907\n179424929\n1\n179424907\n179424937\n1\n179424907\n179424941\n1\n179424907\n179424977\n1\n179424907\n179424989\n1\n179424907\n179425003\n1\n179424907\n179425019\n1\n179424907\n179425027\n1\n179424911\n179424929\n1\n179424911\n179424937\n1\n179424911\n179424941\n1\n179424911\n179424977\n1\n179424911\n179424989\n1\n179424911\n179425003\n1\n179424911\n179425019\n1\n179424911\n179425027\n1\n179424929\n179424937\n1\n179424929\n179424941\n1\n179424929\n179424977\n1\n179424929\n179424989\n1\n179424929\n179425003\n1\n179424929\n179425019\n1\n179424929\n179425027\n1\n179424937\n179424941\n1\n179424937\n179424977\n1\n179424937\n179424989\n1\n179424937\n179425003\n1\n179424937\n179425019\n1\n179424937\n179425027\n1\n179424941\n179424977\n1\n179424941\n179424989\n1\n179424941\n179425003\n1\n179424941\n179425019\n1\n179424941\n179425027\n1\n179424977\n179424989\n1\n179424977\n179425003\n1\n179424977\n179425019\n1\n179424977\n179425027\n1\n179424989\n179425003\n1\n179424989\n179425019\n1\n179424989\n179425027\n1\n179425003\n179425019\n1\n179425003\n179425027\n1\n179425019\n179425027\n1\n</code></pre></div><p>输出<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>119616460\n76896300\n197367180\n317443728\n285448440\n37380152\n35181320\n115102664\n272459796\n160102088\n123603736\n113513640\n159883476\n258785760\n222619656\n29360420\n117606176\n242150560\n255500936\n253453260\n190262580\n66709236\n356661600\n113208540\n32622672\n21108788\n140419344\n288830064\n342900616\n171948712\n236840664\n246269260\n63666848\n127865936\n177536108\n172101332\n95930088\n160627916\n184455404\n275324280\n218300192\n297080436\n120470960\n140098848\n321322932\n20059920\n289254624\n59808240\n29904120\n11961648\n221642340\n106684988\n101213964\n8971236\n330704476\n108599216\n106800476\n45371788\n3987216\n232870500\n175686796\n201639324\n174486528\n35561676\n47290268\n2658144\n98557316\n289472120\n253991052\n59808244\n194376816\n243505028\n127333700\n184861876\n10554396\n326951812\n46137804\n216229896\n261384292\n158064716\n338460452\n195373692\n177612456\n87099432\n269991656\n300500160\n136307256\n176786264\n32396156\n46068548\n219296928\n244670132\n100477868\n93035064\n192240824\n211629228\n229888032\n124600564\n205740456\n105814636\n196929684\n303313396\n297112092\n77689104\n25373208\n309776252\n347179820\n350568596\n96213340\n133936884\n269137172\n153792672\n279105224\n35884956\n187968836\n23403236\n73099004\n44069256\n352868848\n196245920\n190299076\n148324544\n68136020\n48732676\n351600264\n105946120\n214669064\n182415312\n240197852\n119616524\n215309748\n299041320\n274414404\n162336748\n165070848\n20312244\n237097112\n257175612\n260455424\n187006188\n349280396\n237679688\n237974052\n88824200\n96357812\n114460712\n128587848\n179424792\n119616528\n76896344\n64408912\n251958284\n308610728\n74478236\n81842912\n261534528\n205810868\n353865704\n305507204\n183325424\n296600328\n228980344\n238174652\n217763564\n358849592\n149520672\n300657828\n55821060\n321469512\n77398952\n176162580\n69251696\n92430988\n66643520\n214313036\n27910536\n198114984\n87099464\n100219316\n333886356\n97868076\n309009436\n334382660\n267228492\n7176992\n272459960\n96120456\n115936064\n192426668\n65704880\n181440896\n79324688\n235715064\n133753112\n173129300\n272725764\n206610436\n49840236\n211629320\n325468356\n326951976\n206006336\n327914432\n113635756\n253035112\n226417140\n11830212\n308103396\n163747016\n313993536\n32622704\n230689136\n99680492\n161482400\n334101536\n250107440\n92275664\n88019772\n346685456\n233796128\n208520880\n32204476\n119616592\n59808296\n107654936\n29904148\n290497468\n330141836\n146198076\n55821088\n175906800\n92806004\n255544628\n15379280\n119616596\n256321284\n199361000\n99680504\n342538472\n74760380\n162336844\n321469684\n150064500\n131008696\n123187284\n269137352\n59808300\n23923320\n283302500\n85440436\n211629412\n7974440\n200127828\n352869084\n241102292\n179424908\n163113560\n311003196\n147761700\n235815636\n323840148\n216805152\n326809752\n257175784\n199361020\n248434508\n263156556\n337101408\n322044780\n273037976\n86389796\n117554288\n89712464\n299041556\n254185348\n346888252\n48493232\n247207740\n329556080\n179424936\n125597468\n124217280\n250107532\n8752436\n135565540\n139552744\n74760400\n34727412\n340447396\n175252308\n299041636\n82811532\n324673804\n186602000\n153792852\n23923332\n321076328\n134568756\n149520844\n269137532\n</code></pre></div><p>就这样吧</p>",
            "image_url": "",
            "title": "Pouring Water",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"SPOJ.com - Problem POUR1\" data-editable=\"true\" href=\"http://www.spoj.com/problems/POUR1/\">SPOJ.com - Problem POUR1</a>这题不知道为啥数据范围取的那么小。那么就自己来补一组数据吧输入300\n179424691\n179424697\n1\n179424691\n179424719\n1\n179424691\n179424731\n1\n179424691\n179424743\n1\n179424691\n179424779\n1\n179424691\n179424787\n1\n179424691\n179424…"
        },
        {
            "type": "article",
            "updated": 1422708144,
            "id": 19946685,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1422708144,
            "url": "",
            "content": "<p>没有多大进展。时间都花在改行号上了。所以，在这里求<a href=\"http://www.zhihu.com/question/26873718\" class=\"internal\">tutorial中的代码怎么管理比较好？ - LaTeX</a> 的答案。</p><p>其他还有<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19944629\">弄了个Erlang的Web Shell - impress your cat - 知乎专栏</a>。 所以，假如你不知道用Erlang写点啥的话，还不如赶紧来写个Erlang Web IDE。另外，OSv 0.17已经发布了。所以，现在用官方镜像已经能启动Erlang了。Erlang Web IDE写好了之后，也可以在OSv上运行一下试试，看在OSv上的Erlang还有没有问题(肯定是有的)。<br></p><p>另外就是不知道为啥gitcafe上镜像失效了。懒得折腾了。以后的讨论直接去GitHub吧。仓库地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> xn--21Erlang-p00o82pmp3o/erlang-for-dummies-zh-cn · GitHub <i class=\"icon-external\"></i></a>。觉得哪里写的不好，改好了直接Pull Request吧。</p><p>接下来一段不知道多长的时间，我暂时没法继续写《21天学通Erlang》了。所以，就看你们能写多少了。<br></p><p>就是这样</p>",
            "image_url": "",
            "title": "最近的进展",
            "excerpt_title": "",
            "excerpt": "没有多大进展。时间都花在改行号上了。所以，在这里求<a href=\"http://www.zhihu.com/question/26873718\" class=\"internal\">tutorial中的代码怎么管理比较好？ - LaTeX</a> 的答案。其他还有<a class=\"internal\" href=\"http://zhuanlan.zhihu.com/impress-your-cat/19944629\">弄了个Erlang的Web Shell - impress your cat - 知乎专栏</a>。 所以，假如你不知道用Erlang写点啥的话，还不如赶紧来写个Erlang Web IDE。另外…"
        },
        {
            "type": "article",
            "updated": 1459343580,
            "id": 19946311,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1422624791,
            "url": "",
            "content": "<p>在看<a href=\"http://www.zhihu.com/question/27859000\" class=\"internal\">为什么区区Javac需要开这么多进程？ - Java</a>这个问题时， 我去试了一下JamVM。结果有点小问题，得去debian里偷个patch过来<a href=\"https://link.zhihu.com/?target=http%3A//bazaar.launchpad.net/%7Eopenjdk/openjdk/openjdk7/revision/579/patches/it-jamvm-2.0.diff%23patches/it-jamvm-2.0.diff\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">~openjdk/openjdk/openjdk7 : revision 579<i class=\"icon-external\"></i></a>。且编译参数和作者博客里写的不一样了。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>./configure --with-java-runtime-library=openjdk7\n</code></pre></div><p>要和openjdk一起用，还得替换 libjvm.so (这是怎么想的？)。还好，我有mount大法。  </p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>$ userns spawn -n jam --user\n# mount -B lib/libjvm.so /usr/lib/jvm/java-1.7.0-..../jre/lib/amd64/server/libjvm.so\n# java -version\njava version \"1.7.0_71\"\nOpenJDK Runtime Environment (.....)\nJamVM (build 2.0.0, inline-threaded interpreter)\n#\n</code></pre></div><p>就是这样</p>",
            "image_url": "",
            "title": "运行JamVM",
            "excerpt_title": "",
            "excerpt": "在看<a href=\"http://www.zhihu.com/question/27859000\" class=\"internal\">为什么区区Javac需要开这么多进程？ - Java</a>这个问题时， 我去试了一下JamVM。结果有点小问题，得去debian里偷个patch过来<a href=\"https://link.zhihu.com/?target=http%3A//bazaar.launchpad.net/%7Eopenjdk/openjdk/openjdk7/revision/579/patches/it-jamvm-2.0.diff%23patches/it-jamvm-2.0.diff\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">~openjdk/openjdk/openjdk7 : revision 579<i class=\"icon-external\"></i></a>。且编译参数和作者博客里写的不一样了。./configure --with-java-runtime-library=ope…"
        },
        {
            "type": "article",
            "updated": 1459343536,
            "id": 19945892,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1422595822,
            "url": "",
            "content": "<p>这种说法显然是错的。但是我发现我证明不了这是错的。</p><p>比如 <br></p><p><img data-rawheight=\"573\" data-rawwidth=\"757\" src=\"https://pic4.zhimg.com/d5406955b158e2d249f3c221ccaa19f3_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"757\" data-original=\"https://pic4.zhimg.com/d5406955b158e2d249f3c221ccaa19f3_r.jpg\">图来自  <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.cis.upenn.edu/%7Ecis570/slides/lecture04.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cis.upenn.edu/~cis570/s</span><span class=\"invisible\">lides/lecture04.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>这个完全可以用Datalog表示</p><img data-rawheight=\"752\" data-rawwidth=\"709\" src=\"https://pic2.zhimg.com/018c02c609c0013ddbc914f32661e625_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"709\" data-original=\"https://pic2.zhimg.com/018c02c609c0013ddbc914f32661e625_r.jpg\"><img data-rawheight=\"760\" data-rawwidth=\"710\" src=\"https://pic2.zhimg.com/1f0586150d1b4735c3e31d48862d2bcd_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic2.zhimg.com/1f0586150d1b4735c3e31d48862d2bcd_r.jpg\">",
            "image_url": "",
            "title": "编译原理不就是Datalog嘛",
            "excerpt_title": "",
            "excerpt": "这种说法显然是错的。但是我发现我证明不了这是错的。比如 图来自 <a class=\" external\" href=\"http://link.zhihu.com/?target=http%3A//www.cis.upenn.edu/%7Ecis570/slides/lecture04.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cis.upenn.edu/~cis570/s</span><span class=\"invisible\">lides/lecture04.pdf</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>这个完全可以用Datalog表示"
        },
        {
            "type": "article",
            "updated": 1422532162,
            "id": 19945225,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1422531863,
            "url": "",
            "content": "<p><a class=\"internal\" href=\"http://www.zhihu.com/question/27465406/answer/36806416\">如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答</a>中提出CERL没有源代码没法比较。没有，自己写一个就是了嘛。不就是setjmp/longjmp么，有啥难的。早就想写一个了，今天终于想起来了。写了个64位的，且最小的栈可以只占4K内存。要知道，<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//blog.qiniu.com/%3Fp%3D1059\" target=\"_blank\" rel=\"nofollow noreferrer\">［ECUG专题回顾］《再谈CERL：详论Go与Erlang的并发编程模型差异》<i class=\"icon-external\"></i></a> ，这里提到了ESP/EBP，说明CERL是32位的，这样其实是有问题的。32位的程序进程的地址空间只有4G，而一个coroutine的栈要占用4K，那么就算全是coroutine的栈，也只能有1M的coroutine，完全不够用啊啊，看样子还做不到栈最少只占4K内存。所以，这可比CERL强多了。那就叫CERL++好了。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;setjmp.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;sys/mman.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"cp\">#define PAGE_SIZE  (4096)</span>\n<span class=\"cp\">#define STACK_SIZE (2048*PAGE_SIZE)</span>\n<span class=\"cp\">#define JB(a,b) ((a)[0].__jmpbuf[(b)])</span>\n\n<span class=\"k\">enum</span> <span class=\"n\">jb</span> <span class=\"p\">{</span><span class=\"n\">JB_RBX</span><span class=\"p\">,</span><span class=\"n\">JB_RBP</span><span class=\"p\">,</span><span class=\"n\">JB_R12</span><span class=\"p\">,</span><span class=\"n\">JB_R13</span><span class=\"p\">,</span><span class=\"n\">JB_R14</span><span class=\"p\">,</span><span class=\"n\">JB_R15</span><span class=\"p\">,</span><span class=\"n\">JB_RSP</span><span class=\"p\">,</span><span class=\"n\">JB_PC</span><span class=\"p\">};</span>\n<span class=\"k\">typedef</span> <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"n\">jb_int_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"n\">co</span> <span class=\"p\">{</span>\n  <span class=\"k\">struct</span> <span class=\"n\">co</span> <span class=\"o\">*</span><span class=\"n\">prev</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">next</span><span class=\"p\">;</span>\n  <span class=\"kt\">jmp_buf</span> <span class=\"kt\">jmp_buf</span><span class=\"p\">;</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">stack</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">co_t</span><span class=\"p\">;</span>\n\n<span class=\"n\">co_t</span> <span class=\"n\">exit_co</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"o\">*</span><span class=\"n\">curr_co</span><span class=\"o\">=</span><span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"kt\">jmp_buf</span> <span class=\"n\">main_buf</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_yield</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">exit_co</span><span class=\"p\">.</span><span class=\"kt\">jmp_buf</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"n\">main_buf</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"n\">last_co</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">last_co</span><span class=\"o\">!=</span><span class=\"n\">last_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"nl\">next</span><span class=\"p\">:</span><span class=\"o\">&amp;</span><span class=\"n\">exit_co</span><span class=\"p\">;</span>\n    <span class=\"n\">munmap</span><span class=\"p\">(</span><span class=\"n\">last_co</span><span class=\"o\">-&gt;</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">STACK_SIZE</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_exit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"n\">main_buf</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_start</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">register</span> <span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"rbx\"</span><span class=\"p\">);</span>\n  <span class=\"k\">register</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span> <span class=\"n\">asm</span><span class=\"p\">(</span><span class=\"s\">\"r12\"</span><span class=\"p\">);</span>\n  <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">);</span>\n  <span class=\"n\">co_exit</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kr\">inline</span> <span class=\"n\">jb_int_t</span> <span class=\"nf\">translate_address</span><span class=\"p\">(</span><span class=\"n\">jb_int_t</span> <span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">jb_int_t</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n  <span class=\"n\">asm</span> <span class=\"k\">volatile</span><span class=\"p\">(</span><span class=\"s\">\"xor %%fs:0x30,%0</span><span class=\"se\">\\n</span><span class=\"s\">rol $0x11,%0</span><span class=\"se\">\\n</span><span class=\"s\">\"</span> <span class=\"o\">:</span><span class=\"s\">\"=g\"</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"s\">\"0\"</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">));</span>\n  <span class=\"k\">return</span> <span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">co_create</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">f</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">),</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">mmap</span><span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"n\">STACK_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_READ</span><span class=\"o\">|</span><span class=\"n\">PROT_WRITE</span><span class=\"p\">,</span>\n                     <span class=\"n\">MAP_PRIVATE</span><span class=\"o\">|</span><span class=\"n\">MAP_ANONYMOUS</span><span class=\"o\">|</span><span class=\"n\">MAP_STACK</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n  <span class=\"n\">mprotect</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_NONE</span><span class=\"p\">);</span>\n  <span class=\"n\">mprotect</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"o\">+</span><span class=\"n\">STACK_SIZE</span><span class=\"o\">-</span><span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PAGE_SIZE</span><span class=\"p\">,</span> <span class=\"n\">PROT_NONE</span><span class=\"p\">);</span>\n  <span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"n\">new_co</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">co_t</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">stack</span><span class=\"o\">+</span><span class=\"n\">STACK_SIZE</span><span class=\"o\">-</span><span class=\"n\">PAGE_SIZE</span><span class=\"o\">-</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">co_t</span><span class=\"p\">));</span>\n  <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">curr_co</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"p\">;</span>\n    <span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">=</span> <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n    <span class=\"n\">curr_co</span><span class=\"o\">-&gt;</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">new_co</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_PC</span><span class=\"p\">)</span>  <span class=\"o\">=</span> <span class=\"n\">translate_address</span><span class=\"p\">((</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">co_start</span><span class=\"p\">);</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_RSP</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">translate_address</span><span class=\"p\">((</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">new_co</span><span class=\"p\">);</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_RBX</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">f</span><span class=\"p\">;</span>\n  <span class=\"n\">JB</span><span class=\"p\">(</span><span class=\"n\">new_co</span><span class=\"o\">-&gt;</span><span class=\"kt\">jmp_buf</span><span class=\"p\">,</span> <span class=\"n\">JB_R12</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">jb_int_t</span><span class=\"p\">)</span><span class=\"n\">arg</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">my_coro</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">uintptr_t</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"n\">arg</span><span class=\"p\">;</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"%lu</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">co_yield</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">4</span><span class=\"p\">);</span>\n  <span class=\"n\">co_create</span><span class=\"p\">(</span><span class=\"n\">my_coro</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n  <span class=\"n\">co_main</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><br>translate_address代码摘自 <a class=\" external\" href=\"https://link.zhihu.com/?target=http%3A//www.cs.huji.ac.il/course/2010/os/Ex/ex2/demo.c.txt\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cs.huji.ac.il/course/20</span><span class=\"invisible\">10/os/Ex/ex2/demo.c.txt</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a></p><p>至于 JB*的定义，自己去看glibc的头文件 </p>",
            "image_url": "",
            "title": "CERL++",
            "excerpt_title": "",
            "excerpt": "<a data-title=\"如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答\" data-editable=\"true\" class=\"\" href=\"http://www.zhihu.com/question/27465406/answer/36806416\">如何看待许式伟谈Go Erlang并发编程差异？ - 余锋的回答</a>中提出CERL没有源代码没法比较。没有，自己写一个就是了嘛。不就是setjmp/longjmp么，有啥难的。早就想写一个了，今天终于想起来了。写了个64位的，且最小的栈可以只占4K内存。要知道，<a class=\"\" data-title=\"［ECUG专题回顾］《再谈CERL：详论Go与Erlang的并发编程模型差异》\" data-editable=\"true\" href=\"http://blog.qiniu.com/?p=1059\">［ECUG专题回顾…</a>"
        },
        {
            "type": "article",
            "updated": 1459343473,
            "id": 19944629,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1422456136,
            "url": "",
            "content": "<p>各种复制粘贴之后，总算运行起来了，尽管还有各种问题。Erlang Web IDE可以开工了，地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bhuztez/ewe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/ewe<i class=\"icon-external\"></i></a></p><img data-rawheight=\"398\" data-rawwidth=\"759\" src=\"https://pic4.zhimg.com/241f533ddc10c7fa8547a597c3714f03_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"759\" data-original=\"https://pic4.zhimg.com/241f533ddc10c7fa8547a597c3714f03_r.jpg\"><p>... 长度补丁，此处省略400字 </p>",
            "image_url": "",
            "title": "弄了个Erlang的Web Shell",
            "excerpt_title": "",
            "excerpt": "各种复制粘贴之后，总算运行起来了，尽管还有各种问题。Erlang Web IDE可以开工了，地址<a href=\"http://link.zhihu.com/?target=https%3A//github.com/bhuztez/ewe\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://github.com/bhuztez/ewe<i class=\"icon-external\"></i></a>... 长度补丁，此处省略400字 "
        },
        {
            "type": "article",
            "updated": 1459343458,
            "id": 19938032,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421656017,
            "url": "",
            "content": "<p>重新开始做LeetCode上的题，顺便整理一下之前写的答案。有些题目之间代码都差不多，一个题目的写法觉得不合适要改，那就有类似的几个题要改。还是挺麻烦的。且不考虑LeetCode对Python很不友好这个因素。其实最大的问题就是怎么把用到的函数合并到同一个Python文件里。这样只管import就好了。</p><p>这也不难。 毕竟Python标准库里已经有symtable了。只要不from libxxx import *，库函数不用全局变量，……，并不需要自己去分析ast的内容。写了个脚本，还不能处理class以及嵌套函数，但结果已经勉强可以接受了。</p><p>好了，继续做题去</p>",
            "image_url": "",
            "title": "把用到的函数合并到同一个Python文件",
            "excerpt_title": "",
            "excerpt": "重新开始做LeetCode上的题，顺便整理一下之前写的答案。有些题目之间代码都差不多，一个题目的写法觉得不合适要改，那就有类似的几个题要改。还是挺麻烦的。且不考虑LeetCode对Python很不友好这个因素。其实最大的问题就是怎么把用到的函数合并到同一个Pyth…"
        },
        {
            "type": "article",
            "updated": 1421416583,
            "id": 19936493,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421416583,
            "url": "",
            "content": "<blockquote><p>Though the Chinese should adore APL, it's FORTRAN they put their money on</p><p>——Alan J. Perlis<br></p></blockquote><p>举个不正确的例子。比如在J语言里等差数列求和可以写成这样。当然了，实际程序不可能这么写的。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>sum =: 2%~#*~{.+{:\n</code></pre></div>假如把顺序倒过来，我们就得到了<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>和曰首项加末项乘以项数除以2\n</code></pre></div><p>这可比用奇奇怪怪的符号好多了。</p><p>有人抱怨combinatory logic风格不适合地球人学习。可是我觉得中文很多时候就是combinatory logic风格的。你可能没注意到，正如APL指出的那样，很多时候组合子并不需要用一个符号来表示，比如 x (f g h) y 可以用来表示  (x f y) g (x h y) 。<br></p><p>有人抱怨说，这个语法没法用BNF表示。不能用BNF表示怎么了，Backus自己那篇Can Programming be Liberated from von Neumann Style里那语言估计要实现出来语法也没法用BNF表示。那和APL其实也没多大区别。</p><p>有人抱怨会有歧义。有歧义怎么了，出现歧义不让运行就是了。</p><p>有人抱怨这里分词是个问题。这里怎么会有问题，语义都有了，还怕啥。我看这个J语言就得考虑怎么把符号切开的问题了。这个是可以做到的，毕竟从某种角度看也可以认为是满足close-world assumption的</p><br><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>verb([first,element]).\nverb([plus]).\nverb([last,element]).\n\nsymbol([], S, S).\n\nsymbol(Sym, S0, S) :-\n  [H|S1] = S0,\n  symbol(Sym1, S1, S),\n  [H|Sym1] = Sym.\n\nverb(V, S0, S) :-\n   symbol(V, S0, S),\n   verb(V).\n\nfork(fork(V1,V2,V3), S0, S) :-\n  verb(V1, S0, S1),\n  verb(V2, S1, S2),\n  verb(V3, S2, S).\n</code></pre></div><p>你看这个问题不就解决了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>?- fork(X, [first,element,plus,last,element], []).\nX = fork([first, element], [plus], [last, element]) ;\nfalse.\n\n?- \n</code></pre></div><p>尽管实际上你肯定不会用这个算法来解析。这里只是为了让你相信这是可行的。</p><p>又有人抱怨算法复杂度不会低的。 可是，parser里都做了不少type inference该干的活了，这复杂度高一点就高一点嘛。<br></p><p>现在连平板都很常见了，所以，APL可以不需要专用键盘了，不仅仅是APL。这相当于给了平板提供了类似Emacs那样的C-x M-x。只要背几个口诀，就能用真正的编程语言来操作平板，不知道比用傻乎乎的手势来操作高明到哪里去了。</p><p>我就是来吐个槽的。反正你们还会继续追捧最强大的LISP语言，认为Y-combinator是多么深奥多么有意义，认为能写CPS变换是了不起的成就，用Monad不就是自函子上的幺半群来提升逼格的，全然无视大APL的时代马上就要来了。</p>",
            "image_url": "",
            "title": "为什么你应该用中文写程序",
            "excerpt_title": "",
            "excerpt": "Though the Chinese should adore APL, it's FORTRAN they put their money on——Alan J. Perlis 举个不正确的例子。比如在J语言里等差数列求和可以写成这样。当然了，实际程序不可能这么写的。sum =: 2%~#*~{.+{:\n假如把顺序倒过来，我们就得到了和曰首项…"
        },
        {
            "type": "article",
            "updated": 1459343439,
            "id": 19935811,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421387889,
            "url": "",
            "content": "<blockquote><p>The fundamental cause of the trouble is that in the modern world the stupid are cocksure while the intelligent are full of doubt.<br>—— Bertrand Russell<br></p></blockquote><p>经常有人黑Erlang。当然这通常对一门语言来说是好事。很奇怪的是，有好多人在讲完自己使用Erlang的经验之后，非要找点Erlang的缺点出来才肯罢休，往往莫名其妙的把Erlang的优点当成缺点来黑。</p><p>有人看到一些用Erlang开发高可用，分布式软件的成功案例就能立即得出Erlang一定是难学的。Erlang是很容易学的。目前，无论用什么语言，要开发分布式程序，都不会像print \"Hello, world!\"那么容易。但是，难道Erlang只能用来写分布式程序么？即便是写分布式程序，用Erlang学也比用别的语言容易多了。</p><p>有人用X语言开发了个网络程序，结果优化了半天，才勉强跑分不输Erlang不优化的版本，就能立即得出结论Erlang不适合开发复杂的业务逻辑。实际上，Erlang就是为了完成复杂的业务逻辑而设计了。那个X语言连在data plane要跑赢为control plane设计的Erlang都那么难，问题才更严重呢。一群还在纠结Protocol Buffer和Thrift到底哪家强的语言，有什么脸来说自带ASN.1编译器的Erlang写不了复杂的逻辑。当然了，也可能是因为他们有把逻辑搞复杂的天赋。</p><p>我觉得<a class=\"internal\" href=\"http://www.zhihu.com/question/20405300/answer/37277635\"><span class=\"invisible\">http://www.</span><span class=\"visible\">zhihu.com/question/2040</span><span class=\"invisible\">5300/answer/37277635</span><span class=\"ellipsis\"></span></a>里说的就很不错。一群渣渣换用Erlang做出能上线运营的网游了。这要是不能说明Erlang强大，我想你需要购买一些Silver Bullet了。现在这情况就导致了，越是说Erlang的强大，Erlang就越是被边缘化。</p><p>所以，别再提Erlang支持高并发了。应该多讲讲Erlang是多么适合用来做快速原型开发之类的。而且Erlang根本就不支持高并发。我不觉得你能在Erlang里解决C10K的问题，因为这问题根本就不存在嘛。</p>",
            "image_url": "",
            "title": "别再提Erlang支持高并发了",
            "excerpt_title": "",
            "excerpt": "The fundamental cause of the trouble is that in the modern world the stupid are cocksure while the intelligent are full of doubt. —— Bertrand Russell 经常有人黑Erlang。当然这通常对一门语言来说是好事。很奇怪的是，有好多人在讲完自己使用Er…"
        },
        {
            "type": "article",
            "updated": 1421243772,
            "id": 19935107,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421243447,
            "url": "",
            "content": "<p>看到有个问题<a class=\"internal\" href=\"http://www.zhihu.com/question/27588523\">在 n 个整数里，找出2个数相加等于 sum 的所有整数？ - 程序员</a></p><p>感觉J语言里有一种直观的解法，直接按到X/2的距离排序就好了</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   X =: 10\n   Y =: _5 + i.20\n   X\n10\n   Y\n_5 _4 _3 _2 _1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n   NB. 计算到X/2距离的两倍\n   |X-2*Y\n20 18 16 14 12 10 8 6 4 2 0 2 4 6 8 10 12 14 16 18\n   NB. 按到X/2的距离排序\n   Y/:|X-2*Y\n5 4 6 3 7 2 8 1 9 0 10 _1 11 _2 12 _3 13 _4 14 _5\n   NB. 现在只要找到连续的两个数，他们的和是X\n   NB. 掐头去尾排在一起，为了方便求和，再转一下\n   |: (}:,.}.)Y/:|X-2*Y\n5 4 6 3 7 2 8 1 9  0 10 _1 11 _2 12 _3 13 _4 14\n4 6 3 7 2 8 1 9 0 10 _1 11 _2 12 _3 13 _4 14 _5\n   NB. 求和\n   +/|: (}:,.}.)Y/:|X-2*Y\n9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9\n   NB. 判断是否等于X\n   X=+/|: (}:,.}.)Y/:|X-2*Y\n0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\n   NB. 据此筛选出对应的数\n   (X&amp;=@:+/#|:)|:(}:,.}.)Y/:|X-2*Y\n 4  6\n 3  7\n 2  8\n 1  9\n 0 10\n_1 11\n_2 12\n_3 13\n_4 14\n   NB. 完工，不到40个字符就解决了\n   f=:4 :'(x&amp;=@:+/#|:)|:(}:,.}.)y/:|x-2*y'\n   10 f _5 + i.20\n 4  6\n 3  7\n 2  8\n 1  9\n 0 10\n_1 11\n_2 12\n_3 13\n_4 14\n</code></pre></div><p>P.S. 不知道为啥突然联想到在GitHub上约架的实在太弱了，在微博上约还差不多。</p>",
            "image_url": "",
            "title": "找出所有和为X的两个整数",
            "excerpt_title": "",
            "excerpt": "看到有个问题<a class=\"internal\" href=\"http://www.zhihu.com/question/27588523\">在 n 个整数里，找出2个数相加等于 sum 的所有整数？ - 程序员</a>感觉J语言里有一种直观的解法，直接按到X/2的距离排序就好了 X =: 10\n Y =: _5 + i.20\n X\n10\n Y\n_5 _4 _3 _2 _1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n NB. 计算到X/2距离的两倍\n |X…"
        },
        {
            "type": "article",
            "updated": 1421119549,
            "id": 19934099,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421119549,
            "url": "",
            "content": "<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   NB. 一直写不好八皇后问题，因为代码写起来很麻烦\n   NB. 看了曾老师的答案，感觉这个问题在J语言里有一种比较直观的解法\n   NB. 其实就是把这个问题分解成两个问题\n   NB. 1) 生成全排列，这样每条横线，每条竖线上都只有一个皇后\n   NB. 2) 检查每条斜线上是否最多只有一个皇后\n\n   NB. 生成全排列很简单\n   (i.!3)A.i.3\n0 1 2\n0 2 1\n1 0 2\n1 2 0\n2 0 1\n2 1 0\n   NB. 0表示空，1表示皇后\n   #:2^(i.!3)A.i.3\n0 0 1\n0 1 0\n1 0 0\n\n0 0 1\n1 0 0\n0 1 0\n\n0 1 0\n0 0 1\n1 0 0\n\n0 1 0\n1 0 0\n0 0 1\n\n1 0 0\n0 0 1\n0 1 0\n\n1 0 0\n0 1 0\n0 0 1\n\n   NB. 沿从右上往左下的斜线相加\n   +//.\"2 #:2^(i.!3)A.i.3\n0 0 3 0 0\n0 1 1 1 0\n0 1 1 1 0\n0 2 0 0 1\n1 0 0 2 0\n1 0 1 0 1\n\n   NB. 判断是否大于1\n   1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 0 0\n\n   NB. 因为是从上到下算下去的，得转一下\n   |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 0 0 0 0 0\n0 0 0 1 0 0\n1 0 0 0 0 0\n0 0 0 0 1 0\n0 0 0 0 0 0\n\n   NB. 按竖行分别取或\n   +./ |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n1 0 0 1 1 0\n\n   NB. 取反\n   -. +./ |: 1 &lt; +//.\"2 #:2^(i.!3)A.i.3\n0 1 1 0 0 1\n\n   NB. 定义d，是否在从右上往左下的斜线上皇后数小于等于1\n   d=:3 :'-.+./|:1&lt;+//.\"2 y'\n   d #:2^(i.!3)A.i.3\n0 1 1 0 0 1\n\n   NB. 取出对应的矩阵\n   (d#]) #:2^(i.!3)A.i.3\n0 0 1\n1 0 0\n0 1 0\n\n0 1 0\n0 0 1\n1 0 0\n\n1 0 0\n0 1 0\n0 0 1\n\n   NB. 把矩阵沿竖直方向翻转，这样找出左上往右下的斜线上皇后数小于等于1的\n   (|.@d#]) #:2^(i.!3)A.i.3\n0 0 1\n0 1 0\n1 0 0\n\n0 1 0\n1 0 0\n0 0 1\n\n1 0 0\n0 0 1\n0 1 0\n\n   NB. 定义q，用来找出所有N皇后矩阵\n   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'\n   # q 8\n92\n   q 4\n0 0 1 0\n1 0 0 0\n0 0 0 1\n0 1 0 0\n\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0\n   q 6\n0 0 0 0 1 0\n0 0 1 0 0 0\n1 0 0 0 0 0\n0 0 0 0 0 1\n0 0 0 1 0 0\n0 1 0 0 0 0\n\n0 0 0 1 0 0\n1 0 0 0 0 0\n0 0 0 0 1 0\n0 1 0 0 0 0\n0 0 0 0 0 1\n0 0 1 0 0 0\n\n0 0 1 0 0 0\n0 0 0 0 0 1\n0 1 0 0 0 0\n0 0 0 0 1 0\n1 0 0 0 0 0\n0 0 0 1 0 0\n\n0 1 0 0 0 0\n0 0 0 1 0 0\n0 0 0 0 0 1\n1 0 0 0 0 0\n0 0 1 0 0 0\n0 0 0 0 1 0\n\n   NB. 太棒了，不到80个字符就已经能解出八皇后问题了\n   d=:3 :'-.+./|:1&lt;+//.\"2 y'\n   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'\n</code></pre></div>",
            "image_url": "",
            "title": "八皇后问题",
            "excerpt_title": "",
            "excerpt": "NB. 一直写不好八皇后问题，因为代码写起来很麻烦\n NB. 看了曾老师的答案，感觉这个问题在J语言里有一种比较直观的解法\n NB. 其实就是把这个问题分解成两个问题\n NB. 1) 生成全排列，这样每条横线，每条竖线上都只有一个皇后\n NB. 2) 检查每条斜线上是否最…"
        },
        {
            "type": "article",
            "updated": 1421062853,
            "id": 19933594,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1421062853,
            "url": "",
            "content": "<p>比如下面这个程序<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>&gt;&gt;&gt; def subsets(a):\n...     if not a: yield ()\n...     else:\n...         for s in subsets(a[1:]):\n...             yield s\n...             yield (a[0],)+s\n... \n&gt;&gt;&gt; list(subsets([1,2,3]))\n[(), (1,), (2,), (1, 2), (3,), (1, 3), (2, 3), (1, 2, 3)]\n</code></pre></div><p>在J语言里<br></p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   #: i. 2 ^ # 1 2 3\n0 0 0\n0 0 1\n0 1 0\n0 1 1\n1 0 0\n1 0 1\n1 1 0\n1 1 1\n   comb =: 3 : '#: i. 2 ^ # y'\n   (comb#]) 1 2 3\n0 0 0\n3 0 0\n2 0 0\n2 3 0\n1 0 0\n1 3 0\n1 2 0\n1 2 3\n</code></pre></div><p>可这样在短的数组后面自动补0了。需要用u &amp;. v。X (u &amp;. v) Y 相当于对于X, Y中每组对应元素x, y，计算v^:_1 ((v x) u (v y))。当v是&gt;时，就可以先取出box中的数，计算完再放进另一个box里。</p><div class=\"highlight\"><pre><code class=\"language-text\"><span></span>   (([: &lt;\"1 comb) (# &amp;. &gt;) &lt;) 1 2 3\n┌┬─┬─┬───┬─┬───┬───┬─────┐\n││3│2│2 3│1│1 3│1 2│1 2 3│\n└┴─┴─┴───┴─┴───┴───┴─────┘\n</code></pre></div><p><br>这样就好多了</p>",
            "image_url": "",
            "title": "Box",
            "excerpt_title": "",
            "excerpt": "比如下面这个程序 &gt;&gt;&gt; def subsets(a):\n... if not a: yield ()\n... else:\n... for s in subsets(a[1:]):\n... yield s\n... yield (a[0],)+s\n... \n&gt;&gt;&gt; list(subsets([1,2,3]))\n[(), (1,), (2,), (1, 2), (3,), (1, 3), (2, 3), (1, 2, 3)]\n在J语言里 #: i. 2…"
        },
        {
            "type": "article",
            "updated": 1420776547,
            "id": 19931246,
            "author": {
                "headline": "正在找工作 ...",
                "avatar_url_template": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_{size}.jpg",
                "is_advertiser": false,
                "type": "people",
                "id": "dcddea61834f6b2dcb515f393fe29575",
                "url_token": "bhuztez",
                "user_type": "people",
                "name": "bhuztez",
                "is_org": false,
                "gender": 1,
                "badge": [],
                "url": "https://www.zhihu.com/api/v4/people/dcddea61834f6b2dcb515f393fe29575",
                "avatar_url": "https://pic3.zhimg.com/e59aeb8898c50a830976297787cdce86_is.jpg"
            },
            "comment_permission": "all",
            "created": 1420776547,
            "url": "",
            "content": "<p>Hipster都特别喜欢标榜自己推崇的东西是多么的与众不同。可是我发现了一个问题，Erlang一点都不流行啊。可见，流行并不是因为他们所说的原因。据我长时间仔细观察，发现实际上他们就是不断重复声称某个东西和别的不一样，是否真的不同不重要。</p><p>当Ruby on Rails流行起来的时候，很多人都在喊Convention over Configuration，可是在这一点上和他们的假想敌PHP又有什么本质的不同呢。Node.js更是赤裸裸地宣称在JavaScript里的event-driven相比在别的语言里就是好就是好就是好。而Go把异常改个名字，就有人声称Go里面没有异常了。这个自然是非常好的选择了。毕竟其实人是要花很长时间才能接受不同的想法的。新瓶装旧酒，就能给人以不断在学习新技术的错觉，让人获得满足感。因为没有新东西，愚蠢的地球人会很乐于接受的。这样就把旧东西顺便都卖出去了。</p><p>我记得在Erlang 17之前，很多人都在一直抱怨record，却很少有人抱怨Erlang的头文件和宏。实际上record最恶心的地方不就是因为这玩意儿就是靠头文件和宏这种机制来工作的么。但是Erlang为什么会有头文件这种奇奇怪怪的东西？是这样的，有一天Mike Williams告诉Joe Armstrong说，很多客户都在抱怨Erlang语法太奇怪了，能不能改得更像C一点。Joe Armstrong摇摇头说，Erlang已经这么简单了，没啥语法能砍掉换成类C的了。Mike Williams说，恶心他们一下也没什么，反正他们受得了C。Joe Armstrong说，那好吧，那就学一下C语言里的头文件和宏的概念吧。后面的结果大家都知道了。其实Erlang里Map实现非常简单，说穿了就是两个tuple()。<br></p><p>现在Erlang有了Map，许式伟就提出是时候放弃Erlang了。我想，是时候黑许式伟了。自从许式伟听说Go语言之后，他就一个劲的在黑Erlang，黑来黑去其实挺好的，但是他整天把Erlang的优点当成缺点在黑，也是蛮拼的。不难看出，许式伟不是水货就是在卖私货。卖私货的可能性更大一点。毕竟七牛这个名字，据说就是因为他们有七个大牛。一开始他们用Erlang，结果一个大牛就把所有工作都做完了，另外六个大牛都闲着没事干。老板就不高兴了。后来他们发现了Go，这下七个人都有活干了，Go语言比较新方便宣传，还能把潜在的竞争对手带进沟里去，想必那是极好的。此言一出，就有机智的网友在评论里提醒我七牛是不会承认这点的。那许式伟自然就是水货了。Q.E.D.</p><p>下面就按他是水货的思路来黑</p><p>pth不就是那个用来在那些没实现线程的内核里用来凑合当线程用的东西么，Java一开始还只用类似的东西号称绿色线程呢。这都没听说过，难道不是水货么？(当然从标榜不同的角度讲，反正CERL已经用不着了，和别人相同就相同了)。</p><p>至于那个栈能自动增长。自从编译器有了split stack的功能，C语言里其实也可以这么做的。Go和Rust都用过一段时间split stack，当然都已经不约而同的放弃了，改用别的办法来达到类似的效果了。而且Go语言效果比你在C里面用个库好，那是因为他是一门不同的语言，从语言设计上就可以考虑这个问题。C语言你加私有扩展其实也可以做到的嘛。</p><p>上面也有可能是恰好不了解，也说不定。可其他黑Erlang的地方，只会使用稻草人攻击，段子也编不像样，黑的水准是不是太低了点呢？</p><blockquote><p>首先谈谈对锁的态度，Erlang对锁非常反感，它认为变量不可变可以很大程度避免锁，Erlang认为锁有很大的心智负担所以不应该存在锁。 <br></p></blockquote><p>Erlang没有反对过锁，Erlang从来没有提倡过程序不该用锁，通过变量不可变来避免锁也就无从谈起了。逻辑上需要锁，难道你不用么？好像Erlang相关的工具，有一个帮助你检查哪些可能有死锁的地方的工具(可能是正在开发，不确定没查资料完全凭感觉写的)，难道是来糊弄人的。Erlang反对的是，你自己用CPU指令去实现锁。因为不同的进程可能根本就不在一台机器上，请问怎么用CPU指令去锁？Erlang不鼓励进程之间共享内存，因为不同的进程可能根本就不在一台机器上，请问他们之间怎么共享内存？</p><blockquote><p>那么可能会有人问，那Erlang怎么做高并发呢？其实是两点：第一是每个Erlang物理的进程会有很多的服务器，每个服务器相互是无干扰的，它们可以并发。第二是单服务器想要高并发怎么办？Erlang对这个问题的回答就是请异步IO。 </p></blockquote><p>此处莫非goroutine有魔法了？ <br></p><blockquote><p>首先为什么会有中间状态的引入？因为有异步IO，所以刚刚的某一个请求其实还没有完成，但是它必须把时间让给另外一个请求 ，所以这个时候服务器就要维持刚刚没有完成的那个请求的中间状态。一旦有中间状态的话，这个服务器的状态本身就不干净，单次请求的中间状态要服务器来维持状态，这个是非常不合理的事情。</p></blockquote><p>实际上有些协议要求一个连接能连续发多个请求，且要求你不能等前一个请求处理完再处理下一个请求的。请和制订协议的人去理论去。除非你能告诉我你Go里面怎么用同步的逻辑来实现？难道不是和Erlang一样再起一个进程来处理这个请求吗？ </p><br><blockquote><p>多核时代已经喊了快十年了，但是我们大家可以看到，几乎没有多少语言把执行体这个作为语言内建标准来做，我觉得这是Go很大的创举。</p></blockquote><p>SIMULA-67，Ada等一大帮语言哭了。就语法特别像C的大部分都没有而已。即便是Erlang也比Go先出现，Erlang从来没说这个概念是原创的。</p><blockquote><p>因为Erlang收到请求以后没有办法创建一个子的执行体，然后让它处理某一个具体的请求\n不用再管它。但是Erlang里面进程没有共享状态，你要改服务器状态必须用异步IO的方式，把事情做了再把消息扔给服务器对他说你自己改状态。通过消息\n改服务器状态，这个成本是比较大的，而且带来了很多问题。</p></blockquote><p>A History of Erlang里就说了</p><blockquote>If a data structure is shared by two phys-<br>ical nodes and if one node fails, then failure recovery is often im-<br>possible. The reason why Erlang shares no data structures and uses<br>pure copying message passing is to sidestep all the nasty problems<br>of figuring out what to replicate and how to cope with failures in a<br>distributed system. </blockquote><p>其实这里有两个问题，一是子进程在另外一台机器上，你根本没办法共享内存。二是，即便能共享内存，通过共享内存改变状态不代表你启动子进程完了就不用管了，子进程改状态改到一半挂了怎么办？你是打算连带着挂掉所有其他子进程呢，还是在你的server进程里处理各种状态改一半就挂了的情况？这不是把问题越搞越复杂了么。当然了，你也可以说你的程序从不出错，是的，我想你可以做到的。</p><blockquote><p>I remember Mike, Robert and I having great fun asking the<br>same question over and over again: “what happens if it fails?”—<br>the answer we got was almost always a variant on “our model<br>assumes no failures.”</p></blockquote><p>许式伟判断一门语言的好坏，主要就看这门语言共享内存是否和C++一样方便。学一门新语言非要去看自己熟悉的语言擅长的地方是不是也都一样好。我求您别学新语言了。Alan J. Perlis就说过</p><blockquote>A language that doesn't affect the way you think about programming, is not worth knowing. <br></blockquote><p>他发现在自己熟悉的语言擅长的地方不一样好，就能立即得出结论</p><blockquote>Erlang语言并没有带来什么实质性的好处。</blockquote><p>Erlang语言在开发的过程中做了大量对比实验来验证Erlang是否真的好。</p><blockquote><p>If you don't run experiments before you start designing a <b>new</b> system, your <b>entire system</b> will be an experiment!</p><p>—Mike Williams</p></blockquote><p>A History of Erlang里就提到了一开始他们就用能找到的各种不同风格的语言实现同一个程序，试图从中选出一门最合适的语言作为基础，结果没一种语言包含足够多他们需要的语言特性，接着他们就开始尝试把各种语言中比较合适的语言特性合并到一起。一开始Joe Armstrong是在Smalltalk的基础上实现的，奈何当时unix上运行的Smalltalk GC一次至少要15分钟，他们就去订购Smalltalk Machine，结果等了几个月快递还没把货送到，正好在这段时间他们在Prolog上已经实现了不少功能了，最后Smalltalk machine终于来了，也不能闲着吧，就让给后来成为UML三巨头之一的那位爷爷去玩了。等到Erlang逐渐成熟起来，他们也用Erlang去实现一个接近实际的项目，和用别的语言实现做对比，发现平均开发效率大约是后者的8倍。<br></p><p>最近出现的一些新语言，很少有像Erlang这样真的用一个比较实际的项目去做实验的。可能Rust比较好一点，Mozilla开发这门语言的时候是真的在用他写一个浏览器，但其实也没有比较严格的对比实验。</p><p>当然你可以认为爱立信是自吹自擂，那摩托罗拉总没必要刻意吹捧竞争对手开发的语言吧。摩托罗拉的研究结果显示，完成相同的功能，Erlang平均只需要C++ \n1/7的代码量，和8倍开发效率大致接近。同时，Erlang的平均响应时间大约是C++的一半，吞吐量却大约是C++的两倍。而且C++程序在超过设计负载没多少的时候就挂掉了，需要手工重启。<a class=\" wrap external\" href=\"https://link.zhihu.com/?target=http%3A//www.macs.hw.ac.uk/%7Etrinder/papers/CPE2006.pdf\" target=\"_blank\" rel=\"nofollow noreferrer\"> http://www.macs.hw.ac.uk/~trinder/papers/CPE2006.pdf<i class=\"icon-external\"></i></a></p><p>Erlang语言概念特别少，主要只有三个，模式，函数和消息。变量是个坏翻译。variable应该翻译成元。从某种角度看，变量就应该是不可变的，所谓的变量不可变根本就不是问题。许式伟所谓的变量可变实际上相当于OCaml里，所有变量都用ref。</p><p>在比较知名的语言里，Erlang可能是唯一一个把错误代码和异常分清楚的。你永远只返回错误代码，调用的一方只匹配能处理的情况。而不能处理的情况，因为没有匹配，会自动引发异常。异常发生时就应该让进程挂掉，因为这不是你代码预期的情况，此时做任何多余的事情最有可能的结果就是让情况变得更糟糕。</p><p>在这之上有supervision tree。万一一个重要的进程莫名奇怪的挂了，可能他就是需要重启一下。</p><blockquote><p>Have you tried turning it off and on again?</p><p>— IT Crowd<br></p></blockquote><p>再往上，Erlang是一门control plane的语言。Erlang比较适合用来写运行在很多台机器上的服务的controller，Erlang就是用来写业务逻辑的。只不过很多语言网络吞吐能力如此糟糕，不做丧心病狂的优化，用来处理data plane竟然还比不过不优化的Erlang。于是他们就宣称Erlang只适合用来转发数据包，不适合用来写复杂的业务逻辑。OpenFlow出来一段时间之后，我还在想为啥就没人用Erlang写个实用的Controller呢，结果其实也没过多久，就听说Tail-f被Cisco收购了。</p><p>我想，你也会觉得Erlang是一门不错的语言的。毕竟</p><blockquote><p>... the rest of the world was wrong and ... we were right</p><p>— A History of Erlang</p></blockquote>",
            "image_url": "",
            "title": "流行的秘诀就是新瓶装旧酒",
            "excerpt_title": "",
            "excerpt": "Hipster都特别喜欢标榜自己推崇的东西是多么的与众不同。可是我发现了一个问题，Erlang一点都不流行啊。可见，流行并不是因为他们所说的原因。据我长时间仔细观察，发现实际上他们就是不断重复声称某个东西和别的不一样，是否真的不同不重要。当Ruby on Rai…"
        }
    ]
}